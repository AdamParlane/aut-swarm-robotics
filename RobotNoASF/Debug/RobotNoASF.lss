
RobotNoASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d74  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000478  20000000  00407d74  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b70  20000478  004081f0  00020478  2**3
                  ALLOC
  3 .stack        00000400  20000fe8  00408d60  00020478  2**0
                  ALLOC
  4 .heap         00000200  200013e8  00409160  00020478  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY
  7 .debug_info   00004dcc  00000000  00000000  000204fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d28  00000000  00000000  000252c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002e4a  00000000  00000000  00025fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000578  00000000  00000000  00028e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004f0  00000000  00000000  000293b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ec80  00000000  00000000  000298a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006102  00000000  00000000  00038521  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003a75e  00000000  00000000  0003e623  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001a10  00000000  00000000  00078d84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200013e8 	.word	0x200013e8
  400004:	0040433d 	.word	0x0040433d
  400008:	004043c1 	.word	0x004043c1
  40000c:	004043c1 	.word	0x004043c1
  400010:	004043c1 	.word	0x004043c1
  400014:	004043c1 	.word	0x004043c1
  400018:	004043c1 	.word	0x004043c1
	...
  40002c:	004043c1 	.word	0x004043c1
  400030:	004043c1 	.word	0x004043c1
  400034:	00000000 	.word	0x00000000
  400038:	004043c1 	.word	0x004043c1
  40003c:	004043c1 	.word	0x004043c1
  400040:	004043c1 	.word	0x004043c1
  400044:	004043c1 	.word	0x004043c1
  400048:	004043c1 	.word	0x004043c1
  40004c:	004043c1 	.word	0x004043c1
  400050:	004043c1 	.word	0x004043c1
  400054:	004043c1 	.word	0x004043c1
  400058:	004043c1 	.word	0x004043c1
  40005c:	00000000 	.word	0x00000000
  400060:	004043c1 	.word	0x004043c1
  400064:	004043c1 	.word	0x004043c1
  400068:	004043c1 	.word	0x004043c1
  40006c:	004043c1 	.word	0x004043c1
  400070:	004043c1 	.word	0x004043c1
  400074:	004043c1 	.word	0x004043c1
  400078:	004043c1 	.word	0x004043c1
  40007c:	004043c1 	.word	0x004043c1
  400080:	00400401 	.word	0x00400401
  400084:	004043c1 	.word	0x004043c1
  400088:	00000000 	.word	0x00000000
  40008c:	004043c1 	.word	0x004043c1
  400090:	004043c1 	.word	0x004043c1
  400094:	004043c1 	.word	0x004043c1
  400098:	004043c1 	.word	0x004043c1
  40009c:	00403ec5 	.word	0x00403ec5
  4000a0:	004043c1 	.word	0x004043c1
  4000a4:	004043c1 	.word	0x004043c1
  4000a8:	004043c1 	.word	0x004043c1
  4000ac:	004043c1 	.word	0x004043c1
  4000b0:	004043c1 	.word	0x004043c1
  4000b4:	004043c1 	.word	0x004043c1
  4000b8:	004043c1 	.word	0x004043c1
  4000bc:	004043c1 	.word	0x004043c1

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000478 	.word	0x20000478
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00407d74 	.word	0x00407d74

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	2000047c 	.word	0x2000047c
  400110:	00407d74 	.word	0x00407d74
  400114:	00407d74 	.word	0x00407d74
  400118:	00000000 	.word	0x00000000

0040011c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40011c:	b480      	push	{r7}
  40011e:	b083      	sub	sp, #12
  400120:	af00      	add	r7, sp, #0
  400122:	4603      	mov	r3, r0
  400124:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400126:	4908      	ldr	r1, [pc, #32]	; (400148 <NVIC_EnableIRQ+0x2c>)
  400128:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40012c:	095b      	lsrs	r3, r3, #5
  40012e:	79fa      	ldrb	r2, [r7, #7]
  400130:	f002 021f 	and.w	r2, r2, #31
  400134:	2001      	movs	r0, #1
  400136:	fa00 f202 	lsl.w	r2, r0, r2
  40013a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40013e:	bf00      	nop
  400140:	370c      	adds	r7, #12
  400142:	46bd      	mov	sp, r7
  400144:	bc80      	pop	{r7}
  400146:	4770      	bx	lr
  400148:	e000e100 	.word	0xe000e100

0040014c <InterpretSwarmMessage>:
void UART3_Write(uint8_t data);
void SendXbeeAPIFrame(uint8_t * frame_data, int len);


void InterpretSwarmMessage(struct message_info message)
{
  40014c:	b590      	push	{r4, r7, lr}
  40014e:	b097      	sub	sp, #92	; 0x5c
  400150:	af02      	add	r7, sp, #8
  400152:	1d3b      	adds	r3, r7, #4
  400154:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int index = message.index;
  400158:	687b      	ldr	r3, [r7, #4]
  40015a:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t message_command = message.command;
  40015c:	7a3b      	ldrb	r3, [r7, #8]
  40015e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	int length = message.length;
  400162:	68fb      	ldr	r3, [r7, #12]
  400164:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t data[50];
	uint16_t temp;

	switch(message_command)
  400166:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
  40016a:	2b01      	cmp	r3, #1
  40016c:	d014      	beq.n	400198 <InterpretSwarmMessage+0x4c>
  40016e:	2b10      	cmp	r3, #16
  400170:	d032      	beq.n	4001d8 <InterpretSwarmMessage+0x8c>
  400172:	2b00      	cmp	r3, #0
  400174:	d000      	beq.n	400178 <InterpretSwarmMessage+0x2c>
			
			break;

		default:

			break;
  400176:	e030      	b.n	4001da <InterpretSwarmMessage+0x8e>
	uint16_t temp;

	switch(message_command)
	{
		case COMMUNICATION_TEST:
			data[0] = 0x00;
  400178:	2300      	movs	r3, #0
  40017a:	743b      	strb	r3, [r7, #16]
			SendXbeeAPITransmitRequest(BROADCAST_64,UNKNOWN_16,data,1);
  40017c:	f107 0210 	add.w	r2, r7, #16
  400180:	2301      	movs	r3, #1
  400182:	9300      	str	r3, [sp, #0]
  400184:	4613      	mov	r3, r2
  400186:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40018a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40018e:	f04f 0100 	mov.w	r1, #0
  400192:	4c14      	ldr	r4, [pc, #80]	; (4001e4 <InterpretSwarmMessage+0x98>)
  400194:	47a0      	blx	r4
			break;
  400196:	e020      	b.n	4001da <InterpretSwarmMessage+0x8e>

		case BATTERY_DATA:
			temp = ADC_ReadCH(BV);
  400198:	200e      	movs	r0, #14
  40019a:	4b13      	ldr	r3, [pc, #76]	; (4001e8 <InterpretSwarmMessage+0x9c>)
  40019c:	4798      	blx	r3
  40019e:	4603      	mov	r3, r0
  4001a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			data[0] = BATTERY_DATA;
  4001a4:	2301      	movs	r3, #1
  4001a6:	743b      	strb	r3, [r7, #16]
			data[1] = (temp & (0xFF00)) >> 8;
  4001a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
  4001ac:	0a1b      	lsrs	r3, r3, #8
  4001ae:	b29b      	uxth	r3, r3
  4001b0:	b2db      	uxtb	r3, r3
  4001b2:	747b      	strb	r3, [r7, #17]
			data[2] = temp & (0xFF);
  4001b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
  4001b8:	b2db      	uxtb	r3, r3
  4001ba:	74bb      	strb	r3, [r7, #18]
			SendXbeeAPITransmitRequest(BROADCAST_64,UNKNOWN_16,data,3);
  4001bc:	f107 0210 	add.w	r2, r7, #16
  4001c0:	2303      	movs	r3, #3
  4001c2:	9300      	str	r3, [sp, #0]
  4001c4:	4613      	mov	r3, r2
  4001c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4001ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4001ce:	f04f 0100 	mov.w	r1, #0
  4001d2:	4c04      	ldr	r4, [pc, #16]	; (4001e4 <InterpretSwarmMessage+0x98>)
  4001d4:	47a0      	blx	r4
			//to get voltage multiply by 5/1000
			break;
  4001d6:	e000      	b.n	4001da <InterpretSwarmMessage+0x8e>
		
		case NAV_IMU_QW:
			
			break;
  4001d8:	bf00      	nop

		default:

			break;
	}
}
  4001da:	bf00      	nop
  4001dc:	3754      	adds	r7, #84	; 0x54
  4001de:	46bd      	mov	sp, r7
  4001e0:	bd90      	pop	{r4, r7, pc}
  4001e2:	bf00      	nop
  4001e4:	0040071d 	.word	0x0040071d
  4001e8:	00403f8d 	.word	0x00403f8d

004001ec <InterpretXbeeAPIFrame>:



void InterpretXbeeAPIFrame(struct frame_info frame)
{
  4001ec:	b580      	push	{r7, lr}
  4001ee:	b08a      	sub	sp, #40	; 0x28
  4001f0:	af00      	add	r7, sp, #0
  4001f2:	1d3b      	adds	r3, r7, #4
  4001f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int index = frame.index;
  4001f8:	687b      	ldr	r3, [r7, #4]
  4001fa:	623b      	str	r3, [r7, #32]
	uint8_t frame_type = frame.type;
  4001fc:	7a3b      	ldrb	r3, [r7, #8]
  4001fe:	77fb      	strb	r3, [r7, #31]
	int length = frame.length;
  400200:	68fb      	ldr	r3, [r7, #12]
  400202:	61bb      	str	r3, [r7, #24]

	uint8_t temp;

	switch(frame_type)
  400204:	7ffb      	ldrb	r3, [r7, #31]
  400206:	3b88      	subs	r3, #136	; 0x88
  400208:	2b1b      	cmp	r3, #27
  40020a:	f200 809a 	bhi.w	400342 <InterpretXbeeAPIFrame+0x156>
  40020e:	a201      	add	r2, pc, #4	; (adr r2, 400214 <InterpretXbeeAPIFrame+0x28>)
  400210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400214:	00400343 	.word	0x00400343
  400218:	00400343 	.word	0x00400343
  40021c:	00400343 	.word	0x00400343
  400220:	00400343 	.word	0x00400343
  400224:	00400343 	.word	0x00400343
  400228:	00400343 	.word	0x00400343
  40022c:	00400343 	.word	0x00400343
  400230:	00400343 	.word	0x00400343
  400234:	00400285 	.word	0x00400285
  400238:	00400343 	.word	0x00400343
  40023c:	00400343 	.word	0x00400343
  400240:	00400343 	.word	0x00400343
  400244:	00400343 	.word	0x00400343
  400248:	00400343 	.word	0x00400343
  40024c:	00400343 	.word	0x00400343
  400250:	00400343 	.word	0x00400343
  400254:	00400343 	.word	0x00400343
  400258:	00400343 	.word	0x00400343
  40025c:	00400343 	.word	0x00400343
  400260:	00400343 	.word	0x00400343
  400264:	00400343 	.word	0x00400343
  400268:	00400343 	.word	0x00400343
  40026c:	00400343 	.word	0x00400343
  400270:	00400343 	.word	0x00400343
  400274:	00400343 	.word	0x00400343
  400278:	00400343 	.word	0x00400343
  40027c:	00400343 	.word	0x00400343
  400280:	00400343 	.word	0x00400343
			//XBEE: Transmit Status Received (N/H)
			break;
		
		case ZIGBEE_RECEIVE_PACKET:
			//XBEE: Data Packet Received
			FrameBufferOut = index;
  400284:	4a32      	ldr	r2, [pc, #200]	; (400350 <InterpretXbeeAPIFrame+0x164>)
  400286:	6a3b      	ldr	r3, [r7, #32]
  400288:	6013      	str	r3, [r2, #0]
			FrameBufferGet(&temp);		
  40028a:	f107 0317 	add.w	r3, r7, #23
  40028e:	4618      	mov	r0, r3
  400290:	4b30      	ldr	r3, [pc, #192]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  400292:	4798      	blx	r3
			FrameBufferGet(&temp);
  400294:	f107 0317 	add.w	r3, r7, #23
  400298:	4618      	mov	r0, r3
  40029a:	4b2e      	ldr	r3, [pc, #184]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  40029c:	4798      	blx	r3
			FrameBufferGet(&temp);
  40029e:	f107 0317 	add.w	r3, r7, #23
  4002a2:	4618      	mov	r0, r3
  4002a4:	4b2b      	ldr	r3, [pc, #172]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  4002a6:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002a8:	f107 0317 	add.w	r3, r7, #23
  4002ac:	4618      	mov	r0, r3
  4002ae:	4b29      	ldr	r3, [pc, #164]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  4002b0:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002b2:	f107 0317 	add.w	r3, r7, #23
  4002b6:	4618      	mov	r0, r3
  4002b8:	4b26      	ldr	r3, [pc, #152]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  4002ba:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002bc:	f107 0317 	add.w	r3, r7, #23
  4002c0:	4618      	mov	r0, r3
  4002c2:	4b24      	ldr	r3, [pc, #144]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  4002c4:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002c6:	f107 0317 	add.w	r3, r7, #23
  4002ca:	4618      	mov	r0, r3
  4002cc:	4b21      	ldr	r3, [pc, #132]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  4002ce:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002d0:	f107 0317 	add.w	r3, r7, #23
  4002d4:	4618      	mov	r0, r3
  4002d6:	4b1f      	ldr	r3, [pc, #124]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  4002d8:	4798      	blx	r3
			
			FrameBufferGet(&temp);
  4002da:	f107 0317 	add.w	r3, r7, #23
  4002de:	4618      	mov	r0, r3
  4002e0:	4b1c      	ldr	r3, [pc, #112]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  4002e2:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002e4:	f107 0317 	add.w	r3, r7, #23
  4002e8:	4618      	mov	r0, r3
  4002ea:	4b1a      	ldr	r3, [pc, #104]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  4002ec:	4798      	blx	r3
			
			FrameBufferGet(&temp);	
  4002ee:	f107 0317 	add.w	r3, r7, #23
  4002f2:	4618      	mov	r0, r3
  4002f4:	4b17      	ldr	r3, [pc, #92]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  4002f6:	4798      	blx	r3
			
			if(FrameBufferGet(&temp) == 0)
  4002f8:	f107 0317 	add.w	r3, r7, #23
  4002fc:	4618      	mov	r0, r3
  4002fe:	4b15      	ldr	r3, [pc, #84]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  400300:	4798      	blx	r3
  400302:	4603      	mov	r3, r0
  400304:	2b00      	cmp	r3, #0
  400306:	d11e      	bne.n	400346 <InterpretXbeeAPIFrame+0x15a>
			{
				MessageBufferInfoPut(MessageBufferIn,temp,1);
  400308:	4b13      	ldr	r3, [pc, #76]	; (400358 <InterpretXbeeAPIFrame+0x16c>)
  40030a:	681b      	ldr	r3, [r3, #0]
  40030c:	7df9      	ldrb	r1, [r7, #23]
  40030e:	2201      	movs	r2, #1
  400310:	4618      	mov	r0, r3
  400312:	4b12      	ldr	r3, [pc, #72]	; (40035c <InterpretXbeeAPIFrame+0x170>)
  400314:	4798      	blx	r3
				for(int i = 1; i <= length-12; i++)
  400316:	2301      	movs	r3, #1
  400318:	627b      	str	r3, [r7, #36]	; 0x24
  40031a:	e00b      	b.n	400334 <InterpretXbeeAPIFrame+0x148>
				{
					FrameBufferGet(&temp);
  40031c:	f107 0317 	add.w	r3, r7, #23
  400320:	4618      	mov	r0, r3
  400322:	4b0c      	ldr	r3, [pc, #48]	; (400354 <InterpretXbeeAPIFrame+0x168>)
  400324:	4798      	blx	r3
					MessageBufferPut(temp);
  400326:	7dfb      	ldrb	r3, [r7, #23]
  400328:	4618      	mov	r0, r3
  40032a:	4b0d      	ldr	r3, [pc, #52]	; (400360 <InterpretXbeeAPIFrame+0x174>)
  40032c:	4798      	blx	r3
			FrameBufferGet(&temp);	
			
			if(FrameBufferGet(&temp) == 0)
			{
				MessageBufferInfoPut(MessageBufferIn,temp,1);
				for(int i = 1; i <= length-12; i++)
  40032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400330:	3301      	adds	r3, #1
  400332:	627b      	str	r3, [r7, #36]	; 0x24
  400334:	69bb      	ldr	r3, [r7, #24]
  400336:	f1a3 020c 	sub.w	r2, r3, #12
  40033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40033c:	429a      	cmp	r2, r3
  40033e:	daed      	bge.n	40031c <InterpretXbeeAPIFrame+0x130>
					FrameBufferGet(&temp);
					MessageBufferPut(temp);
				}
			}
			
			break;
  400340:	e001      	b.n	400346 <InterpretXbeeAPIFrame+0x15a>
			//XBEE: Many To One Route Request Indicator Received (N/H);
			break;

		default:
			//WARNING ERROR XBEE: unhandled message received;
			break;
  400342:	bf00      	nop
  400344:	e000      	b.n	400348 <InterpretXbeeAPIFrame+0x15c>
					FrameBufferGet(&temp);
					MessageBufferPut(temp);
				}
			}
			
			break;
  400346:	bf00      	nop
		default:
			//WARNING ERROR XBEE: unhandled message received;
			break;

	}
}
  400348:	bf00      	nop
  40034a:	3728      	adds	r7, #40	; 0x28
  40034c:	46bd      	mov	sp, r7
  40034e:	bd80      	pop	{r7, pc}
  400350:	20000f90 	.word	0x20000f90
  400354:	0040092d 	.word	0x0040092d
  400358:	200004d4 	.word	0x200004d4
  40035c:	00400bfd 	.word	0x00400bfd
  400360:	00400b45 	.word	0x00400b45

00400364 <CommunicationSetup>:

void CommunicationSetup(void)
{
  400364:	b580      	push	{r7, lr}
  400366:	af00      	add	r7, sp, #0
	REG_PMC_PCER0 |= (1 << 16);				//Enable clock access to UART3
  400368:	4a1a      	ldr	r2, [pc, #104]	; (4003d4 <CommunicationSetup+0x70>)
  40036a:	4b1a      	ldr	r3, [pc, #104]	; (4003d4 <CommunicationSetup+0x70>)
  40036c:	681b      	ldr	r3, [r3, #0]
  40036e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400372:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR |= (1<<11)|(1<<10);		//Enable peripheral control of PB10 (URXD3) and PB11 (UTXD3) both connected to peripheral B
  400374:	4a18      	ldr	r2, [pc, #96]	; (4003d8 <CommunicationSetup+0x74>)
  400376:	4b18      	ldr	r3, [pc, #96]	; (4003d8 <CommunicationSetup+0x74>)
  400378:	681b      	ldr	r3, [r3, #0]
  40037a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
  40037e:	6013      	str	r3, [r2, #0]
	REG_UART3_MR |= (0<<14) | (0x4<<9);		//set as no parity, normal mode
  400380:	4a16      	ldr	r2, [pc, #88]	; (4003dc <CommunicationSetup+0x78>)
  400382:	4b16      	ldr	r3, [pc, #88]	; (4003dc <CommunicationSetup+0x78>)
  400384:	681b      	ldr	r3, [r3, #0]
  400386:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40038a:	6013      	str	r3, [r2, #0]
	REG_UART3_BRGR = 651;					//Set Baud rate for 9600 from a 100MHZ clock
  40038c:	4b14      	ldr	r3, [pc, #80]	; (4003e0 <CommunicationSetup+0x7c>)
  40038e:	f240 228b 	movw	r2, #651	; 0x28b
  400392:	601a      	str	r2, [r3, #0]
	REG_UART3_CR |= (1<<2)|(1<<3)|(1<<8);	//Reset receiver, transmitter and status bits
  400394:	4a13      	ldr	r2, [pc, #76]	; (4003e4 <CommunicationSetup+0x80>)
  400396:	4b13      	ldr	r3, [pc, #76]	; (4003e4 <CommunicationSetup+0x80>)
  400398:	681b      	ldr	r3, [r3, #0]
  40039a:	f443 7386 	orr.w	r3, r3, #268	; 0x10c
  40039e:	6013      	str	r3, [r2, #0]
	REG_UART3_CR |= (1<<4)|(1<<6);			//Enable receiver and transmitter
  4003a0:	4a10      	ldr	r2, [pc, #64]	; (4003e4 <CommunicationSetup+0x80>)
  4003a2:	4b10      	ldr	r3, [pc, #64]	; (4003e4 <CommunicationSetup+0x80>)
  4003a4:	681b      	ldr	r3, [r3, #0]
  4003a6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  4003aa:	6013      	str	r3, [r2, #0]
	REG_UART3_IER |= (1<<0);				//ENABLE UART RXRDY interrupt
  4003ac:	4a0e      	ldr	r2, [pc, #56]	; (4003e8 <CommunicationSetup+0x84>)
  4003ae:	4b0e      	ldr	r3, [pc, #56]	; (4003e8 <CommunicationSetup+0x84>)
  4003b0:	681b      	ldr	r3, [r3, #0]
  4003b2:	f043 0301 	orr.w	r3, r3, #1
  4003b6:	6013      	str	r3, [r2, #0]
	
	NVIC_EnableIRQ(16);						//ENABLE the UART3 system interrupts
  4003b8:	2010      	movs	r0, #16
  4003ba:	4b0c      	ldr	r3, [pc, #48]	; (4003ec <CommunicationSetup+0x88>)
  4003bc:	4798      	blx	r3

	FrameBufferInit();
  4003be:	4b0c      	ldr	r3, [pc, #48]	; (4003f0 <CommunicationSetup+0x8c>)
  4003c0:	4798      	blx	r3
	FrameBufferInfoInit();
  4003c2:	4b0c      	ldr	r3, [pc, #48]	; (4003f4 <CommunicationSetup+0x90>)
  4003c4:	4798      	blx	r3
	MessageBufferInit();
  4003c6:	4b0c      	ldr	r3, [pc, #48]	; (4003f8 <CommunicationSetup+0x94>)
  4003c8:	4798      	blx	r3
	MessageBufferInfoInit();
  4003ca:	4b0c      	ldr	r3, [pc, #48]	; (4003fc <CommunicationSetup+0x98>)
  4003cc:	4798      	blx	r3
}
  4003ce:	bf00      	nop
  4003d0:	bd80      	pop	{r7, pc}
  4003d2:	bf00      	nop
  4003d4:	400e0410 	.word	0x400e0410
  4003d8:	400e1004 	.word	0x400e1004
  4003dc:	40048004 	.word	0x40048004
  4003e0:	40048020 	.word	0x40048020
  4003e4:	40048000 	.word	0x40048000
  4003e8:	40048008 	.word	0x40048008
  4003ec:	0040011d 	.word	0x0040011d
  4003f0:	00400875 	.word	0x00400875
  4003f4:	0040099d 	.word	0x0040099d
  4003f8:	00400b19 	.word	0x00400b19
  4003fc:	00400bd1 	.word	0x00400bd1

00400400 <UART3_Handler>:


/******** UART3 Interrupt Handler ********/
void UART3_Handler(void)
{
  400400:	b580      	push	{r7, lr}
  400402:	b082      	sub	sp, #8
  400404:	af00      	add	r7, sp, #0
	static int check;
	static int frame_start_index;
	static int frame_type;
	

	if(REG_UART3_IMR == UART_IMR_RXRDY)	//if we receive data
  400406:	4b5b      	ldr	r3, [pc, #364]	; (400574 <UART3_Handler+0x174>)
  400408:	681b      	ldr	r3, [r3, #0]
  40040a:	2b01      	cmp	r3, #1
  40040c:	f040 80ad 	bne.w	40056a <UART3_Handler+0x16a>
	{
		temp = REG_UART3_RHR;
  400410:	4b59      	ldr	r3, [pc, #356]	; (400578 <UART3_Handler+0x178>)
  400412:	681b      	ldr	r3, [r3, #0]
  400414:	71fb      	strb	r3, [r7, #7]

		if(temp == FRAME_DELIMITER && receiveState != CASE_START)
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	2b7e      	cmp	r3, #126	; 0x7e
  40041a:	d107      	bne.n	40042c <UART3_Handler+0x2c>
  40041c:	4b57      	ldr	r3, [pc, #348]	; (40057c <UART3_Handler+0x17c>)
  40041e:	781b      	ldrb	r3, [r3, #0]
  400420:	2b00      	cmp	r3, #0
  400422:	d003      	beq.n	40042c <UART3_Handler+0x2c>
		{
			receiveState = CASE_START;
  400424:	4b55      	ldr	r3, [pc, #340]	; (40057c <UART3_Handler+0x17c>)
  400426:	2200      	movs	r2, #0
  400428:	701a      	strb	r2, [r3, #0]
  40042a:	e011      	b.n	400450 <UART3_Handler+0x50>
			{
				FrameBufferIn -= 50 - FrameBufferIn + index;
			}
			*/			
		}
		else if(temp == ESCAPE_BYTE)
  40042c:	79fb      	ldrb	r3, [r7, #7]
  40042e:	2b7d      	cmp	r3, #125	; 0x7d
  400430:	d103      	bne.n	40043a <UART3_Handler+0x3a>
		{
			escape = true;
  400432:	4b53      	ldr	r3, [pc, #332]	; (400580 <UART3_Handler+0x180>)
  400434:	2201      	movs	r2, #1
  400436:	701a      	strb	r2, [r3, #0]
  400438:	e00a      	b.n	400450 <UART3_Handler+0x50>
		}
		else if(escape)
  40043a:	4b51      	ldr	r3, [pc, #324]	; (400580 <UART3_Handler+0x180>)
  40043c:	781b      	ldrb	r3, [r3, #0]
  40043e:	2b00      	cmp	r3, #0
  400440:	d006      	beq.n	400450 <UART3_Handler+0x50>
		{
			temp ^= 0x20;
  400442:	79fb      	ldrb	r3, [r7, #7]
  400444:	f083 0320 	eor.w	r3, r3, #32
  400448:	71fb      	strb	r3, [r7, #7]
			escape = false;
  40044a:	4b4d      	ldr	r3, [pc, #308]	; (400580 <UART3_Handler+0x180>)
  40044c:	2200      	movs	r2, #0
  40044e:	701a      	strb	r2, [r3, #0]
		}

		if(escape == false)
  400450:	4b4b      	ldr	r3, [pc, #300]	; (400580 <UART3_Handler+0x180>)
  400452:	781b      	ldrb	r3, [r3, #0]
  400454:	f083 0301 	eor.w	r3, r3, #1
  400458:	b2db      	uxtb	r3, r3
  40045a:	2b00      	cmp	r3, #0
  40045c:	f000 8085 	beq.w	40056a <UART3_Handler+0x16a>
		{
			switch(receiveState)
  400460:	4b46      	ldr	r3, [pc, #280]	; (40057c <UART3_Handler+0x17c>)
  400462:	781b      	ldrb	r3, [r3, #0]
  400464:	2b05      	cmp	r3, #5
  400466:	f200 8080 	bhi.w	40056a <UART3_Handler+0x16a>
  40046a:	a201      	add	r2, pc, #4	; (adr r2, 400470 <UART3_Handler+0x70>)
  40046c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400470:	00400489 	.word	0x00400489
  400474:	004004a9 	.word	0x004004a9
  400478:	004004b9 	.word	0x004004b9
  40047c:	004004c7 	.word	0x004004c7
  400480:	004004f3 	.word	0x004004f3
  400484:	00400525 	.word	0x00400525
			{
				case CASE_START:
					if(temp == FRAME_DELIMITER)
  400488:	79fb      	ldrb	r3, [r7, #7]
  40048a:	2b7e      	cmp	r3, #126	; 0x7e
  40048c:	d168      	bne.n	400560 <UART3_Handler+0x160>
					{
						receiveState = CASE_LENGTH_MSB;
  40048e:	4b3b      	ldr	r3, [pc, #236]	; (40057c <UART3_Handler+0x17c>)
  400490:	2201      	movs	r2, #1
  400492:	701a      	strb	r2, [r3, #0]
						length = 0;
  400494:	4b3b      	ldr	r3, [pc, #236]	; (400584 <UART3_Handler+0x184>)
  400496:	2200      	movs	r2, #0
  400498:	601a      	str	r2, [r3, #0]
						index = 0;
  40049a:	4b3b      	ldr	r3, [pc, #236]	; (400588 <UART3_Handler+0x188>)
  40049c:	2200      	movs	r2, #0
  40049e:	601a      	str	r2, [r3, #0]
						check = 0;
  4004a0:	4b3a      	ldr	r3, [pc, #232]	; (40058c <UART3_Handler+0x18c>)
  4004a2:	2200      	movs	r2, #0
  4004a4:	601a      	str	r2, [r3, #0]
					}
					break;
  4004a6:	e05b      	b.n	400560 <UART3_Handler+0x160>

				case CASE_LENGTH_MSB:
					length = temp*256;
  4004a8:	79fb      	ldrb	r3, [r7, #7]
  4004aa:	021b      	lsls	r3, r3, #8
  4004ac:	4a35      	ldr	r2, [pc, #212]	; (400584 <UART3_Handler+0x184>)
  4004ae:	6013      	str	r3, [r2, #0]
					receiveState = CASE_LENGTH_LSB;
  4004b0:	4b32      	ldr	r3, [pc, #200]	; (40057c <UART3_Handler+0x17c>)
  4004b2:	2202      	movs	r2, #2
  4004b4:	701a      	strb	r2, [r3, #0]
					break;
  4004b6:	e058      	b.n	40056a <UART3_Handler+0x16a>

				case CASE_LENGTH_LSB:
					length =+ temp;
  4004b8:	79fb      	ldrb	r3, [r7, #7]
  4004ba:	4a32      	ldr	r2, [pc, #200]	; (400584 <UART3_Handler+0x184>)
  4004bc:	6013      	str	r3, [r2, #0]
					receiveState = CASE_FRAME_TYPE;
  4004be:	4b2f      	ldr	r3, [pc, #188]	; (40057c <UART3_Handler+0x17c>)
  4004c0:	2203      	movs	r2, #3
  4004c2:	701a      	strb	r2, [r3, #0]
					break;
  4004c4:	e051      	b.n	40056a <UART3_Handler+0x16a>

				case CASE_FRAME_TYPE:
					frame_type = temp;
  4004c6:	79fb      	ldrb	r3, [r7, #7]
  4004c8:	4a31      	ldr	r2, [pc, #196]	; (400590 <UART3_Handler+0x190>)
  4004ca:	6013      	str	r3, [r2, #0]
					check += temp;
  4004cc:	79fa      	ldrb	r2, [r7, #7]
  4004ce:	4b2f      	ldr	r3, [pc, #188]	; (40058c <UART3_Handler+0x18c>)
  4004d0:	681b      	ldr	r3, [r3, #0]
  4004d2:	4413      	add	r3, r2
  4004d4:	4a2d      	ldr	r2, [pc, #180]	; (40058c <UART3_Handler+0x18c>)
  4004d6:	6013      	str	r3, [r2, #0]
					
					index++;
  4004d8:	4b2b      	ldr	r3, [pc, #172]	; (400588 <UART3_Handler+0x188>)
  4004da:	681b      	ldr	r3, [r3, #0]
  4004dc:	3301      	adds	r3, #1
  4004de:	4a2a      	ldr	r2, [pc, #168]	; (400588 <UART3_Handler+0x188>)
  4004e0:	6013      	str	r3, [r2, #0]
					frame_start_index = FrameBufferIn;
  4004e2:	4b2c      	ldr	r3, [pc, #176]	; (400594 <UART3_Handler+0x194>)
  4004e4:	681b      	ldr	r3, [r3, #0]
  4004e6:	4a2c      	ldr	r2, [pc, #176]	; (400598 <UART3_Handler+0x198>)
  4004e8:	6013      	str	r3, [r2, #0]
					receiveState = CASE_DATA;
  4004ea:	4b24      	ldr	r3, [pc, #144]	; (40057c <UART3_Handler+0x17c>)
  4004ec:	2204      	movs	r2, #4
  4004ee:	701a      	strb	r2, [r3, #0]
					break;
  4004f0:	e03b      	b.n	40056a <UART3_Handler+0x16a>

				case CASE_DATA:	
					FrameBufferPut(temp);
  4004f2:	79fb      	ldrb	r3, [r7, #7]
  4004f4:	4618      	mov	r0, r3
  4004f6:	4b29      	ldr	r3, [pc, #164]	; (40059c <UART3_Handler+0x19c>)
  4004f8:	4798      	blx	r3
					check += temp;
  4004fa:	79fa      	ldrb	r2, [r7, #7]
  4004fc:	4b23      	ldr	r3, [pc, #140]	; (40058c <UART3_Handler+0x18c>)
  4004fe:	681b      	ldr	r3, [r3, #0]
  400500:	4413      	add	r3, r2
  400502:	4a22      	ldr	r2, [pc, #136]	; (40058c <UART3_Handler+0x18c>)
  400504:	6013      	str	r3, [r2, #0]
					index++;
  400506:	4b20      	ldr	r3, [pc, #128]	; (400588 <UART3_Handler+0x188>)
  400508:	681b      	ldr	r3, [r3, #0]
  40050a:	3301      	adds	r3, #1
  40050c:	4a1e      	ldr	r2, [pc, #120]	; (400588 <UART3_Handler+0x188>)
  40050e:	6013      	str	r3, [r2, #0]

					if(index == length)
  400510:	4b1d      	ldr	r3, [pc, #116]	; (400588 <UART3_Handler+0x188>)
  400512:	681a      	ldr	r2, [r3, #0]
  400514:	4b1b      	ldr	r3, [pc, #108]	; (400584 <UART3_Handler+0x184>)
  400516:	681b      	ldr	r3, [r3, #0]
  400518:	429a      	cmp	r2, r3
  40051a:	d123      	bne.n	400564 <UART3_Handler+0x164>
					{
						receiveState = CASE_CHECKSUM;
  40051c:	4b17      	ldr	r3, [pc, #92]	; (40057c <UART3_Handler+0x17c>)
  40051e:	2205      	movs	r2, #5
  400520:	701a      	strb	r2, [r3, #0]
					}
					
					break;
  400522:	e01f      	b.n	400564 <UART3_Handler+0x164>
				
				case CASE_CHECKSUM:
					check += temp;
  400524:	79fa      	ldrb	r2, [r7, #7]
  400526:	4b19      	ldr	r3, [pc, #100]	; (40058c <UART3_Handler+0x18c>)
  400528:	681b      	ldr	r3, [r3, #0]
  40052a:	4413      	add	r3, r2
  40052c:	4a17      	ldr	r2, [pc, #92]	; (40058c <UART3_Handler+0x18c>)
  40052e:	6013      	str	r3, [r2, #0]
					check &= 0xFF;
  400530:	4b16      	ldr	r3, [pc, #88]	; (40058c <UART3_Handler+0x18c>)
  400532:	681b      	ldr	r3, [r3, #0]
  400534:	b2db      	uxtb	r3, r3
  400536:	4a15      	ldr	r2, [pc, #84]	; (40058c <UART3_Handler+0x18c>)
  400538:	6013      	str	r3, [r2, #0]
					if(check == 0xFF)
  40053a:	4b14      	ldr	r3, [pc, #80]	; (40058c <UART3_Handler+0x18c>)
  40053c:	681b      	ldr	r3, [r3, #0]
  40053e:	2bff      	cmp	r3, #255	; 0xff
  400540:	d112      	bne.n	400568 <UART3_Handler+0x168>
					{
						receiveState = CASE_START;
  400542:	4b0e      	ldr	r3, [pc, #56]	; (40057c <UART3_Handler+0x17c>)
  400544:	2200      	movs	r2, #0
  400546:	701a      	strb	r2, [r3, #0]
						FrameBufferInfoPut(frame_start_index, frame_type, index -1);
  400548:	4b13      	ldr	r3, [pc, #76]	; (400598 <UART3_Handler+0x198>)
  40054a:	6818      	ldr	r0, [r3, #0]
  40054c:	4b10      	ldr	r3, [pc, #64]	; (400590 <UART3_Handler+0x190>)
  40054e:	681b      	ldr	r3, [r3, #0]
  400550:	b2d9      	uxtb	r1, r3
  400552:	4b0d      	ldr	r3, [pc, #52]	; (400588 <UART3_Handler+0x188>)
  400554:	681b      	ldr	r3, [r3, #0]
  400556:	3b01      	subs	r3, #1
  400558:	461a      	mov	r2, r3
  40055a:	4b11      	ldr	r3, [pc, #68]	; (4005a0 <UART3_Handler+0x1a0>)
  40055c:	4798      	blx	r3
					}
				break;
  40055e:	e003      	b.n	400568 <UART3_Handler+0x168>
						receiveState = CASE_LENGTH_MSB;
						length = 0;
						index = 0;
						check = 0;
					}
					break;
  400560:	bf00      	nop
  400562:	e002      	b.n	40056a <UART3_Handler+0x16a>
					if(index == length)
					{
						receiveState = CASE_CHECKSUM;
					}
					
					break;
  400564:	bf00      	nop
  400566:	e000      	b.n	40056a <UART3_Handler+0x16a>
					if(check == 0xFF)
					{
						receiveState = CASE_START;
						FrameBufferInfoPut(frame_start_index, frame_type, index -1);
					}
				break;
  400568:	bf00      	nop
			}
		}
	}
}
  40056a:	bf00      	nop
  40056c:	3708      	adds	r7, #8
  40056e:	46bd      	mov	sp, r7
  400570:	bd80      	pop	{r7, pc}
  400572:	bf00      	nop
  400574:	40048010 	.word	0x40048010
  400578:	40048018 	.word	0x40048018
  40057c:	20000494 	.word	0x20000494
  400580:	20000495 	.word	0x20000495
  400584:	20000498 	.word	0x20000498
  400588:	2000049c 	.word	0x2000049c
  40058c:	200004a0 	.word	0x200004a0
  400590:	200004a4 	.word	0x200004a4
  400594:	20000f9c 	.word	0x20000f9c
  400598:	200004a8 	.word	0x200004a8
  40059c:	004008a1 	.word	0x004008a1
  4005a0:	004009c9 	.word	0x004009c9

004005a4 <UART3_Write>:

void UART3_Write(uint8_t data)
{
  4005a4:	b480      	push	{r7}
  4005a6:	b083      	sub	sp, #12
  4005a8:	af00      	add	r7, sp, #0
  4005aa:	4603      	mov	r3, r0
  4005ac:	71fb      	strb	r3, [r7, #7]
	while(!(REG_UART3_SR & (1<<1)));	//wait till TXRDY
  4005ae:	bf00      	nop
  4005b0:	4b06      	ldr	r3, [pc, #24]	; (4005cc <UART3_Write+0x28>)
  4005b2:	681b      	ldr	r3, [r3, #0]
  4005b4:	f003 0302 	and.w	r3, r3, #2
  4005b8:	2b00      	cmp	r3, #0
  4005ba:	d0f9      	beq.n	4005b0 <UART3_Write+0xc>
	REG_UART3_THR = data;				//place data in TX register
  4005bc:	4a04      	ldr	r2, [pc, #16]	; (4005d0 <UART3_Write+0x2c>)
  4005be:	79fb      	ldrb	r3, [r7, #7]
  4005c0:	6013      	str	r3, [r2, #0]
}
  4005c2:	bf00      	nop
  4005c4:	370c      	adds	r7, #12
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bc80      	pop	{r7}
  4005ca:	4770      	bx	lr
  4005cc:	40048014 	.word	0x40048014
  4005d0:	4004801c 	.word	0x4004801c

004005d4 <SendXbeeAPIFrame>:

void SendXbeeAPIFrame(uint8_t * frame_data, int len)
{
  4005d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4005d8:	b08b      	sub	sp, #44	; 0x2c
  4005da:	af00      	add	r7, sp, #0
  4005dc:	6078      	str	r0, [r7, #4]
  4005de:	6039      	str	r1, [r7, #0]
  4005e0:	466a      	mov	r2, sp
  4005e2:	4691      	mov	r9, r2
	uint16_t length = len;
  4005e4:	683a      	ldr	r2, [r7, #0]
  4005e6:	837a      	strh	r2, [r7, #26]

	uint8_t data[length + 4];
  4005e8:	8b7a      	ldrh	r2, [r7, #26]
  4005ea:	f102 0804 	add.w	r8, r2, #4
  4005ee:	f108 32ff 	add.w	r2, r8, #4294967295
  4005f2:	617a      	str	r2, [r7, #20]
  4005f4:	4642      	mov	r2, r8
  4005f6:	4611      	mov	r1, r2
  4005f8:	f04f 0200 	mov.w	r2, #0
  4005fc:	00d6      	lsls	r6, r2, #3
  4005fe:	ea46 7651 	orr.w	r6, r6, r1, lsr #29
  400602:	00cd      	lsls	r5, r1, #3
  400604:	4642      	mov	r2, r8
  400606:	4611      	mov	r1, r2
  400608:	f04f 0200 	mov.w	r2, #0
  40060c:	00d4      	lsls	r4, r2, #3
  40060e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
  400612:	00cb      	lsls	r3, r1, #3
  400614:	4643      	mov	r3, r8
  400616:	3307      	adds	r3, #7
  400618:	08db      	lsrs	r3, r3, #3
  40061a:	00db      	lsls	r3, r3, #3
  40061c:	ebad 0d03 	sub.w	sp, sp, r3
  400620:	466b      	mov	r3, sp
  400622:	3300      	adds	r3, #0
  400624:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;
  400626:	2300      	movs	r3, #0
  400628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	data[0] = FRAME_DELIMITER;
  40062c:	693b      	ldr	r3, [r7, #16]
  40062e:	227e      	movs	r2, #126	; 0x7e
  400630:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t) (length >> 7) & 0xFF;
  400632:	8b7b      	ldrh	r3, [r7, #26]
  400634:	09db      	lsrs	r3, r3, #7
  400636:	b29b      	uxth	r3, r3
  400638:	b2da      	uxtb	r2, r3
  40063a:	693b      	ldr	r3, [r7, #16]
  40063c:	705a      	strb	r2, [r3, #1]
	data[2] = length & 0xFF;
  40063e:	8b7b      	ldrh	r3, [r7, #26]
  400640:	b2da      	uxtb	r2, r3
  400642:	693b      	ldr	r3, [r7, #16]
  400644:	709a      	strb	r2, [r3, #2]

	memcpy(data + 3, frame_data, length);
  400646:	693b      	ldr	r3, [r7, #16]
  400648:	3303      	adds	r3, #3
  40064a:	8b7a      	ldrh	r2, [r7, #26]
  40064c:	6879      	ldr	r1, [r7, #4]
  40064e:	4618      	mov	r0, r3
  400650:	4b30      	ldr	r3, [pc, #192]	; (400714 <SendXbeeAPIFrame+0x140>)
  400652:	4798      	blx	r3
	

	for(int i = 0; i < length; i++)
  400654:	2300      	movs	r3, #0
  400656:	623b      	str	r3, [r7, #32]
  400658:	e00b      	b.n	400672 <SendXbeeAPIFrame+0x9e>
	{
		checksum += frame_data[i];
  40065a:	6a3b      	ldr	r3, [r7, #32]
  40065c:	687a      	ldr	r2, [r7, #4]
  40065e:	4413      	add	r3, r2
  400660:	781a      	ldrb	r2, [r3, #0]
  400662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400666:	4413      	add	r3, r2
  400668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	data[2] = length & 0xFF;

	memcpy(data + 3, frame_data, length);
	

	for(int i = 0; i < length; i++)
  40066c:	6a3b      	ldr	r3, [r7, #32]
  40066e:	3301      	adds	r3, #1
  400670:	623b      	str	r3, [r7, #32]
  400672:	8b7a      	ldrh	r2, [r7, #26]
  400674:	6a3b      	ldr	r3, [r7, #32]
  400676:	429a      	cmp	r2, r3
  400678:	dcef      	bgt.n	40065a <SendXbeeAPIFrame+0x86>
	{
		checksum += frame_data[i];
	}

	data[length+3] = 0xFF - checksum;
  40067a:	8b7b      	ldrh	r3, [r7, #26]
  40067c:	3303      	adds	r3, #3
  40067e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  400682:	43d2      	mvns	r2, r2
  400684:	b2d1      	uxtb	r1, r2
  400686:	693a      	ldr	r2, [r7, #16]
  400688:	54d1      	strb	r1, [r2, r3]

	uint8_t data_length = sizeof(data);
  40068a:	4643      	mov	r3, r8
  40068c:	73fb      	strb	r3, [r7, #15]

	UART3_Write(data[0]);
  40068e:	693b      	ldr	r3, [r7, #16]
  400690:	781b      	ldrb	r3, [r3, #0]
  400692:	4618      	mov	r0, r3
  400694:	4b20      	ldr	r3, [pc, #128]	; (400718 <SendXbeeAPIFrame+0x144>)
  400696:	4798      	blx	r3

	for(int i = 1; i <data_length; i++)
  400698:	2301      	movs	r3, #1
  40069a:	61fb      	str	r3, [r7, #28]
  40069c:	e02f      	b.n	4006fe <SendXbeeAPIFrame+0x12a>
	{
		if(data[i] == 0x7E || data[i] == 0x7D || data[i] == 0x11 || data[i] == 0x13)
  40069e:	693a      	ldr	r2, [r7, #16]
  4006a0:	69fb      	ldr	r3, [r7, #28]
  4006a2:	4413      	add	r3, r2
  4006a4:	781b      	ldrb	r3, [r3, #0]
  4006a6:	2b7e      	cmp	r3, #126	; 0x7e
  4006a8:	d011      	beq.n	4006ce <SendXbeeAPIFrame+0xfa>
  4006aa:	693a      	ldr	r2, [r7, #16]
  4006ac:	69fb      	ldr	r3, [r7, #28]
  4006ae:	4413      	add	r3, r2
  4006b0:	781b      	ldrb	r3, [r3, #0]
  4006b2:	2b7d      	cmp	r3, #125	; 0x7d
  4006b4:	d00b      	beq.n	4006ce <SendXbeeAPIFrame+0xfa>
  4006b6:	693a      	ldr	r2, [r7, #16]
  4006b8:	69fb      	ldr	r3, [r7, #28]
  4006ba:	4413      	add	r3, r2
  4006bc:	781b      	ldrb	r3, [r3, #0]
  4006be:	2b11      	cmp	r3, #17
  4006c0:	d005      	beq.n	4006ce <SendXbeeAPIFrame+0xfa>
  4006c2:	693a      	ldr	r2, [r7, #16]
  4006c4:	69fb      	ldr	r3, [r7, #28]
  4006c6:	4413      	add	r3, r2
  4006c8:	781b      	ldrb	r3, [r3, #0]
  4006ca:	2b13      	cmp	r3, #19
  4006cc:	d10d      	bne.n	4006ea <SendXbeeAPIFrame+0x116>
		{
			UART3_Write(ESCAPE_BYTE);
  4006ce:	207d      	movs	r0, #125	; 0x7d
  4006d0:	4b11      	ldr	r3, [pc, #68]	; (400718 <SendXbeeAPIFrame+0x144>)
  4006d2:	4798      	blx	r3
			UART3_Write(data[i]^0x20);
  4006d4:	693a      	ldr	r2, [r7, #16]
  4006d6:	69fb      	ldr	r3, [r7, #28]
  4006d8:	4413      	add	r3, r2
  4006da:	781b      	ldrb	r3, [r3, #0]
  4006dc:	f083 0320 	eor.w	r3, r3, #32
  4006e0:	b2db      	uxtb	r3, r3
  4006e2:	4618      	mov	r0, r3
  4006e4:	4b0c      	ldr	r3, [pc, #48]	; (400718 <SendXbeeAPIFrame+0x144>)
  4006e6:	4798      	blx	r3
  4006e8:	e006      	b.n	4006f8 <SendXbeeAPIFrame+0x124>
		}
		else
		{
			UART3_Write(data[i]);
  4006ea:	693a      	ldr	r2, [r7, #16]
  4006ec:	69fb      	ldr	r3, [r7, #28]
  4006ee:	4413      	add	r3, r2
  4006f0:	781b      	ldrb	r3, [r3, #0]
  4006f2:	4618      	mov	r0, r3
  4006f4:	4b08      	ldr	r3, [pc, #32]	; (400718 <SendXbeeAPIFrame+0x144>)
  4006f6:	4798      	blx	r3

	uint8_t data_length = sizeof(data);

	UART3_Write(data[0]);

	for(int i = 1; i <data_length; i++)
  4006f8:	69fb      	ldr	r3, [r7, #28]
  4006fa:	3301      	adds	r3, #1
  4006fc:	61fb      	str	r3, [r7, #28]
  4006fe:	7bfa      	ldrb	r2, [r7, #15]
  400700:	69fb      	ldr	r3, [r7, #28]
  400702:	429a      	cmp	r2, r3
  400704:	dccb      	bgt.n	40069e <SendXbeeAPIFrame+0xca>
  400706:	46cd      	mov	sp, r9
		else
		{
			UART3_Write(data[i]);
		}
	}
}
  400708:	bf00      	nop
  40070a:	372c      	adds	r7, #44	; 0x2c
  40070c:	46bd      	mov	sp, r7
  40070e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400712:	bf00      	nop
  400714:	00406a05 	.word	0x00406a05
  400718:	004005a5 	.word	0x004005a5

0040071c <SendXbeeAPITransmitRequest>:


void SendXbeeAPITransmitRequest(uint64_t destination_64, uint16_t destination_16, uint8_t *data, uint8_t  bytes)
{
  40071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400720:	b095      	sub	sp, #84	; 0x54
  400722:	af00      	add	r7, sp, #0
  400724:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
  400728:	63bb      	str	r3, [r7, #56]	; 0x38
  40072a:	4613      	mov	r3, r2
  40072c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  40072e:	466b      	mov	r3, sp
  400730:	607b      	str	r3, [r7, #4]
	uint8_t frame_data[bytes + 14];
  400732:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
  400736:	f103 020e 	add.w	r2, r3, #14
  40073a:	1e53      	subs	r3, r2, #1
  40073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  40073e:	4613      	mov	r3, r2
  400740:	f04f 0400 	mov.w	r4, #0
  400744:	00e6      	lsls	r6, r4, #3
  400746:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  40074a:	00dd      	lsls	r5, r3, #3
  40074c:	4613      	mov	r3, r2
  40074e:	f04f 0400 	mov.w	r4, #0
  400752:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  400756:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  40075a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  40075e:	4613      	mov	r3, r2
  400760:	3307      	adds	r3, #7
  400762:	08db      	lsrs	r3, r3, #3
  400764:	00db      	lsls	r3, r3, #3
  400766:	ebad 0d03 	sub.w	sp, sp, r3
  40076a:	466b      	mov	r3, sp
  40076c:	3300      	adds	r3, #0
  40076e:	64bb      	str	r3, [r7, #72]	; 0x48

	frame_data[0] = ZIGBEE_TRANSMIT_REQUEST;
  400770:	6cba      	ldr	r2, [r7, #72]	; 0x48
  400772:	2310      	movs	r3, #16
  400774:	7013      	strb	r3, [r2, #0]
	frame_data[1] = 150;						//frame ID (assigned arbitrary at the moment)
  400776:	6cba      	ldr	r2, [r7, #72]	; 0x48
  400778:	2396      	movs	r3, #150	; 0x96
  40077a:	7053      	strb	r3, [r2, #1]

	frame_data[2] = (destination_64 & (0xFF00000000000000)) >> 56;
  40077c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400780:	0e22      	lsrs	r2, r4, #24
  400782:	623a      	str	r2, [r7, #32]
  400784:	2200      	movs	r2, #0
  400786:	627a      	str	r2, [r7, #36]	; 0x24
  400788:	f897 3020 	ldrb.w	r3, [r7, #32]
  40078c:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40078e:	7093      	strb	r3, [r2, #2]
	frame_data[3] = (destination_64 & (0xFF000000000000)) >> 48;
  400790:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400794:	0c22      	lsrs	r2, r4, #16
  400796:	61ba      	str	r2, [r7, #24]
  400798:	2200      	movs	r2, #0
  40079a:	61fa      	str	r2, [r7, #28]
  40079c:	7e3a      	ldrb	r2, [r7, #24]
  40079e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007a0:	70da      	strb	r2, [r3, #3]
	frame_data[4] = (destination_64 & (0xFF0000000000)) >> 40;
  4007a2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4007a6:	0a22      	lsrs	r2, r4, #8
  4007a8:	613a      	str	r2, [r7, #16]
  4007aa:	2200      	movs	r2, #0
  4007ac:	617a      	str	r2, [r7, #20]
  4007ae:	7c3a      	ldrb	r2, [r7, #16]
  4007b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007b2:	711a      	strb	r2, [r3, #4]
	frame_data[5] = (destination_64 & (0xFF00000000)) >> 32;
  4007b4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4007b8:	0022      	movs	r2, r4
  4007ba:	60ba      	str	r2, [r7, #8]
  4007bc:	2200      	movs	r2, #0
  4007be:	60fa      	str	r2, [r7, #12]
  4007c0:	7a3a      	ldrb	r2, [r7, #8]
  4007c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007c4:	715a      	strb	r2, [r3, #5]
	frame_data[6] = (destination_64 & (0xFF000000)) >> 24;
  4007c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4007ca:	0e1a      	lsrs	r2, r3, #24
  4007cc:	633a      	str	r2, [r7, #48]	; 0x30
  4007ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4007d0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4007d4:	633a      	str	r2, [r7, #48]	; 0x30
  4007d6:	0e22      	lsrs	r2, r4, #24
  4007d8:	637a      	str	r2, [r7, #52]	; 0x34
  4007da:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
  4007de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007e0:	719a      	strb	r2, [r3, #6]
	frame_data[7] = (destination_64 & (0xFF0000)) >> 16;
  4007e2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4007e6:	0c1a      	lsrs	r2, r3, #16
  4007e8:	62ba      	str	r2, [r7, #40]	; 0x28
  4007ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4007ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4007f0:	62ba      	str	r2, [r7, #40]	; 0x28
  4007f2:	0c22      	lsrs	r2, r4, #16
  4007f4:	62fa      	str	r2, [r7, #44]	; 0x2c
  4007f6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  4007fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007fc:	71da      	strb	r2, [r3, #7]
	frame_data[8] = (destination_64 & (0xFF00)) >> 8;
  4007fe:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400802:	ea4f 2a13 	mov.w	sl, r3, lsr #8
  400806:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
  40080a:	ea4f 2b14 	mov.w	fp, r4, lsr #8
  40080e:	fa5f f28a 	uxtb.w	r2, sl
  400812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400814:	721a      	strb	r2, [r3, #8]
	frame_data[9] = destination_64 & (0xFF);
  400816:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
  40081a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40081c:	725a      	strb	r2, [r3, #9]


	frame_data[10] = (destination_16 & (0xFF00)) >> 8;
  40081e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
  400820:	0a1b      	lsrs	r3, r3, #8
  400822:	b29b      	uxth	r3, r3
  400824:	b2da      	uxtb	r2, r3
  400826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400828:	729a      	strb	r2, [r3, #10]
	frame_data[11] = destination_16 & (0xFF);
  40082a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
  40082c:	b2da      	uxtb	r2, r3
  40082e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400830:	72da      	strb	r2, [r3, #11]

	frame_data[12] = 0x00;  //broadcast radius
  400832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400834:	2200      	movs	r2, #0
  400836:	731a      	strb	r2, [r3, #12]

	frame_data[13] = 0x00;  //options
  400838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40083a:	2200      	movs	r2, #0
  40083c:	735a      	strb	r2, [r3, #13]

	memcpy(frame_data + 14, data, bytes);
  40083e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400840:	330e      	adds	r3, #14
  400842:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
  400846:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  400848:	4618      	mov	r0, r3
  40084a:	4b08      	ldr	r3, [pc, #32]	; (40086c <SendXbeeAPITransmitRequest+0x150>)
  40084c:	4798      	blx	r3

	SendXbeeAPIFrame(frame_data,bytes+14);
  40084e:	6cba      	ldr	r2, [r7, #72]	; 0x48
  400850:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
  400854:	330e      	adds	r3, #14
  400856:	4619      	mov	r1, r3
  400858:	4610      	mov	r0, r2
  40085a:	4b05      	ldr	r3, [pc, #20]	; (400870 <SendXbeeAPITransmitRequest+0x154>)
  40085c:	4798      	blx	r3
  40085e:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
  400862:	bf00      	nop
  400864:	3754      	adds	r7, #84	; 0x54
  400866:	46bd      	mov	sp, r7
  400868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40086c:	00406a05 	.word	0x00406a05
  400870:	004005d5 	.word	0x004005d5

00400874 <FrameBufferInit>:


// Buffer functions XXXX this can be greatly improved

void FrameBufferInit(void)
{
  400874:	b480      	push	{r7}
  400876:	af00      	add	r7, sp, #0
	FrameBufferIn = FrameBufferOut = 0;
  400878:	4b06      	ldr	r3, [pc, #24]	; (400894 <FrameBufferInit+0x20>)
  40087a:	2200      	movs	r2, #0
  40087c:	601a      	str	r2, [r3, #0]
  40087e:	4b05      	ldr	r3, [pc, #20]	; (400894 <FrameBufferInit+0x20>)
  400880:	681b      	ldr	r3, [r3, #0]
  400882:	4a05      	ldr	r2, [pc, #20]	; (400898 <FrameBufferInit+0x24>)
  400884:	6013      	str	r3, [r2, #0]
	FrameBufferUse = 0;
  400886:	4b05      	ldr	r3, [pc, #20]	; (40089c <FrameBufferInit+0x28>)
  400888:	2200      	movs	r2, #0
  40088a:	601a      	str	r2, [r3, #0]
}
  40088c:	bf00      	nop
  40088e:	46bd      	mov	sp, r7
  400890:	bc80      	pop	{r7}
  400892:	4770      	bx	lr
  400894:	20000f90 	.word	0x20000f90
  400898:	20000f9c 	.word	0x20000f9c
  40089c:	20000fa0 	.word	0x20000fa0

004008a0 <FrameBufferPut>:

int FrameBufferPut(uint8_t new)
{
  4008a0:	b480      	push	{r7}
  4008a2:	b083      	sub	sp, #12
  4008a4:	af00      	add	r7, sp, #0
  4008a6:	4603      	mov	r3, r0
  4008a8:	71fb      	strb	r3, [r7, #7]
	if(FrameBufferIn == (( FrameBufferOut - 1 + FRAME_BUFFER_SIZE) % FRAME_BUFFER_SIZE))
  4008aa:	4b1b      	ldr	r3, [pc, #108]	; (400918 <FrameBufferPut+0x78>)
  4008ac:	681b      	ldr	r3, [r3, #0]
  4008ae:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
  4008b2:	4b1a      	ldr	r3, [pc, #104]	; (40091c <FrameBufferPut+0x7c>)
  4008b4:	fb83 1302 	smull	r1, r3, r3, r2
  4008b8:	1219      	asrs	r1, r3, #8
  4008ba:	17d3      	asrs	r3, r2, #31
  4008bc:	1acb      	subs	r3, r1, r3
  4008be:	f240 31e9 	movw	r1, #1001	; 0x3e9
  4008c2:	fb01 f303 	mul.w	r3, r1, r3
  4008c6:	1ad3      	subs	r3, r2, r3
  4008c8:	4a15      	ldr	r2, [pc, #84]	; (400920 <FrameBufferPut+0x80>)
  4008ca:	6812      	ldr	r2, [r2, #0]
  4008cc:	4293      	cmp	r3, r2
  4008ce:	d102      	bne.n	4008d6 <FrameBufferPut+0x36>
	{
		return -1; // FrameBuffer Full
  4008d0:	f04f 33ff 	mov.w	r3, #4294967295
  4008d4:	e01a      	b.n	40090c <FrameBufferPut+0x6c>
	}

	FrameBuffer[FrameBufferIn] = new;
  4008d6:	4b12      	ldr	r3, [pc, #72]	; (400920 <FrameBufferPut+0x80>)
  4008d8:	681b      	ldr	r3, [r3, #0]
  4008da:	4912      	ldr	r1, [pc, #72]	; (400924 <FrameBufferPut+0x84>)
  4008dc:	79fa      	ldrb	r2, [r7, #7]
  4008de:	54ca      	strb	r2, [r1, r3]
	FrameBufferIn = (FrameBufferIn + 1) % FRAME_BUFFER_SIZE;
  4008e0:	4b0f      	ldr	r3, [pc, #60]	; (400920 <FrameBufferPut+0x80>)
  4008e2:	681b      	ldr	r3, [r3, #0]
  4008e4:	1c5a      	adds	r2, r3, #1
  4008e6:	4b0d      	ldr	r3, [pc, #52]	; (40091c <FrameBufferPut+0x7c>)
  4008e8:	fb83 1302 	smull	r1, r3, r3, r2
  4008ec:	1219      	asrs	r1, r3, #8
  4008ee:	17d3      	asrs	r3, r2, #31
  4008f0:	1acb      	subs	r3, r1, r3
  4008f2:	f240 31e9 	movw	r1, #1001	; 0x3e9
  4008f6:	fb01 f303 	mul.w	r3, r1, r3
  4008fa:	1ad3      	subs	r3, r2, r3
  4008fc:	4a08      	ldr	r2, [pc, #32]	; (400920 <FrameBufferPut+0x80>)
  4008fe:	6013      	str	r3, [r2, #0]
	FrameBufferUse++;
  400900:	4b09      	ldr	r3, [pc, #36]	; (400928 <FrameBufferPut+0x88>)
  400902:	681b      	ldr	r3, [r3, #0]
  400904:	3301      	adds	r3, #1
  400906:	4a08      	ldr	r2, [pc, #32]	; (400928 <FrameBufferPut+0x88>)
  400908:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  40090a:	2300      	movs	r3, #0
}
  40090c:	4618      	mov	r0, r3
  40090e:	370c      	adds	r7, #12
  400910:	46bd      	mov	sp, r7
  400912:	bc80      	pop	{r7}
  400914:	4770      	bx	lr
  400916:	bf00      	nop
  400918:	20000f90 	.word	0x20000f90
  40091c:	4178749f 	.word	0x4178749f
  400920:	20000f9c 	.word	0x20000f9c
  400924:	200004dc 	.word	0x200004dc
  400928:	20000fa0 	.word	0x20000fa0

0040092c <FrameBufferGet>:

int FrameBufferGet(uint8_t *old)
{
  40092c:	b480      	push	{r7}
  40092e:	b083      	sub	sp, #12
  400930:	af00      	add	r7, sp, #0
  400932:	6078      	str	r0, [r7, #4]
	if(FrameBufferIn == FrameBufferOut)
  400934:	4b14      	ldr	r3, [pc, #80]	; (400988 <FrameBufferGet+0x5c>)
  400936:	681a      	ldr	r2, [r3, #0]
  400938:	4b14      	ldr	r3, [pc, #80]	; (40098c <FrameBufferGet+0x60>)
  40093a:	681b      	ldr	r3, [r3, #0]
  40093c:	429a      	cmp	r2, r3
  40093e:	d102      	bne.n	400946 <FrameBufferGet+0x1a>
	{
		return -1; // FrameBuffer Empty - nothing to get
  400940:	f04f 33ff 	mov.w	r3, #4294967295
  400944:	e01b      	b.n	40097e <FrameBufferGet+0x52>
	}

	*old = FrameBuffer[FrameBufferOut];
  400946:	4b11      	ldr	r3, [pc, #68]	; (40098c <FrameBufferGet+0x60>)
  400948:	681b      	ldr	r3, [r3, #0]
  40094a:	4a11      	ldr	r2, [pc, #68]	; (400990 <FrameBufferGet+0x64>)
  40094c:	5cd2      	ldrb	r2, [r2, r3]
  40094e:	687b      	ldr	r3, [r7, #4]
  400950:	701a      	strb	r2, [r3, #0]
	FrameBufferOut = (FrameBufferOut + 1) % FRAME_BUFFER_SIZE;
  400952:	4b0e      	ldr	r3, [pc, #56]	; (40098c <FrameBufferGet+0x60>)
  400954:	681b      	ldr	r3, [r3, #0]
  400956:	1c5a      	adds	r2, r3, #1
  400958:	4b0e      	ldr	r3, [pc, #56]	; (400994 <FrameBufferGet+0x68>)
  40095a:	fb83 1302 	smull	r1, r3, r3, r2
  40095e:	1219      	asrs	r1, r3, #8
  400960:	17d3      	asrs	r3, r2, #31
  400962:	1acb      	subs	r3, r1, r3
  400964:	f240 31e9 	movw	r1, #1001	; 0x3e9
  400968:	fb01 f303 	mul.w	r3, r1, r3
  40096c:	1ad3      	subs	r3, r2, r3
  40096e:	4a07      	ldr	r2, [pc, #28]	; (40098c <FrameBufferGet+0x60>)
  400970:	6013      	str	r3, [r2, #0]
	FrameBufferUse--;
  400972:	4b09      	ldr	r3, [pc, #36]	; (400998 <FrameBufferGet+0x6c>)
  400974:	681b      	ldr	r3, [r3, #0]
  400976:	3b01      	subs	r3, #1
  400978:	4a07      	ldr	r2, [pc, #28]	; (400998 <FrameBufferGet+0x6c>)
  40097a:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  40097c:	2300      	movs	r3, #0
}
  40097e:	4618      	mov	r0, r3
  400980:	370c      	adds	r7, #12
  400982:	46bd      	mov	sp, r7
  400984:	bc80      	pop	{r7}
  400986:	4770      	bx	lr
  400988:	20000f9c 	.word	0x20000f9c
  40098c:	20000f90 	.word	0x20000f90
  400990:	200004dc 	.word	0x200004dc
  400994:	4178749f 	.word	0x4178749f
  400998:	20000fa0 	.word	0x20000fa0

0040099c <FrameBufferInfoInit>:
	*old = FrameBuffer[FrameBufferOut];
	return 0; // No errors
}

void FrameBufferInfoInit(void)
{
  40099c:	b480      	push	{r7}
  40099e:	af00      	add	r7, sp, #0
	FrameBufferInfoIn = FrameBufferInfoOut = 0;
  4009a0:	4b06      	ldr	r3, [pc, #24]	; (4009bc <FrameBufferInfoInit+0x20>)
  4009a2:	2200      	movs	r2, #0
  4009a4:	601a      	str	r2, [r3, #0]
  4009a6:	4b05      	ldr	r3, [pc, #20]	; (4009bc <FrameBufferInfoInit+0x20>)
  4009a8:	681b      	ldr	r3, [r3, #0]
  4009aa:	4a05      	ldr	r2, [pc, #20]	; (4009c0 <FrameBufferInfoInit+0x24>)
  4009ac:	6013      	str	r3, [r2, #0]
	FrameBufferInfoUse = 0;
  4009ae:	4b05      	ldr	r3, [pc, #20]	; (4009c4 <FrameBufferInfoInit+0x28>)
  4009b0:	2200      	movs	r2, #0
  4009b2:	601a      	str	r2, [r3, #0]
}
  4009b4:	bf00      	nop
  4009b6:	46bd      	mov	sp, r7
  4009b8:	bc80      	pop	{r7}
  4009ba:	4770      	bx	lr
  4009bc:	20000f98 	.word	0x20000f98
  4009c0:	20000f94 	.word	0x20000f94
  4009c4:	200004cc 	.word	0x200004cc

004009c8 <FrameBufferInfoPut>:

int FrameBufferInfoPut(int ind, uint8_t typ, int len)
{
  4009c8:	b490      	push	{r4, r7}
  4009ca:	b084      	sub	sp, #16
  4009cc:	af00      	add	r7, sp, #0
  4009ce:	60f8      	str	r0, [r7, #12]
  4009d0:	460b      	mov	r3, r1
  4009d2:	607a      	str	r2, [r7, #4]
  4009d4:	72fb      	strb	r3, [r7, #11]
	
	if(FrameBufferInfoIn == (( FrameBufferInfoOut -1 + FRAME_BUFFER_INFO_SIZE) % FRAME_BUFFER_INFO_SIZE))
  4009d6:	4b2a      	ldr	r3, [pc, #168]	; (400a80 <FrameBufferInfoPut+0xb8>)
  4009d8:	681b      	ldr	r3, [r3, #0]
  4009da:	f103 0232 	add.w	r2, r3, #50	; 0x32
  4009de:	4b29      	ldr	r3, [pc, #164]	; (400a84 <FrameBufferInfoPut+0xbc>)
  4009e0:	fb82 3403 	smull	r3, r4, r2, r3
  4009e4:	1913      	adds	r3, r2, r4
  4009e6:	1159      	asrs	r1, r3, #5
  4009e8:	17d3      	asrs	r3, r2, #31
  4009ea:	1ac9      	subs	r1, r1, r3
  4009ec:	460b      	mov	r3, r1
  4009ee:	005b      	lsls	r3, r3, #1
  4009f0:	440b      	add	r3, r1
  4009f2:	0119      	lsls	r1, r3, #4
  4009f4:	440b      	add	r3, r1
  4009f6:	1ad1      	subs	r1, r2, r3
  4009f8:	4b23      	ldr	r3, [pc, #140]	; (400a88 <FrameBufferInfoPut+0xc0>)
  4009fa:	681b      	ldr	r3, [r3, #0]
  4009fc:	4299      	cmp	r1, r3
  4009fe:	d102      	bne.n	400a06 <FrameBufferInfoPut+0x3e>
	{
		return -1; // FrameBufferInfo Full
  400a00:	f04f 33ff 	mov.w	r3, #4294967295
  400a04:	e037      	b.n	400a76 <FrameBufferInfoPut+0xae>
	}

	FrameBufferInfo[FrameBufferInfoIn].index = ind;
  400a06:	4b20      	ldr	r3, [pc, #128]	; (400a88 <FrameBufferInfoPut+0xc0>)
  400a08:	681a      	ldr	r2, [r3, #0]
  400a0a:	4920      	ldr	r1, [pc, #128]	; (400a8c <FrameBufferInfoPut+0xc4>)
  400a0c:	4613      	mov	r3, r2
  400a0e:	005b      	lsls	r3, r3, #1
  400a10:	4413      	add	r3, r2
  400a12:	009b      	lsls	r3, r3, #2
  400a14:	440b      	add	r3, r1
  400a16:	68fa      	ldr	r2, [r7, #12]
  400a18:	601a      	str	r2, [r3, #0]
	FrameBufferInfo[FrameBufferInfoIn].type = typ;
  400a1a:	4b1b      	ldr	r3, [pc, #108]	; (400a88 <FrameBufferInfoPut+0xc0>)
  400a1c:	681a      	ldr	r2, [r3, #0]
  400a1e:	491b      	ldr	r1, [pc, #108]	; (400a8c <FrameBufferInfoPut+0xc4>)
  400a20:	4613      	mov	r3, r2
  400a22:	005b      	lsls	r3, r3, #1
  400a24:	4413      	add	r3, r2
  400a26:	009b      	lsls	r3, r3, #2
  400a28:	440b      	add	r3, r1
  400a2a:	3304      	adds	r3, #4
  400a2c:	7afa      	ldrb	r2, [r7, #11]
  400a2e:	701a      	strb	r2, [r3, #0]
	FrameBufferInfo[FrameBufferInfoIn].length = len;
  400a30:	4b15      	ldr	r3, [pc, #84]	; (400a88 <FrameBufferInfoPut+0xc0>)
  400a32:	681a      	ldr	r2, [r3, #0]
  400a34:	4915      	ldr	r1, [pc, #84]	; (400a8c <FrameBufferInfoPut+0xc4>)
  400a36:	4613      	mov	r3, r2
  400a38:	005b      	lsls	r3, r3, #1
  400a3a:	4413      	add	r3, r2
  400a3c:	009b      	lsls	r3, r3, #2
  400a3e:	440b      	add	r3, r1
  400a40:	3308      	adds	r3, #8
  400a42:	687a      	ldr	r2, [r7, #4]
  400a44:	601a      	str	r2, [r3, #0]
	FrameBufferInfoIn = (FrameBufferInfoIn + 1) % FRAME_BUFFER_INFO_SIZE;
  400a46:	4b10      	ldr	r3, [pc, #64]	; (400a88 <FrameBufferInfoPut+0xc0>)
  400a48:	681b      	ldr	r3, [r3, #0]
  400a4a:	1c5a      	adds	r2, r3, #1
  400a4c:	4b0d      	ldr	r3, [pc, #52]	; (400a84 <FrameBufferInfoPut+0xbc>)
  400a4e:	fb82 3403 	smull	r3, r4, r2, r3
  400a52:	1913      	adds	r3, r2, r4
  400a54:	1159      	asrs	r1, r3, #5
  400a56:	17d3      	asrs	r3, r2, #31
  400a58:	1ac9      	subs	r1, r1, r3
  400a5a:	460b      	mov	r3, r1
  400a5c:	005b      	lsls	r3, r3, #1
  400a5e:	440b      	add	r3, r1
  400a60:	0119      	lsls	r1, r3, #4
  400a62:	440b      	add	r3, r1
  400a64:	1ad1      	subs	r1, r2, r3
  400a66:	4b08      	ldr	r3, [pc, #32]	; (400a88 <FrameBufferInfoPut+0xc0>)
  400a68:	6019      	str	r1, [r3, #0]
	FrameBufferInfoUse++;
  400a6a:	4b09      	ldr	r3, [pc, #36]	; (400a90 <FrameBufferInfoPut+0xc8>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	3301      	adds	r3, #1
  400a70:	4a07      	ldr	r2, [pc, #28]	; (400a90 <FrameBufferInfoPut+0xc8>)
  400a72:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400a74:	2300      	movs	r3, #0
}
  400a76:	4618      	mov	r0, r3
  400a78:	3710      	adds	r7, #16
  400a7a:	46bd      	mov	sp, r7
  400a7c:	bc90      	pop	{r4, r7}
  400a7e:	4770      	bx	lr
  400a80:	20000f98 	.word	0x20000f98
  400a84:	a0a0a0a1 	.word	0xa0a0a0a1
  400a88:	20000f94 	.word	0x20000f94
  400a8c:	200008c8 	.word	0x200008c8
  400a90:	200004cc 	.word	0x200004cc

00400a94 <FrameBufferInfoGetFull>:
	FrameBufferInfoUse--;
	return 0; // No errors
}

int FrameBufferInfoGetFull(struct frame_info * info)
{
  400a94:	b490      	push	{r4, r7}
  400a96:	b082      	sub	sp, #8
  400a98:	af00      	add	r7, sp, #0
  400a9a:	6078      	str	r0, [r7, #4]
	if(FrameBufferInfoIn == FrameBufferInfoOut)
  400a9c:	4b19      	ldr	r3, [pc, #100]	; (400b04 <FrameBufferInfoGetFull+0x70>)
  400a9e:	681a      	ldr	r2, [r3, #0]
  400aa0:	4b19      	ldr	r3, [pc, #100]	; (400b08 <FrameBufferInfoGetFull+0x74>)
  400aa2:	681b      	ldr	r3, [r3, #0]
  400aa4:	429a      	cmp	r2, r3
  400aa6:	d102      	bne.n	400aae <FrameBufferInfoGetFull+0x1a>
	{
		return -1; // FrameBufferInfo Empty - nothing to get
  400aa8:	f04f 33ff 	mov.w	r3, #4294967295
  400aac:	e024      	b.n	400af8 <FrameBufferInfoGetFull+0x64>
	}

	*info = FrameBufferInfo[FrameBufferInfoOut];
  400aae:	4b16      	ldr	r3, [pc, #88]	; (400b08 <FrameBufferInfoGetFull+0x74>)
  400ab0:	681a      	ldr	r2, [r3, #0]
  400ab2:	6878      	ldr	r0, [r7, #4]
  400ab4:	4915      	ldr	r1, [pc, #84]	; (400b0c <FrameBufferInfoGetFull+0x78>)
  400ab6:	4613      	mov	r3, r2
  400ab8:	005b      	lsls	r3, r3, #1
  400aba:	4413      	add	r3, r2
  400abc:	009b      	lsls	r3, r3, #2
  400abe:	18ca      	adds	r2, r1, r3
  400ac0:	4603      	mov	r3, r0
  400ac2:	ca07      	ldmia	r2, {r0, r1, r2}
  400ac4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	FrameBufferInfoOut = (FrameBufferInfoOut + 1) % FRAME_BUFFER_INFO_SIZE;
  400ac8:	4b0f      	ldr	r3, [pc, #60]	; (400b08 <FrameBufferInfoGetFull+0x74>)
  400aca:	681b      	ldr	r3, [r3, #0]
  400acc:	1c5a      	adds	r2, r3, #1
  400ace:	4b10      	ldr	r3, [pc, #64]	; (400b10 <FrameBufferInfoGetFull+0x7c>)
  400ad0:	fb82 3403 	smull	r3, r4, r2, r3
  400ad4:	1913      	adds	r3, r2, r4
  400ad6:	1159      	asrs	r1, r3, #5
  400ad8:	17d3      	asrs	r3, r2, #31
  400ada:	1ac9      	subs	r1, r1, r3
  400adc:	460b      	mov	r3, r1
  400ade:	005b      	lsls	r3, r3, #1
  400ae0:	440b      	add	r3, r1
  400ae2:	0119      	lsls	r1, r3, #4
  400ae4:	440b      	add	r3, r1
  400ae6:	1ad1      	subs	r1, r2, r3
  400ae8:	4b07      	ldr	r3, [pc, #28]	; (400b08 <FrameBufferInfoGetFull+0x74>)
  400aea:	6019      	str	r1, [r3, #0]
	FrameBufferInfoUse--;
  400aec:	4b09      	ldr	r3, [pc, #36]	; (400b14 <FrameBufferInfoGetFull+0x80>)
  400aee:	681b      	ldr	r3, [r3, #0]
  400af0:	3b01      	subs	r3, #1
  400af2:	4a08      	ldr	r2, [pc, #32]	; (400b14 <FrameBufferInfoGetFull+0x80>)
  400af4:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400af6:	2300      	movs	r3, #0
}
  400af8:	4618      	mov	r0, r3
  400afa:	3708      	adds	r7, #8
  400afc:	46bd      	mov	sp, r7
  400afe:	bc90      	pop	{r4, r7}
  400b00:	4770      	bx	lr
  400b02:	bf00      	nop
  400b04:	20000f94 	.word	0x20000f94
  400b08:	20000f98 	.word	0x20000f98
  400b0c:	200008c8 	.word	0x200008c8
  400b10:	a0a0a0a1 	.word	0xa0a0a0a1
  400b14:	200004cc 	.word	0x200004cc

00400b18 <MessageBufferInit>:

void MessageBufferInit(void)
{
  400b18:	b480      	push	{r7}
  400b1a:	af00      	add	r7, sp, #0
	MessageBufferIn = MessageBufferOut = 0;
  400b1c:	4b06      	ldr	r3, [pc, #24]	; (400b38 <MessageBufferInit+0x20>)
  400b1e:	2200      	movs	r2, #0
  400b20:	601a      	str	r2, [r3, #0]
  400b22:	4b05      	ldr	r3, [pc, #20]	; (400b38 <MessageBufferInit+0x20>)
  400b24:	681b      	ldr	r3, [r3, #0]
  400b26:	4a05      	ldr	r2, [pc, #20]	; (400b3c <MessageBufferInit+0x24>)
  400b28:	6013      	str	r3, [r2, #0]
	MessageBufferUse = 0;
  400b2a:	4b05      	ldr	r3, [pc, #20]	; (400b40 <MessageBufferInit+0x28>)
  400b2c:	2200      	movs	r2, #0
  400b2e:	601a      	str	r2, [r3, #0]
}
  400b30:	bf00      	nop
  400b32:	46bd      	mov	sp, r7
  400b34:	bc80      	pop	{r7}
  400b36:	4770      	bx	lr
  400b38:	20000b30 	.word	0x20000b30
  400b3c:	200004d4 	.word	0x200004d4
  400b40:	200004d0 	.word	0x200004d0

00400b44 <MessageBufferPut>:

int MessageBufferPut(uint8_t new)
{
  400b44:	b480      	push	{r7}
  400b46:	b083      	sub	sp, #12
  400b48:	af00      	add	r7, sp, #0
  400b4a:	4603      	mov	r3, r0
  400b4c:	71fb      	strb	r3, [r7, #7]
	if(MessageBufferIn == (( MessageBufferOut - 1 + MESSAGE_BUFFER_SIZE) % MESSAGE_BUFFER_SIZE))
  400b4e:	4b1b      	ldr	r3, [pc, #108]	; (400bbc <MessageBufferPut+0x78>)
  400b50:	681b      	ldr	r3, [r3, #0]
  400b52:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
  400b56:	4b1a      	ldr	r3, [pc, #104]	; (400bc0 <MessageBufferPut+0x7c>)
  400b58:	fb83 1302 	smull	r1, r3, r3, r2
  400b5c:	1199      	asrs	r1, r3, #6
  400b5e:	17d3      	asrs	r3, r2, #31
  400b60:	1acb      	subs	r3, r1, r3
  400b62:	f240 11f5 	movw	r1, #501	; 0x1f5
  400b66:	fb01 f303 	mul.w	r3, r1, r3
  400b6a:	1ad3      	subs	r3, r2, r3
  400b6c:	4a15      	ldr	r2, [pc, #84]	; (400bc4 <MessageBufferPut+0x80>)
  400b6e:	6812      	ldr	r2, [r2, #0]
  400b70:	4293      	cmp	r3, r2
  400b72:	d102      	bne.n	400b7a <MessageBufferPut+0x36>
	{
		return -1; // MessageBuffer Full
  400b74:	f04f 33ff 	mov.w	r3, #4294967295
  400b78:	e01a      	b.n	400bb0 <MessageBufferPut+0x6c>
	}

	MessageBuffer[MessageBufferIn] = new;
  400b7a:	4b12      	ldr	r3, [pc, #72]	; (400bc4 <MessageBufferPut+0x80>)
  400b7c:	681b      	ldr	r3, [r3, #0]
  400b7e:	4912      	ldr	r1, [pc, #72]	; (400bc8 <MessageBufferPut+0x84>)
  400b80:	79fa      	ldrb	r2, [r7, #7]
  400b82:	54ca      	strb	r2, [r1, r3]
	MessageBufferIn = (MessageBufferIn + 1) % MESSAGE_BUFFER_SIZE;
  400b84:	4b0f      	ldr	r3, [pc, #60]	; (400bc4 <MessageBufferPut+0x80>)
  400b86:	681b      	ldr	r3, [r3, #0]
  400b88:	1c5a      	adds	r2, r3, #1
  400b8a:	4b0d      	ldr	r3, [pc, #52]	; (400bc0 <MessageBufferPut+0x7c>)
  400b8c:	fb83 1302 	smull	r1, r3, r3, r2
  400b90:	1199      	asrs	r1, r3, #6
  400b92:	17d3      	asrs	r3, r2, #31
  400b94:	1acb      	subs	r3, r1, r3
  400b96:	f240 11f5 	movw	r1, #501	; 0x1f5
  400b9a:	fb01 f303 	mul.w	r3, r1, r3
  400b9e:	1ad3      	subs	r3, r2, r3
  400ba0:	4a08      	ldr	r2, [pc, #32]	; (400bc4 <MessageBufferPut+0x80>)
  400ba2:	6013      	str	r3, [r2, #0]
	MessageBufferUse++;
  400ba4:	4b09      	ldr	r3, [pc, #36]	; (400bcc <MessageBufferPut+0x88>)
  400ba6:	681b      	ldr	r3, [r3, #0]
  400ba8:	3301      	adds	r3, #1
  400baa:	4a08      	ldr	r2, [pc, #32]	; (400bcc <MessageBufferPut+0x88>)
  400bac:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400bae:	2300      	movs	r3, #0
}
  400bb0:	4618      	mov	r0, r3
  400bb2:	370c      	adds	r7, #12
  400bb4:	46bd      	mov	sp, r7
  400bb6:	bc80      	pop	{r7}
  400bb8:	4770      	bx	lr
  400bba:	bf00      	nop
  400bbc:	20000b30 	.word	0x20000b30
  400bc0:	20b3dd41 	.word	0x20b3dd41
  400bc4:	200004d4 	.word	0x200004d4
  400bc8:	20000d98 	.word	0x20000d98
  400bcc:	200004d0 	.word	0x200004d0

00400bd0 <MessageBufferInfoInit>:
}



void MessageBufferInfoInit(void)
{
  400bd0:	b480      	push	{r7}
  400bd2:	af00      	add	r7, sp, #0
	MessageBufferInfoIn = MessageBufferInfoOut = 0;
  400bd4:	4b06      	ldr	r3, [pc, #24]	; (400bf0 <MessageBufferInfoInit+0x20>)
  400bd6:	2200      	movs	r2, #0
  400bd8:	601a      	str	r2, [r3, #0]
  400bda:	4b05      	ldr	r3, [pc, #20]	; (400bf0 <MessageBufferInfoInit+0x20>)
  400bdc:	681b      	ldr	r3, [r3, #0]
  400bde:	4a05      	ldr	r2, [pc, #20]	; (400bf4 <MessageBufferInfoInit+0x24>)
  400be0:	6013      	str	r3, [r2, #0]
	MessageBufferInfoUse = 0;
  400be2:	4b05      	ldr	r3, [pc, #20]	; (400bf8 <MessageBufferInfoInit+0x28>)
  400be4:	2200      	movs	r2, #0
  400be6:	601a      	str	r2, [r3, #0]
}
  400be8:	bf00      	nop
  400bea:	46bd      	mov	sp, r7
  400bec:	bc80      	pop	{r7}
  400bee:	4770      	bx	lr
  400bf0:	200004d8 	.word	0x200004d8
  400bf4:	20000b2c 	.word	0x20000b2c
  400bf8:	200004c8 	.word	0x200004c8

00400bfc <MessageBufferInfoPut>:

int MessageBufferInfoPut(int ind, uint8_t cmd, int len)
{
  400bfc:	b490      	push	{r4, r7}
  400bfe:	b084      	sub	sp, #16
  400c00:	af00      	add	r7, sp, #0
  400c02:	60f8      	str	r0, [r7, #12]
  400c04:	460b      	mov	r3, r1
  400c06:	607a      	str	r2, [r7, #4]
  400c08:	72fb      	strb	r3, [r7, #11]
	if(MessageBufferInfoIn == (( MessageBufferInfoOut - 1 + MESSAGE_BUFFER_INFO_SIZE) % MESSAGE_BUFFER_INFO_SIZE))
  400c0a:	4b2a      	ldr	r3, [pc, #168]	; (400cb4 <MessageBufferInfoPut+0xb8>)
  400c0c:	681b      	ldr	r3, [r3, #0]
  400c0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
  400c12:	4b29      	ldr	r3, [pc, #164]	; (400cb8 <MessageBufferInfoPut+0xbc>)
  400c14:	fb82 3403 	smull	r3, r4, r2, r3
  400c18:	1913      	adds	r3, r2, r4
  400c1a:	1159      	asrs	r1, r3, #5
  400c1c:	17d3      	asrs	r3, r2, #31
  400c1e:	1ac9      	subs	r1, r1, r3
  400c20:	460b      	mov	r3, r1
  400c22:	005b      	lsls	r3, r3, #1
  400c24:	440b      	add	r3, r1
  400c26:	0119      	lsls	r1, r3, #4
  400c28:	440b      	add	r3, r1
  400c2a:	1ad1      	subs	r1, r2, r3
  400c2c:	4b23      	ldr	r3, [pc, #140]	; (400cbc <MessageBufferInfoPut+0xc0>)
  400c2e:	681b      	ldr	r3, [r3, #0]
  400c30:	4299      	cmp	r1, r3
  400c32:	d102      	bne.n	400c3a <MessageBufferInfoPut+0x3e>
	{
		return -1; // MessageBufferInfo Full
  400c34:	f04f 33ff 	mov.w	r3, #4294967295
  400c38:	e037      	b.n	400caa <MessageBufferInfoPut+0xae>
	}

	MessageBufferInfo[MessageBufferInfoIn].index = ind;
  400c3a:	4b20      	ldr	r3, [pc, #128]	; (400cbc <MessageBufferInfoPut+0xc0>)
  400c3c:	681a      	ldr	r2, [r3, #0]
  400c3e:	4920      	ldr	r1, [pc, #128]	; (400cc0 <MessageBufferInfoPut+0xc4>)
  400c40:	4613      	mov	r3, r2
  400c42:	005b      	lsls	r3, r3, #1
  400c44:	4413      	add	r3, r2
  400c46:	009b      	lsls	r3, r3, #2
  400c48:	440b      	add	r3, r1
  400c4a:	68fa      	ldr	r2, [r7, #12]
  400c4c:	601a      	str	r2, [r3, #0]
	MessageBufferInfo[MessageBufferInfoIn].command = cmd;
  400c4e:	4b1b      	ldr	r3, [pc, #108]	; (400cbc <MessageBufferInfoPut+0xc0>)
  400c50:	681a      	ldr	r2, [r3, #0]
  400c52:	491b      	ldr	r1, [pc, #108]	; (400cc0 <MessageBufferInfoPut+0xc4>)
  400c54:	4613      	mov	r3, r2
  400c56:	005b      	lsls	r3, r3, #1
  400c58:	4413      	add	r3, r2
  400c5a:	009b      	lsls	r3, r3, #2
  400c5c:	440b      	add	r3, r1
  400c5e:	3304      	adds	r3, #4
  400c60:	7afa      	ldrb	r2, [r7, #11]
  400c62:	701a      	strb	r2, [r3, #0]
	MessageBufferInfo[MessageBufferInfoIn].length = len;
  400c64:	4b15      	ldr	r3, [pc, #84]	; (400cbc <MessageBufferInfoPut+0xc0>)
  400c66:	681a      	ldr	r2, [r3, #0]
  400c68:	4915      	ldr	r1, [pc, #84]	; (400cc0 <MessageBufferInfoPut+0xc4>)
  400c6a:	4613      	mov	r3, r2
  400c6c:	005b      	lsls	r3, r3, #1
  400c6e:	4413      	add	r3, r2
  400c70:	009b      	lsls	r3, r3, #2
  400c72:	440b      	add	r3, r1
  400c74:	3308      	adds	r3, #8
  400c76:	687a      	ldr	r2, [r7, #4]
  400c78:	601a      	str	r2, [r3, #0]
	MessageBufferInfoIn = (MessageBufferInfoIn + 1) % MESSAGE_BUFFER_INFO_SIZE;
  400c7a:	4b10      	ldr	r3, [pc, #64]	; (400cbc <MessageBufferInfoPut+0xc0>)
  400c7c:	681b      	ldr	r3, [r3, #0]
  400c7e:	1c5a      	adds	r2, r3, #1
  400c80:	4b0d      	ldr	r3, [pc, #52]	; (400cb8 <MessageBufferInfoPut+0xbc>)
  400c82:	fb82 3403 	smull	r3, r4, r2, r3
  400c86:	1913      	adds	r3, r2, r4
  400c88:	1159      	asrs	r1, r3, #5
  400c8a:	17d3      	asrs	r3, r2, #31
  400c8c:	1ac9      	subs	r1, r1, r3
  400c8e:	460b      	mov	r3, r1
  400c90:	005b      	lsls	r3, r3, #1
  400c92:	440b      	add	r3, r1
  400c94:	0119      	lsls	r1, r3, #4
  400c96:	440b      	add	r3, r1
  400c98:	1ad1      	subs	r1, r2, r3
  400c9a:	4b08      	ldr	r3, [pc, #32]	; (400cbc <MessageBufferInfoPut+0xc0>)
  400c9c:	6019      	str	r1, [r3, #0]
	MessageBufferInfoUse++;
  400c9e:	4b09      	ldr	r3, [pc, #36]	; (400cc4 <MessageBufferInfoPut+0xc8>)
  400ca0:	681b      	ldr	r3, [r3, #0]
  400ca2:	3301      	adds	r3, #1
  400ca4:	4a07      	ldr	r2, [pc, #28]	; (400cc4 <MessageBufferInfoPut+0xc8>)
  400ca6:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400ca8:	2300      	movs	r3, #0
}
  400caa:	4618      	mov	r0, r3
  400cac:	3710      	adds	r7, #16
  400cae:	46bd      	mov	sp, r7
  400cb0:	bc90      	pop	{r4, r7}
  400cb2:	4770      	bx	lr
  400cb4:	200004d8 	.word	0x200004d8
  400cb8:	a0a0a0a1 	.word	0xa0a0a0a1
  400cbc:	20000b2c 	.word	0x20000b2c
  400cc0:	20000b34 	.word	0x20000b34
  400cc4:	200004c8 	.word	0x200004c8

00400cc8 <MessageBufferInfoGetFull>:
	MessageBufferInfoUse--;
	return 0; // No errors
}

int MessageBufferInfoGetFull(struct message_info * info)
{
  400cc8:	b490      	push	{r4, r7}
  400cca:	b082      	sub	sp, #8
  400ccc:	af00      	add	r7, sp, #0
  400cce:	6078      	str	r0, [r7, #4]
	if(MessageBufferInfoIn == MessageBufferInfoOut)
  400cd0:	4b19      	ldr	r3, [pc, #100]	; (400d38 <MessageBufferInfoGetFull+0x70>)
  400cd2:	681a      	ldr	r2, [r3, #0]
  400cd4:	4b19      	ldr	r3, [pc, #100]	; (400d3c <MessageBufferInfoGetFull+0x74>)
  400cd6:	681b      	ldr	r3, [r3, #0]
  400cd8:	429a      	cmp	r2, r3
  400cda:	d102      	bne.n	400ce2 <MessageBufferInfoGetFull+0x1a>
	{
		return -1; // MessageBufferInfo Empty - nothing to get
  400cdc:	f04f 33ff 	mov.w	r3, #4294967295
  400ce0:	e024      	b.n	400d2c <MessageBufferInfoGetFull+0x64>
	}

	*info = MessageBufferInfo[MessageBufferInfoOut];
  400ce2:	4b16      	ldr	r3, [pc, #88]	; (400d3c <MessageBufferInfoGetFull+0x74>)
  400ce4:	681a      	ldr	r2, [r3, #0]
  400ce6:	6878      	ldr	r0, [r7, #4]
  400ce8:	4915      	ldr	r1, [pc, #84]	; (400d40 <MessageBufferInfoGetFull+0x78>)
  400cea:	4613      	mov	r3, r2
  400cec:	005b      	lsls	r3, r3, #1
  400cee:	4413      	add	r3, r2
  400cf0:	009b      	lsls	r3, r3, #2
  400cf2:	18ca      	adds	r2, r1, r3
  400cf4:	4603      	mov	r3, r0
  400cf6:	ca07      	ldmia	r2, {r0, r1, r2}
  400cf8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	MessageBufferInfoOut = (MessageBufferInfoOut + 1) % MESSAGE_BUFFER_INFO_SIZE;
  400cfc:	4b0f      	ldr	r3, [pc, #60]	; (400d3c <MessageBufferInfoGetFull+0x74>)
  400cfe:	681b      	ldr	r3, [r3, #0]
  400d00:	1c5a      	adds	r2, r3, #1
  400d02:	4b10      	ldr	r3, [pc, #64]	; (400d44 <MessageBufferInfoGetFull+0x7c>)
  400d04:	fb82 3403 	smull	r3, r4, r2, r3
  400d08:	1913      	adds	r3, r2, r4
  400d0a:	1159      	asrs	r1, r3, #5
  400d0c:	17d3      	asrs	r3, r2, #31
  400d0e:	1ac9      	subs	r1, r1, r3
  400d10:	460b      	mov	r3, r1
  400d12:	005b      	lsls	r3, r3, #1
  400d14:	440b      	add	r3, r1
  400d16:	0119      	lsls	r1, r3, #4
  400d18:	440b      	add	r3, r1
  400d1a:	1ad1      	subs	r1, r2, r3
  400d1c:	4b07      	ldr	r3, [pc, #28]	; (400d3c <MessageBufferInfoGetFull+0x74>)
  400d1e:	6019      	str	r1, [r3, #0]
	MessageBufferInfoUse--;
  400d20:	4b09      	ldr	r3, [pc, #36]	; (400d48 <MessageBufferInfoGetFull+0x80>)
  400d22:	681b      	ldr	r3, [r3, #0]
  400d24:	3b01      	subs	r3, #1
  400d26:	4a08      	ldr	r2, [pc, #32]	; (400d48 <MessageBufferInfoGetFull+0x80>)
  400d28:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400d2a:	2300      	movs	r3, #0
}
  400d2c:	4618      	mov	r0, r3
  400d2e:	3708      	adds	r7, #8
  400d30:	46bd      	mov	sp, r7
  400d32:	bc90      	pop	{r4, r7}
  400d34:	4770      	bx	lr
  400d36:	bf00      	nop
  400d38:	20000b2c 	.word	0x20000b2c
  400d3c:	200004d8 	.word	0x200004d8
  400d40:	20000b34 	.word	0x20000b34
  400d44:	a0a0a0a1 	.word	0xa0a0a0a1
  400d48:	200004c8 	.word	0x200004c8

00400d4c <reg_int_cb>:
//SWARM ROBOT CONFIGURATION/////////////////////////////////////////////

extern uint32_t systemTimestamp;

static inline int reg_int_cb(struct int_param_s *int_param)
{
  400d4c:	b480      	push	{r7}
  400d4e:	b083      	sub	sp, #12
  400d50:	af00      	add	r7, sp, #0
  400d52:	6078      	str	r0, [r7, #4]
	//I guess we aren't using interrupt callback
	return 0;
  400d54:	2300      	movs	r3, #0
}
  400d56:	4618      	mov	r0, r3
  400d58:	370c      	adds	r7, #12
  400d5a:	46bd      	mov	sp, r7
  400d5c:	bc80      	pop	{r7}
  400d5e:	4770      	bx	lr

00400d60 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
  400d60:	b590      	push	{r4, r7, lr}
  400d62:	b085      	sub	sp, #20
  400d64:	af00      	add	r7, sp, #0
  400d66:	4603      	mov	r3, r0
  400d68:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
  400d6a:	4b29      	ldr	r3, [pc, #164]	; (400e10 <set_int_enable+0xb0>)
  400d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  400d70:	2b00      	cmp	r3, #0
  400d72:	d01c      	beq.n	400dae <set_int_enable+0x4e>
        if (enable)
  400d74:	79fb      	ldrb	r3, [r7, #7]
  400d76:	2b00      	cmp	r3, #0
  400d78:	d002      	beq.n	400d80 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
  400d7a:	2302      	movs	r3, #2
  400d7c:	73fb      	strb	r3, [r7, #15]
  400d7e:	e001      	b.n	400d84 <set_int_enable+0x24>
        else
            tmp = 0x00;
  400d80:	2300      	movs	r3, #0
  400d82:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
  400d84:	4b22      	ldr	r3, [pc, #136]	; (400e10 <set_int_enable+0xb0>)
  400d86:	685b      	ldr	r3, [r3, #4]
  400d88:	7818      	ldrb	r0, [r3, #0]
  400d8a:	4b21      	ldr	r3, [pc, #132]	; (400e10 <set_int_enable+0xb0>)
  400d8c:	681b      	ldr	r3, [r3, #0]
  400d8e:	7c59      	ldrb	r1, [r3, #17]
  400d90:	f107 030f 	add.w	r3, r7, #15
  400d94:	2201      	movs	r2, #1
  400d96:	4c1f      	ldr	r4, [pc, #124]	; (400e14 <set_int_enable+0xb4>)
  400d98:	47a0      	blx	r4
  400d9a:	4603      	mov	r3, r0
  400d9c:	2b00      	cmp	r3, #0
  400d9e:	d002      	beq.n	400da6 <set_int_enable+0x46>
            return -1;
  400da0:	f04f 33ff 	mov.w	r3, #4294967295
  400da4:	e030      	b.n	400e08 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
  400da6:	7bfa      	ldrb	r2, [r7, #15]
  400da8:	4b19      	ldr	r3, [pc, #100]	; (400e10 <set_int_enable+0xb0>)
  400daa:	745a      	strb	r2, [r3, #17]
  400dac:	e02b      	b.n	400e06 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
  400dae:	4b18      	ldr	r3, [pc, #96]	; (400e10 <set_int_enable+0xb0>)
  400db0:	7a9b      	ldrb	r3, [r3, #10]
  400db2:	2b00      	cmp	r3, #0
  400db4:	d102      	bne.n	400dbc <set_int_enable+0x5c>
            return -1;
  400db6:	f04f 33ff 	mov.w	r3, #4294967295
  400dba:	e025      	b.n	400e08 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
  400dbc:	79fb      	ldrb	r3, [r7, #7]
  400dbe:	2b00      	cmp	r3, #0
  400dc0:	d005      	beq.n	400dce <set_int_enable+0x6e>
  400dc2:	4b13      	ldr	r3, [pc, #76]	; (400e10 <set_int_enable+0xb0>)
  400dc4:	7c5b      	ldrb	r3, [r3, #17]
  400dc6:	2b00      	cmp	r3, #0
  400dc8:	d001      	beq.n	400dce <set_int_enable+0x6e>
            return 0;
  400dca:	2300      	movs	r3, #0
  400dcc:	e01c      	b.n	400e08 <set_int_enable+0xa8>
        if (enable)
  400dce:	79fb      	ldrb	r3, [r7, #7]
  400dd0:	2b00      	cmp	r3, #0
  400dd2:	d002      	beq.n	400dda <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
  400dd4:	2301      	movs	r3, #1
  400dd6:	73fb      	strb	r3, [r7, #15]
  400dd8:	e001      	b.n	400dde <set_int_enable+0x7e>
        else
            tmp = 0x00;
  400dda:	2300      	movs	r3, #0
  400ddc:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
  400dde:	4b0c      	ldr	r3, [pc, #48]	; (400e10 <set_int_enable+0xb0>)
  400de0:	685b      	ldr	r3, [r3, #4]
  400de2:	7818      	ldrb	r0, [r3, #0]
  400de4:	4b0a      	ldr	r3, [pc, #40]	; (400e10 <set_int_enable+0xb0>)
  400de6:	681b      	ldr	r3, [r3, #0]
  400de8:	7c59      	ldrb	r1, [r3, #17]
  400dea:	f107 030f 	add.w	r3, r7, #15
  400dee:	2201      	movs	r2, #1
  400df0:	4c08      	ldr	r4, [pc, #32]	; (400e14 <set_int_enable+0xb4>)
  400df2:	47a0      	blx	r4
  400df4:	4603      	mov	r3, r0
  400df6:	2b00      	cmp	r3, #0
  400df8:	d002      	beq.n	400e00 <set_int_enable+0xa0>
            return -1;
  400dfa:	f04f 33ff 	mov.w	r3, #4294967295
  400dfe:	e003      	b.n	400e08 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
  400e00:	7bfa      	ldrb	r2, [r7, #15]
  400e02:	4b03      	ldr	r3, [pc, #12]	; (400e10 <set_int_enable+0xb0>)
  400e04:	745a      	strb	r2, [r3, #17]
    }
    return 0;
  400e06:	2300      	movs	r3, #0
}
  400e08:	4618      	mov	r0, r3
  400e0a:	3714      	adds	r7, #20
  400e0c:	46bd      	mov	sp, r7
  400e0e:	bd90      	pop	{r4, r7, pc}
  400e10:	20000000 	.word	0x20000000
  400e14:	00403d29 	.word	0x00403d29

00400e18 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
  400e18:	b590      	push	{r4, r7, lr}
  400e1a:	b085      	sub	sp, #20
  400e1c:	af00      	add	r7, sp, #0
  400e1e:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
  400e20:	2380      	movs	r3, #128	; 0x80
  400e22:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
  400e24:	4b5f      	ldr	r3, [pc, #380]	; (400fa4 <mpu_init+0x18c>)
  400e26:	685b      	ldr	r3, [r3, #4]
  400e28:	7818      	ldrb	r0, [r3, #0]
  400e2a:	4b5e      	ldr	r3, [pc, #376]	; (400fa4 <mpu_init+0x18c>)
  400e2c:	681b      	ldr	r3, [r3, #0]
  400e2e:	7d59      	ldrb	r1, [r3, #21]
  400e30:	f107 0308 	add.w	r3, r7, #8
  400e34:	2201      	movs	r2, #1
  400e36:	4c5c      	ldr	r4, [pc, #368]	; (400fa8 <mpu_init+0x190>)
  400e38:	47a0      	blx	r4
  400e3a:	4603      	mov	r3, r0
  400e3c:	2b00      	cmp	r3, #0
  400e3e:	d002      	beq.n	400e46 <mpu_init+0x2e>
        return -1;
  400e40:	f04f 33ff 	mov.w	r3, #4294967295
  400e44:	e0a9      	b.n	400f9a <mpu_init+0x182>
    delay_ms(100);
  400e46:	2064      	movs	r0, #100	; 0x64
  400e48:	4b58      	ldr	r3, [pc, #352]	; (400fac <mpu_init+0x194>)
  400e4a:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
  400e4c:	2300      	movs	r3, #0
  400e4e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
  400e50:	4b54      	ldr	r3, [pc, #336]	; (400fa4 <mpu_init+0x18c>)
  400e52:	685b      	ldr	r3, [r3, #4]
  400e54:	7818      	ldrb	r0, [r3, #0]
  400e56:	4b53      	ldr	r3, [pc, #332]	; (400fa4 <mpu_init+0x18c>)
  400e58:	681b      	ldr	r3, [r3, #0]
  400e5a:	7d59      	ldrb	r1, [r3, #21]
  400e5c:	f107 0308 	add.w	r3, r7, #8
  400e60:	2201      	movs	r2, #1
  400e62:	4c51      	ldr	r4, [pc, #324]	; (400fa8 <mpu_init+0x190>)
  400e64:	47a0      	blx	r4
  400e66:	4603      	mov	r3, r0
  400e68:	2b00      	cmp	r3, #0
  400e6a:	d002      	beq.n	400e72 <mpu_init+0x5a>
        return -1;
  400e6c:	f04f 33ff 	mov.w	r3, #4294967295
  400e70:	e093      	b.n	400f9a <mpu_init+0x182>

   st.chip_cfg.accel_half = 0;
  400e72:	4b4c      	ldr	r3, [pc, #304]	; (400fa4 <mpu_init+0x18c>)
  400e74:	2200      	movs	r2, #0
  400e76:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
  400e78:	2348      	movs	r3, #72	; 0x48
  400e7a:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
  400e7c:	4b49      	ldr	r3, [pc, #292]	; (400fa4 <mpu_init+0x18c>)
  400e7e:	685b      	ldr	r3, [r3, #4]
  400e80:	7818      	ldrb	r0, [r3, #0]
  400e82:	4b48      	ldr	r3, [pc, #288]	; (400fa4 <mpu_init+0x18c>)
  400e84:	681b      	ldr	r3, [r3, #0]
  400e86:	7a19      	ldrb	r1, [r3, #8]
  400e88:	f107 0308 	add.w	r3, r7, #8
  400e8c:	2201      	movs	r2, #1
  400e8e:	4c46      	ldr	r4, [pc, #280]	; (400fa8 <mpu_init+0x190>)
  400e90:	47a0      	blx	r4
  400e92:	4603      	mov	r3, r0
  400e94:	2b00      	cmp	r3, #0
  400e96:	d002      	beq.n	400e9e <mpu_init+0x86>
        return -1;
  400e98:	f04f 33ff 	mov.w	r3, #4294967295
  400e9c:	e07d      	b.n	400f9a <mpu_init+0x182>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
  400e9e:	4b41      	ldr	r3, [pc, #260]	; (400fa4 <mpu_init+0x18c>)
  400ea0:	22ff      	movs	r2, #255	; 0xff
  400ea2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
  400ea4:	4b3f      	ldr	r3, [pc, #252]	; (400fa4 <mpu_init+0x18c>)
  400ea6:	22ff      	movs	r2, #255	; 0xff
  400ea8:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
  400eaa:	4b3e      	ldr	r3, [pc, #248]	; (400fa4 <mpu_init+0x18c>)
  400eac:	22ff      	movs	r2, #255	; 0xff
  400eae:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
  400eb0:	4b3c      	ldr	r3, [pc, #240]	; (400fa4 <mpu_init+0x18c>)
  400eb2:	22ff      	movs	r2, #255	; 0xff
  400eb4:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
  400eb6:	4b3b      	ldr	r3, [pc, #236]	; (400fa4 <mpu_init+0x18c>)
  400eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400ebc:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
  400ebe:	4b39      	ldr	r3, [pc, #228]	; (400fa4 <mpu_init+0x18c>)
  400ec0:	22ff      	movs	r2, #255	; 0xff
  400ec2:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
  400ec4:	4b37      	ldr	r3, [pc, #220]	; (400fa4 <mpu_init+0x18c>)
  400ec6:	22ff      	movs	r2, #255	; 0xff
  400ec8:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
  400eca:	4b36      	ldr	r3, [pc, #216]	; (400fa4 <mpu_init+0x18c>)
  400ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400ed0:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
  400ed2:	4b34      	ldr	r3, [pc, #208]	; (400fa4 <mpu_init+0x18c>)
  400ed4:	2201      	movs	r2, #1
  400ed6:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
  400ed8:	4b32      	ldr	r3, [pc, #200]	; (400fa4 <mpu_init+0x18c>)
  400eda:	2201      	movs	r2, #1
  400edc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
  400ee0:	4b30      	ldr	r3, [pc, #192]	; (400fa4 <mpu_init+0x18c>)
  400ee2:	2200      	movs	r2, #0
  400ee4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
  400ee8:	4b2e      	ldr	r3, [pc, #184]	; (400fa4 <mpu_init+0x18c>)
  400eea:	2200      	movs	r2, #0
  400eec:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
  400eee:	4b2d      	ldr	r3, [pc, #180]	; (400fa4 <mpu_init+0x18c>)
  400ef0:	2200      	movs	r2, #0
  400ef2:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
  400ef4:	220c      	movs	r2, #12
  400ef6:	2100      	movs	r1, #0
  400ef8:	482d      	ldr	r0, [pc, #180]	; (400fb0 <mpu_init+0x198>)
  400efa:	4b2e      	ldr	r3, [pc, #184]	; (400fb4 <mpu_init+0x19c>)
  400efc:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
  400efe:	4b29      	ldr	r3, [pc, #164]	; (400fa4 <mpu_init+0x18c>)
  400f00:	2200      	movs	r2, #0
  400f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
  400f06:	4b27      	ldr	r3, [pc, #156]	; (400fa4 <mpu_init+0x18c>)
  400f08:	2200      	movs	r2, #0
  400f0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
  400f0e:	4b25      	ldr	r3, [pc, #148]	; (400fa4 <mpu_init+0x18c>)
  400f10:	2200      	movs	r2, #0
  400f12:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
  400f14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400f18:	4b27      	ldr	r3, [pc, #156]	; (400fb8 <mpu_init+0x1a0>)
  400f1a:	4798      	blx	r3
  400f1c:	4603      	mov	r3, r0
  400f1e:	2b00      	cmp	r3, #0
  400f20:	d002      	beq.n	400f28 <mpu_init+0x110>
        return -1;
  400f22:	f04f 33ff 	mov.w	r3, #4294967295
  400f26:	e038      	b.n	400f9a <mpu_init+0x182>
    if (mpu_set_accel_fsr(2))
  400f28:	2002      	movs	r0, #2
  400f2a:	4b24      	ldr	r3, [pc, #144]	; (400fbc <mpu_init+0x1a4>)
  400f2c:	4798      	blx	r3
  400f2e:	4603      	mov	r3, r0
  400f30:	2b00      	cmp	r3, #0
  400f32:	d002      	beq.n	400f3a <mpu_init+0x122>
        return -1;
  400f34:	f04f 33ff 	mov.w	r3, #4294967295
  400f38:	e02f      	b.n	400f9a <mpu_init+0x182>
    if (mpu_set_lpf(42))
  400f3a:	202a      	movs	r0, #42	; 0x2a
  400f3c:	4b20      	ldr	r3, [pc, #128]	; (400fc0 <mpu_init+0x1a8>)
  400f3e:	4798      	blx	r3
  400f40:	4603      	mov	r3, r0
  400f42:	2b00      	cmp	r3, #0
  400f44:	d002      	beq.n	400f4c <mpu_init+0x134>
        return -1;
  400f46:	f04f 33ff 	mov.w	r3, #4294967295
  400f4a:	e026      	b.n	400f9a <mpu_init+0x182>
    if (mpu_set_sample_rate(50))
  400f4c:	2032      	movs	r0, #50	; 0x32
  400f4e:	4b1d      	ldr	r3, [pc, #116]	; (400fc4 <mpu_init+0x1ac>)
  400f50:	4798      	blx	r3
  400f52:	4603      	mov	r3, r0
  400f54:	2b00      	cmp	r3, #0
  400f56:	d002      	beq.n	400f5e <mpu_init+0x146>
        return -1;
  400f58:	f04f 33ff 	mov.w	r3, #4294967295
  400f5c:	e01d      	b.n	400f9a <mpu_init+0x182>
    if (mpu_configure_fifo(0))
  400f5e:	2000      	movs	r0, #0
  400f60:	4b19      	ldr	r3, [pc, #100]	; (400fc8 <mpu_init+0x1b0>)
  400f62:	4798      	blx	r3
  400f64:	4603      	mov	r3, r0
  400f66:	2b00      	cmp	r3, #0
  400f68:	d002      	beq.n	400f70 <mpu_init+0x158>
        return -1;
  400f6a:	f04f 33ff 	mov.w	r3, #4294967295
  400f6e:	e014      	b.n	400f9a <mpu_init+0x182>

    if (int_param)
  400f70:	687b      	ldr	r3, [r7, #4]
  400f72:	2b00      	cmp	r3, #0
  400f74:	d002      	beq.n	400f7c <mpu_init+0x164>
        reg_int_cb(int_param);
  400f76:	6878      	ldr	r0, [r7, #4]
  400f78:	4b14      	ldr	r3, [pc, #80]	; (400fcc <mpu_init+0x1b4>)
  400f7a:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
    setup_compass();
  400f7c:	4b14      	ldr	r3, [pc, #80]	; (400fd0 <mpu_init+0x1b8>)
  400f7e:	4798      	blx	r3
    if (mpu_set_compass_sample_rate(10))
  400f80:	200a      	movs	r0, #10
  400f82:	4b14      	ldr	r3, [pc, #80]	; (400fd4 <mpu_init+0x1bc>)
  400f84:	4798      	blx	r3
  400f86:	4603      	mov	r3, r0
  400f88:	2b00      	cmp	r3, #0
  400f8a:	d002      	beq.n	400f92 <mpu_init+0x17a>
        return -1;
  400f8c:	f04f 33ff 	mov.w	r3, #4294967295
  400f90:	e003      	b.n	400f9a <mpu_init+0x182>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
  400f92:	2000      	movs	r0, #0
  400f94:	4b10      	ldr	r3, [pc, #64]	; (400fd8 <mpu_init+0x1c0>)
  400f96:	4798      	blx	r3
    return 0;
  400f98:	2300      	movs	r3, #0
}
  400f9a:	4618      	mov	r0, r3
  400f9c:	3714      	adds	r7, #20
  400f9e:	46bd      	mov	sp, r7
  400fa0:	bd90      	pop	{r4, r7, pc}
  400fa2:	bf00      	nop
  400fa4:	20000000 	.word	0x20000000
  400fa8:	00403d29 	.word	0x00403d29
  400fac:	00403cf9 	.word	0x00403cf9
  400fb0:	20000016 	.word	0x20000016
  400fb4:	00406b39 	.word	0x00406b39
  400fb8:	00401391 	.word	0x00401391
  400fbc:	004014ad 	.word	0x004014ad
  400fc0:	00401581 	.word	0x00401581
  400fc4:	00401651 	.word	0x00401651
  400fc8:	004017c5 	.word	0x004017c5
  400fcc:	00400d4d 	.word	0x00400d4d
  400fd0:	00402081 	.word	0x00402081
  400fd4:	00401741 	.word	0x00401741
  400fd8:	00401871 	.word	0x00401871

00400fdc <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
  400fdc:	b590      	push	{r4, r7, lr}
  400fde:	b085      	sub	sp, #20
  400fe0:	af00      	add	r7, sp, #0
  400fe2:	4603      	mov	r3, r0
  400fe4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
  400fe6:	79fb      	ldrb	r3, [r7, #7]
  400fe8:	2b28      	cmp	r3, #40	; 0x28
  400fea:	d902      	bls.n	400ff2 <mpu_lp_accel_mode+0x16>
        return -1;
  400fec:	f04f 33ff 	mov.w	r3, #4294967295
  400ff0:	e085      	b.n	4010fe <mpu_lp_accel_mode+0x122>

    if (!rate) {
  400ff2:	79fb      	ldrb	r3, [r7, #7]
  400ff4:	2b00      	cmp	r3, #0
  400ff6:	d11c      	bne.n	401032 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
  400ff8:	2000      	movs	r0, #0
  400ffa:	4b43      	ldr	r3, [pc, #268]	; (401108 <mpu_lp_accel_mode+0x12c>)
  400ffc:	4798      	blx	r3
        tmp[0] = 0;
  400ffe:	2300      	movs	r3, #0
  401000:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
  401002:	2307      	movs	r3, #7
  401004:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
  401006:	4b41      	ldr	r3, [pc, #260]	; (40110c <mpu_lp_accel_mode+0x130>)
  401008:	685b      	ldr	r3, [r3, #4]
  40100a:	7818      	ldrb	r0, [r3, #0]
  40100c:	4b3f      	ldr	r3, [pc, #252]	; (40110c <mpu_lp_accel_mode+0x130>)
  40100e:	681b      	ldr	r3, [r3, #0]
  401010:	7d59      	ldrb	r1, [r3, #21]
  401012:	f107 030c 	add.w	r3, r7, #12
  401016:	2202      	movs	r2, #2
  401018:	4c3d      	ldr	r4, [pc, #244]	; (401110 <mpu_lp_accel_mode+0x134>)
  40101a:	47a0      	blx	r4
  40101c:	4603      	mov	r3, r0
  40101e:	2b00      	cmp	r3, #0
  401020:	d002      	beq.n	401028 <mpu_lp_accel_mode+0x4c>
            return -1;
  401022:	f04f 33ff 	mov.w	r3, #4294967295
  401026:	e06a      	b.n	4010fe <mpu_lp_accel_mode+0x122>
        st.chip_cfg.lp_accel_mode = 0;
  401028:	4b38      	ldr	r3, [pc, #224]	; (40110c <mpu_lp_accel_mode+0x130>)
  40102a:	2200      	movs	r2, #0
  40102c:	751a      	strb	r2, [r3, #20]
        return 0;
  40102e:	2300      	movs	r3, #0
  401030:	e065      	b.n	4010fe <mpu_lp_accel_mode+0x122>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
  401032:	2001      	movs	r0, #1
  401034:	4b34      	ldr	r3, [pc, #208]	; (401108 <mpu_lp_accel_mode+0x12c>)
  401036:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
  401038:	79fb      	ldrb	r3, [r7, #7]
  40103a:	2b01      	cmp	r3, #1
  40103c:	d102      	bne.n	401044 <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
  40103e:	2302      	movs	r3, #2
  401040:	733b      	strb	r3, [r7, #12]
  401042:	e02b      	b.n	40109c <mpu_lp_accel_mode+0xc0>
    else if (rate == 2)
  401044:	79fb      	ldrb	r3, [r7, #7]
  401046:	2b02      	cmp	r3, #2
  401048:	d102      	bne.n	401050 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
  40104a:	2303      	movs	r3, #3
  40104c:	733b      	strb	r3, [r7, #12]
  40104e:	e025      	b.n	40109c <mpu_lp_accel_mode+0xc0>
    else if (rate <= 5)
  401050:	79fb      	ldrb	r3, [r7, #7]
  401052:	2b05      	cmp	r3, #5
  401054:	d802      	bhi.n	40105c <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
  401056:	2304      	movs	r3, #4
  401058:	733b      	strb	r3, [r7, #12]
  40105a:	e01f      	b.n	40109c <mpu_lp_accel_mode+0xc0>
    else if (rate <= 10)
  40105c:	79fb      	ldrb	r3, [r7, #7]
  40105e:	2b0a      	cmp	r3, #10
  401060:	d802      	bhi.n	401068 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
  401062:	2305      	movs	r3, #5
  401064:	733b      	strb	r3, [r7, #12]
  401066:	e019      	b.n	40109c <mpu_lp_accel_mode+0xc0>
    else if (rate <= 20)
  401068:	79fb      	ldrb	r3, [r7, #7]
  40106a:	2b14      	cmp	r3, #20
  40106c:	d802      	bhi.n	401074 <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
  40106e:	2306      	movs	r3, #6
  401070:	733b      	strb	r3, [r7, #12]
  401072:	e013      	b.n	40109c <mpu_lp_accel_mode+0xc0>
    else if (rate <= 40)
  401074:	79fb      	ldrb	r3, [r7, #7]
  401076:	2b28      	cmp	r3, #40	; 0x28
  401078:	d802      	bhi.n	401080 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
  40107a:	2307      	movs	r3, #7
  40107c:	733b      	strb	r3, [r7, #12]
  40107e:	e00d      	b.n	40109c <mpu_lp_accel_mode+0xc0>
    else if (rate <= 80)
  401080:	79fb      	ldrb	r3, [r7, #7]
  401082:	2b50      	cmp	r3, #80	; 0x50
  401084:	d802      	bhi.n	40108c <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
  401086:	2308      	movs	r3, #8
  401088:	733b      	strb	r3, [r7, #12]
  40108a:	e007      	b.n	40109c <mpu_lp_accel_mode+0xc0>
    else if (rate <= 160)
  40108c:	79fb      	ldrb	r3, [r7, #7]
  40108e:	2ba0      	cmp	r3, #160	; 0xa0
  401090:	d802      	bhi.n	401098 <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
  401092:	2309      	movs	r3, #9
  401094:	733b      	strb	r3, [r7, #12]
  401096:	e001      	b.n	40109c <mpu_lp_accel_mode+0xc0>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
  401098:	230a      	movs	r3, #10
  40109a:	733b      	strb	r3, [r7, #12]
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
  40109c:	4b1b      	ldr	r3, [pc, #108]	; (40110c <mpu_lp_accel_mode+0x130>)
  40109e:	685b      	ldr	r3, [r3, #4]
  4010a0:	7818      	ldrb	r0, [r3, #0]
  4010a2:	4b1a      	ldr	r3, [pc, #104]	; (40110c <mpu_lp_accel_mode+0x130>)
  4010a4:	681b      	ldr	r3, [r3, #0]
  4010a6:	7a59      	ldrb	r1, [r3, #9]
  4010a8:	f107 030c 	add.w	r3, r7, #12
  4010ac:	2201      	movs	r2, #1
  4010ae:	4c18      	ldr	r4, [pc, #96]	; (401110 <mpu_lp_accel_mode+0x134>)
  4010b0:	47a0      	blx	r4
  4010b2:	4603      	mov	r3, r0
  4010b4:	2b00      	cmp	r3, #0
  4010b6:	d002      	beq.n	4010be <mpu_lp_accel_mode+0xe2>
        return -1;
  4010b8:	f04f 33ff 	mov.w	r3, #4294967295
  4010bc:	e01f      	b.n	4010fe <mpu_lp_accel_mode+0x122>
    tmp[0] = BIT_LPA_CYCLE;
  4010be:	2320      	movs	r3, #32
  4010c0:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
  4010c2:	4b12      	ldr	r3, [pc, #72]	; (40110c <mpu_lp_accel_mode+0x130>)
  4010c4:	685b      	ldr	r3, [r3, #4]
  4010c6:	7818      	ldrb	r0, [r3, #0]
  4010c8:	4b10      	ldr	r3, [pc, #64]	; (40110c <mpu_lp_accel_mode+0x130>)
  4010ca:	681b      	ldr	r3, [r3, #0]
  4010cc:	7d59      	ldrb	r1, [r3, #21]
  4010ce:	f107 030c 	add.w	r3, r7, #12
  4010d2:	2201      	movs	r2, #1
  4010d4:	4c0e      	ldr	r4, [pc, #56]	; (401110 <mpu_lp_accel_mode+0x134>)
  4010d6:	47a0      	blx	r4
  4010d8:	4603      	mov	r3, r0
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d002      	beq.n	4010e4 <mpu_lp_accel_mode+0x108>
        return -1;
  4010de:	f04f 33ff 	mov.w	r3, #4294967295
  4010e2:	e00c      	b.n	4010fe <mpu_lp_accel_mode+0x122>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
  4010e4:	4b09      	ldr	r3, [pc, #36]	; (40110c <mpu_lp_accel_mode+0x130>)
  4010e6:	2208      	movs	r2, #8
  4010e8:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
  4010ea:	4b08      	ldr	r3, [pc, #32]	; (40110c <mpu_lp_accel_mode+0x130>)
  4010ec:	2200      	movs	r2, #0
  4010ee:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
  4010f0:	4b06      	ldr	r3, [pc, #24]	; (40110c <mpu_lp_accel_mode+0x130>)
  4010f2:	2201      	movs	r2, #1
  4010f4:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
  4010f6:	2000      	movs	r0, #0
  4010f8:	4b06      	ldr	r3, [pc, #24]	; (401114 <mpu_lp_accel_mode+0x138>)
  4010fa:	4798      	blx	r3

    return 0;
  4010fc:	2300      	movs	r3, #0
}
  4010fe:	4618      	mov	r0, r3
  401100:	3714      	adds	r7, #20
  401102:	46bd      	mov	sp, r7
  401104:	bd90      	pop	{r4, r7, pc}
  401106:	bf00      	nop
  401108:	00401cd9 	.word	0x00401cd9
  40110c:	20000000 	.word	0x20000000
  401110:	00403d29 	.word	0x00403d29
  401114:	004017c5 	.word	0x004017c5

00401118 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
  401118:	b590      	push	{r4, r7, lr}
  40111a:	b083      	sub	sp, #12
  40111c:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  40111e:	4b7e      	ldr	r3, [pc, #504]	; (401318 <mpu_reset_fifo+0x200>)
  401120:	7a9b      	ldrb	r3, [r3, #10]
  401122:	2b00      	cmp	r3, #0
  401124:	d102      	bne.n	40112c <mpu_reset_fifo+0x14>
        return -1;
  401126:	f04f 33ff 	mov.w	r3, #4294967295
  40112a:	e0f1      	b.n	401310 <mpu_reset_fifo+0x1f8>

    data = 0;
  40112c:	2300      	movs	r3, #0
  40112e:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401130:	4b79      	ldr	r3, [pc, #484]	; (401318 <mpu_reset_fifo+0x200>)
  401132:	685b      	ldr	r3, [r3, #4]
  401134:	7818      	ldrb	r0, [r3, #0]
  401136:	4b78      	ldr	r3, [pc, #480]	; (401318 <mpu_reset_fifo+0x200>)
  401138:	681b      	ldr	r3, [r3, #0]
  40113a:	7c59      	ldrb	r1, [r3, #17]
  40113c:	1dfb      	adds	r3, r7, #7
  40113e:	2201      	movs	r2, #1
  401140:	4c76      	ldr	r4, [pc, #472]	; (40131c <mpu_reset_fifo+0x204>)
  401142:	47a0      	blx	r4
  401144:	4603      	mov	r3, r0
  401146:	2b00      	cmp	r3, #0
  401148:	d002      	beq.n	401150 <mpu_reset_fifo+0x38>
        return -1;
  40114a:	f04f 33ff 	mov.w	r3, #4294967295
  40114e:	e0df      	b.n	401310 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
  401150:	4b71      	ldr	r3, [pc, #452]	; (401318 <mpu_reset_fifo+0x200>)
  401152:	685b      	ldr	r3, [r3, #4]
  401154:	7818      	ldrb	r0, [r3, #0]
  401156:	4b70      	ldr	r3, [pc, #448]	; (401318 <mpu_reset_fifo+0x200>)
  401158:	681b      	ldr	r3, [r3, #0]
  40115a:	7959      	ldrb	r1, [r3, #5]
  40115c:	1dfb      	adds	r3, r7, #7
  40115e:	2201      	movs	r2, #1
  401160:	4c6e      	ldr	r4, [pc, #440]	; (40131c <mpu_reset_fifo+0x204>)
  401162:	47a0      	blx	r4
  401164:	4603      	mov	r3, r0
  401166:	2b00      	cmp	r3, #0
  401168:	d002      	beq.n	401170 <mpu_reset_fifo+0x58>
        return -1;
  40116a:	f04f 33ff 	mov.w	r3, #4294967295
  40116e:	e0cf      	b.n	401310 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  401170:	4b69      	ldr	r3, [pc, #420]	; (401318 <mpu_reset_fifo+0x200>)
  401172:	685b      	ldr	r3, [r3, #4]
  401174:	7818      	ldrb	r0, [r3, #0]
  401176:	4b68      	ldr	r3, [pc, #416]	; (401318 <mpu_reset_fifo+0x200>)
  401178:	681b      	ldr	r3, [r3, #0]
  40117a:	7919      	ldrb	r1, [r3, #4]
  40117c:	1dfb      	adds	r3, r7, #7
  40117e:	2201      	movs	r2, #1
  401180:	4c66      	ldr	r4, [pc, #408]	; (40131c <mpu_reset_fifo+0x204>)
  401182:	47a0      	blx	r4
  401184:	4603      	mov	r3, r0
  401186:	2b00      	cmp	r3, #0
  401188:	d002      	beq.n	401190 <mpu_reset_fifo+0x78>
        return -1;
  40118a:	f04f 33ff 	mov.w	r3, #4294967295
  40118e:	e0bf      	b.n	401310 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
  401190:	4b61      	ldr	r3, [pc, #388]	; (401318 <mpu_reset_fifo+0x200>)
  401192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401196:	2b00      	cmp	r3, #0
  401198:	d05c      	beq.n	401254 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
  40119a:	230c      	movs	r3, #12
  40119c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  40119e:	4b5e      	ldr	r3, [pc, #376]	; (401318 <mpu_reset_fifo+0x200>)
  4011a0:	685b      	ldr	r3, [r3, #4]
  4011a2:	7818      	ldrb	r0, [r3, #0]
  4011a4:	4b5c      	ldr	r3, [pc, #368]	; (401318 <mpu_reset_fifo+0x200>)
  4011a6:	681b      	ldr	r3, [r3, #0]
  4011a8:	7919      	ldrb	r1, [r3, #4]
  4011aa:	1dfb      	adds	r3, r7, #7
  4011ac:	2201      	movs	r2, #1
  4011ae:	4c5b      	ldr	r4, [pc, #364]	; (40131c <mpu_reset_fifo+0x204>)
  4011b0:	47a0      	blx	r4
  4011b2:	4603      	mov	r3, r0
  4011b4:	2b00      	cmp	r3, #0
  4011b6:	d002      	beq.n	4011be <mpu_reset_fifo+0xa6>
            return -1;
  4011b8:	f04f 33ff 	mov.w	r3, #4294967295
  4011bc:	e0a8      	b.n	401310 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
  4011be:	2032      	movs	r0, #50	; 0x32
  4011c0:	4b57      	ldr	r3, [pc, #348]	; (401320 <mpu_reset_fifo+0x208>)
  4011c2:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
  4011c4:	23c0      	movs	r3, #192	; 0xc0
  4011c6:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
  4011c8:	4b53      	ldr	r3, [pc, #332]	; (401318 <mpu_reset_fifo+0x200>)
  4011ca:	7a9b      	ldrb	r3, [r3, #10]
  4011cc:	f003 0301 	and.w	r3, r3, #1
  4011d0:	2b00      	cmp	r3, #0
  4011d2:	d004      	beq.n	4011de <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
  4011d4:	79fb      	ldrb	r3, [r7, #7]
  4011d6:	f043 0320 	orr.w	r3, r3, #32
  4011da:	b2db      	uxtb	r3, r3
  4011dc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4011de:	4b4e      	ldr	r3, [pc, #312]	; (401318 <mpu_reset_fifo+0x200>)
  4011e0:	685b      	ldr	r3, [r3, #4]
  4011e2:	7818      	ldrb	r0, [r3, #0]
  4011e4:	4b4c      	ldr	r3, [pc, #304]	; (401318 <mpu_reset_fifo+0x200>)
  4011e6:	681b      	ldr	r3, [r3, #0]
  4011e8:	7919      	ldrb	r1, [r3, #4]
  4011ea:	1dfb      	adds	r3, r7, #7
  4011ec:	2201      	movs	r2, #1
  4011ee:	4c4b      	ldr	r4, [pc, #300]	; (40131c <mpu_reset_fifo+0x204>)
  4011f0:	47a0      	blx	r4
  4011f2:	4603      	mov	r3, r0
  4011f4:	2b00      	cmp	r3, #0
  4011f6:	d002      	beq.n	4011fe <mpu_reset_fifo+0xe6>
            return -1;
  4011f8:	f04f 33ff 	mov.w	r3, #4294967295
  4011fc:	e088      	b.n	401310 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
  4011fe:	4b46      	ldr	r3, [pc, #280]	; (401318 <mpu_reset_fifo+0x200>)
  401200:	7c5b      	ldrb	r3, [r3, #17]
  401202:	2b00      	cmp	r3, #0
  401204:	d002      	beq.n	40120c <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
  401206:	2302      	movs	r3, #2
  401208:	71fb      	strb	r3, [r7, #7]
  40120a:	e001      	b.n	401210 <mpu_reset_fifo+0xf8>
        else
            data = 0;
  40120c:	2300      	movs	r3, #0
  40120e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401210:	4b41      	ldr	r3, [pc, #260]	; (401318 <mpu_reset_fifo+0x200>)
  401212:	685b      	ldr	r3, [r3, #4]
  401214:	7818      	ldrb	r0, [r3, #0]
  401216:	4b40      	ldr	r3, [pc, #256]	; (401318 <mpu_reset_fifo+0x200>)
  401218:	681b      	ldr	r3, [r3, #0]
  40121a:	7c59      	ldrb	r1, [r3, #17]
  40121c:	1dfb      	adds	r3, r7, #7
  40121e:	2201      	movs	r2, #1
  401220:	4c3e      	ldr	r4, [pc, #248]	; (40131c <mpu_reset_fifo+0x204>)
  401222:	47a0      	blx	r4
  401224:	4603      	mov	r3, r0
  401226:	2b00      	cmp	r3, #0
  401228:	d002      	beq.n	401230 <mpu_reset_fifo+0x118>
            return -1;
  40122a:	f04f 33ff 	mov.w	r3, #4294967295
  40122e:	e06f      	b.n	401310 <mpu_reset_fifo+0x1f8>
        data = 0;
  401230:	2300      	movs	r3, #0
  401232:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
  401234:	4b38      	ldr	r3, [pc, #224]	; (401318 <mpu_reset_fifo+0x200>)
  401236:	685b      	ldr	r3, [r3, #4]
  401238:	7818      	ldrb	r0, [r3, #0]
  40123a:	4b37      	ldr	r3, [pc, #220]	; (401318 <mpu_reset_fifo+0x200>)
  40123c:	681b      	ldr	r3, [r3, #0]
  40123e:	7959      	ldrb	r1, [r3, #5]
  401240:	1dfb      	adds	r3, r7, #7
  401242:	2201      	movs	r2, #1
  401244:	4c35      	ldr	r4, [pc, #212]	; (40131c <mpu_reset_fifo+0x204>)
  401246:	47a0      	blx	r4
  401248:	4603      	mov	r3, r0
  40124a:	2b00      	cmp	r3, #0
  40124c:	d05f      	beq.n	40130e <mpu_reset_fifo+0x1f6>
            return -1;
  40124e:	f04f 33ff 	mov.w	r3, #4294967295
  401252:	e05d      	b.n	401310 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
  401254:	2304      	movs	r3, #4
  401256:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  401258:	4b2f      	ldr	r3, [pc, #188]	; (401318 <mpu_reset_fifo+0x200>)
  40125a:	685b      	ldr	r3, [r3, #4]
  40125c:	7818      	ldrb	r0, [r3, #0]
  40125e:	4b2e      	ldr	r3, [pc, #184]	; (401318 <mpu_reset_fifo+0x200>)
  401260:	681b      	ldr	r3, [r3, #0]
  401262:	7919      	ldrb	r1, [r3, #4]
  401264:	1dfb      	adds	r3, r7, #7
  401266:	2201      	movs	r2, #1
  401268:	4c2c      	ldr	r4, [pc, #176]	; (40131c <mpu_reset_fifo+0x204>)
  40126a:	47a0      	blx	r4
  40126c:	4603      	mov	r3, r0
  40126e:	2b00      	cmp	r3, #0
  401270:	d002      	beq.n	401278 <mpu_reset_fifo+0x160>
            return -1;
  401272:	f04f 33ff 	mov.w	r3, #4294967295
  401276:	e04b      	b.n	401310 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
  401278:	4b27      	ldr	r3, [pc, #156]	; (401318 <mpu_reset_fifo+0x200>)
  40127a:	7c9b      	ldrb	r3, [r3, #18]
  40127c:	2b00      	cmp	r3, #0
  40127e:	d105      	bne.n	40128c <mpu_reset_fifo+0x174>
  401280:	4b25      	ldr	r3, [pc, #148]	; (401318 <mpu_reset_fifo+0x200>)
  401282:	7a9b      	ldrb	r3, [r3, #10]
  401284:	f003 0301 	and.w	r3, r3, #1
  401288:	2b00      	cmp	r3, #0
  40128a:	d102      	bne.n	401292 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
  40128c:	2340      	movs	r3, #64	; 0x40
  40128e:	71fb      	strb	r3, [r7, #7]
  401290:	e001      	b.n	401296 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
  401292:	2360      	movs	r3, #96	; 0x60
  401294:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  401296:	4b20      	ldr	r3, [pc, #128]	; (401318 <mpu_reset_fifo+0x200>)
  401298:	685b      	ldr	r3, [r3, #4]
  40129a:	7818      	ldrb	r0, [r3, #0]
  40129c:	4b1e      	ldr	r3, [pc, #120]	; (401318 <mpu_reset_fifo+0x200>)
  40129e:	681b      	ldr	r3, [r3, #0]
  4012a0:	7919      	ldrb	r1, [r3, #4]
  4012a2:	1dfb      	adds	r3, r7, #7
  4012a4:	2201      	movs	r2, #1
  4012a6:	4c1d      	ldr	r4, [pc, #116]	; (40131c <mpu_reset_fifo+0x204>)
  4012a8:	47a0      	blx	r4
  4012aa:	4603      	mov	r3, r0
  4012ac:	2b00      	cmp	r3, #0
  4012ae:	d002      	beq.n	4012b6 <mpu_reset_fifo+0x19e>
            return -1;
  4012b0:	f04f 33ff 	mov.w	r3, #4294967295
  4012b4:	e02c      	b.n	401310 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
  4012b6:	2032      	movs	r0, #50	; 0x32
  4012b8:	4b19      	ldr	r3, [pc, #100]	; (401320 <mpu_reset_fifo+0x208>)
  4012ba:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
  4012bc:	4b16      	ldr	r3, [pc, #88]	; (401318 <mpu_reset_fifo+0x200>)
  4012be:	7c5b      	ldrb	r3, [r3, #17]
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	d002      	beq.n	4012ca <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
  4012c4:	2301      	movs	r3, #1
  4012c6:	71fb      	strb	r3, [r7, #7]
  4012c8:	e001      	b.n	4012ce <mpu_reset_fifo+0x1b6>
        else
            data = 0;
  4012ca:	2300      	movs	r3, #0
  4012cc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  4012ce:	4b12      	ldr	r3, [pc, #72]	; (401318 <mpu_reset_fifo+0x200>)
  4012d0:	685b      	ldr	r3, [r3, #4]
  4012d2:	7818      	ldrb	r0, [r3, #0]
  4012d4:	4b10      	ldr	r3, [pc, #64]	; (401318 <mpu_reset_fifo+0x200>)
  4012d6:	681b      	ldr	r3, [r3, #0]
  4012d8:	7c59      	ldrb	r1, [r3, #17]
  4012da:	1dfb      	adds	r3, r7, #7
  4012dc:	2201      	movs	r2, #1
  4012de:	4c0f      	ldr	r4, [pc, #60]	; (40131c <mpu_reset_fifo+0x204>)
  4012e0:	47a0      	blx	r4
  4012e2:	4603      	mov	r3, r0
  4012e4:	2b00      	cmp	r3, #0
  4012e6:	d002      	beq.n	4012ee <mpu_reset_fifo+0x1d6>
            return -1;
  4012e8:	f04f 33ff 	mov.w	r3, #4294967295
  4012ec:	e010      	b.n	401310 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
  4012ee:	4b0a      	ldr	r3, [pc, #40]	; (401318 <mpu_reset_fifo+0x200>)
  4012f0:	685b      	ldr	r3, [r3, #4]
  4012f2:	7818      	ldrb	r0, [r3, #0]
  4012f4:	4b08      	ldr	r3, [pc, #32]	; (401318 <mpu_reset_fifo+0x200>)
  4012f6:	681b      	ldr	r3, [r3, #0]
  4012f8:	7959      	ldrb	r1, [r3, #5]
  4012fa:	4b0a      	ldr	r3, [pc, #40]	; (401324 <mpu_reset_fifo+0x20c>)
  4012fc:	2201      	movs	r2, #1
  4012fe:	4c07      	ldr	r4, [pc, #28]	; (40131c <mpu_reset_fifo+0x204>)
  401300:	47a0      	blx	r4
  401302:	4603      	mov	r3, r0
  401304:	2b00      	cmp	r3, #0
  401306:	d002      	beq.n	40130e <mpu_reset_fifo+0x1f6>
            return -1;
  401308:	f04f 33ff 	mov.w	r3, #4294967295
  40130c:	e000      	b.n	401310 <mpu_reset_fifo+0x1f8>
    }
    return 0;
  40130e:	2300      	movs	r3, #0
}
  401310:	4618      	mov	r0, r3
  401312:	370c      	adds	r7, #12
  401314:	46bd      	mov	sp, r7
  401316:	bd90      	pop	{r4, r7, pc}
  401318:	20000000 	.word	0x20000000
  40131c:	00403d29 	.word	0x00403d29
  401320:	00403cf9 	.word	0x00403cf9
  401324:	20000010 	.word	0x20000010

00401328 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
  401328:	b480      	push	{r7}
  40132a:	b083      	sub	sp, #12
  40132c:	af00      	add	r7, sp, #0
  40132e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
  401330:	4b16      	ldr	r3, [pc, #88]	; (40138c <mpu_get_gyro_fsr+0x64>)
  401332:	7a1b      	ldrb	r3, [r3, #8]
  401334:	2b03      	cmp	r3, #3
  401336:	d81e      	bhi.n	401376 <mpu_get_gyro_fsr+0x4e>
  401338:	a201      	add	r2, pc, #4	; (adr r2, 401340 <mpu_get_gyro_fsr+0x18>)
  40133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40133e:	bf00      	nop
  401340:	00401351 	.word	0x00401351
  401344:	00401359 	.word	0x00401359
  401348:	00401363 	.word	0x00401363
  40134c:	0040136d 	.word	0x0040136d
    case INV_FSR_250DPS:
        fsr[0] = 250;
  401350:	687b      	ldr	r3, [r7, #4]
  401352:	22fa      	movs	r2, #250	; 0xfa
  401354:	801a      	strh	r2, [r3, #0]
        break;
  401356:	e012      	b.n	40137e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
  401358:	687b      	ldr	r3, [r7, #4]
  40135a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40135e:	801a      	strh	r2, [r3, #0]
        break;
  401360:	e00d      	b.n	40137e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
  401362:	687b      	ldr	r3, [r7, #4]
  401364:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401368:	801a      	strh	r2, [r3, #0]
        break;
  40136a:	e008      	b.n	40137e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
  40136c:	687b      	ldr	r3, [r7, #4]
  40136e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  401372:	801a      	strh	r2, [r3, #0]
        break;
  401374:	e003      	b.n	40137e <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
  401376:	687b      	ldr	r3, [r7, #4]
  401378:	2200      	movs	r2, #0
  40137a:	801a      	strh	r2, [r3, #0]
        break;
  40137c:	bf00      	nop
    }
    return 0;
  40137e:	2300      	movs	r3, #0
}
  401380:	4618      	mov	r0, r3
  401382:	370c      	adds	r7, #12
  401384:	46bd      	mov	sp, r7
  401386:	bc80      	pop	{r7}
  401388:	4770      	bx	lr
  40138a:	bf00      	nop
  40138c:	20000000 	.word	0x20000000

00401390 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
  401390:	b590      	push	{r4, r7, lr}
  401392:	b085      	sub	sp, #20
  401394:	af00      	add	r7, sp, #0
  401396:	4603      	mov	r3, r0
  401398:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  40139a:	4b25      	ldr	r3, [pc, #148]	; (401430 <mpu_set_gyro_fsr+0xa0>)
  40139c:	7a9b      	ldrb	r3, [r3, #10]
  40139e:	2b00      	cmp	r3, #0
  4013a0:	d102      	bne.n	4013a8 <mpu_set_gyro_fsr+0x18>
        return -1;
  4013a2:	f04f 33ff 	mov.w	r3, #4294967295
  4013a6:	e03f      	b.n	401428 <mpu_set_gyro_fsr+0x98>

    switch (fsr) {
  4013a8:	88fb      	ldrh	r3, [r7, #6]
  4013aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4013ae:	d00f      	beq.n	4013d0 <mpu_set_gyro_fsr+0x40>
  4013b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4013b4:	dc02      	bgt.n	4013bc <mpu_set_gyro_fsr+0x2c>
  4013b6:	2bfa      	cmp	r3, #250	; 0xfa
  4013b8:	d007      	beq.n	4013ca <mpu_set_gyro_fsr+0x3a>
  4013ba:	e012      	b.n	4013e2 <mpu_set_gyro_fsr+0x52>
  4013bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4013c0:	d009      	beq.n	4013d6 <mpu_set_gyro_fsr+0x46>
  4013c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  4013c6:	d009      	beq.n	4013dc <mpu_set_gyro_fsr+0x4c>
  4013c8:	e00b      	b.n	4013e2 <mpu_set_gyro_fsr+0x52>
    case 250:
        data = INV_FSR_250DPS << 3;
  4013ca:	2300      	movs	r3, #0
  4013cc:	73fb      	strb	r3, [r7, #15]
        break;
  4013ce:	e00b      	b.n	4013e8 <mpu_set_gyro_fsr+0x58>
    case 500:
        data = INV_FSR_500DPS << 3;
  4013d0:	2308      	movs	r3, #8
  4013d2:	73fb      	strb	r3, [r7, #15]
        break;
  4013d4:	e008      	b.n	4013e8 <mpu_set_gyro_fsr+0x58>
    case 1000:
        data = INV_FSR_1000DPS << 3;
  4013d6:	2310      	movs	r3, #16
  4013d8:	73fb      	strb	r3, [r7, #15]
        break;
  4013da:	e005      	b.n	4013e8 <mpu_set_gyro_fsr+0x58>
    case 2000:
        data = INV_FSR_2000DPS << 3;
  4013dc:	2318      	movs	r3, #24
  4013de:	73fb      	strb	r3, [r7, #15]
        break;
  4013e0:	e002      	b.n	4013e8 <mpu_set_gyro_fsr+0x58>
    default:
        return -1;
  4013e2:	f04f 33ff 	mov.w	r3, #4294967295
  4013e6:	e01f      	b.n	401428 <mpu_set_gyro_fsr+0x98>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
  4013e8:	4b11      	ldr	r3, [pc, #68]	; (401430 <mpu_set_gyro_fsr+0xa0>)
  4013ea:	7a1a      	ldrb	r2, [r3, #8]
  4013ec:	7bfb      	ldrb	r3, [r7, #15]
  4013ee:	08db      	lsrs	r3, r3, #3
  4013f0:	b2db      	uxtb	r3, r3
  4013f2:	429a      	cmp	r2, r3
  4013f4:	d101      	bne.n	4013fa <mpu_set_gyro_fsr+0x6a>
        return 0;
  4013f6:	2300      	movs	r3, #0
  4013f8:	e016      	b.n	401428 <mpu_set_gyro_fsr+0x98>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
  4013fa:	4b0d      	ldr	r3, [pc, #52]	; (401430 <mpu_set_gyro_fsr+0xa0>)
  4013fc:	685b      	ldr	r3, [r3, #4]
  4013fe:	7818      	ldrb	r0, [r3, #0]
  401400:	4b0b      	ldr	r3, [pc, #44]	; (401430 <mpu_set_gyro_fsr+0xa0>)
  401402:	681b      	ldr	r3, [r3, #0]
  401404:	7999      	ldrb	r1, [r3, #6]
  401406:	f107 030f 	add.w	r3, r7, #15
  40140a:	2201      	movs	r2, #1
  40140c:	4c09      	ldr	r4, [pc, #36]	; (401434 <mpu_set_gyro_fsr+0xa4>)
  40140e:	47a0      	blx	r4
  401410:	4603      	mov	r3, r0
  401412:	2b00      	cmp	r3, #0
  401414:	d002      	beq.n	40141c <mpu_set_gyro_fsr+0x8c>
        return -1;
  401416:	f04f 33ff 	mov.w	r3, #4294967295
  40141a:	e005      	b.n	401428 <mpu_set_gyro_fsr+0x98>
    st.chip_cfg.gyro_fsr = data >> 3;
  40141c:	7bfb      	ldrb	r3, [r7, #15]
  40141e:	08db      	lsrs	r3, r3, #3
  401420:	b2da      	uxtb	r2, r3
  401422:	4b03      	ldr	r3, [pc, #12]	; (401430 <mpu_set_gyro_fsr+0xa0>)
  401424:	721a      	strb	r2, [r3, #8]
    return 0;
  401426:	2300      	movs	r3, #0
}
  401428:	4618      	mov	r0, r3
  40142a:	3714      	adds	r7, #20
  40142c:	46bd      	mov	sp, r7
  40142e:	bd90      	pop	{r4, r7, pc}
  401430:	20000000 	.word	0x20000000
  401434:	00403d29 	.word	0x00403d29

00401438 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
  401438:	b480      	push	{r7}
  40143a:	b083      	sub	sp, #12
  40143c:	af00      	add	r7, sp, #0
  40143e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
  401440:	4b19      	ldr	r3, [pc, #100]	; (4014a8 <mpu_get_accel_fsr+0x70>)
  401442:	7a5b      	ldrb	r3, [r3, #9]
  401444:	2b03      	cmp	r3, #3
  401446:	d81b      	bhi.n	401480 <mpu_get_accel_fsr+0x48>
  401448:	a201      	add	r2, pc, #4	; (adr r2, 401450 <mpu_get_accel_fsr+0x18>)
  40144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40144e:	bf00      	nop
  401450:	00401461 	.word	0x00401461
  401454:	00401469 	.word	0x00401469
  401458:	00401471 	.word	0x00401471
  40145c:	00401479 	.word	0x00401479
    case INV_FSR_2G:
        fsr[0] = 2;
  401460:	687b      	ldr	r3, [r7, #4]
  401462:	2202      	movs	r2, #2
  401464:	701a      	strb	r2, [r3, #0]
        break;
  401466:	e00e      	b.n	401486 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
  401468:	687b      	ldr	r3, [r7, #4]
  40146a:	2204      	movs	r2, #4
  40146c:	701a      	strb	r2, [r3, #0]
        break;
  40146e:	e00a      	b.n	401486 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
  401470:	687b      	ldr	r3, [r7, #4]
  401472:	2208      	movs	r2, #8
  401474:	701a      	strb	r2, [r3, #0]
        break;
  401476:	e006      	b.n	401486 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
  401478:	687b      	ldr	r3, [r7, #4]
  40147a:	2210      	movs	r2, #16
  40147c:	701a      	strb	r2, [r3, #0]
        break;
  40147e:	e002      	b.n	401486 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
  401480:	f04f 33ff 	mov.w	r3, #4294967295
  401484:	e00a      	b.n	40149c <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
  401486:	4b08      	ldr	r3, [pc, #32]	; (4014a8 <mpu_get_accel_fsr+0x70>)
  401488:	7cdb      	ldrb	r3, [r3, #19]
  40148a:	2b00      	cmp	r3, #0
  40148c:	d005      	beq.n	40149a <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
  40148e:	687b      	ldr	r3, [r7, #4]
  401490:	781b      	ldrb	r3, [r3, #0]
  401492:	005b      	lsls	r3, r3, #1
  401494:	b2da      	uxtb	r2, r3
  401496:	687b      	ldr	r3, [r7, #4]
  401498:	701a      	strb	r2, [r3, #0]
    return 0;
  40149a:	2300      	movs	r3, #0
}
  40149c:	4618      	mov	r0, r3
  40149e:	370c      	adds	r7, #12
  4014a0:	46bd      	mov	sp, r7
  4014a2:	bc80      	pop	{r7}
  4014a4:	4770      	bx	lr
  4014a6:	bf00      	nop
  4014a8:	20000000 	.word	0x20000000

004014ac <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
  4014ac:	b590      	push	{r4, r7, lr}
  4014ae:	b085      	sub	sp, #20
  4014b0:	af00      	add	r7, sp, #0
  4014b2:	4603      	mov	r3, r0
  4014b4:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  4014b6:	4b30      	ldr	r3, [pc, #192]	; (401578 <mpu_set_accel_fsr+0xcc>)
  4014b8:	7a9b      	ldrb	r3, [r3, #10]
  4014ba:	2b00      	cmp	r3, #0
  4014bc:	d102      	bne.n	4014c4 <mpu_set_accel_fsr+0x18>
        return -1;
  4014be:	f04f 33ff 	mov.w	r3, #4294967295
  4014c2:	e054      	b.n	40156e <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
  4014c4:	79fb      	ldrb	r3, [r7, #7]
  4014c6:	3b02      	subs	r3, #2
  4014c8:	2b0e      	cmp	r3, #14
  4014ca:	d82d      	bhi.n	401528 <mpu_set_accel_fsr+0x7c>
  4014cc:	a201      	add	r2, pc, #4	; (adr r2, 4014d4 <mpu_set_accel_fsr+0x28>)
  4014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014d2:	bf00      	nop
  4014d4:	00401511 	.word	0x00401511
  4014d8:	00401529 	.word	0x00401529
  4014dc:	00401517 	.word	0x00401517
  4014e0:	00401529 	.word	0x00401529
  4014e4:	00401529 	.word	0x00401529
  4014e8:	00401529 	.word	0x00401529
  4014ec:	0040151d 	.word	0x0040151d
  4014f0:	00401529 	.word	0x00401529
  4014f4:	00401529 	.word	0x00401529
  4014f8:	00401529 	.word	0x00401529
  4014fc:	00401529 	.word	0x00401529
  401500:	00401529 	.word	0x00401529
  401504:	00401529 	.word	0x00401529
  401508:	00401529 	.word	0x00401529
  40150c:	00401523 	.word	0x00401523
    case 2:
        data = INV_FSR_2G << 3;
  401510:	2300      	movs	r3, #0
  401512:	73fb      	strb	r3, [r7, #15]
        break;
  401514:	e00b      	b.n	40152e <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
  401516:	2308      	movs	r3, #8
  401518:	73fb      	strb	r3, [r7, #15]
        break;
  40151a:	e008      	b.n	40152e <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
  40151c:	2310      	movs	r3, #16
  40151e:	73fb      	strb	r3, [r7, #15]
        break;
  401520:	e005      	b.n	40152e <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
  401522:	2318      	movs	r3, #24
  401524:	73fb      	strb	r3, [r7, #15]
        break;
  401526:	e002      	b.n	40152e <mpu_set_accel_fsr+0x82>
    default:
        return -1;
  401528:	f04f 33ff 	mov.w	r3, #4294967295
  40152c:	e01f      	b.n	40156e <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
  40152e:	4b12      	ldr	r3, [pc, #72]	; (401578 <mpu_set_accel_fsr+0xcc>)
  401530:	7a5a      	ldrb	r2, [r3, #9]
  401532:	7bfb      	ldrb	r3, [r7, #15]
  401534:	08db      	lsrs	r3, r3, #3
  401536:	b2db      	uxtb	r3, r3
  401538:	429a      	cmp	r2, r3
  40153a:	d101      	bne.n	401540 <mpu_set_accel_fsr+0x94>
        return 0;
  40153c:	2300      	movs	r3, #0
  40153e:	e016      	b.n	40156e <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
  401540:	4b0d      	ldr	r3, [pc, #52]	; (401578 <mpu_set_accel_fsr+0xcc>)
  401542:	685b      	ldr	r3, [r3, #4]
  401544:	7818      	ldrb	r0, [r3, #0]
  401546:	4b0c      	ldr	r3, [pc, #48]	; (401578 <mpu_set_accel_fsr+0xcc>)
  401548:	681b      	ldr	r3, [r3, #0]
  40154a:	79d9      	ldrb	r1, [r3, #7]
  40154c:	f107 030f 	add.w	r3, r7, #15
  401550:	2201      	movs	r2, #1
  401552:	4c0a      	ldr	r4, [pc, #40]	; (40157c <mpu_set_accel_fsr+0xd0>)
  401554:	47a0      	blx	r4
  401556:	4603      	mov	r3, r0
  401558:	2b00      	cmp	r3, #0
  40155a:	d002      	beq.n	401562 <mpu_set_accel_fsr+0xb6>
        return -1;
  40155c:	f04f 33ff 	mov.w	r3, #4294967295
  401560:	e005      	b.n	40156e <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
  401562:	7bfb      	ldrb	r3, [r7, #15]
  401564:	08db      	lsrs	r3, r3, #3
  401566:	b2da      	uxtb	r2, r3
  401568:	4b03      	ldr	r3, [pc, #12]	; (401578 <mpu_set_accel_fsr+0xcc>)
  40156a:	725a      	strb	r2, [r3, #9]
    return 0;
  40156c:	2300      	movs	r3, #0
}
  40156e:	4618      	mov	r0, r3
  401570:	3714      	adds	r7, #20
  401572:	46bd      	mov	sp, r7
  401574:	bd90      	pop	{r4, r7, pc}
  401576:	bf00      	nop
  401578:	20000000 	.word	0x20000000
  40157c:	00403d29 	.word	0x00403d29

00401580 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
  401580:	b590      	push	{r4, r7, lr}
  401582:	b085      	sub	sp, #20
  401584:	af00      	add	r7, sp, #0
  401586:	4603      	mov	r3, r0
  401588:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  40158a:	4b23      	ldr	r3, [pc, #140]	; (401618 <mpu_set_lpf+0x98>)
  40158c:	7a9b      	ldrb	r3, [r3, #10]
  40158e:	2b00      	cmp	r3, #0
  401590:	d102      	bne.n	401598 <mpu_set_lpf+0x18>
        return -1;
  401592:	f04f 33ff 	mov.w	r3, #4294967295
  401596:	e03b      	b.n	401610 <mpu_set_lpf+0x90>

    if (lpf >= 188)
  401598:	88fb      	ldrh	r3, [r7, #6]
  40159a:	2bbb      	cmp	r3, #187	; 0xbb
  40159c:	d902      	bls.n	4015a4 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
  40159e:	2301      	movs	r3, #1
  4015a0:	73fb      	strb	r3, [r7, #15]
  4015a2:	e019      	b.n	4015d8 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
  4015a4:	88fb      	ldrh	r3, [r7, #6]
  4015a6:	2b61      	cmp	r3, #97	; 0x61
  4015a8:	d902      	bls.n	4015b0 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
  4015aa:	2302      	movs	r3, #2
  4015ac:	73fb      	strb	r3, [r7, #15]
  4015ae:	e013      	b.n	4015d8 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
  4015b0:	88fb      	ldrh	r3, [r7, #6]
  4015b2:	2b29      	cmp	r3, #41	; 0x29
  4015b4:	d902      	bls.n	4015bc <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
  4015b6:	2303      	movs	r3, #3
  4015b8:	73fb      	strb	r3, [r7, #15]
  4015ba:	e00d      	b.n	4015d8 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
  4015bc:	88fb      	ldrh	r3, [r7, #6]
  4015be:	2b13      	cmp	r3, #19
  4015c0:	d902      	bls.n	4015c8 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
  4015c2:	2304      	movs	r3, #4
  4015c4:	73fb      	strb	r3, [r7, #15]
  4015c6:	e007      	b.n	4015d8 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
  4015c8:	88fb      	ldrh	r3, [r7, #6]
  4015ca:	2b09      	cmp	r3, #9
  4015cc:	d902      	bls.n	4015d4 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
  4015ce:	2305      	movs	r3, #5
  4015d0:	73fb      	strb	r3, [r7, #15]
  4015d2:	e001      	b.n	4015d8 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
  4015d4:	2306      	movs	r3, #6
  4015d6:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
  4015d8:	4b0f      	ldr	r3, [pc, #60]	; (401618 <mpu_set_lpf+0x98>)
  4015da:	7ada      	ldrb	r2, [r3, #11]
  4015dc:	7bfb      	ldrb	r3, [r7, #15]
  4015de:	429a      	cmp	r2, r3
  4015e0:	d101      	bne.n	4015e6 <mpu_set_lpf+0x66>
        return 0;
  4015e2:	2300      	movs	r3, #0
  4015e4:	e014      	b.n	401610 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
  4015e6:	4b0c      	ldr	r3, [pc, #48]	; (401618 <mpu_set_lpf+0x98>)
  4015e8:	685b      	ldr	r3, [r3, #4]
  4015ea:	7818      	ldrb	r0, [r3, #0]
  4015ec:	4b0a      	ldr	r3, [pc, #40]	; (401618 <mpu_set_lpf+0x98>)
  4015ee:	681b      	ldr	r3, [r3, #0]
  4015f0:	7899      	ldrb	r1, [r3, #2]
  4015f2:	f107 030f 	add.w	r3, r7, #15
  4015f6:	2201      	movs	r2, #1
  4015f8:	4c08      	ldr	r4, [pc, #32]	; (40161c <mpu_set_lpf+0x9c>)
  4015fa:	47a0      	blx	r4
  4015fc:	4603      	mov	r3, r0
  4015fe:	2b00      	cmp	r3, #0
  401600:	d002      	beq.n	401608 <mpu_set_lpf+0x88>
        return -1;
  401602:	f04f 33ff 	mov.w	r3, #4294967295
  401606:	e003      	b.n	401610 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
  401608:	7bfa      	ldrb	r2, [r7, #15]
  40160a:	4b03      	ldr	r3, [pc, #12]	; (401618 <mpu_set_lpf+0x98>)
  40160c:	72da      	strb	r2, [r3, #11]
    return 0;
  40160e:	2300      	movs	r3, #0
}
  401610:	4618      	mov	r0, r3
  401612:	3714      	adds	r7, #20
  401614:	46bd      	mov	sp, r7
  401616:	bd90      	pop	{r4, r7, pc}
  401618:	20000000 	.word	0x20000000
  40161c:	00403d29 	.word	0x00403d29

00401620 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
  401620:	b480      	push	{r7}
  401622:	b083      	sub	sp, #12
  401624:	af00      	add	r7, sp, #0
  401626:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
  401628:	4b08      	ldr	r3, [pc, #32]	; (40164c <mpu_get_sample_rate+0x2c>)
  40162a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  40162e:	2b00      	cmp	r3, #0
  401630:	d002      	beq.n	401638 <mpu_get_sample_rate+0x18>
        return -1;
  401632:	f04f 33ff 	mov.w	r3, #4294967295
  401636:	e004      	b.n	401642 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
  401638:	4b04      	ldr	r3, [pc, #16]	; (40164c <mpu_get_sample_rate+0x2c>)
  40163a:	89da      	ldrh	r2, [r3, #14]
  40163c:	687b      	ldr	r3, [r7, #4]
  40163e:	801a      	strh	r2, [r3, #0]
    return 0;
  401640:	2300      	movs	r3, #0
}
  401642:	4618      	mov	r0, r3
  401644:	370c      	adds	r7, #12
  401646:	46bd      	mov	sp, r7
  401648:	bc80      	pop	{r7}
  40164a:	4770      	bx	lr
  40164c:	20000000 	.word	0x20000000

00401650 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
  401650:	b590      	push	{r4, r7, lr}
  401652:	b085      	sub	sp, #20
  401654:	af00      	add	r7, sp, #0
  401656:	4603      	mov	r3, r0
  401658:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  40165a:	4b34      	ldr	r3, [pc, #208]	; (40172c <mpu_set_sample_rate+0xdc>)
  40165c:	7a9b      	ldrb	r3, [r3, #10]
  40165e:	2b00      	cmp	r3, #0
  401660:	d102      	bne.n	401668 <mpu_set_sample_rate+0x18>
        return -1;
  401662:	f04f 33ff 	mov.w	r3, #4294967295
  401666:	e05c      	b.n	401722 <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
  401668:	4b30      	ldr	r3, [pc, #192]	; (40172c <mpu_set_sample_rate+0xdc>)
  40166a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  40166e:	2b00      	cmp	r3, #0
  401670:	d002      	beq.n	401678 <mpu_set_sample_rate+0x28>
        return -1;
  401672:	f04f 33ff 	mov.w	r3, #4294967295
  401676:	e054      	b.n	401722 <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
  401678:	4b2c      	ldr	r3, [pc, #176]	; (40172c <mpu_set_sample_rate+0xdc>)
  40167a:	7d1b      	ldrb	r3, [r3, #20]
  40167c:	2b00      	cmp	r3, #0
  40167e:	d00f      	beq.n	4016a0 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
  401680:	88fb      	ldrh	r3, [r7, #6]
  401682:	2b00      	cmp	r3, #0
  401684:	d009      	beq.n	40169a <mpu_set_sample_rate+0x4a>
  401686:	88fb      	ldrh	r3, [r7, #6]
  401688:	2b28      	cmp	r3, #40	; 0x28
  40168a:	d806      	bhi.n	40169a <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
  40168c:	88fb      	ldrh	r3, [r7, #6]
  40168e:	b2db      	uxtb	r3, r3
  401690:	4618      	mov	r0, r3
  401692:	4b27      	ldr	r3, [pc, #156]	; (401730 <mpu_set_sample_rate+0xe0>)
  401694:	4798      	blx	r3
                return 0;
  401696:	2300      	movs	r3, #0
  401698:	e043      	b.n	401722 <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
  40169a:	2000      	movs	r0, #0
  40169c:	4b24      	ldr	r3, [pc, #144]	; (401730 <mpu_set_sample_rate+0xe0>)
  40169e:	4798      	blx	r3
        }
        if (rate < 4)
  4016a0:	88fb      	ldrh	r3, [r7, #6]
  4016a2:	2b03      	cmp	r3, #3
  4016a4:	d802      	bhi.n	4016ac <mpu_set_sample_rate+0x5c>
            rate = 4;
  4016a6:	2304      	movs	r3, #4
  4016a8:	80fb      	strh	r3, [r7, #6]
  4016aa:	e006      	b.n	4016ba <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
  4016ac:	88fb      	ldrh	r3, [r7, #6]
  4016ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4016b2:	d902      	bls.n	4016ba <mpu_set_sample_rate+0x6a>
            rate = 1000;
  4016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4016b8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
  4016ba:	88fb      	ldrh	r3, [r7, #6]
  4016bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4016c0:	fb92 f3f3 	sdiv	r3, r2, r3
  4016c4:	b2db      	uxtb	r3, r3
  4016c6:	3b01      	subs	r3, #1
  4016c8:	b2db      	uxtb	r3, r3
  4016ca:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
  4016cc:	4b17      	ldr	r3, [pc, #92]	; (40172c <mpu_set_sample_rate+0xdc>)
  4016ce:	685b      	ldr	r3, [r3, #4]
  4016d0:	7818      	ldrb	r0, [r3, #0]
  4016d2:	4b16      	ldr	r3, [pc, #88]	; (40172c <mpu_set_sample_rate+0xdc>)
  4016d4:	681b      	ldr	r3, [r3, #0]
  4016d6:	7859      	ldrb	r1, [r3, #1]
  4016d8:	f107 030f 	add.w	r3, r7, #15
  4016dc:	2201      	movs	r2, #1
  4016de:	4c15      	ldr	r4, [pc, #84]	; (401734 <mpu_set_sample_rate+0xe4>)
  4016e0:	47a0      	blx	r4
  4016e2:	4603      	mov	r3, r0
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	d002      	beq.n	4016ee <mpu_set_sample_rate+0x9e>
            return -1;
  4016e8:	f04f 33ff 	mov.w	r3, #4294967295
  4016ec:	e019      	b.n	401722 <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
  4016ee:	7bfb      	ldrb	r3, [r7, #15]
  4016f0:	3301      	adds	r3, #1
  4016f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4016f6:	fb92 f3f3 	sdiv	r3, r2, r3
  4016fa:	b29a      	uxth	r2, r3
  4016fc:	4b0b      	ldr	r3, [pc, #44]	; (40172c <mpu_set_sample_rate+0xdc>)
  4016fe:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
  401700:	4b0a      	ldr	r3, [pc, #40]	; (40172c <mpu_set_sample_rate+0xdc>)
  401702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  401704:	2b64      	cmp	r3, #100	; 0x64
  401706:	bf28      	it	cs
  401708:	2364      	movcs	r3, #100	; 0x64
  40170a:	b29b      	uxth	r3, r3
  40170c:	4618      	mov	r0, r3
  40170e:	4b0a      	ldr	r3, [pc, #40]	; (401738 <mpu_set_sample_rate+0xe8>)
  401710:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
  401712:	4b06      	ldr	r3, [pc, #24]	; (40172c <mpu_set_sample_rate+0xdc>)
  401714:	89db      	ldrh	r3, [r3, #14]
  401716:	085b      	lsrs	r3, r3, #1
  401718:	b29b      	uxth	r3, r3
  40171a:	4618      	mov	r0, r3
  40171c:	4b07      	ldr	r3, [pc, #28]	; (40173c <mpu_set_sample_rate+0xec>)
  40171e:	4798      	blx	r3
        return 0;
  401720:	2300      	movs	r3, #0
    }
}
  401722:	4618      	mov	r0, r3
  401724:	3714      	adds	r7, #20
  401726:	46bd      	mov	sp, r7
  401728:	bd90      	pop	{r4, r7, pc}
  40172a:	bf00      	nop
  40172c:	20000000 	.word	0x20000000
  401730:	00400fdd 	.word	0x00400fdd
  401734:	00403d29 	.word	0x00403d29
  401738:	00401741 	.word	0x00401741
  40173c:	00401581 	.word	0x00401581

00401740 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
  401740:	b590      	push	{r4, r7, lr}
  401742:	b085      	sub	sp, #20
  401744:	af00      	add	r7, sp, #0
  401746:	4603      	mov	r3, r0
  401748:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
  40174a:	88fb      	ldrh	r3, [r7, #6]
  40174c:	2b00      	cmp	r3, #0
  40174e:	d007      	beq.n	401760 <mpu_set_compass_sample_rate+0x20>
  401750:	4b1a      	ldr	r3, [pc, #104]	; (4017bc <mpu_set_compass_sample_rate+0x7c>)
  401752:	89db      	ldrh	r3, [r3, #14]
  401754:	88fa      	ldrh	r2, [r7, #6]
  401756:	429a      	cmp	r2, r3
  401758:	d802      	bhi.n	401760 <mpu_set_compass_sample_rate+0x20>
  40175a:	88fb      	ldrh	r3, [r7, #6]
  40175c:	2b64      	cmp	r3, #100	; 0x64
  40175e:	d902      	bls.n	401766 <mpu_set_compass_sample_rate+0x26>
        return -1;
  401760:	f04f 33ff 	mov.w	r3, #4294967295
  401764:	e026      	b.n	4017b4 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
  401766:	4b15      	ldr	r3, [pc, #84]	; (4017bc <mpu_set_compass_sample_rate+0x7c>)
  401768:	89da      	ldrh	r2, [r3, #14]
  40176a:	88fb      	ldrh	r3, [r7, #6]
  40176c:	fbb2 f3f3 	udiv	r3, r2, r3
  401770:	b29b      	uxth	r3, r3
  401772:	b2db      	uxtb	r3, r3
  401774:	3b01      	subs	r3, #1
  401776:	b2db      	uxtb	r3, r3
  401778:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
  40177a:	4b10      	ldr	r3, [pc, #64]	; (4017bc <mpu_set_compass_sample_rate+0x7c>)
  40177c:	685b      	ldr	r3, [r3, #4]
  40177e:	7818      	ldrb	r0, [r3, #0]
  401780:	4b0e      	ldr	r3, [pc, #56]	; (4017bc <mpu_set_compass_sample_rate+0x7c>)
  401782:	681b      	ldr	r3, [r3, #0]
  401784:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
  401788:	f107 030f 	add.w	r3, r7, #15
  40178c:	2201      	movs	r2, #1
  40178e:	4c0c      	ldr	r4, [pc, #48]	; (4017c0 <mpu_set_compass_sample_rate+0x80>)
  401790:	47a0      	blx	r4
  401792:	4603      	mov	r3, r0
  401794:	2b00      	cmp	r3, #0
  401796:	d002      	beq.n	40179e <mpu_set_compass_sample_rate+0x5e>
        return -1;
  401798:	f04f 33ff 	mov.w	r3, #4294967295
  40179c:	e00a      	b.n	4017b4 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
  40179e:	4b07      	ldr	r3, [pc, #28]	; (4017bc <mpu_set_compass_sample_rate+0x7c>)
  4017a0:	89db      	ldrh	r3, [r3, #14]
  4017a2:	461a      	mov	r2, r3
  4017a4:	7bfb      	ldrb	r3, [r7, #15]
  4017a6:	3301      	adds	r3, #1
  4017a8:	fb92 f3f3 	sdiv	r3, r2, r3
  4017ac:	b29a      	uxth	r2, r3
  4017ae:	4b03      	ldr	r3, [pc, #12]	; (4017bc <mpu_set_compass_sample_rate+0x7c>)
  4017b0:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
  4017b2:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
  4017b4:	4618      	mov	r0, r3
  4017b6:	3714      	adds	r7, #20
  4017b8:	46bd      	mov	sp, r7
  4017ba:	bd90      	pop	{r4, r7, pc}
  4017bc:	20000000 	.word	0x20000000
  4017c0:	00403d29 	.word	0x00403d29

004017c4 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
  4017c4:	b580      	push	{r7, lr}
  4017c6:	b084      	sub	sp, #16
  4017c8:	af00      	add	r7, sp, #0
  4017ca:	4603      	mov	r3, r0
  4017cc:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
  4017ce:	2300      	movs	r3, #0
  4017d0:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
  4017d2:	79fb      	ldrb	r3, [r7, #7]
  4017d4:	f023 0301 	bic.w	r3, r3, #1
  4017d8:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
  4017da:	4b22      	ldr	r3, [pc, #136]	; (401864 <mpu_configure_fifo+0xa0>)
  4017dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4017e0:	2b00      	cmp	r3, #0
  4017e2:	d001      	beq.n	4017e8 <mpu_configure_fifo+0x24>
        return 0;
  4017e4:	2300      	movs	r3, #0
  4017e6:	e038      	b.n	40185a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
  4017e8:	4b1e      	ldr	r3, [pc, #120]	; (401864 <mpu_configure_fifo+0xa0>)
  4017ea:	7a9b      	ldrb	r3, [r3, #10]
  4017ec:	2b00      	cmp	r3, #0
  4017ee:	d102      	bne.n	4017f6 <mpu_configure_fifo+0x32>
            return -1;
  4017f0:	f04f 33ff 	mov.w	r3, #4294967295
  4017f4:	e031      	b.n	40185a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
  4017f6:	4b1b      	ldr	r3, [pc, #108]	; (401864 <mpu_configure_fifo+0xa0>)
  4017f8:	7c1b      	ldrb	r3, [r3, #16]
  4017fa:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
  4017fc:	4b19      	ldr	r3, [pc, #100]	; (401864 <mpu_configure_fifo+0xa0>)
  4017fe:	7a9a      	ldrb	r2, [r3, #10]
  401800:	79fb      	ldrb	r3, [r7, #7]
  401802:	4013      	ands	r3, r2
  401804:	b2da      	uxtb	r2, r3
  401806:	4b17      	ldr	r3, [pc, #92]	; (401864 <mpu_configure_fifo+0xa0>)
  401808:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
  40180a:	4b16      	ldr	r3, [pc, #88]	; (401864 <mpu_configure_fifo+0xa0>)
  40180c:	7c1b      	ldrb	r3, [r3, #16]
  40180e:	79fa      	ldrb	r2, [r7, #7]
  401810:	429a      	cmp	r2, r3
  401812:	d003      	beq.n	40181c <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
  401814:	f04f 33ff 	mov.w	r3, #4294967295
  401818:	60fb      	str	r3, [r7, #12]
  40181a:	e001      	b.n	401820 <mpu_configure_fifo+0x5c>
        else
            result = 0;
  40181c:	2300      	movs	r3, #0
  40181e:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
  401820:	79fb      	ldrb	r3, [r7, #7]
  401822:	2b00      	cmp	r3, #0
  401824:	d103      	bne.n	40182e <mpu_configure_fifo+0x6a>
  401826:	4b0f      	ldr	r3, [pc, #60]	; (401864 <mpu_configure_fifo+0xa0>)
  401828:	7d1b      	ldrb	r3, [r3, #20]
  40182a:	2b00      	cmp	r3, #0
  40182c:	d003      	beq.n	401836 <mpu_configure_fifo+0x72>
            set_int_enable(1);
  40182e:	2001      	movs	r0, #1
  401830:	4b0d      	ldr	r3, [pc, #52]	; (401868 <mpu_configure_fifo+0xa4>)
  401832:	4798      	blx	r3
  401834:	e002      	b.n	40183c <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
  401836:	2000      	movs	r0, #0
  401838:	4b0b      	ldr	r3, [pc, #44]	; (401868 <mpu_configure_fifo+0xa4>)
  40183a:	4798      	blx	r3
        if (sensors) {
  40183c:	79fb      	ldrb	r3, [r7, #7]
  40183e:	2b00      	cmp	r3, #0
  401840:	d00a      	beq.n	401858 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
  401842:	4b0a      	ldr	r3, [pc, #40]	; (40186c <mpu_configure_fifo+0xa8>)
  401844:	4798      	blx	r3
  401846:	4603      	mov	r3, r0
  401848:	2b00      	cmp	r3, #0
  40184a:	d005      	beq.n	401858 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
  40184c:	4a05      	ldr	r2, [pc, #20]	; (401864 <mpu_configure_fifo+0xa0>)
  40184e:	7afb      	ldrb	r3, [r7, #11]
  401850:	7413      	strb	r3, [r2, #16]
                return -1;
  401852:	f04f 33ff 	mov.w	r3, #4294967295
  401856:	e000      	b.n	40185a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
  401858:	68fb      	ldr	r3, [r7, #12]
}
  40185a:	4618      	mov	r0, r3
  40185c:	3710      	adds	r7, #16
  40185e:	46bd      	mov	sp, r7
  401860:	bd80      	pop	{r7, pc}
  401862:	bf00      	nop
  401864:	20000000 	.word	0x20000000
  401868:	00400d61 	.word	0x00400d61
  40186c:	00401119 	.word	0x00401119

00401870 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
  401870:	b590      	push	{r4, r7, lr}
  401872:	b085      	sub	sp, #20
  401874:	af00      	add	r7, sp, #0
  401876:	4603      	mov	r3, r0
  401878:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
  40187a:	79fb      	ldrb	r3, [r7, #7]
  40187c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401880:	2b00      	cmp	r3, #0
  401882:	d002      	beq.n	40188a <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
  401884:	2301      	movs	r3, #1
  401886:	73fb      	strb	r3, [r7, #15]
  401888:	e007      	b.n	40189a <mpu_set_sensors+0x2a>
    else if (sensors)
  40188a:	79fb      	ldrb	r3, [r7, #7]
  40188c:	2b00      	cmp	r3, #0
  40188e:	d002      	beq.n	401896 <mpu_set_sensors+0x26>
        data = 0;
  401890:	2300      	movs	r3, #0
  401892:	73fb      	strb	r3, [r7, #15]
  401894:	e001      	b.n	40189a <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
  401896:	2340      	movs	r3, #64	; 0x40
  401898:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
  40189a:	4b63      	ldr	r3, [pc, #396]	; (401a28 <mpu_set_sensors+0x1b8>)
  40189c:	685b      	ldr	r3, [r3, #4]
  40189e:	7818      	ldrb	r0, [r3, #0]
  4018a0:	4b61      	ldr	r3, [pc, #388]	; (401a28 <mpu_set_sensors+0x1b8>)
  4018a2:	681b      	ldr	r3, [r3, #0]
  4018a4:	7d59      	ldrb	r1, [r3, #21]
  4018a6:	f107 030f 	add.w	r3, r7, #15
  4018aa:	2201      	movs	r2, #1
  4018ac:	4c5f      	ldr	r4, [pc, #380]	; (401a2c <mpu_set_sensors+0x1bc>)
  4018ae:	47a0      	blx	r4
  4018b0:	4603      	mov	r3, r0
  4018b2:	2b00      	cmp	r3, #0
  4018b4:	d005      	beq.n	4018c2 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
  4018b6:	4b5c      	ldr	r3, [pc, #368]	; (401a28 <mpu_set_sensors+0x1b8>)
  4018b8:	2200      	movs	r2, #0
  4018ba:	729a      	strb	r2, [r3, #10]
        return -1;
  4018bc:	f04f 33ff 	mov.w	r3, #4294967295
  4018c0:	e0ae      	b.n	401a20 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
  4018c2:	7bfb      	ldrb	r3, [r7, #15]
  4018c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4018c8:	b2da      	uxtb	r2, r3
  4018ca:	4b57      	ldr	r3, [pc, #348]	; (401a28 <mpu_set_sensors+0x1b8>)
  4018cc:	731a      	strb	r2, [r3, #12]

    data = 0;
  4018ce:	2300      	movs	r3, #0
  4018d0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
  4018d2:	79fb      	ldrb	r3, [r7, #7]
  4018d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4018d8:	2b00      	cmp	r3, #0
  4018da:	d104      	bne.n	4018e6 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
  4018dc:	7bfb      	ldrb	r3, [r7, #15]
  4018de:	f043 0304 	orr.w	r3, r3, #4
  4018e2:	b2db      	uxtb	r3, r3
  4018e4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
  4018e6:	79fb      	ldrb	r3, [r7, #7]
  4018e8:	f003 0320 	and.w	r3, r3, #32
  4018ec:	2b00      	cmp	r3, #0
  4018ee:	d104      	bne.n	4018fa <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
  4018f0:	7bfb      	ldrb	r3, [r7, #15]
  4018f2:	f043 0302 	orr.w	r3, r3, #2
  4018f6:	b2db      	uxtb	r3, r3
  4018f8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
  4018fa:	79fb      	ldrb	r3, [r7, #7]
  4018fc:	f003 0310 	and.w	r3, r3, #16
  401900:	2b00      	cmp	r3, #0
  401902:	d104      	bne.n	40190e <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
  401904:	7bfb      	ldrb	r3, [r7, #15]
  401906:	f043 0301 	orr.w	r3, r3, #1
  40190a:	b2db      	uxtb	r3, r3
  40190c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
  40190e:	79fb      	ldrb	r3, [r7, #7]
  401910:	f003 0308 	and.w	r3, r3, #8
  401914:	2b00      	cmp	r3, #0
  401916:	d104      	bne.n	401922 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
  401918:	7bfb      	ldrb	r3, [r7, #15]
  40191a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
  40191e:	b2db      	uxtb	r3, r3
  401920:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
  401922:	4b41      	ldr	r3, [pc, #260]	; (401a28 <mpu_set_sensors+0x1b8>)
  401924:	685b      	ldr	r3, [r3, #4]
  401926:	7818      	ldrb	r0, [r3, #0]
  401928:	4b3f      	ldr	r3, [pc, #252]	; (401a28 <mpu_set_sensors+0x1b8>)
  40192a:	681b      	ldr	r3, [r3, #0]
  40192c:	7d99      	ldrb	r1, [r3, #22]
  40192e:	f107 030f 	add.w	r3, r7, #15
  401932:	2201      	movs	r2, #1
  401934:	4c3d      	ldr	r4, [pc, #244]	; (401a2c <mpu_set_sensors+0x1bc>)
  401936:	47a0      	blx	r4
  401938:	4603      	mov	r3, r0
  40193a:	2b00      	cmp	r3, #0
  40193c:	d005      	beq.n	40194a <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
  40193e:	4b3a      	ldr	r3, [pc, #232]	; (401a28 <mpu_set_sensors+0x1b8>)
  401940:	2200      	movs	r2, #0
  401942:	729a      	strb	r2, [r3, #10]
        return -1;
  401944:	f04f 33ff 	mov.w	r3, #4294967295
  401948:	e06a      	b.n	401a20 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
  40194a:	79fb      	ldrb	r3, [r7, #7]
  40194c:	2b00      	cmp	r3, #0
  40194e:	d005      	beq.n	40195c <mpu_set_sensors+0xec>
  401950:	79fb      	ldrb	r3, [r7, #7]
  401952:	2b08      	cmp	r3, #8
  401954:	d002      	beq.n	40195c <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
  401956:	2000      	movs	r0, #0
  401958:	4b35      	ldr	r3, [pc, #212]	; (401a30 <mpu_set_sensors+0x1c0>)
  40195a:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
  40195c:	4b32      	ldr	r3, [pc, #200]	; (401a28 <mpu_set_sensors+0x1b8>)
  40195e:	685b      	ldr	r3, [r3, #4]
  401960:	7818      	ldrb	r0, [r3, #0]
  401962:	4b31      	ldr	r3, [pc, #196]	; (401a28 <mpu_set_sensors+0x1b8>)
  401964:	681b      	ldr	r3, [r3, #0]
  401966:	7919      	ldrb	r1, [r3, #4]
  401968:	f107 030e 	add.w	r3, r7, #14
  40196c:	2201      	movs	r2, #1
  40196e:	4c31      	ldr	r4, [pc, #196]	; (401a34 <mpu_set_sensors+0x1c4>)
  401970:	47a0      	blx	r4
  401972:	4603      	mov	r3, r0
  401974:	2b00      	cmp	r3, #0
  401976:	d002      	beq.n	40197e <mpu_set_sensors+0x10e>
        return -1;
  401978:	f04f 33ff 	mov.w	r3, #4294967295
  40197c:	e050      	b.n	401a20 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
  40197e:	79fb      	ldrb	r3, [r7, #7]
  401980:	f003 0301 	and.w	r3, r3, #1
  401984:	2b00      	cmp	r3, #0
  401986:	d007      	beq.n	401998 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
  401988:	2311      	movs	r3, #17
  40198a:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
  40198c:	7bbb      	ldrb	r3, [r7, #14]
  40198e:	f043 0320 	orr.w	r3, r3, #32
  401992:	b2db      	uxtb	r3, r3
  401994:	73bb      	strb	r3, [r7, #14]
  401996:	e006      	b.n	4019a6 <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
  401998:	2310      	movs	r3, #16
  40199a:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
  40199c:	7bbb      	ldrb	r3, [r7, #14]
  40199e:	f023 0320 	bic.w	r3, r3, #32
  4019a2:	b2db      	uxtb	r3, r3
  4019a4:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
  4019a6:	4b20      	ldr	r3, [pc, #128]	; (401a28 <mpu_set_sensors+0x1b8>)
  4019a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4019ac:	2b00      	cmp	r3, #0
  4019ae:	d005      	beq.n	4019bc <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
  4019b0:	7bbb      	ldrb	r3, [r7, #14]
  4019b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4019b6:	b2db      	uxtb	r3, r3
  4019b8:	73bb      	strb	r3, [r7, #14]
  4019ba:	e004      	b.n	4019c6 <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
  4019bc:	7bbb      	ldrb	r3, [r7, #14]
  4019be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4019c2:	b2db      	uxtb	r3, r3
  4019c4:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
  4019c6:	4b18      	ldr	r3, [pc, #96]	; (401a28 <mpu_set_sensors+0x1b8>)
  4019c8:	685b      	ldr	r3, [r3, #4]
  4019ca:	7818      	ldrb	r0, [r3, #0]
  4019cc:	4b16      	ldr	r3, [pc, #88]	; (401a28 <mpu_set_sensors+0x1b8>)
  4019ce:	681b      	ldr	r3, [r3, #0]
  4019d0:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
  4019d4:	f107 030f 	add.w	r3, r7, #15
  4019d8:	2201      	movs	r2, #1
  4019da:	4c14      	ldr	r4, [pc, #80]	; (401a2c <mpu_set_sensors+0x1bc>)
  4019dc:	47a0      	blx	r4
  4019de:	4603      	mov	r3, r0
  4019e0:	2b00      	cmp	r3, #0
  4019e2:	d002      	beq.n	4019ea <mpu_set_sensors+0x17a>
        return -1;
  4019e4:	f04f 33ff 	mov.w	r3, #4294967295
  4019e8:	e01a      	b.n	401a20 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
  4019ea:	4b0f      	ldr	r3, [pc, #60]	; (401a28 <mpu_set_sensors+0x1b8>)
  4019ec:	685b      	ldr	r3, [r3, #4]
  4019ee:	7818      	ldrb	r0, [r3, #0]
  4019f0:	4b0d      	ldr	r3, [pc, #52]	; (401a28 <mpu_set_sensors+0x1b8>)
  4019f2:	681b      	ldr	r3, [r3, #0]
  4019f4:	7919      	ldrb	r1, [r3, #4]
  4019f6:	f107 030e 	add.w	r3, r7, #14
  4019fa:	2201      	movs	r2, #1
  4019fc:	4c0b      	ldr	r4, [pc, #44]	; (401a2c <mpu_set_sensors+0x1bc>)
  4019fe:	47a0      	blx	r4
  401a00:	4603      	mov	r3, r0
  401a02:	2b00      	cmp	r3, #0
  401a04:	d002      	beq.n	401a0c <mpu_set_sensors+0x19c>
        return -1;
  401a06:	f04f 33ff 	mov.w	r3, #4294967295
  401a0a:	e009      	b.n	401a20 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
  401a0c:	4a06      	ldr	r2, [pc, #24]	; (401a28 <mpu_set_sensors+0x1b8>)
  401a0e:	79fb      	ldrb	r3, [r7, #7]
  401a10:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
  401a12:	4b05      	ldr	r3, [pc, #20]	; (401a28 <mpu_set_sensors+0x1b8>)
  401a14:	2200      	movs	r2, #0
  401a16:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
  401a18:	2032      	movs	r0, #50	; 0x32
  401a1a:	4b07      	ldr	r3, [pc, #28]	; (401a38 <mpu_set_sensors+0x1c8>)
  401a1c:	4798      	blx	r3
    return 0;
  401a1e:	2300      	movs	r3, #0
}
  401a20:	4618      	mov	r0, r3
  401a22:	3714      	adds	r7, #20
  401a24:	46bd      	mov	sp, r7
  401a26:	bd90      	pop	{r4, r7, pc}
  401a28:	20000000 	.word	0x20000000
  401a2c:	00403d29 	.word	0x00403d29
  401a30:	00401cd9 	.word	0x00401cd9
  401a34:	00403de5 	.word	0x00403de5
  401a38:	00403cf9 	.word	0x00403cf9

00401a3c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
  401a3c:	b590      	push	{r4, r7, lr}
  401a3e:	b087      	sub	sp, #28
  401a40:	af00      	add	r7, sp, #0
  401a42:	4603      	mov	r3, r0
  401a44:	60b9      	str	r1, [r7, #8]
  401a46:	607a      	str	r2, [r7, #4]
  401a48:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
  401a4a:	4b3a      	ldr	r3, [pc, #232]	; (401b34 <mpu_read_fifo_stream+0xf8>)
  401a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401a50:	2b00      	cmp	r3, #0
  401a52:	d102      	bne.n	401a5a <mpu_read_fifo_stream+0x1e>
        return -1;
  401a54:	f04f 33ff 	mov.w	r3, #4294967295
  401a58:	e068      	b.n	401b2c <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
  401a5a:	4b36      	ldr	r3, [pc, #216]	; (401b34 <mpu_read_fifo_stream+0xf8>)
  401a5c:	7a9b      	ldrb	r3, [r3, #10]
  401a5e:	2b00      	cmp	r3, #0
  401a60:	d102      	bne.n	401a68 <mpu_read_fifo_stream+0x2c>
        return -1;
  401a62:	f04f 33ff 	mov.w	r3, #4294967295
  401a66:	e061      	b.n	401b2c <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
  401a68:	4b32      	ldr	r3, [pc, #200]	; (401b34 <mpu_read_fifo_stream+0xf8>)
  401a6a:	685b      	ldr	r3, [r3, #4]
  401a6c:	7818      	ldrb	r0, [r3, #0]
  401a6e:	4b31      	ldr	r3, [pc, #196]	; (401b34 <mpu_read_fifo_stream+0xf8>)
  401a70:	681b      	ldr	r3, [r3, #0]
  401a72:	7b19      	ldrb	r1, [r3, #12]
  401a74:	f107 0314 	add.w	r3, r7, #20
  401a78:	2202      	movs	r2, #2
  401a7a:	4c2f      	ldr	r4, [pc, #188]	; (401b38 <mpu_read_fifo_stream+0xfc>)
  401a7c:	47a0      	blx	r4
  401a7e:	4603      	mov	r3, r0
  401a80:	2b00      	cmp	r3, #0
  401a82:	d002      	beq.n	401a8a <mpu_read_fifo_stream+0x4e>
        return -1;
  401a84:	f04f 33ff 	mov.w	r3, #4294967295
  401a88:	e050      	b.n	401b2c <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
  401a8a:	7d3b      	ldrb	r3, [r7, #20]
  401a8c:	021b      	lsls	r3, r3, #8
  401a8e:	b21a      	sxth	r2, r3
  401a90:	7d7b      	ldrb	r3, [r7, #21]
  401a92:	b21b      	sxth	r3, r3
  401a94:	4313      	orrs	r3, r2
  401a96:	b21b      	sxth	r3, r3
  401a98:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
  401a9a:	8afa      	ldrh	r2, [r7, #22]
  401a9c:	89fb      	ldrh	r3, [r7, #14]
  401a9e:	429a      	cmp	r2, r3
  401aa0:	d205      	bcs.n	401aae <mpu_read_fifo_stream+0x72>
        more[0] = 0;
  401aa2:	687b      	ldr	r3, [r7, #4]
  401aa4:	2200      	movs	r2, #0
  401aa6:	701a      	strb	r2, [r3, #0]
        return -1;
  401aa8:	f04f 33ff 	mov.w	r3, #4294967295
  401aac:	e03e      	b.n	401b2c <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
  401aae:	4b21      	ldr	r3, [pc, #132]	; (401b34 <mpu_read_fifo_stream+0xf8>)
  401ab0:	685b      	ldr	r3, [r3, #4]
  401ab2:	885b      	ldrh	r3, [r3, #2]
  401ab4:	085b      	lsrs	r3, r3, #1
  401ab6:	b29b      	uxth	r3, r3
  401ab8:	8afa      	ldrh	r2, [r7, #22]
  401aba:	429a      	cmp	r2, r3
  401abc:	d91a      	bls.n	401af4 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
  401abe:	4b1d      	ldr	r3, [pc, #116]	; (401b34 <mpu_read_fifo_stream+0xf8>)
  401ac0:	685b      	ldr	r3, [r3, #4]
  401ac2:	7818      	ldrb	r0, [r3, #0]
  401ac4:	4b1b      	ldr	r3, [pc, #108]	; (401b34 <mpu_read_fifo_stream+0xf8>)
  401ac6:	681b      	ldr	r3, [r3, #0]
  401ac8:	7cd9      	ldrb	r1, [r3, #19]
  401aca:	f107 0314 	add.w	r3, r7, #20
  401ace:	2201      	movs	r2, #1
  401ad0:	4c19      	ldr	r4, [pc, #100]	; (401b38 <mpu_read_fifo_stream+0xfc>)
  401ad2:	47a0      	blx	r4
  401ad4:	4603      	mov	r3, r0
  401ad6:	2b00      	cmp	r3, #0
  401ad8:	d002      	beq.n	401ae0 <mpu_read_fifo_stream+0xa4>
            return -1;
  401ada:	f04f 33ff 	mov.w	r3, #4294967295
  401ade:	e025      	b.n	401b2c <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
  401ae0:	7d3b      	ldrb	r3, [r7, #20]
  401ae2:	f003 0310 	and.w	r3, r3, #16
  401ae6:	2b00      	cmp	r3, #0
  401ae8:	d004      	beq.n	401af4 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
  401aea:	4b14      	ldr	r3, [pc, #80]	; (401b3c <mpu_read_fifo_stream+0x100>)
  401aec:	4798      	blx	r3
            return -2;
  401aee:	f06f 0301 	mvn.w	r3, #1
  401af2:	e01b      	b.n	401b2c <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
  401af4:	4b0f      	ldr	r3, [pc, #60]	; (401b34 <mpu_read_fifo_stream+0xf8>)
  401af6:	685b      	ldr	r3, [r3, #4]
  401af8:	7818      	ldrb	r0, [r3, #0]
  401afa:	4b0e      	ldr	r3, [pc, #56]	; (401b34 <mpu_read_fifo_stream+0xf8>)
  401afc:	681b      	ldr	r3, [r3, #0]
  401afe:	7b59      	ldrb	r1, [r3, #13]
  401b00:	89fb      	ldrh	r3, [r7, #14]
  401b02:	b2da      	uxtb	r2, r3
  401b04:	68bb      	ldr	r3, [r7, #8]
  401b06:	4c0c      	ldr	r4, [pc, #48]	; (401b38 <mpu_read_fifo_stream+0xfc>)
  401b08:	47a0      	blx	r4
  401b0a:	4603      	mov	r3, r0
  401b0c:	2b00      	cmp	r3, #0
  401b0e:	d002      	beq.n	401b16 <mpu_read_fifo_stream+0xda>
        return -1;
  401b10:	f04f 33ff 	mov.w	r3, #4294967295
  401b14:	e00a      	b.n	401b2c <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
  401b16:	8afa      	ldrh	r2, [r7, #22]
  401b18:	89fb      	ldrh	r3, [r7, #14]
  401b1a:	fbb2 f3f3 	udiv	r3, r2, r3
  401b1e:	b29b      	uxth	r3, r3
  401b20:	b2db      	uxtb	r3, r3
  401b22:	3b01      	subs	r3, #1
  401b24:	b2da      	uxtb	r2, r3
  401b26:	687b      	ldr	r3, [r7, #4]
  401b28:	701a      	strb	r2, [r3, #0]
    return 0;
  401b2a:	2300      	movs	r3, #0
}
  401b2c:	4618      	mov	r0, r3
  401b2e:	371c      	adds	r7, #28
  401b30:	46bd      	mov	sp, r7
  401b32:	bd90      	pop	{r4, r7, pc}
  401b34:	20000000 	.word	0x20000000
  401b38:	00403de5 	.word	0x00403de5
  401b3c:	00401119 	.word	0x00401119

00401b40 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
  401b40:	b590      	push	{r4, r7, lr}
  401b42:	b085      	sub	sp, #20
  401b44:	af00      	add	r7, sp, #0
  401b46:	4603      	mov	r3, r0
  401b48:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
  401b4a:	4b5f      	ldr	r3, [pc, #380]	; (401cc8 <mpu_set_bypass+0x188>)
  401b4c:	7c9b      	ldrb	r3, [r3, #18]
  401b4e:	79fa      	ldrb	r2, [r7, #7]
  401b50:	429a      	cmp	r2, r3
  401b52:	d101      	bne.n	401b58 <mpu_set_bypass+0x18>
        return 0;
  401b54:	2300      	movs	r3, #0
  401b56:	e0b2      	b.n	401cbe <mpu_set_bypass+0x17e>

    if (bypass_on) {
  401b58:	79fb      	ldrb	r3, [r7, #7]
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d050      	beq.n	401c00 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401b5e:	4b5a      	ldr	r3, [pc, #360]	; (401cc8 <mpu_set_bypass+0x188>)
  401b60:	685b      	ldr	r3, [r3, #4]
  401b62:	7818      	ldrb	r0, [r3, #0]
  401b64:	4b58      	ldr	r3, [pc, #352]	; (401cc8 <mpu_set_bypass+0x188>)
  401b66:	681b      	ldr	r3, [r3, #0]
  401b68:	7919      	ldrb	r1, [r3, #4]
  401b6a:	f107 030f 	add.w	r3, r7, #15
  401b6e:	2201      	movs	r2, #1
  401b70:	4c56      	ldr	r4, [pc, #344]	; (401ccc <mpu_set_bypass+0x18c>)
  401b72:	47a0      	blx	r4
  401b74:	4603      	mov	r3, r0
  401b76:	2b00      	cmp	r3, #0
  401b78:	d002      	beq.n	401b80 <mpu_set_bypass+0x40>
            return -1;
  401b7a:	f04f 33ff 	mov.w	r3, #4294967295
  401b7e:	e09e      	b.n	401cbe <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
  401b80:	7bfb      	ldrb	r3, [r7, #15]
  401b82:	f023 0320 	bic.w	r3, r3, #32
  401b86:	b2db      	uxtb	r3, r3
  401b88:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401b8a:	4b4f      	ldr	r3, [pc, #316]	; (401cc8 <mpu_set_bypass+0x188>)
  401b8c:	685b      	ldr	r3, [r3, #4]
  401b8e:	7818      	ldrb	r0, [r3, #0]
  401b90:	4b4d      	ldr	r3, [pc, #308]	; (401cc8 <mpu_set_bypass+0x188>)
  401b92:	681b      	ldr	r3, [r3, #0]
  401b94:	7919      	ldrb	r1, [r3, #4]
  401b96:	f107 030f 	add.w	r3, r7, #15
  401b9a:	2201      	movs	r2, #1
  401b9c:	4c4c      	ldr	r4, [pc, #304]	; (401cd0 <mpu_set_bypass+0x190>)
  401b9e:	47a0      	blx	r4
  401ba0:	4603      	mov	r3, r0
  401ba2:	2b00      	cmp	r3, #0
  401ba4:	d002      	beq.n	401bac <mpu_set_bypass+0x6c>
            return -1;
  401ba6:	f04f 33ff 	mov.w	r3, #4294967295
  401baa:	e088      	b.n	401cbe <mpu_set_bypass+0x17e>
        delay_ms(3);
  401bac:	2003      	movs	r0, #3
  401bae:	4b49      	ldr	r3, [pc, #292]	; (401cd4 <mpu_set_bypass+0x194>)
  401bb0:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
  401bb2:	2302      	movs	r3, #2
  401bb4:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
  401bb6:	4b44      	ldr	r3, [pc, #272]	; (401cc8 <mpu_set_bypass+0x188>)
  401bb8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401bbc:	2b00      	cmp	r3, #0
  401bbe:	d004      	beq.n	401bca <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
  401bc0:	7bfb      	ldrb	r3, [r7, #15]
  401bc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401bc6:	b2db      	uxtb	r3, r3
  401bc8:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
  401bca:	4b3f      	ldr	r3, [pc, #252]	; (401cc8 <mpu_set_bypass+0x188>)
  401bcc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401bd0:	2b00      	cmp	r3, #0
  401bd2:	d004      	beq.n	401bde <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401bd4:	7bfb      	ldrb	r3, [r7, #15]
  401bd6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401bda:	b2db      	uxtb	r3, r3
  401bdc:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401bde:	4b3a      	ldr	r3, [pc, #232]	; (401cc8 <mpu_set_bypass+0x188>)
  401be0:	685b      	ldr	r3, [r3, #4]
  401be2:	7818      	ldrb	r0, [r3, #0]
  401be4:	4b38      	ldr	r3, [pc, #224]	; (401cc8 <mpu_set_bypass+0x188>)
  401be6:	681b      	ldr	r3, [r3, #0]
  401be8:	7dd9      	ldrb	r1, [r3, #23]
  401bea:	f107 030f 	add.w	r3, r7, #15
  401bee:	2201      	movs	r2, #1
  401bf0:	4c37      	ldr	r4, [pc, #220]	; (401cd0 <mpu_set_bypass+0x190>)
  401bf2:	47a0      	blx	r4
  401bf4:	4603      	mov	r3, r0
  401bf6:	2b00      	cmp	r3, #0
  401bf8:	d05d      	beq.n	401cb6 <mpu_set_bypass+0x176>
            return -1;
  401bfa:	f04f 33ff 	mov.w	r3, #4294967295
  401bfe:	e05e      	b.n	401cbe <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401c00:	4b31      	ldr	r3, [pc, #196]	; (401cc8 <mpu_set_bypass+0x188>)
  401c02:	685b      	ldr	r3, [r3, #4]
  401c04:	7818      	ldrb	r0, [r3, #0]
  401c06:	4b30      	ldr	r3, [pc, #192]	; (401cc8 <mpu_set_bypass+0x188>)
  401c08:	681b      	ldr	r3, [r3, #0]
  401c0a:	7919      	ldrb	r1, [r3, #4]
  401c0c:	f107 030f 	add.w	r3, r7, #15
  401c10:	2201      	movs	r2, #1
  401c12:	4c2e      	ldr	r4, [pc, #184]	; (401ccc <mpu_set_bypass+0x18c>)
  401c14:	47a0      	blx	r4
  401c16:	4603      	mov	r3, r0
  401c18:	2b00      	cmp	r3, #0
  401c1a:	d002      	beq.n	401c22 <mpu_set_bypass+0xe2>
            return -1;
  401c1c:	f04f 33ff 	mov.w	r3, #4294967295
  401c20:	e04d      	b.n	401cbe <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
  401c22:	4b29      	ldr	r3, [pc, #164]	; (401cc8 <mpu_set_bypass+0x188>)
  401c24:	7a9b      	ldrb	r3, [r3, #10]
  401c26:	f003 0301 	and.w	r3, r3, #1
  401c2a:	2b00      	cmp	r3, #0
  401c2c:	d005      	beq.n	401c3a <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
  401c2e:	7bfb      	ldrb	r3, [r7, #15]
  401c30:	f043 0320 	orr.w	r3, r3, #32
  401c34:	b2db      	uxtb	r3, r3
  401c36:	73fb      	strb	r3, [r7, #15]
  401c38:	e004      	b.n	401c44 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
  401c3a:	7bfb      	ldrb	r3, [r7, #15]
  401c3c:	f023 0320 	bic.w	r3, r3, #32
  401c40:	b2db      	uxtb	r3, r3
  401c42:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401c44:	4b20      	ldr	r3, [pc, #128]	; (401cc8 <mpu_set_bypass+0x188>)
  401c46:	685b      	ldr	r3, [r3, #4]
  401c48:	7818      	ldrb	r0, [r3, #0]
  401c4a:	4b1f      	ldr	r3, [pc, #124]	; (401cc8 <mpu_set_bypass+0x188>)
  401c4c:	681b      	ldr	r3, [r3, #0]
  401c4e:	7919      	ldrb	r1, [r3, #4]
  401c50:	f107 030f 	add.w	r3, r7, #15
  401c54:	2201      	movs	r2, #1
  401c56:	4c1e      	ldr	r4, [pc, #120]	; (401cd0 <mpu_set_bypass+0x190>)
  401c58:	47a0      	blx	r4
  401c5a:	4603      	mov	r3, r0
  401c5c:	2b00      	cmp	r3, #0
  401c5e:	d002      	beq.n	401c66 <mpu_set_bypass+0x126>
            return -1;
  401c60:	f04f 33ff 	mov.w	r3, #4294967295
  401c64:	e02b      	b.n	401cbe <mpu_set_bypass+0x17e>
        delay_ms(3);
  401c66:	2003      	movs	r0, #3
  401c68:	4b1a      	ldr	r3, [pc, #104]	; (401cd4 <mpu_set_bypass+0x194>)
  401c6a:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
  401c6c:	4b16      	ldr	r3, [pc, #88]	; (401cc8 <mpu_set_bypass+0x188>)
  401c6e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401c72:	2b00      	cmp	r3, #0
  401c74:	d002      	beq.n	401c7c <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
  401c76:	2380      	movs	r3, #128	; 0x80
  401c78:	73fb      	strb	r3, [r7, #15]
  401c7a:	e001      	b.n	401c80 <mpu_set_bypass+0x140>
        else
            tmp = 0;
  401c7c:	2300      	movs	r3, #0
  401c7e:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
  401c80:	4b11      	ldr	r3, [pc, #68]	; (401cc8 <mpu_set_bypass+0x188>)
  401c82:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401c86:	2b00      	cmp	r3, #0
  401c88:	d004      	beq.n	401c94 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401c8a:	7bfb      	ldrb	r3, [r7, #15]
  401c8c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401c90:	b2db      	uxtb	r3, r3
  401c92:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401c94:	4b0c      	ldr	r3, [pc, #48]	; (401cc8 <mpu_set_bypass+0x188>)
  401c96:	685b      	ldr	r3, [r3, #4]
  401c98:	7818      	ldrb	r0, [r3, #0]
  401c9a:	4b0b      	ldr	r3, [pc, #44]	; (401cc8 <mpu_set_bypass+0x188>)
  401c9c:	681b      	ldr	r3, [r3, #0]
  401c9e:	7dd9      	ldrb	r1, [r3, #23]
  401ca0:	f107 030f 	add.w	r3, r7, #15
  401ca4:	2201      	movs	r2, #1
  401ca6:	4c0a      	ldr	r4, [pc, #40]	; (401cd0 <mpu_set_bypass+0x190>)
  401ca8:	47a0      	blx	r4
  401caa:	4603      	mov	r3, r0
  401cac:	2b00      	cmp	r3, #0
  401cae:	d002      	beq.n	401cb6 <mpu_set_bypass+0x176>
            return -1;
  401cb0:	f04f 33ff 	mov.w	r3, #4294967295
  401cb4:	e003      	b.n	401cbe <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
  401cb6:	4a04      	ldr	r2, [pc, #16]	; (401cc8 <mpu_set_bypass+0x188>)
  401cb8:	79fb      	ldrb	r3, [r7, #7]
  401cba:	7493      	strb	r3, [r2, #18]
    return 0;
  401cbc:	2300      	movs	r3, #0
}
  401cbe:	4618      	mov	r0, r3
  401cc0:	3714      	adds	r7, #20
  401cc2:	46bd      	mov	sp, r7
  401cc4:	bd90      	pop	{r4, r7, pc}
  401cc6:	bf00      	nop
  401cc8:	20000000 	.word	0x20000000
  401ccc:	00403de5 	.word	0x00403de5
  401cd0:	00403d29 	.word	0x00403d29
  401cd4:	00403cf9 	.word	0x00403cf9

00401cd8 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
  401cd8:	b590      	push	{r4, r7, lr}
  401cda:	b085      	sub	sp, #20
  401cdc:	af00      	add	r7, sp, #0
  401cde:	4603      	mov	r3, r0
  401ce0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
  401ce2:	4b1e      	ldr	r3, [pc, #120]	; (401d5c <mpu_set_int_latched+0x84>)
  401ce4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401ce8:	79fa      	ldrb	r2, [r7, #7]
  401cea:	429a      	cmp	r2, r3
  401cec:	d101      	bne.n	401cf2 <mpu_set_int_latched+0x1a>
        return 0;
  401cee:	2300      	movs	r3, #0
  401cf0:	e030      	b.n	401d54 <mpu_set_int_latched+0x7c>

    if (enable)
  401cf2:	79fb      	ldrb	r3, [r7, #7]
  401cf4:	2b00      	cmp	r3, #0
  401cf6:	d002      	beq.n	401cfe <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401cf8:	2330      	movs	r3, #48	; 0x30
  401cfa:	73fb      	strb	r3, [r7, #15]
  401cfc:	e001      	b.n	401d02 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
  401cfe:	2300      	movs	r3, #0
  401d00:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
  401d02:	4b16      	ldr	r3, [pc, #88]	; (401d5c <mpu_set_int_latched+0x84>)
  401d04:	7c9b      	ldrb	r3, [r3, #18]
  401d06:	2b00      	cmp	r3, #0
  401d08:	d004      	beq.n	401d14 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
  401d0a:	7bfb      	ldrb	r3, [r7, #15]
  401d0c:	f043 0302 	orr.w	r3, r3, #2
  401d10:	b2db      	uxtb	r3, r3
  401d12:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
  401d14:	4b11      	ldr	r3, [pc, #68]	; (401d5c <mpu_set_int_latched+0x84>)
  401d16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401d1a:	2b00      	cmp	r3, #0
  401d1c:	d004      	beq.n	401d28 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
  401d1e:	7bfb      	ldrb	r3, [r7, #15]
  401d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401d24:	b2db      	uxtb	r3, r3
  401d26:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401d28:	4b0c      	ldr	r3, [pc, #48]	; (401d5c <mpu_set_int_latched+0x84>)
  401d2a:	685b      	ldr	r3, [r3, #4]
  401d2c:	7818      	ldrb	r0, [r3, #0]
  401d2e:	4b0b      	ldr	r3, [pc, #44]	; (401d5c <mpu_set_int_latched+0x84>)
  401d30:	681b      	ldr	r3, [r3, #0]
  401d32:	7dd9      	ldrb	r1, [r3, #23]
  401d34:	f107 030f 	add.w	r3, r7, #15
  401d38:	2201      	movs	r2, #1
  401d3a:	4c09      	ldr	r4, [pc, #36]	; (401d60 <mpu_set_int_latched+0x88>)
  401d3c:	47a0      	blx	r4
  401d3e:	4603      	mov	r3, r0
  401d40:	2b00      	cmp	r3, #0
  401d42:	d002      	beq.n	401d4a <mpu_set_int_latched+0x72>
        return -1;
  401d44:	f04f 33ff 	mov.w	r3, #4294967295
  401d48:	e004      	b.n	401d54 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
  401d4a:	4a04      	ldr	r2, [pc, #16]	; (401d5c <mpu_set_int_latched+0x84>)
  401d4c:	79fb      	ldrb	r3, [r7, #7]
  401d4e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
  401d52:	2300      	movs	r3, #0
}
  401d54:	4618      	mov	r0, r3
  401d56:	3714      	adds	r7, #20
  401d58:	46bd      	mov	sp, r7
  401d5a:	bd90      	pop	{r4, r7, pc}
  401d5c:	20000000 	.word	0x20000000
  401d60:	00403d29 	.word	0x00403d29

00401d64 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
  401d64:	b590      	push	{r4, r7, lr}
  401d66:	b085      	sub	sp, #20
  401d68:	af00      	add	r7, sp, #0
  401d6a:	4603      	mov	r3, r0
  401d6c:	603a      	str	r2, [r7, #0]
  401d6e:	80fb      	strh	r3, [r7, #6]
  401d70:	460b      	mov	r3, r1
  401d72:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
  401d74:	683b      	ldr	r3, [r7, #0]
  401d76:	2b00      	cmp	r3, #0
  401d78:	d102      	bne.n	401d80 <mpu_write_mem+0x1c>
        return -1;
  401d7a:	f04f 33ff 	mov.w	r3, #4294967295
  401d7e:	e03d      	b.n	401dfc <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
  401d80:	4b20      	ldr	r3, [pc, #128]	; (401e04 <mpu_write_mem+0xa0>)
  401d82:	7a9b      	ldrb	r3, [r3, #10]
  401d84:	2b00      	cmp	r3, #0
  401d86:	d102      	bne.n	401d8e <mpu_write_mem+0x2a>
        return -1;
  401d88:	f04f 33ff 	mov.w	r3, #4294967295
  401d8c:	e036      	b.n	401dfc <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
  401d8e:	88fb      	ldrh	r3, [r7, #6]
  401d90:	0a1b      	lsrs	r3, r3, #8
  401d92:	b29b      	uxth	r3, r3
  401d94:	b2db      	uxtb	r3, r3
  401d96:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
  401d98:	88fb      	ldrh	r3, [r7, #6]
  401d9a:	b2db      	uxtb	r3, r3
  401d9c:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
  401d9e:	7b7b      	ldrb	r3, [r7, #13]
  401da0:	461a      	mov	r2, r3
  401da2:	88bb      	ldrh	r3, [r7, #4]
  401da4:	4413      	add	r3, r2
  401da6:	4a17      	ldr	r2, [pc, #92]	; (401e04 <mpu_write_mem+0xa0>)
  401da8:	6852      	ldr	r2, [r2, #4]
  401daa:	8952      	ldrh	r2, [r2, #10]
  401dac:	4293      	cmp	r3, r2
  401dae:	dd02      	ble.n	401db6 <mpu_write_mem+0x52>
        return -1;
  401db0:	f04f 33ff 	mov.w	r3, #4294967295
  401db4:	e022      	b.n	401dfc <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
  401db6:	4b13      	ldr	r3, [pc, #76]	; (401e04 <mpu_write_mem+0xa0>)
  401db8:	685b      	ldr	r3, [r3, #4]
  401dba:	7818      	ldrb	r0, [r3, #0]
  401dbc:	4b11      	ldr	r3, [pc, #68]	; (401e04 <mpu_write_mem+0xa0>)
  401dbe:	681b      	ldr	r3, [r3, #0]
  401dc0:	7ed9      	ldrb	r1, [r3, #27]
  401dc2:	f107 030c 	add.w	r3, r7, #12
  401dc6:	2202      	movs	r2, #2
  401dc8:	4c0f      	ldr	r4, [pc, #60]	; (401e08 <mpu_write_mem+0xa4>)
  401dca:	47a0      	blx	r4
  401dcc:	4603      	mov	r3, r0
  401dce:	2b00      	cmp	r3, #0
  401dd0:	d002      	beq.n	401dd8 <mpu_write_mem+0x74>
        return -1;
  401dd2:	f04f 33ff 	mov.w	r3, #4294967295
  401dd6:	e011      	b.n	401dfc <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
  401dd8:	4b0a      	ldr	r3, [pc, #40]	; (401e04 <mpu_write_mem+0xa0>)
  401dda:	685b      	ldr	r3, [r3, #4]
  401ddc:	7818      	ldrb	r0, [r3, #0]
  401dde:	4b09      	ldr	r3, [pc, #36]	; (401e04 <mpu_write_mem+0xa0>)
  401de0:	681b      	ldr	r3, [r3, #0]
  401de2:	7e19      	ldrb	r1, [r3, #24]
  401de4:	88bb      	ldrh	r3, [r7, #4]
  401de6:	b2da      	uxtb	r2, r3
  401de8:	683b      	ldr	r3, [r7, #0]
  401dea:	4c07      	ldr	r4, [pc, #28]	; (401e08 <mpu_write_mem+0xa4>)
  401dec:	47a0      	blx	r4
  401dee:	4603      	mov	r3, r0
  401df0:	2b00      	cmp	r3, #0
  401df2:	d002      	beq.n	401dfa <mpu_write_mem+0x96>
        return -1;
  401df4:	f04f 33ff 	mov.w	r3, #4294967295
  401df8:	e000      	b.n	401dfc <mpu_write_mem+0x98>
    return 0;
  401dfa:	2300      	movs	r3, #0
}
  401dfc:	4618      	mov	r0, r3
  401dfe:	3714      	adds	r7, #20
  401e00:	46bd      	mov	sp, r7
  401e02:	bd90      	pop	{r4, r7, pc}
  401e04:	20000000 	.word	0x20000000
  401e08:	00403d29 	.word	0x00403d29

00401e0c <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
  401e0c:	b590      	push	{r4, r7, lr}
  401e0e:	b085      	sub	sp, #20
  401e10:	af00      	add	r7, sp, #0
  401e12:	4603      	mov	r3, r0
  401e14:	603a      	str	r2, [r7, #0]
  401e16:	80fb      	strh	r3, [r7, #6]
  401e18:	460b      	mov	r3, r1
  401e1a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
  401e1c:	683b      	ldr	r3, [r7, #0]
  401e1e:	2b00      	cmp	r3, #0
  401e20:	d102      	bne.n	401e28 <mpu_read_mem+0x1c>
        return -1;
  401e22:	f04f 33ff 	mov.w	r3, #4294967295
  401e26:	e03d      	b.n	401ea4 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
  401e28:	4b20      	ldr	r3, [pc, #128]	; (401eac <mpu_read_mem+0xa0>)
  401e2a:	7a9b      	ldrb	r3, [r3, #10]
  401e2c:	2b00      	cmp	r3, #0
  401e2e:	d102      	bne.n	401e36 <mpu_read_mem+0x2a>
        return -1;
  401e30:	f04f 33ff 	mov.w	r3, #4294967295
  401e34:	e036      	b.n	401ea4 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
  401e36:	88fb      	ldrh	r3, [r7, #6]
  401e38:	0a1b      	lsrs	r3, r3, #8
  401e3a:	b29b      	uxth	r3, r3
  401e3c:	b2db      	uxtb	r3, r3
  401e3e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
  401e40:	88fb      	ldrh	r3, [r7, #6]
  401e42:	b2db      	uxtb	r3, r3
  401e44:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
  401e46:	7b7b      	ldrb	r3, [r7, #13]
  401e48:	461a      	mov	r2, r3
  401e4a:	88bb      	ldrh	r3, [r7, #4]
  401e4c:	4413      	add	r3, r2
  401e4e:	4a17      	ldr	r2, [pc, #92]	; (401eac <mpu_read_mem+0xa0>)
  401e50:	6852      	ldr	r2, [r2, #4]
  401e52:	8952      	ldrh	r2, [r2, #10]
  401e54:	4293      	cmp	r3, r2
  401e56:	dd02      	ble.n	401e5e <mpu_read_mem+0x52>
        return -1;
  401e58:	f04f 33ff 	mov.w	r3, #4294967295
  401e5c:	e022      	b.n	401ea4 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
  401e5e:	4b13      	ldr	r3, [pc, #76]	; (401eac <mpu_read_mem+0xa0>)
  401e60:	685b      	ldr	r3, [r3, #4]
  401e62:	7818      	ldrb	r0, [r3, #0]
  401e64:	4b11      	ldr	r3, [pc, #68]	; (401eac <mpu_read_mem+0xa0>)
  401e66:	681b      	ldr	r3, [r3, #0]
  401e68:	7ed9      	ldrb	r1, [r3, #27]
  401e6a:	f107 030c 	add.w	r3, r7, #12
  401e6e:	2202      	movs	r2, #2
  401e70:	4c0f      	ldr	r4, [pc, #60]	; (401eb0 <mpu_read_mem+0xa4>)
  401e72:	47a0      	blx	r4
  401e74:	4603      	mov	r3, r0
  401e76:	2b00      	cmp	r3, #0
  401e78:	d002      	beq.n	401e80 <mpu_read_mem+0x74>
        return -1;
  401e7a:	f04f 33ff 	mov.w	r3, #4294967295
  401e7e:	e011      	b.n	401ea4 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
  401e80:	4b0a      	ldr	r3, [pc, #40]	; (401eac <mpu_read_mem+0xa0>)
  401e82:	685b      	ldr	r3, [r3, #4]
  401e84:	7818      	ldrb	r0, [r3, #0]
  401e86:	4b09      	ldr	r3, [pc, #36]	; (401eac <mpu_read_mem+0xa0>)
  401e88:	681b      	ldr	r3, [r3, #0]
  401e8a:	7e19      	ldrb	r1, [r3, #24]
  401e8c:	88bb      	ldrh	r3, [r7, #4]
  401e8e:	b2da      	uxtb	r2, r3
  401e90:	683b      	ldr	r3, [r7, #0]
  401e92:	4c08      	ldr	r4, [pc, #32]	; (401eb4 <mpu_read_mem+0xa8>)
  401e94:	47a0      	blx	r4
  401e96:	4603      	mov	r3, r0
  401e98:	2b00      	cmp	r3, #0
  401e9a:	d002      	beq.n	401ea2 <mpu_read_mem+0x96>
        return -1;
  401e9c:	f04f 33ff 	mov.w	r3, #4294967295
  401ea0:	e000      	b.n	401ea4 <mpu_read_mem+0x98>
    return 0;
  401ea2:	2300      	movs	r3, #0
}
  401ea4:	4618      	mov	r0, r3
  401ea6:	3714      	adds	r7, #20
  401ea8:	46bd      	mov	sp, r7
  401eaa:	bd90      	pop	{r4, r7, pc}
  401eac:	20000000 	.word	0x20000000
  401eb0:	00403d29 	.word	0x00403d29
  401eb4:	00403de5 	.word	0x00403de5

00401eb8 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
  401eb8:	b590      	push	{r4, r7, lr}
  401eba:	b08b      	sub	sp, #44	; 0x2c
  401ebc:	af00      	add	r7, sp, #0
  401ebe:	60b9      	str	r1, [r7, #8]
  401ec0:	4611      	mov	r1, r2
  401ec2:	461a      	mov	r2, r3
  401ec4:	4603      	mov	r3, r0
  401ec6:	81fb      	strh	r3, [r7, #14]
  401ec8:	460b      	mov	r3, r1
  401eca:	81bb      	strh	r3, [r7, #12]
  401ecc:	4613      	mov	r3, r2
  401ece:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
  401ed0:	4b37      	ldr	r3, [pc, #220]	; (401fb0 <mpu_load_firmware+0xf8>)
  401ed2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401ed6:	2b00      	cmp	r3, #0
  401ed8:	d002      	beq.n	401ee0 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
  401eda:	f04f 33ff 	mov.w	r3, #4294967295
  401ede:	e062      	b.n	401fa6 <mpu_load_firmware+0xee>

    if (!firmware)
  401ee0:	68bb      	ldr	r3, [r7, #8]
  401ee2:	2b00      	cmp	r3, #0
  401ee4:	d102      	bne.n	401eec <mpu_load_firmware+0x34>
        return -1;
  401ee6:	f04f 33ff 	mov.w	r3, #4294967295
  401eea:	e05c      	b.n	401fa6 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
  401eec:	2300      	movs	r3, #0
  401eee:	84fb      	strh	r3, [r7, #38]	; 0x26
  401ef0:	e034      	b.n	401f5c <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
  401ef2:	89fa      	ldrh	r2, [r7, #14]
  401ef4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401ef6:	1ad3      	subs	r3, r2, r3
  401ef8:	2b10      	cmp	r3, #16
  401efa:	bfa8      	it	ge
  401efc:	2310      	movge	r3, #16
  401efe:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
  401f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401f02:	68ba      	ldr	r2, [r7, #8]
  401f04:	441a      	add	r2, r3
  401f06:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  401f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401f0a:	4618      	mov	r0, r3
  401f0c:	4b29      	ldr	r3, [pc, #164]	; (401fb4 <mpu_load_firmware+0xfc>)
  401f0e:	4798      	blx	r3
  401f10:	4603      	mov	r3, r0
  401f12:	2b00      	cmp	r3, #0
  401f14:	d002      	beq.n	401f1c <mpu_load_firmware+0x64>
            return -1;
  401f16:	f04f 33ff 	mov.w	r3, #4294967295
  401f1a:	e044      	b.n	401fa6 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
  401f1c:	f107 0214 	add.w	r2, r7, #20
  401f20:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  401f22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401f24:	4618      	mov	r0, r3
  401f26:	4b24      	ldr	r3, [pc, #144]	; (401fb8 <mpu_load_firmware+0x100>)
  401f28:	4798      	blx	r3
  401f2a:	4603      	mov	r3, r0
  401f2c:	2b00      	cmp	r3, #0
  401f2e:	d002      	beq.n	401f36 <mpu_load_firmware+0x7e>
            return -1;
  401f30:	f04f 33ff 	mov.w	r3, #4294967295
  401f34:	e037      	b.n	401fa6 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
  401f36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401f38:	68ba      	ldr	r2, [r7, #8]
  401f3a:	4413      	add	r3, r2
  401f3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  401f3e:	f107 0114 	add.w	r1, r7, #20
  401f42:	4618      	mov	r0, r3
  401f44:	4b1d      	ldr	r3, [pc, #116]	; (401fbc <mpu_load_firmware+0x104>)
  401f46:	4798      	blx	r3
  401f48:	4603      	mov	r3, r0
  401f4a:	2b00      	cmp	r3, #0
  401f4c:	d002      	beq.n	401f54 <mpu_load_firmware+0x9c>
            return -2;
  401f4e:	f06f 0301 	mvn.w	r3, #1
  401f52:	e028      	b.n	401fa6 <mpu_load_firmware+0xee>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
  401f54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  401f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  401f58:	4413      	add	r3, r2
  401f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
  401f5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  401f5e:	89fb      	ldrh	r3, [r7, #14]
  401f60:	429a      	cmp	r2, r3
  401f62:	d3c6      	bcc.n	401ef2 <mpu_load_firmware+0x3a>
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
  401f64:	89bb      	ldrh	r3, [r7, #12]
  401f66:	0a1b      	lsrs	r3, r3, #8
  401f68:	b29b      	uxth	r3, r3
  401f6a:	b2db      	uxtb	r3, r3
  401f6c:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
  401f6e:	89bb      	ldrh	r3, [r7, #12]
  401f70:	b2db      	uxtb	r3, r3
  401f72:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
  401f74:	4b0e      	ldr	r3, [pc, #56]	; (401fb0 <mpu_load_firmware+0xf8>)
  401f76:	685b      	ldr	r3, [r3, #4]
  401f78:	7818      	ldrb	r0, [r3, #0]
  401f7a:	4b0d      	ldr	r3, [pc, #52]	; (401fb0 <mpu_load_firmware+0xf8>)
  401f7c:	681b      	ldr	r3, [r3, #0]
  401f7e:	7f59      	ldrb	r1, [r3, #29]
  401f80:	f107 0310 	add.w	r3, r7, #16
  401f84:	2202      	movs	r2, #2
  401f86:	4c0e      	ldr	r4, [pc, #56]	; (401fc0 <mpu_load_firmware+0x108>)
  401f88:	47a0      	blx	r4
  401f8a:	4603      	mov	r3, r0
  401f8c:	2b00      	cmp	r3, #0
  401f8e:	d002      	beq.n	401f96 <mpu_load_firmware+0xde>
        return -1;
  401f90:	f04f 33ff 	mov.w	r3, #4294967295
  401f94:	e007      	b.n	401fa6 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
  401f96:	4b06      	ldr	r3, [pc, #24]	; (401fb0 <mpu_load_firmware+0xf8>)
  401f98:	2201      	movs	r2, #1
  401f9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
  401f9e:	4a04      	ldr	r2, [pc, #16]	; (401fb0 <mpu_load_firmware+0xf8>)
  401fa0:	88fb      	ldrh	r3, [r7, #6]
  401fa2:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
  401fa4:	2300      	movs	r3, #0
}
  401fa6:	4618      	mov	r0, r3
  401fa8:	372c      	adds	r7, #44	; 0x2c
  401faa:	46bd      	mov	sp, r7
  401fac:	bd90      	pop	{r4, r7, pc}
  401fae:	bf00      	nop
  401fb0:	20000000 	.word	0x20000000
  401fb4:	00401d65 	.word	0x00401d65
  401fb8:	00401e0d 	.word	0x00401e0d
  401fbc:	004069a1 	.word	0x004069a1
  401fc0:	00403d29 	.word	0x00403d29

00401fc4 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
  401fc4:	b590      	push	{r4, r7, lr}
  401fc6:	b085      	sub	sp, #20
  401fc8:	af00      	add	r7, sp, #0
  401fca:	4603      	mov	r3, r0
  401fcc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
  401fce:	4b26      	ldr	r3, [pc, #152]	; (402068 <mpu_set_dmp_state+0xa4>)
  401fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401fd4:	79fa      	ldrb	r2, [r7, #7]
  401fd6:	429a      	cmp	r2, r3
  401fd8:	d101      	bne.n	401fde <mpu_set_dmp_state+0x1a>
        return 0;
  401fda:	2300      	movs	r3, #0
  401fdc:	e040      	b.n	402060 <mpu_set_dmp_state+0x9c>

    if (enable) {
  401fde:	79fb      	ldrb	r3, [r7, #7]
  401fe0:	2b00      	cmp	r3, #0
  401fe2:	d027      	beq.n	402034 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
  401fe4:	4b20      	ldr	r3, [pc, #128]	; (402068 <mpu_set_dmp_state+0xa4>)
  401fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401fea:	2b00      	cmp	r3, #0
  401fec:	d102      	bne.n	401ff4 <mpu_set_dmp_state+0x30>
            return -1;
  401fee:	f04f 33ff 	mov.w	r3, #4294967295
  401ff2:	e035      	b.n	402060 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
  401ff4:	2000      	movs	r0, #0
  401ff6:	4b1d      	ldr	r3, [pc, #116]	; (40206c <mpu_set_dmp_state+0xa8>)
  401ff8:	4798      	blx	r3
        /* Disable bypass mode. */
        mpu_set_bypass(0);
  401ffa:	2000      	movs	r0, #0
  401ffc:	4b1c      	ldr	r3, [pc, #112]	; (402070 <mpu_set_dmp_state+0xac>)
  401ffe:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
  402000:	4b19      	ldr	r3, [pc, #100]	; (402068 <mpu_set_dmp_state+0xa4>)
  402002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  402004:	4618      	mov	r0, r3
  402006:	4b1b      	ldr	r3, [pc, #108]	; (402074 <mpu_set_dmp_state+0xb0>)
  402008:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
  40200a:	2300      	movs	r3, #0
  40200c:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
  40200e:	4b16      	ldr	r3, [pc, #88]	; (402068 <mpu_set_dmp_state+0xa4>)
  402010:	685b      	ldr	r3, [r3, #4]
  402012:	7818      	ldrb	r0, [r3, #0]
  402014:	f107 030f 	add.w	r3, r7, #15
  402018:	2201      	movs	r2, #1
  40201a:	2123      	movs	r1, #35	; 0x23
  40201c:	4c16      	ldr	r4, [pc, #88]	; (402078 <mpu_set_dmp_state+0xb4>)
  40201e:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 1;
  402020:	4b11      	ldr	r3, [pc, #68]	; (402068 <mpu_set_dmp_state+0xa4>)
  402022:	2201      	movs	r2, #1
  402024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
  402028:	2001      	movs	r0, #1
  40202a:	4b10      	ldr	r3, [pc, #64]	; (40206c <mpu_set_dmp_state+0xa8>)
  40202c:	4798      	blx	r3
        mpu_reset_fifo();
  40202e:	4b13      	ldr	r3, [pc, #76]	; (40207c <mpu_set_dmp_state+0xb8>)
  402030:	4798      	blx	r3
  402032:	e014      	b.n	40205e <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
  402034:	2000      	movs	r0, #0
  402036:	4b0d      	ldr	r3, [pc, #52]	; (40206c <mpu_set_dmp_state+0xa8>)
  402038:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
  40203a:	4b0b      	ldr	r3, [pc, #44]	; (402068 <mpu_set_dmp_state+0xa4>)
  40203c:	7c1b      	ldrb	r3, [r3, #16]
  40203e:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
  402040:	4b09      	ldr	r3, [pc, #36]	; (402068 <mpu_set_dmp_state+0xa4>)
  402042:	685b      	ldr	r3, [r3, #4]
  402044:	7818      	ldrb	r0, [r3, #0]
  402046:	f107 030f 	add.w	r3, r7, #15
  40204a:	2201      	movs	r2, #1
  40204c:	2123      	movs	r1, #35	; 0x23
  40204e:	4c0a      	ldr	r4, [pc, #40]	; (402078 <mpu_set_dmp_state+0xb4>)
  402050:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 0;
  402052:	4b05      	ldr	r3, [pc, #20]	; (402068 <mpu_set_dmp_state+0xa4>)
  402054:	2200      	movs	r2, #0
  402056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
  40205a:	4b08      	ldr	r3, [pc, #32]	; (40207c <mpu_set_dmp_state+0xb8>)
  40205c:	4798      	blx	r3
    }
    return 0;
  40205e:	2300      	movs	r3, #0
}
  402060:	4618      	mov	r0, r3
  402062:	3714      	adds	r7, #20
  402064:	46bd      	mov	sp, r7
  402066:	bd90      	pop	{r4, r7, pc}
  402068:	20000000 	.word	0x20000000
  40206c:	00400d61 	.word	0x00400d61
  402070:	00401b41 	.word	0x00401b41
  402074:	00401651 	.word	0x00401651
  402078:	00403d29 	.word	0x00403d29
  40207c:	00401119 	.word	0x00401119

00402080 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
  402080:	b590      	push	{r4, r7, lr}
  402082:	b085      	sub	sp, #20
  402084:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
  402086:	2001      	movs	r0, #1
  402088:	4b9b      	ldr	r3, [pc, #620]	; (4022f8 <setup_compass+0x278>)
  40208a:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
  40208c:	230c      	movs	r3, #12
  40208e:	73fb      	strb	r3, [r7, #15]
  402090:	e010      	b.n	4020b4 <setup_compass+0x34>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
  402092:	1d3b      	adds	r3, r7, #4
  402094:	7bf8      	ldrb	r0, [r7, #15]
  402096:	2201      	movs	r2, #1
  402098:	2100      	movs	r1, #0
  40209a:	4c98      	ldr	r4, [pc, #608]	; (4022fc <setup_compass+0x27c>)
  40209c:	47a0      	blx	r4
  40209e:	4603      	mov	r3, r0
  4020a0:	60bb      	str	r3, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
  4020a2:	68bb      	ldr	r3, [r7, #8]
  4020a4:	2b00      	cmp	r3, #0
  4020a6:	d102      	bne.n	4020ae <setup_compass+0x2e>
  4020a8:	793b      	ldrb	r3, [r7, #4]
  4020aa:	2b48      	cmp	r3, #72	; 0x48
  4020ac:	d006      	beq.n	4020bc <setup_compass+0x3c>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
  4020ae:	7bfb      	ldrb	r3, [r7, #15]
  4020b0:	3301      	adds	r3, #1
  4020b2:	73fb      	strb	r3, [r7, #15]
  4020b4:	7bfb      	ldrb	r3, [r7, #15]
  4020b6:	2b0f      	cmp	r3, #15
  4020b8:	d9eb      	bls.n	402092 <setup_compass+0x12>
  4020ba:	e000      	b.n	4020be <setup_compass+0x3e>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
  4020bc:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
  4020be:	7bfb      	ldrb	r3, [r7, #15]
  4020c0:	2b0f      	cmp	r3, #15
  4020c2:	d902      	bls.n	4020ca <setup_compass+0x4a>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
  4020c4:	f04f 33ff 	mov.w	r3, #4294967295
  4020c8:	e112      	b.n	4022f0 <setup_compass+0x270>
    }

    st.chip_cfg.compass_addr = akm_addr;
  4020ca:	4a8d      	ldr	r2, [pc, #564]	; (402300 <setup_compass+0x280>)
  4020cc:	7bfb      	ldrb	r3, [r7, #15]
  4020ce:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
  4020d2:	2310      	movs	r3, #16
  4020d4:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  4020d6:	4b8a      	ldr	r3, [pc, #552]	; (402300 <setup_compass+0x280>)
  4020d8:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  4020dc:	1d3b      	adds	r3, r7, #4
  4020de:	2201      	movs	r2, #1
  4020e0:	210a      	movs	r1, #10
  4020e2:	4c88      	ldr	r4, [pc, #544]	; (402304 <setup_compass+0x284>)
  4020e4:	47a0      	blx	r4
  4020e6:	4603      	mov	r3, r0
  4020e8:	2b00      	cmp	r3, #0
  4020ea:	d002      	beq.n	4020f2 <setup_compass+0x72>
        return -1;
  4020ec:	f04f 33ff 	mov.w	r3, #4294967295
  4020f0:	e0fe      	b.n	4022f0 <setup_compass+0x270>
    delay_ms(1);
  4020f2:	2001      	movs	r0, #1
  4020f4:	4b84      	ldr	r3, [pc, #528]	; (402308 <setup_compass+0x288>)
  4020f6:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
  4020f8:	231f      	movs	r3, #31
  4020fa:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  4020fc:	4b80      	ldr	r3, [pc, #512]	; (402300 <setup_compass+0x280>)
  4020fe:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402102:	1d3b      	adds	r3, r7, #4
  402104:	2201      	movs	r2, #1
  402106:	210a      	movs	r1, #10
  402108:	4c7e      	ldr	r4, [pc, #504]	; (402304 <setup_compass+0x284>)
  40210a:	47a0      	blx	r4
  40210c:	4603      	mov	r3, r0
  40210e:	2b00      	cmp	r3, #0
  402110:	d002      	beq.n	402118 <setup_compass+0x98>
        return -1;
  402112:	f04f 33ff 	mov.w	r3, #4294967295
  402116:	e0eb      	b.n	4022f0 <setup_compass+0x270>
    delay_ms(1);
  402118:	2001      	movs	r0, #1
  40211a:	4b7b      	ldr	r3, [pc, #492]	; (402308 <setup_compass+0x288>)
  40211c:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
  40211e:	4b78      	ldr	r3, [pc, #480]	; (402300 <setup_compass+0x280>)
  402120:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402124:	1d3b      	adds	r3, r7, #4
  402126:	2203      	movs	r2, #3
  402128:	2110      	movs	r1, #16
  40212a:	4c74      	ldr	r4, [pc, #464]	; (4022fc <setup_compass+0x27c>)
  40212c:	47a0      	blx	r4
  40212e:	4603      	mov	r3, r0
  402130:	2b00      	cmp	r3, #0
  402132:	d002      	beq.n	40213a <setup_compass+0xba>
        return -1;
  402134:	f04f 33ff 	mov.w	r3, #4294967295
  402138:	e0da      	b.n	4022f0 <setup_compass+0x270>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
  40213a:	793b      	ldrb	r3, [r7, #4]
  40213c:	b29b      	uxth	r3, r3
  40213e:	3380      	adds	r3, #128	; 0x80
  402140:	b29b      	uxth	r3, r3
  402142:	b21a      	sxth	r2, r3
  402144:	4b6e      	ldr	r3, [pc, #440]	; (402300 <setup_compass+0x280>)
  402146:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
  402148:	797b      	ldrb	r3, [r7, #5]
  40214a:	b29b      	uxth	r3, r3
  40214c:	3380      	adds	r3, #128	; 0x80
  40214e:	b29b      	uxth	r3, r3
  402150:	b21a      	sxth	r2, r3
  402152:	4b6b      	ldr	r3, [pc, #428]	; (402300 <setup_compass+0x280>)
  402154:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
  402156:	79bb      	ldrb	r3, [r7, #6]
  402158:	b29b      	uxth	r3, r3
  40215a:	3380      	adds	r3, #128	; 0x80
  40215c:	b29b      	uxth	r3, r3
  40215e:	b21a      	sxth	r2, r3
  402160:	4b67      	ldr	r3, [pc, #412]	; (402300 <setup_compass+0x280>)
  402162:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
  402164:	2310      	movs	r3, #16
  402166:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  402168:	4b65      	ldr	r3, [pc, #404]	; (402300 <setup_compass+0x280>)
  40216a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  40216e:	1d3b      	adds	r3, r7, #4
  402170:	2201      	movs	r2, #1
  402172:	210a      	movs	r1, #10
  402174:	4c63      	ldr	r4, [pc, #396]	; (402304 <setup_compass+0x284>)
  402176:	47a0      	blx	r4
  402178:	4603      	mov	r3, r0
  40217a:	2b00      	cmp	r3, #0
  40217c:	d002      	beq.n	402184 <setup_compass+0x104>
        return -1;
  40217e:	f04f 33ff 	mov.w	r3, #4294967295
  402182:	e0b5      	b.n	4022f0 <setup_compass+0x270>
    delay_ms(1);
  402184:	2001      	movs	r0, #1
  402186:	4b60      	ldr	r3, [pc, #384]	; (402308 <setup_compass+0x288>)
  402188:	4798      	blx	r3

    mpu_set_bypass(0);
  40218a:	2000      	movs	r0, #0
  40218c:	4b5a      	ldr	r3, [pc, #360]	; (4022f8 <setup_compass+0x278>)
  40218e:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
  402190:	2340      	movs	r3, #64	; 0x40
  402192:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
  402194:	4b5a      	ldr	r3, [pc, #360]	; (402300 <setup_compass+0x280>)
  402196:	685b      	ldr	r3, [r3, #4]
  402198:	7818      	ldrb	r0, [r3, #0]
  40219a:	4b59      	ldr	r3, [pc, #356]	; (402300 <setup_compass+0x280>)
  40219c:	681b      	ldr	r3, [r3, #0]
  40219e:	7e99      	ldrb	r1, [r3, #26]
  4021a0:	1d3b      	adds	r3, r7, #4
  4021a2:	2201      	movs	r2, #1
  4021a4:	4c57      	ldr	r4, [pc, #348]	; (402304 <setup_compass+0x284>)
  4021a6:	47a0      	blx	r4
  4021a8:	4603      	mov	r3, r0
  4021aa:	2b00      	cmp	r3, #0
  4021ac:	d002      	beq.n	4021b4 <setup_compass+0x134>
        return -1;
  4021ae:	f04f 33ff 	mov.w	r3, #4294967295
  4021b2:	e09d      	b.n	4022f0 <setup_compass+0x270>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
  4021b4:	4b52      	ldr	r3, [pc, #328]	; (402300 <setup_compass+0x280>)
  4021b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  4021ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4021be:	b2db      	uxtb	r3, r3
  4021c0:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
  4021c2:	4b4f      	ldr	r3, [pc, #316]	; (402300 <setup_compass+0x280>)
  4021c4:	685b      	ldr	r3, [r3, #4]
  4021c6:	7818      	ldrb	r0, [r3, #0]
  4021c8:	4b4d      	ldr	r3, [pc, #308]	; (402300 <setup_compass+0x280>)
  4021ca:	681b      	ldr	r3, [r3, #0]
  4021cc:	7f99      	ldrb	r1, [r3, #30]
  4021ce:	1d3b      	adds	r3, r7, #4
  4021d0:	2201      	movs	r2, #1
  4021d2:	4c4c      	ldr	r4, [pc, #304]	; (402304 <setup_compass+0x284>)
  4021d4:	47a0      	blx	r4
  4021d6:	4603      	mov	r3, r0
  4021d8:	2b00      	cmp	r3, #0
  4021da:	d002      	beq.n	4021e2 <setup_compass+0x162>
        return -1;
  4021dc:	f04f 33ff 	mov.w	r3, #4294967295
  4021e0:	e086      	b.n	4022f0 <setup_compass+0x270>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
  4021e2:	2302      	movs	r3, #2
  4021e4:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
  4021e6:	4b46      	ldr	r3, [pc, #280]	; (402300 <setup_compass+0x280>)
  4021e8:	685b      	ldr	r3, [r3, #4]
  4021ea:	7818      	ldrb	r0, [r3, #0]
  4021ec:	4b44      	ldr	r3, [pc, #272]	; (402300 <setup_compass+0x280>)
  4021ee:	681b      	ldr	r3, [r3, #0]
  4021f0:	7fd9      	ldrb	r1, [r3, #31]
  4021f2:	1d3b      	adds	r3, r7, #4
  4021f4:	2201      	movs	r2, #1
  4021f6:	4c43      	ldr	r4, [pc, #268]	; (402304 <setup_compass+0x284>)
  4021f8:	47a0      	blx	r4
  4021fa:	4603      	mov	r3, r0
  4021fc:	2b00      	cmp	r3, #0
  4021fe:	d002      	beq.n	402206 <setup_compass+0x186>
        return -1;
  402200:	f04f 33ff 	mov.w	r3, #4294967295
  402204:	e074      	b.n	4022f0 <setup_compass+0x270>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
  402206:	2388      	movs	r3, #136	; 0x88
  402208:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
  40220a:	4b3d      	ldr	r3, [pc, #244]	; (402300 <setup_compass+0x280>)
  40220c:	685b      	ldr	r3, [r3, #4]
  40220e:	7818      	ldrb	r0, [r3, #0]
  402210:	4b3b      	ldr	r3, [pc, #236]	; (402300 <setup_compass+0x280>)
  402212:	681b      	ldr	r3, [r3, #0]
  402214:	f893 1020 	ldrb.w	r1, [r3, #32]
  402218:	1d3b      	adds	r3, r7, #4
  40221a:	2201      	movs	r2, #1
  40221c:	4c39      	ldr	r4, [pc, #228]	; (402304 <setup_compass+0x284>)
  40221e:	47a0      	blx	r4
  402220:	4603      	mov	r3, r0
  402222:	2b00      	cmp	r3, #0
  402224:	d002      	beq.n	40222c <setup_compass+0x1ac>
        return -1;
  402226:	f04f 33ff 	mov.w	r3, #4294967295
  40222a:	e061      	b.n	4022f0 <setup_compass+0x270>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
  40222c:	4b34      	ldr	r3, [pc, #208]	; (402300 <setup_compass+0x280>)
  40222e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  402232:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
  402234:	4b32      	ldr	r3, [pc, #200]	; (402300 <setup_compass+0x280>)
  402236:	685b      	ldr	r3, [r3, #4]
  402238:	7818      	ldrb	r0, [r3, #0]
  40223a:	4b31      	ldr	r3, [pc, #196]	; (402300 <setup_compass+0x280>)
  40223c:	681b      	ldr	r3, [r3, #0]
  40223e:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
  402242:	1d3b      	adds	r3, r7, #4
  402244:	2201      	movs	r2, #1
  402246:	4c2f      	ldr	r4, [pc, #188]	; (402304 <setup_compass+0x284>)
  402248:	47a0      	blx	r4
  40224a:	4603      	mov	r3, r0
  40224c:	2b00      	cmp	r3, #0
  40224e:	d002      	beq.n	402256 <setup_compass+0x1d6>
        return -1;
  402250:	f04f 33ff 	mov.w	r3, #4294967295
  402254:	e04c      	b.n	4022f0 <setup_compass+0x270>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
  402256:	230a      	movs	r3, #10
  402258:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
  40225a:	4b29      	ldr	r3, [pc, #164]	; (402300 <setup_compass+0x280>)
  40225c:	685b      	ldr	r3, [r3, #4]
  40225e:	7818      	ldrb	r0, [r3, #0]
  402260:	4b27      	ldr	r3, [pc, #156]	; (402300 <setup_compass+0x280>)
  402262:	681b      	ldr	r3, [r3, #0]
  402264:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
  402268:	1d3b      	adds	r3, r7, #4
  40226a:	2201      	movs	r2, #1
  40226c:	4c25      	ldr	r4, [pc, #148]	; (402304 <setup_compass+0x284>)
  40226e:	47a0      	blx	r4
  402270:	4603      	mov	r3, r0
  402272:	2b00      	cmp	r3, #0
  402274:	d002      	beq.n	40227c <setup_compass+0x1fc>
        return -1;
  402276:	f04f 33ff 	mov.w	r3, #4294967295
  40227a:	e039      	b.n	4022f0 <setup_compass+0x270>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
  40227c:	2381      	movs	r3, #129	; 0x81
  40227e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
  402280:	4b1f      	ldr	r3, [pc, #124]	; (402300 <setup_compass+0x280>)
  402282:	685b      	ldr	r3, [r3, #4]
  402284:	7818      	ldrb	r0, [r3, #0]
  402286:	4b1e      	ldr	r3, [pc, #120]	; (402300 <setup_compass+0x280>)
  402288:	681b      	ldr	r3, [r3, #0]
  40228a:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
  40228e:	1d3b      	adds	r3, r7, #4
  402290:	2201      	movs	r2, #1
  402292:	4c1c      	ldr	r4, [pc, #112]	; (402304 <setup_compass+0x284>)
  402294:	47a0      	blx	r4
  402296:	4603      	mov	r3, r0
  402298:	2b00      	cmp	r3, #0
  40229a:	d002      	beq.n	4022a2 <setup_compass+0x222>
        return -1;
  40229c:	f04f 33ff 	mov.w	r3, #4294967295
  4022a0:	e026      	b.n	4022f0 <setup_compass+0x270>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
  4022a2:	2311      	movs	r3, #17
  4022a4:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
  4022a6:	4b16      	ldr	r3, [pc, #88]	; (402300 <setup_compass+0x280>)
  4022a8:	685b      	ldr	r3, [r3, #4]
  4022aa:	7818      	ldrb	r0, [r3, #0]
  4022ac:	4b14      	ldr	r3, [pc, #80]	; (402300 <setup_compass+0x280>)
  4022ae:	681b      	ldr	r3, [r3, #0]
  4022b0:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
  4022b4:	1d3b      	adds	r3, r7, #4
  4022b6:	2201      	movs	r2, #1
  4022b8:	4c12      	ldr	r4, [pc, #72]	; (402304 <setup_compass+0x284>)
  4022ba:	47a0      	blx	r4
  4022bc:	4603      	mov	r3, r0
  4022be:	2b00      	cmp	r3, #0
  4022c0:	d002      	beq.n	4022c8 <setup_compass+0x248>
        return -1;
  4022c2:	f04f 33ff 	mov.w	r3, #4294967295
  4022c6:	e013      	b.n	4022f0 <setup_compass+0x270>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
  4022c8:	2303      	movs	r3, #3
  4022ca:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
  4022cc:	4b0c      	ldr	r3, [pc, #48]	; (402300 <setup_compass+0x280>)
  4022ce:	685b      	ldr	r3, [r3, #4]
  4022d0:	7818      	ldrb	r0, [r3, #0]
  4022d2:	4b0b      	ldr	r3, [pc, #44]	; (402300 <setup_compass+0x280>)
  4022d4:	681b      	ldr	r3, [r3, #0]
  4022d6:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
  4022da:	1d3b      	adds	r3, r7, #4
  4022dc:	2201      	movs	r2, #1
  4022de:	4c09      	ldr	r4, [pc, #36]	; (402304 <setup_compass+0x284>)
  4022e0:	47a0      	blx	r4
  4022e2:	4603      	mov	r3, r0
  4022e4:	2b00      	cmp	r3, #0
  4022e6:	d002      	beq.n	4022ee <setup_compass+0x26e>
        return -1;
  4022e8:	f04f 33ff 	mov.w	r3, #4294967295
  4022ec:	e000      	b.n	4022f0 <setup_compass+0x270>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
  4022ee:	2300      	movs	r3, #0
}
  4022f0:	4618      	mov	r0, r3
  4022f2:	3714      	adds	r7, #20
  4022f4:	46bd      	mov	sp, r7
  4022f6:	bd90      	pop	{r4, r7, pc}
  4022f8:	00401b41 	.word	0x00401b41
  4022fc:	00403de5 	.word	0x00403de5
  402300:	20000000 	.word	0x20000000
  402304:	00403d29 	.word	0x00403d29
  402308:	00403cf9 	.word	0x00403cf9

0040230c <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
  40230c:	b598      	push	{r3, r4, r7, lr}
  40230e:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
  402310:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402314:	23c8      	movs	r3, #200	; 0xc8
  402316:	4904      	ldr	r1, [pc, #16]	; (402328 <dmp_load_motion_driver_firmware+0x1c>)
  402318:	f640 30f6 	movw	r0, #3062	; 0xbf6
  40231c:	4c03      	ldr	r4, [pc, #12]	; (40232c <dmp_load_motion_driver_firmware+0x20>)
  40231e:	47a0      	blx	r4
  402320:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
  402322:	4618      	mov	r0, r3
  402324:	bd98      	pop	{r3, r4, r7, pc}
  402326:	bf00      	nop
  402328:	00406f2c 	.word	0x00406f2c
  40232c:	00401eb9 	.word	0x00401eb9

00402330 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
  402330:	b580      	push	{r7, lr}
  402332:	b088      	sub	sp, #32
  402334:	af00      	add	r7, sp, #0
  402336:	4603      	mov	r3, r0
  402338:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
  40233a:	4a6d      	ldr	r2, [pc, #436]	; (4024f0 <dmp_set_orientation+0x1c0>)
  40233c:	f107 0314 	add.w	r3, r7, #20
  402340:	8811      	ldrh	r1, [r2, #0]
  402342:	7892      	ldrb	r2, [r2, #2]
  402344:	8019      	strh	r1, [r3, #0]
  402346:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
  402348:	4a6a      	ldr	r2, [pc, #424]	; (4024f4 <dmp_set_orientation+0x1c4>)
  40234a:	f107 0310 	add.w	r3, r7, #16
  40234e:	8811      	ldrh	r1, [r2, #0]
  402350:	7892      	ldrb	r2, [r2, #2]
  402352:	8019      	strh	r1, [r3, #0]
  402354:	709a      	strb	r2, [r3, #2]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
  402356:	4a68      	ldr	r2, [pc, #416]	; (4024f8 <dmp_set_orientation+0x1c8>)
  402358:	f107 030c 	add.w	r3, r7, #12
  40235c:	8811      	ldrh	r1, [r2, #0]
  40235e:	7892      	ldrb	r2, [r2, #2]
  402360:	8019      	strh	r1, [r3, #0]
  402362:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
  402364:	4a65      	ldr	r2, [pc, #404]	; (4024fc <dmp_set_orientation+0x1cc>)
  402366:	f107 0308 	add.w	r3, r7, #8
  40236a:	8811      	ldrh	r1, [r2, #0]
  40236c:	7892      	ldrb	r2, [r2, #2]
  40236e:	8019      	strh	r1, [r3, #0]
  402370:	709a      	strb	r2, [r3, #2]

    gyro_regs[0] = gyro_axes[orient & 3];
  402372:	88fb      	ldrh	r3, [r7, #6]
  402374:	f003 0303 	and.w	r3, r3, #3
  402378:	f107 0220 	add.w	r2, r7, #32
  40237c:	4413      	add	r3, r2
  40237e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  402382:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
  402384:	88fb      	ldrh	r3, [r7, #6]
  402386:	08db      	lsrs	r3, r3, #3
  402388:	b29b      	uxth	r3, r3
  40238a:	f003 0303 	and.w	r3, r3, #3
  40238e:	f107 0220 	add.w	r2, r7, #32
  402392:	4413      	add	r3, r2
  402394:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  402398:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
  40239a:	88fb      	ldrh	r3, [r7, #6]
  40239c:	099b      	lsrs	r3, r3, #6
  40239e:	b29b      	uxth	r3, r3
  4023a0:	f003 0303 	and.w	r3, r3, #3
  4023a4:	f107 0220 	add.w	r2, r7, #32
  4023a8:	4413      	add	r3, r2
  4023aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4023ae:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
  4023b0:	88fb      	ldrh	r3, [r7, #6]
  4023b2:	f003 0303 	and.w	r3, r3, #3
  4023b6:	f107 0220 	add.w	r2, r7, #32
  4023ba:	4413      	add	r3, r2
  4023bc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  4023c0:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
  4023c2:	88fb      	ldrh	r3, [r7, #6]
  4023c4:	08db      	lsrs	r3, r3, #3
  4023c6:	b29b      	uxth	r3, r3
  4023c8:	f003 0303 	and.w	r3, r3, #3
  4023cc:	f107 0220 	add.w	r2, r7, #32
  4023d0:	4413      	add	r3, r2
  4023d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  4023d6:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
  4023d8:	88fb      	ldrh	r3, [r7, #6]
  4023da:	099b      	lsrs	r3, r3, #6
  4023dc:	b29b      	uxth	r3, r3
  4023de:	f003 0303 	and.w	r3, r3, #3
  4023e2:	f107 0220 	add.w	r2, r7, #32
  4023e6:	4413      	add	r3, r2
  4023e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  4023ec:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
  4023ee:	f107 031c 	add.w	r3, r7, #28
  4023f2:	461a      	mov	r2, r3
  4023f4:	2103      	movs	r1, #3
  4023f6:	f240 4026 	movw	r0, #1062	; 0x426
  4023fa:	4b41      	ldr	r3, [pc, #260]	; (402500 <dmp_set_orientation+0x1d0>)
  4023fc:	4798      	blx	r3
  4023fe:	4603      	mov	r3, r0
  402400:	2b00      	cmp	r3, #0
  402402:	d002      	beq.n	40240a <dmp_set_orientation+0xda>
        return -1;
  402404:	f04f 33ff 	mov.w	r3, #4294967295
  402408:	e06e      	b.n	4024e8 <dmp_set_orientation+0x1b8>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
  40240a:	f107 0318 	add.w	r3, r7, #24
  40240e:	461a      	mov	r2, r3
  402410:	2103      	movs	r1, #3
  402412:	f240 402a 	movw	r0, #1066	; 0x42a
  402416:	4b3a      	ldr	r3, [pc, #232]	; (402500 <dmp_set_orientation+0x1d0>)
  402418:	4798      	blx	r3
  40241a:	4603      	mov	r3, r0
  40241c:	2b00      	cmp	r3, #0
  40241e:	d002      	beq.n	402426 <dmp_set_orientation+0xf6>
        return -1;
  402420:	f04f 33ff 	mov.w	r3, #4294967295
  402424:	e060      	b.n	4024e8 <dmp_set_orientation+0x1b8>

    memcpy(gyro_regs, gyro_sign, 3);
  402426:	f107 031c 	add.w	r3, r7, #28
  40242a:	f107 020c 	add.w	r2, r7, #12
  40242e:	6812      	ldr	r2, [r2, #0]
  402430:	4611      	mov	r1, r2
  402432:	8019      	strh	r1, [r3, #0]
  402434:	3302      	adds	r3, #2
  402436:	0c12      	lsrs	r2, r2, #16
  402438:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
  40243a:	f107 0318 	add.w	r3, r7, #24
  40243e:	f107 0208 	add.w	r2, r7, #8
  402442:	6812      	ldr	r2, [r2, #0]
  402444:	4611      	mov	r1, r2
  402446:	8019      	strh	r1, [r3, #0]
  402448:	3302      	adds	r3, #2
  40244a:	0c12      	lsrs	r2, r2, #16
  40244c:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
  40244e:	88fb      	ldrh	r3, [r7, #6]
  402450:	f003 0304 	and.w	r3, r3, #4
  402454:	2b00      	cmp	r3, #0
  402456:	d009      	beq.n	40246c <dmp_set_orientation+0x13c>
        gyro_regs[0] |= 1;
  402458:	7f3b      	ldrb	r3, [r7, #28]
  40245a:	f043 0301 	orr.w	r3, r3, #1
  40245e:	b2db      	uxtb	r3, r3
  402460:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
  402462:	7e3b      	ldrb	r3, [r7, #24]
  402464:	f043 0301 	orr.w	r3, r3, #1
  402468:	b2db      	uxtb	r3, r3
  40246a:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
  40246c:	88fb      	ldrh	r3, [r7, #6]
  40246e:	f003 0320 	and.w	r3, r3, #32
  402472:	2b00      	cmp	r3, #0
  402474:	d009      	beq.n	40248a <dmp_set_orientation+0x15a>
        gyro_regs[1] |= 1;
  402476:	7f7b      	ldrb	r3, [r7, #29]
  402478:	f043 0301 	orr.w	r3, r3, #1
  40247c:	b2db      	uxtb	r3, r3
  40247e:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
  402480:	7e7b      	ldrb	r3, [r7, #25]
  402482:	f043 0301 	orr.w	r3, r3, #1
  402486:	b2db      	uxtb	r3, r3
  402488:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
  40248a:	88fb      	ldrh	r3, [r7, #6]
  40248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402490:	2b00      	cmp	r3, #0
  402492:	d009      	beq.n	4024a8 <dmp_set_orientation+0x178>
        gyro_regs[2] |= 1;
  402494:	7fbb      	ldrb	r3, [r7, #30]
  402496:	f043 0301 	orr.w	r3, r3, #1
  40249a:	b2db      	uxtb	r3, r3
  40249c:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
  40249e:	7ebb      	ldrb	r3, [r7, #26]
  4024a0:	f043 0301 	orr.w	r3, r3, #1
  4024a4:	b2db      	uxtb	r3, r3
  4024a6:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
  4024a8:	f107 031c 	add.w	r3, r7, #28
  4024ac:	461a      	mov	r2, r3
  4024ae:	2103      	movs	r1, #3
  4024b0:	f44f 6088 	mov.w	r0, #1088	; 0x440
  4024b4:	4b12      	ldr	r3, [pc, #72]	; (402500 <dmp_set_orientation+0x1d0>)
  4024b6:	4798      	blx	r3
  4024b8:	4603      	mov	r3, r0
  4024ba:	2b00      	cmp	r3, #0
  4024bc:	d002      	beq.n	4024c4 <dmp_set_orientation+0x194>
        return -1;
  4024be:	f04f 33ff 	mov.w	r3, #4294967295
  4024c2:	e011      	b.n	4024e8 <dmp_set_orientation+0x1b8>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
  4024c4:	f107 0318 	add.w	r3, r7, #24
  4024c8:	461a      	mov	r2, r3
  4024ca:	2103      	movs	r1, #3
  4024cc:	f240 4031 	movw	r0, #1073	; 0x431
  4024d0:	4b0b      	ldr	r3, [pc, #44]	; (402500 <dmp_set_orientation+0x1d0>)
  4024d2:	4798      	blx	r3
  4024d4:	4603      	mov	r3, r0
  4024d6:	2b00      	cmp	r3, #0
  4024d8:	d002      	beq.n	4024e0 <dmp_set_orientation+0x1b0>
        return -1;
  4024da:	f04f 33ff 	mov.w	r3, #4294967295
  4024de:	e003      	b.n	4024e8 <dmp_set_orientation+0x1b8>
    dmp.orient = orient;
  4024e0:	4a08      	ldr	r2, [pc, #32]	; (402504 <dmp_set_orientation+0x1d4>)
  4024e2:	88fb      	ldrh	r3, [r7, #6]
  4024e4:	8113      	strh	r3, [r2, #8]
    return 0;
  4024e6:	2300      	movs	r3, #0
}
  4024e8:	4618      	mov	r0, r3
  4024ea:	3720      	adds	r7, #32
  4024ec:	46bd      	mov	sp, r7
  4024ee:	bd80      	pop	{r7, pc}
  4024f0:	00407b24 	.word	0x00407b24
  4024f4:	00407b28 	.word	0x00407b28
  4024f8:	00407b2c 	.word	0x00407b2c
  4024fc:	00407b30 	.word	0x00407b30
  402500:	00401d65 	.word	0x00401d65
  402504:	200004ac 	.word	0x200004ac

00402508 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
  402508:	b580      	push	{r7, lr}
  40250a:	b088      	sub	sp, #32
  40250c:	af00      	add	r7, sp, #0
  40250e:	4603      	mov	r3, r0
  402510:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
  402512:	4a20      	ldr	r2, [pc, #128]	; (402594 <dmp_set_fifo_rate+0x8c>)
  402514:	f107 0310 	add.w	r3, r7, #16
  402518:	6810      	ldr	r0, [r2, #0]
  40251a:	6851      	ldr	r1, [r2, #4]
  40251c:	6892      	ldr	r2, [r2, #8]
  40251e:	c307      	stmia	r3!, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
  402520:	88fb      	ldrh	r3, [r7, #6]
  402522:	2bc8      	cmp	r3, #200	; 0xc8
  402524:	d902      	bls.n	40252c <dmp_set_fifo_rate+0x24>
        return -1;
  402526:	f04f 33ff 	mov.w	r3, #4294967295
  40252a:	e02e      	b.n	40258a <dmp_set_fifo_rate+0x82>
    div = DMP_SAMPLE_RATE / rate - 1;
  40252c:	88fb      	ldrh	r3, [r7, #6]
  40252e:	22c8      	movs	r2, #200	; 0xc8
  402530:	fb92 f3f3 	sdiv	r3, r2, r3
  402534:	b29b      	uxth	r3, r3
  402536:	3b01      	subs	r3, #1
  402538:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
  40253a:	8bfb      	ldrh	r3, [r7, #30]
  40253c:	0a1b      	lsrs	r3, r3, #8
  40253e:	b29b      	uxth	r3, r3
  402540:	b2db      	uxtb	r3, r3
  402542:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
  402544:	8bfb      	ldrh	r3, [r7, #30]
  402546:	b2db      	uxtb	r3, r3
  402548:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
  40254a:	f107 0308 	add.w	r3, r7, #8
  40254e:	461a      	mov	r2, r3
  402550:	2102      	movs	r1, #2
  402552:	f240 2016 	movw	r0, #534	; 0x216
  402556:	4b10      	ldr	r3, [pc, #64]	; (402598 <dmp_set_fifo_rate+0x90>)
  402558:	4798      	blx	r3
  40255a:	4603      	mov	r3, r0
  40255c:	2b00      	cmp	r3, #0
  40255e:	d002      	beq.n	402566 <dmp_set_fifo_rate+0x5e>
        return -1;
  402560:	f04f 33ff 	mov.w	r3, #4294967295
  402564:	e011      	b.n	40258a <dmp_set_fifo_rate+0x82>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
  402566:	f107 0310 	add.w	r3, r7, #16
  40256a:	461a      	mov	r2, r3
  40256c:	210c      	movs	r1, #12
  40256e:	f640 20c1 	movw	r0, #2753	; 0xac1
  402572:	4b09      	ldr	r3, [pc, #36]	; (402598 <dmp_set_fifo_rate+0x90>)
  402574:	4798      	blx	r3
  402576:	4603      	mov	r3, r0
  402578:	2b00      	cmp	r3, #0
  40257a:	d002      	beq.n	402582 <dmp_set_fifo_rate+0x7a>
        return -1;
  40257c:	f04f 33ff 	mov.w	r3, #4294967295
  402580:	e003      	b.n	40258a <dmp_set_fifo_rate+0x82>

    dmp.fifo_rate = rate;
  402582:	4a06      	ldr	r2, [pc, #24]	; (40259c <dmp_set_fifo_rate+0x94>)
  402584:	88fb      	ldrh	r3, [r7, #6]
  402586:	8193      	strh	r3, [r2, #12]
    return 0;
  402588:	2300      	movs	r3, #0
}
  40258a:	4618      	mov	r0, r3
  40258c:	3720      	adds	r7, #32
  40258e:	46bd      	mov	sp, r7
  402590:	bd80      	pop	{r7, pc}
  402592:	bf00      	nop
  402594:	00407b34 	.word	0x00407b34
  402598:	00401d65 	.word	0x00401d65
  40259c:	200004ac 	.word	0x200004ac

004025a0 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
  4025a0:	b580      	push	{r7, lr}
  4025a2:	b086      	sub	sp, #24
  4025a4:	af00      	add	r7, sp, #0
  4025a6:	4603      	mov	r3, r0
  4025a8:	460a      	mov	r2, r1
  4025aa:	71fb      	strb	r3, [r7, #7]
  4025ac:	4613      	mov	r3, r2
  4025ae:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
  4025b0:	79fb      	ldrb	r3, [r7, #7]
  4025b2:	f003 0307 	and.w	r3, r3, #7
  4025b6:	2b00      	cmp	r3, #0
  4025b8:	d003      	beq.n	4025c2 <dmp_set_tap_thresh+0x22>
  4025ba:	88bb      	ldrh	r3, [r7, #4]
  4025bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
  4025c0:	d902      	bls.n	4025c8 <dmp_set_tap_thresh+0x28>
        return -1;
  4025c2:	f04f 33ff 	mov.w	r3, #4294967295
  4025c6:	e10f      	b.n	4027e8 <dmp_set_tap_thresh+0x248>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
  4025c8:	88ba      	ldrh	r2, [r7, #4]
  4025ca:	4b89      	ldr	r3, [pc, #548]	; (4027f0 <dmp_set_tap_thresh+0x250>)
  4025cc:	4610      	mov	r0, r2
  4025ce:	4798      	blx	r3
  4025d0:	4602      	mov	r2, r0
  4025d2:	4b88      	ldr	r3, [pc, #544]	; (4027f4 <dmp_set_tap_thresh+0x254>)
  4025d4:	4988      	ldr	r1, [pc, #544]	; (4027f8 <dmp_set_tap_thresh+0x258>)
  4025d6:	4610      	mov	r0, r2
  4025d8:	4798      	blx	r3
  4025da:	4603      	mov	r3, r0
  4025dc:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
  4025de:	f107 030b 	add.w	r3, r7, #11
  4025e2:	4618      	mov	r0, r3
  4025e4:	4b85      	ldr	r3, [pc, #532]	; (4027fc <dmp_set_tap_thresh+0x25c>)
  4025e6:	4798      	blx	r3
    switch (accel_fsr) {
  4025e8:	7afb      	ldrb	r3, [r7, #11]
  4025ea:	3b02      	subs	r3, #2
  4025ec:	2b0e      	cmp	r3, #14
  4025ee:	f200 8081 	bhi.w	4026f4 <dmp_set_tap_thresh+0x154>
  4025f2:	a201      	add	r2, pc, #4	; (adr r2, 4025f8 <dmp_set_tap_thresh+0x58>)
  4025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4025f8:	00402635 	.word	0x00402635
  4025fc:	004026f5 	.word	0x004026f5
  402600:	00402665 	.word	0x00402665
  402604:	004026f5 	.word	0x004026f5
  402608:	004026f5 	.word	0x004026f5
  40260c:	004026f5 	.word	0x004026f5
  402610:	00402695 	.word	0x00402695
  402614:	004026f5 	.word	0x004026f5
  402618:	004026f5 	.word	0x004026f5
  40261c:	004026f5 	.word	0x004026f5
  402620:	004026f5 	.word	0x004026f5
  402624:	004026f5 	.word	0x004026f5
  402628:	004026f5 	.word	0x004026f5
  40262c:	004026f5 	.word	0x004026f5
  402630:	004026c5 	.word	0x004026c5
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
  402634:	4b72      	ldr	r3, [pc, #456]	; (402800 <dmp_set_tap_thresh+0x260>)
  402636:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
  40263a:	6938      	ldr	r0, [r7, #16]
  40263c:	4798      	blx	r3
  40263e:	4603      	mov	r3, r0
  402640:	461a      	mov	r2, r3
  402642:	4b70      	ldr	r3, [pc, #448]	; (402804 <dmp_set_tap_thresh+0x264>)
  402644:	4610      	mov	r0, r2
  402646:	4798      	blx	r3
  402648:	4603      	mov	r3, r0
  40264a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
  40264c:	4b6c      	ldr	r3, [pc, #432]	; (402800 <dmp_set_tap_thresh+0x260>)
  40264e:	496e      	ldr	r1, [pc, #440]	; (402808 <dmp_set_tap_thresh+0x268>)
  402650:	6938      	ldr	r0, [r7, #16]
  402652:	4798      	blx	r3
  402654:	4603      	mov	r3, r0
  402656:	461a      	mov	r2, r3
  402658:	4b6a      	ldr	r3, [pc, #424]	; (402804 <dmp_set_tap_thresh+0x264>)
  40265a:	4610      	mov	r0, r2
  40265c:	4798      	blx	r3
  40265e:	4603      	mov	r3, r0
  402660:	82bb      	strh	r3, [r7, #20]
        break;
  402662:	e04a      	b.n	4026fa <dmp_set_tap_thresh+0x15a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
  402664:	4b66      	ldr	r3, [pc, #408]	; (402800 <dmp_set_tap_thresh+0x260>)
  402666:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
  40266a:	6938      	ldr	r0, [r7, #16]
  40266c:	4798      	blx	r3
  40266e:	4603      	mov	r3, r0
  402670:	461a      	mov	r2, r3
  402672:	4b64      	ldr	r3, [pc, #400]	; (402804 <dmp_set_tap_thresh+0x264>)
  402674:	4610      	mov	r0, r2
  402676:	4798      	blx	r3
  402678:	4603      	mov	r3, r0
  40267a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
  40267c:	4b60      	ldr	r3, [pc, #384]	; (402800 <dmp_set_tap_thresh+0x260>)
  40267e:	4963      	ldr	r1, [pc, #396]	; (40280c <dmp_set_tap_thresh+0x26c>)
  402680:	6938      	ldr	r0, [r7, #16]
  402682:	4798      	blx	r3
  402684:	4603      	mov	r3, r0
  402686:	461a      	mov	r2, r3
  402688:	4b5e      	ldr	r3, [pc, #376]	; (402804 <dmp_set_tap_thresh+0x264>)
  40268a:	4610      	mov	r0, r2
  40268c:	4798      	blx	r3
  40268e:	4603      	mov	r3, r0
  402690:	82bb      	strh	r3, [r7, #20]
        break;
  402692:	e032      	b.n	4026fa <dmp_set_tap_thresh+0x15a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
  402694:	4b5a      	ldr	r3, [pc, #360]	; (402800 <dmp_set_tap_thresh+0x260>)
  402696:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
  40269a:	6938      	ldr	r0, [r7, #16]
  40269c:	4798      	blx	r3
  40269e:	4603      	mov	r3, r0
  4026a0:	461a      	mov	r2, r3
  4026a2:	4b58      	ldr	r3, [pc, #352]	; (402804 <dmp_set_tap_thresh+0x264>)
  4026a4:	4610      	mov	r0, r2
  4026a6:	4798      	blx	r3
  4026a8:	4603      	mov	r3, r0
  4026aa:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
  4026ac:	4b54      	ldr	r3, [pc, #336]	; (402800 <dmp_set_tap_thresh+0x260>)
  4026ae:	4958      	ldr	r1, [pc, #352]	; (402810 <dmp_set_tap_thresh+0x270>)
  4026b0:	6938      	ldr	r0, [r7, #16]
  4026b2:	4798      	blx	r3
  4026b4:	4603      	mov	r3, r0
  4026b6:	461a      	mov	r2, r3
  4026b8:	4b52      	ldr	r3, [pc, #328]	; (402804 <dmp_set_tap_thresh+0x264>)
  4026ba:	4610      	mov	r0, r2
  4026bc:	4798      	blx	r3
  4026be:	4603      	mov	r3, r0
  4026c0:	82bb      	strh	r3, [r7, #20]
        break;
  4026c2:	e01a      	b.n	4026fa <dmp_set_tap_thresh+0x15a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
  4026c4:	4b4e      	ldr	r3, [pc, #312]	; (402800 <dmp_set_tap_thresh+0x260>)
  4026c6:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
  4026ca:	6938      	ldr	r0, [r7, #16]
  4026cc:	4798      	blx	r3
  4026ce:	4603      	mov	r3, r0
  4026d0:	461a      	mov	r2, r3
  4026d2:	4b4c      	ldr	r3, [pc, #304]	; (402804 <dmp_set_tap_thresh+0x264>)
  4026d4:	4610      	mov	r0, r2
  4026d6:	4798      	blx	r3
  4026d8:	4603      	mov	r3, r0
  4026da:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
  4026dc:	4b48      	ldr	r3, [pc, #288]	; (402800 <dmp_set_tap_thresh+0x260>)
  4026de:	494d      	ldr	r1, [pc, #308]	; (402814 <dmp_set_tap_thresh+0x274>)
  4026e0:	6938      	ldr	r0, [r7, #16]
  4026e2:	4798      	blx	r3
  4026e4:	4603      	mov	r3, r0
  4026e6:	461a      	mov	r2, r3
  4026e8:	4b46      	ldr	r3, [pc, #280]	; (402804 <dmp_set_tap_thresh+0x264>)
  4026ea:	4610      	mov	r0, r2
  4026ec:	4798      	blx	r3
  4026ee:	4603      	mov	r3, r0
  4026f0:	82bb      	strh	r3, [r7, #20]
        break;
  4026f2:	e002      	b.n	4026fa <dmp_set_tap_thresh+0x15a>
    default:
        return -1;
  4026f4:	f04f 33ff 	mov.w	r3, #4294967295
  4026f8:	e076      	b.n	4027e8 <dmp_set_tap_thresh+0x248>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
  4026fa:	8afb      	ldrh	r3, [r7, #22]
  4026fc:	0a1b      	lsrs	r3, r3, #8
  4026fe:	b29b      	uxth	r3, r3
  402700:	b2db      	uxtb	r3, r3
  402702:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
  402704:	8afb      	ldrh	r3, [r7, #22]
  402706:	b2db      	uxtb	r3, r3
  402708:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
  40270a:	8abb      	ldrh	r3, [r7, #20]
  40270c:	0a1b      	lsrs	r3, r3, #8
  40270e:	b29b      	uxth	r3, r3
  402710:	b2db      	uxtb	r3, r3
  402712:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
  402714:	8abb      	ldrh	r3, [r7, #20]
  402716:	b2db      	uxtb	r3, r3
  402718:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
  40271a:	79fb      	ldrb	r3, [r7, #7]
  40271c:	f003 0301 	and.w	r3, r3, #1
  402720:	2b00      	cmp	r3, #0
  402722:	d01c      	beq.n	40275e <dmp_set_tap_thresh+0x1be>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
  402724:	f107 030c 	add.w	r3, r7, #12
  402728:	461a      	mov	r2, r3
  40272a:	2102      	movs	r1, #2
  40272c:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
  402730:	4b39      	ldr	r3, [pc, #228]	; (402818 <dmp_set_tap_thresh+0x278>)
  402732:	4798      	blx	r3
  402734:	4603      	mov	r3, r0
  402736:	2b00      	cmp	r3, #0
  402738:	d002      	beq.n	402740 <dmp_set_tap_thresh+0x1a0>
            return -1;
  40273a:	f04f 33ff 	mov.w	r3, #4294967295
  40273e:	e053      	b.n	4027e8 <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
  402740:	f107 030c 	add.w	r3, r7, #12
  402744:	3302      	adds	r3, #2
  402746:	461a      	mov	r2, r3
  402748:	2102      	movs	r1, #2
  40274a:	f44f 7092 	mov.w	r0, #292	; 0x124
  40274e:	4b32      	ldr	r3, [pc, #200]	; (402818 <dmp_set_tap_thresh+0x278>)
  402750:	4798      	blx	r3
  402752:	4603      	mov	r3, r0
  402754:	2b00      	cmp	r3, #0
  402756:	d002      	beq.n	40275e <dmp_set_tap_thresh+0x1be>
            return -1;
  402758:	f04f 33ff 	mov.w	r3, #4294967295
  40275c:	e044      	b.n	4027e8 <dmp_set_tap_thresh+0x248>
    }
    if (axis & TAP_Y) {
  40275e:	79fb      	ldrb	r3, [r7, #7]
  402760:	f003 0302 	and.w	r3, r3, #2
  402764:	2b00      	cmp	r3, #0
  402766:	d01c      	beq.n	4027a2 <dmp_set_tap_thresh+0x202>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
  402768:	f107 030c 	add.w	r3, r7, #12
  40276c:	461a      	mov	r2, r3
  40276e:	2102      	movs	r1, #2
  402770:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
  402774:	4b28      	ldr	r3, [pc, #160]	; (402818 <dmp_set_tap_thresh+0x278>)
  402776:	4798      	blx	r3
  402778:	4603      	mov	r3, r0
  40277a:	2b00      	cmp	r3, #0
  40277c:	d002      	beq.n	402784 <dmp_set_tap_thresh+0x1e4>
            return -1;
  40277e:	f04f 33ff 	mov.w	r3, #4294967295
  402782:	e031      	b.n	4027e8 <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
  402784:	f107 030c 	add.w	r3, r7, #12
  402788:	3302      	adds	r3, #2
  40278a:	461a      	mov	r2, r3
  40278c:	2102      	movs	r1, #2
  40278e:	f44f 7094 	mov.w	r0, #296	; 0x128
  402792:	4b21      	ldr	r3, [pc, #132]	; (402818 <dmp_set_tap_thresh+0x278>)
  402794:	4798      	blx	r3
  402796:	4603      	mov	r3, r0
  402798:	2b00      	cmp	r3, #0
  40279a:	d002      	beq.n	4027a2 <dmp_set_tap_thresh+0x202>
            return -1;
  40279c:	f04f 33ff 	mov.w	r3, #4294967295
  4027a0:	e022      	b.n	4027e8 <dmp_set_tap_thresh+0x248>
    }
    if (axis & TAP_Z) {
  4027a2:	79fb      	ldrb	r3, [r7, #7]
  4027a4:	f003 0304 	and.w	r3, r3, #4
  4027a8:	2b00      	cmp	r3, #0
  4027aa:	d01c      	beq.n	4027e6 <dmp_set_tap_thresh+0x246>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
  4027ac:	f107 030c 	add.w	r3, r7, #12
  4027b0:	461a      	mov	r2, r3
  4027b2:	2102      	movs	r1, #2
  4027b4:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
  4027b8:	4b17      	ldr	r3, [pc, #92]	; (402818 <dmp_set_tap_thresh+0x278>)
  4027ba:	4798      	blx	r3
  4027bc:	4603      	mov	r3, r0
  4027be:	2b00      	cmp	r3, #0
  4027c0:	d002      	beq.n	4027c8 <dmp_set_tap_thresh+0x228>
            return -1;
  4027c2:	f04f 33ff 	mov.w	r3, #4294967295
  4027c6:	e00f      	b.n	4027e8 <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
  4027c8:	f107 030c 	add.w	r3, r7, #12
  4027cc:	3302      	adds	r3, #2
  4027ce:	461a      	mov	r2, r3
  4027d0:	2102      	movs	r1, #2
  4027d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
  4027d6:	4b10      	ldr	r3, [pc, #64]	; (402818 <dmp_set_tap_thresh+0x278>)
  4027d8:	4798      	blx	r3
  4027da:	4603      	mov	r3, r0
  4027dc:	2b00      	cmp	r3, #0
  4027de:	d002      	beq.n	4027e6 <dmp_set_tap_thresh+0x246>
            return -1;
  4027e0:	f04f 33ff 	mov.w	r3, #4294967295
  4027e4:	e000      	b.n	4027e8 <dmp_set_tap_thresh+0x248>
    }
    return 0;
  4027e6:	2300      	movs	r3, #0
}
  4027e8:	4618      	mov	r0, r3
  4027ea:	3718      	adds	r7, #24
  4027ec:	46bd      	mov	sp, r7
  4027ee:	bd80      	pop	{r7, pc}
  4027f0:	004064d5 	.word	0x004064d5
  4027f4:	004066ed 	.word	0x004066ed
  4027f8:	43480000 	.word	0x43480000
  4027fc:	00401439 	.word	0x00401439
  402800:	00406585 	.word	0x00406585
  402804:	00406911 	.word	0x00406911
  402808:	46400000 	.word	0x46400000
  40280c:	45c00000 	.word	0x45c00000
  402810:	45400000 	.word	0x45400000
  402814:	44c00000 	.word	0x44c00000
  402818:	00401d65 	.word	0x00401d65

0040281c <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
  40281c:	b580      	push	{r7, lr}
  40281e:	b084      	sub	sp, #16
  402820:	af00      	add	r7, sp, #0
  402822:	4603      	mov	r3, r0
  402824:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
  402826:	2300      	movs	r3, #0
  402828:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
  40282a:	79fb      	ldrb	r3, [r7, #7]
  40282c:	f003 0301 	and.w	r3, r3, #1
  402830:	2b00      	cmp	r3, #0
  402832:	d004      	beq.n	40283e <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
  402834:	7bfb      	ldrb	r3, [r7, #15]
  402836:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  40283a:	b2db      	uxtb	r3, r3
  40283c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
  40283e:	79fb      	ldrb	r3, [r7, #7]
  402840:	f003 0302 	and.w	r3, r3, #2
  402844:	2b00      	cmp	r3, #0
  402846:	d004      	beq.n	402852 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
  402848:	7bfb      	ldrb	r3, [r7, #15]
  40284a:	f043 030c 	orr.w	r3, r3, #12
  40284e:	b2db      	uxtb	r3, r3
  402850:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
  402852:	79fb      	ldrb	r3, [r7, #7]
  402854:	f003 0304 	and.w	r3, r3, #4
  402858:	2b00      	cmp	r3, #0
  40285a:	d004      	beq.n	402866 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
  40285c:	7bfb      	ldrb	r3, [r7, #15]
  40285e:	f043 0303 	orr.w	r3, r3, #3
  402862:	b2db      	uxtb	r3, r3
  402864:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
  402866:	f107 030f 	add.w	r3, r7, #15
  40286a:	461a      	mov	r2, r3
  40286c:	2101      	movs	r1, #1
  40286e:	f44f 70a4 	mov.w	r0, #328	; 0x148
  402872:	4b03      	ldr	r3, [pc, #12]	; (402880 <dmp_set_tap_axes+0x64>)
  402874:	4798      	blx	r3
  402876:	4603      	mov	r3, r0
}
  402878:	4618      	mov	r0, r3
  40287a:	3710      	adds	r7, #16
  40287c:	46bd      	mov	sp, r7
  40287e:	bd80      	pop	{r7, pc}
  402880:	00401d65 	.word	0x00401d65

00402884 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
  402884:	b580      	push	{r7, lr}
  402886:	b084      	sub	sp, #16
  402888:	af00      	add	r7, sp, #0
  40288a:	4603      	mov	r3, r0
  40288c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
  40288e:	79fb      	ldrb	r3, [r7, #7]
  402890:	2b00      	cmp	r3, #0
  402892:	d102      	bne.n	40289a <dmp_set_tap_count+0x16>
        min_taps = 1;
  402894:	2301      	movs	r3, #1
  402896:	71fb      	strb	r3, [r7, #7]
  402898:	e004      	b.n	4028a4 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
  40289a:	79fb      	ldrb	r3, [r7, #7]
  40289c:	2b04      	cmp	r3, #4
  40289e:	d901      	bls.n	4028a4 <dmp_set_tap_count+0x20>
        min_taps = 4;
  4028a0:	2304      	movs	r3, #4
  4028a2:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
  4028a4:	79fb      	ldrb	r3, [r7, #7]
  4028a6:	3b01      	subs	r3, #1
  4028a8:	b2db      	uxtb	r3, r3
  4028aa:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
  4028ac:	f107 030f 	add.w	r3, r7, #15
  4028b0:	461a      	mov	r2, r3
  4028b2:	2101      	movs	r1, #1
  4028b4:	f240 104f 	movw	r0, #335	; 0x14f
  4028b8:	4b03      	ldr	r3, [pc, #12]	; (4028c8 <dmp_set_tap_count+0x44>)
  4028ba:	4798      	blx	r3
  4028bc:	4603      	mov	r3, r0
}
  4028be:	4618      	mov	r0, r3
  4028c0:	3710      	adds	r7, #16
  4028c2:	46bd      	mov	sp, r7
  4028c4:	bd80      	pop	{r7, pc}
  4028c6:	bf00      	nop
  4028c8:	00401d65 	.word	0x00401d65

004028cc <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
  4028cc:	b580      	push	{r7, lr}
  4028ce:	b084      	sub	sp, #16
  4028d0:	af00      	add	r7, sp, #0
  4028d2:	4603      	mov	r3, r0
  4028d4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
  4028d6:	88fb      	ldrh	r3, [r7, #6]
  4028d8:	4a0c      	ldr	r2, [pc, #48]	; (40290c <dmp_set_tap_time+0x40>)
  4028da:	fba2 2303 	umull	r2, r3, r2, r3
  4028de:	089b      	lsrs	r3, r3, #2
  4028e0:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
  4028e2:	89fb      	ldrh	r3, [r7, #14]
  4028e4:	0a1b      	lsrs	r3, r3, #8
  4028e6:	b29b      	uxth	r3, r3
  4028e8:	b2db      	uxtb	r3, r3
  4028ea:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
  4028ec:	89fb      	ldrh	r3, [r7, #14]
  4028ee:	b2db      	uxtb	r3, r3
  4028f0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
  4028f2:	f107 030c 	add.w	r3, r7, #12
  4028f6:	461a      	mov	r2, r3
  4028f8:	2102      	movs	r1, #2
  4028fa:	f44f 70ef 	mov.w	r0, #478	; 0x1de
  4028fe:	4b04      	ldr	r3, [pc, #16]	; (402910 <dmp_set_tap_time+0x44>)
  402900:	4798      	blx	r3
  402902:	4603      	mov	r3, r0
}
  402904:	4618      	mov	r0, r3
  402906:	3710      	adds	r7, #16
  402908:	46bd      	mov	sp, r7
  40290a:	bd80      	pop	{r7, pc}
  40290c:	cccccccd 	.word	0xcccccccd
  402910:	00401d65 	.word	0x00401d65

00402914 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
  402914:	b580      	push	{r7, lr}
  402916:	b084      	sub	sp, #16
  402918:	af00      	add	r7, sp, #0
  40291a:	4603      	mov	r3, r0
  40291c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
  40291e:	88fb      	ldrh	r3, [r7, #6]
  402920:	4a0c      	ldr	r2, [pc, #48]	; (402954 <dmp_set_tap_time_multi+0x40>)
  402922:	fba2 2303 	umull	r2, r3, r2, r3
  402926:	089b      	lsrs	r3, r3, #2
  402928:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
  40292a:	89fb      	ldrh	r3, [r7, #14]
  40292c:	0a1b      	lsrs	r3, r3, #8
  40292e:	b29b      	uxth	r3, r3
  402930:	b2db      	uxtb	r3, r3
  402932:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
  402934:	89fb      	ldrh	r3, [r7, #14]
  402936:	b2db      	uxtb	r3, r3
  402938:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
  40293a:	f107 030c 	add.w	r3, r7, #12
  40293e:	461a      	mov	r2, r3
  402940:	2102      	movs	r1, #2
  402942:	f44f 70ed 	mov.w	r0, #474	; 0x1da
  402946:	4b04      	ldr	r3, [pc, #16]	; (402958 <dmp_set_tap_time_multi+0x44>)
  402948:	4798      	blx	r3
  40294a:	4603      	mov	r3, r0
}
  40294c:	4618      	mov	r0, r3
  40294e:	3710      	adds	r7, #16
  402950:	46bd      	mov	sp, r7
  402952:	bd80      	pop	{r7, pc}
  402954:	cccccccd 	.word	0xcccccccd
  402958:	00401d65 	.word	0x00401d65

0040295c <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
  40295c:	b580      	push	{r7, lr}
  40295e:	b084      	sub	sp, #16
  402960:	af00      	add	r7, sp, #0
  402962:	6078      	str	r0, [r7, #4]
  402964:	460b      	mov	r3, r1
  402966:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
  402968:	687b      	ldr	r3, [r7, #4]
  40296a:	4a13      	ldr	r2, [pc, #76]	; (4029b8 <dmp_set_shake_reject_thresh+0x5c>)
  40296c:	fb82 1203 	smull	r1, r2, r2, r3
  402970:	1192      	asrs	r2, r2, #6
  402972:	17db      	asrs	r3, r3, #31
  402974:	1ad3      	subs	r3, r2, r3
  402976:	887a      	ldrh	r2, [r7, #2]
  402978:	fb02 f303 	mul.w	r3, r2, r3
  40297c:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
  40297e:	68fb      	ldr	r3, [r7, #12]
  402980:	161b      	asrs	r3, r3, #24
  402982:	b2db      	uxtb	r3, r3
  402984:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
  402986:	68fb      	ldr	r3, [r7, #12]
  402988:	141b      	asrs	r3, r3, #16
  40298a:	b2db      	uxtb	r3, r3
  40298c:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
  40298e:	68fb      	ldr	r3, [r7, #12]
  402990:	121b      	asrs	r3, r3, #8
  402992:	b2db      	uxtb	r3, r3
  402994:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
  402996:	68fb      	ldr	r3, [r7, #12]
  402998:	b2db      	uxtb	r3, r3
  40299a:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
  40299c:	f107 0308 	add.w	r3, r7, #8
  4029a0:	461a      	mov	r2, r3
  4029a2:	2104      	movs	r1, #4
  4029a4:	f44f 70ae 	mov.w	r0, #348	; 0x15c
  4029a8:	4b04      	ldr	r3, [pc, #16]	; (4029bc <dmp_set_shake_reject_thresh+0x60>)
  4029aa:	4798      	blx	r3
  4029ac:	4603      	mov	r3, r0
}
  4029ae:	4618      	mov	r0, r3
  4029b0:	3710      	adds	r7, #16
  4029b2:	46bd      	mov	sp, r7
  4029b4:	bd80      	pop	{r7, pc}
  4029b6:	bf00      	nop
  4029b8:	10624dd3 	.word	0x10624dd3
  4029bc:	00401d65 	.word	0x00401d65

004029c0 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
  4029c0:	b580      	push	{r7, lr}
  4029c2:	b084      	sub	sp, #16
  4029c4:	af00      	add	r7, sp, #0
  4029c6:	4603      	mov	r3, r0
  4029c8:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
  4029ca:	88fb      	ldrh	r3, [r7, #6]
  4029cc:	4a0c      	ldr	r2, [pc, #48]	; (402a00 <dmp_set_shake_reject_time+0x40>)
  4029ce:	fba2 2303 	umull	r2, r3, r2, r3
  4029d2:	089b      	lsrs	r3, r3, #2
  4029d4:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
  4029d6:	88fb      	ldrh	r3, [r7, #6]
  4029d8:	0a1b      	lsrs	r3, r3, #8
  4029da:	b29b      	uxth	r3, r3
  4029dc:	b2db      	uxtb	r3, r3
  4029de:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
  4029e0:	88fb      	ldrh	r3, [r7, #6]
  4029e2:	b2db      	uxtb	r3, r3
  4029e4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
  4029e6:	f107 030c 	add.w	r3, r7, #12
  4029ea:	461a      	mov	r2, r3
  4029ec:	2102      	movs	r1, #2
  4029ee:	f44f 70ad 	mov.w	r0, #346	; 0x15a
  4029f2:	4b04      	ldr	r3, [pc, #16]	; (402a04 <dmp_set_shake_reject_time+0x44>)
  4029f4:	4798      	blx	r3
  4029f6:	4603      	mov	r3, r0
}
  4029f8:	4618      	mov	r0, r3
  4029fa:	3710      	adds	r7, #16
  4029fc:	46bd      	mov	sp, r7
  4029fe:	bd80      	pop	{r7, pc}
  402a00:	cccccccd 	.word	0xcccccccd
  402a04:	00401d65 	.word	0x00401d65

00402a08 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
  402a08:	b580      	push	{r7, lr}
  402a0a:	b084      	sub	sp, #16
  402a0c:	af00      	add	r7, sp, #0
  402a0e:	4603      	mov	r3, r0
  402a10:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
  402a12:	88fb      	ldrh	r3, [r7, #6]
  402a14:	4a0c      	ldr	r2, [pc, #48]	; (402a48 <dmp_set_shake_reject_timeout+0x40>)
  402a16:	fba2 2303 	umull	r2, r3, r2, r3
  402a1a:	089b      	lsrs	r3, r3, #2
  402a1c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
  402a1e:	88fb      	ldrh	r3, [r7, #6]
  402a20:	0a1b      	lsrs	r3, r3, #8
  402a22:	b29b      	uxth	r3, r3
  402a24:	b2db      	uxtb	r3, r3
  402a26:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
  402a28:	88fb      	ldrh	r3, [r7, #6]
  402a2a:	b2db      	uxtb	r3, r3
  402a2c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
  402a2e:	f107 030c 	add.w	r3, r7, #12
  402a32:	461a      	mov	r2, r3
  402a34:	2102      	movs	r1, #2
  402a36:	f44f 70ac 	mov.w	r0, #344	; 0x158
  402a3a:	4b04      	ldr	r3, [pc, #16]	; (402a4c <dmp_set_shake_reject_timeout+0x44>)
  402a3c:	4798      	blx	r3
  402a3e:	4603      	mov	r3, r0
}
  402a40:	4618      	mov	r0, r3
  402a42:	3710      	adds	r7, #16
  402a44:	46bd      	mov	sp, r7
  402a46:	bd80      	pop	{r7, pc}
  402a48:	cccccccd 	.word	0xcccccccd
  402a4c:	00401d65 	.word	0x00401d65

00402a50 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
  402a50:	b580      	push	{r7, lr}
  402a52:	b086      	sub	sp, #24
  402a54:	af00      	add	r7, sp, #0
  402a56:	4603      	mov	r3, r0
  402a58:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
  402a5a:	2302      	movs	r3, #2
  402a5c:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
  402a5e:	23ca      	movs	r3, #202	; 0xca
  402a60:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
  402a62:	23e3      	movs	r3, #227	; 0xe3
  402a64:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
  402a66:	2309      	movs	r3, #9
  402a68:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
  402a6a:	f107 030c 	add.w	r3, r7, #12
  402a6e:	461a      	mov	r2, r3
  402a70:	2104      	movs	r1, #4
  402a72:	2068      	movs	r0, #104	; 0x68
  402a74:	4b88      	ldr	r3, [pc, #544]	; (402c98 <dmp_enable_feature+0x248>)
  402a76:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
  402a78:	23a3      	movs	r3, #163	; 0xa3
  402a7a:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
  402a7c:	88fb      	ldrh	r3, [r7, #6]
  402a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402a82:	2b00      	cmp	r3, #0
  402a84:	d006      	beq.n	402a94 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
  402a86:	23c0      	movs	r3, #192	; 0xc0
  402a88:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
  402a8a:	23c8      	movs	r3, #200	; 0xc8
  402a8c:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
  402a8e:	23c2      	movs	r3, #194	; 0xc2
  402a90:	73fb      	strb	r3, [r7, #15]
  402a92:	e005      	b.n	402aa0 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
  402a94:	23a3      	movs	r3, #163	; 0xa3
  402a96:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
  402a98:	23a3      	movs	r3, #163	; 0xa3
  402a9a:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
  402a9c:	23a3      	movs	r3, #163	; 0xa3
  402a9e:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
  402aa0:	88fb      	ldrh	r3, [r7, #6]
  402aa2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402aa6:	2b00      	cmp	r3, #0
  402aa8:	d006      	beq.n	402ab8 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
  402aaa:	23c4      	movs	r3, #196	; 0xc4
  402aac:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
  402aae:	23cc      	movs	r3, #204	; 0xcc
  402ab0:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
  402ab2:	23c6      	movs	r3, #198	; 0xc6
  402ab4:	74bb      	strb	r3, [r7, #18]
  402ab6:	e005      	b.n	402ac4 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
  402ab8:	23a3      	movs	r3, #163	; 0xa3
  402aba:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
  402abc:	23a3      	movs	r3, #163	; 0xa3
  402abe:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
  402ac0:	23a3      	movs	r3, #163	; 0xa3
  402ac2:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
  402ac4:	23a3      	movs	r3, #163	; 0xa3
  402ac6:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
  402ac8:	23a3      	movs	r3, #163	; 0xa3
  402aca:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
  402acc:	23a3      	movs	r3, #163	; 0xa3
  402ace:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
  402ad0:	f107 030c 	add.w	r3, r7, #12
  402ad4:	461a      	mov	r2, r3
  402ad6:	210a      	movs	r1, #10
  402ad8:	f640 20a7 	movw	r0, #2727	; 0xaa7
  402adc:	4b6e      	ldr	r3, [pc, #440]	; (402c98 <dmp_enable_feature+0x248>)
  402ade:	4798      	blx	r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
  402ae0:	88fb      	ldrh	r3, [r7, #6]
  402ae2:	f003 0303 	and.w	r3, r3, #3
  402ae6:	2b00      	cmp	r3, #0
  402ae8:	d002      	beq.n	402af0 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
  402aea:	2320      	movs	r3, #32
  402aec:	733b      	strb	r3, [r7, #12]
  402aee:	e001      	b.n	402af4 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
  402af0:	23d8      	movs	r3, #216	; 0xd8
  402af2:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
  402af4:	f107 030c 	add.w	r3, r7, #12
  402af8:	461a      	mov	r2, r3
  402afa:	2101      	movs	r1, #1
  402afc:	f640 20b6 	movw	r0, #2742	; 0xab6
  402b00:	4b65      	ldr	r3, [pc, #404]	; (402c98 <dmp_enable_feature+0x248>)
  402b02:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
  402b04:	88fb      	ldrh	r3, [r7, #6]
  402b06:	f003 0320 	and.w	r3, r3, #32
  402b0a:	2b00      	cmp	r3, #0
  402b0c:	d003      	beq.n	402b16 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
  402b0e:	2001      	movs	r0, #1
  402b10:	4b62      	ldr	r3, [pc, #392]	; (402c9c <dmp_enable_feature+0x24c>)
  402b12:	4798      	blx	r3
  402b14:	e002      	b.n	402b1c <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
  402b16:	2000      	movs	r0, #0
  402b18:	4b60      	ldr	r3, [pc, #384]	; (402c9c <dmp_enable_feature+0x24c>)
  402b1a:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
  402b1c:	88fb      	ldrh	r3, [r7, #6]
  402b1e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402b22:	2b00      	cmp	r3, #0
  402b24:	d01d      	beq.n	402b62 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
  402b26:	88fb      	ldrh	r3, [r7, #6]
  402b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402b2c:	2b00      	cmp	r3, #0
  402b2e:	d008      	beq.n	402b42 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
  402b30:	23b2      	movs	r3, #178	; 0xb2
  402b32:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
  402b34:	238b      	movs	r3, #139	; 0x8b
  402b36:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
  402b38:	23b6      	movs	r3, #182	; 0xb6
  402b3a:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
  402b3c:	239b      	movs	r3, #155	; 0x9b
  402b3e:	73fb      	strb	r3, [r7, #15]
  402b40:	e007      	b.n	402b52 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
  402b42:	23b0      	movs	r3, #176	; 0xb0
  402b44:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
  402b46:	2380      	movs	r3, #128	; 0x80
  402b48:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
  402b4a:	23b4      	movs	r3, #180	; 0xb4
  402b4c:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
  402b4e:	2390      	movs	r3, #144	; 0x90
  402b50:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
  402b52:	f107 030c 	add.w	r3, r7, #12
  402b56:	461a      	mov	r2, r3
  402b58:	2104      	movs	r1, #4
  402b5a:	f640 20a2 	movw	r0, #2722	; 0xaa2
  402b5e:	4b4e      	ldr	r3, [pc, #312]	; (402c98 <dmp_enable_feature+0x248>)
  402b60:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
  402b62:	88fb      	ldrh	r3, [r7, #6]
  402b64:	f003 0301 	and.w	r3, r3, #1
  402b68:	2b00      	cmp	r3, #0
  402b6a:	d025      	beq.n	402bb8 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
  402b6c:	23f8      	movs	r3, #248	; 0xf8
  402b6e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
  402b70:	f107 030c 	add.w	r3, r7, #12
  402b74:	461a      	mov	r2, r3
  402b76:	2101      	movs	r1, #1
  402b78:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
  402b7c:	4b46      	ldr	r3, [pc, #280]	; (402c98 <dmp_enable_feature+0x248>)
  402b7e:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
  402b80:	21fa      	movs	r1, #250	; 0xfa
  402b82:	2007      	movs	r0, #7
  402b84:	4b46      	ldr	r3, [pc, #280]	; (402ca0 <dmp_enable_feature+0x250>)
  402b86:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
  402b88:	2007      	movs	r0, #7
  402b8a:	4b46      	ldr	r3, [pc, #280]	; (402ca4 <dmp_enable_feature+0x254>)
  402b8c:	4798      	blx	r3
        dmp_set_tap_count(1);
  402b8e:	2001      	movs	r0, #1
  402b90:	4b45      	ldr	r3, [pc, #276]	; (402ca8 <dmp_enable_feature+0x258>)
  402b92:	4798      	blx	r3
        dmp_set_tap_time(100);
  402b94:	2064      	movs	r0, #100	; 0x64
  402b96:	4b45      	ldr	r3, [pc, #276]	; (402cac <dmp_enable_feature+0x25c>)
  402b98:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
  402b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402b9e:	4b44      	ldr	r3, [pc, #272]	; (402cb0 <dmp_enable_feature+0x260>)
  402ba0:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
  402ba2:	21c8      	movs	r1, #200	; 0xc8
  402ba4:	4843      	ldr	r0, [pc, #268]	; (402cb4 <dmp_enable_feature+0x264>)
  402ba6:	4b44      	ldr	r3, [pc, #272]	; (402cb8 <dmp_enable_feature+0x268>)
  402ba8:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
  402baa:	2028      	movs	r0, #40	; 0x28
  402bac:	4b43      	ldr	r3, [pc, #268]	; (402cbc <dmp_enable_feature+0x26c>)
  402bae:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
  402bb0:	200a      	movs	r0, #10
  402bb2:	4b43      	ldr	r3, [pc, #268]	; (402cc0 <dmp_enable_feature+0x270>)
  402bb4:	4798      	blx	r3
  402bb6:	e009      	b.n	402bcc <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
  402bb8:	23d8      	movs	r3, #216	; 0xd8
  402bba:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
  402bbc:	f107 030c 	add.w	r3, r7, #12
  402bc0:	461a      	mov	r2, r3
  402bc2:	2101      	movs	r1, #1
  402bc4:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
  402bc8:	4b33      	ldr	r3, [pc, #204]	; (402c98 <dmp_enable_feature+0x248>)
  402bca:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
  402bcc:	88fb      	ldrh	r3, [r7, #6]
  402bce:	f003 0302 	and.w	r3, r3, #2
  402bd2:	2b00      	cmp	r3, #0
  402bd4:	d002      	beq.n	402bdc <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
  402bd6:	23d9      	movs	r3, #217	; 0xd9
  402bd8:	733b      	strb	r3, [r7, #12]
  402bda:	e001      	b.n	402be0 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
  402bdc:	23d8      	movs	r3, #216	; 0xd8
  402bde:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
  402be0:	f107 030c 	add.w	r3, r7, #12
  402be4:	461a      	mov	r2, r3
  402be6:	2101      	movs	r1, #1
  402be8:	f240 703d 	movw	r0, #1853	; 0x73d
  402bec:	4b2a      	ldr	r3, [pc, #168]	; (402c98 <dmp_enable_feature+0x248>)
  402bee:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
  402bf0:	88fb      	ldrh	r3, [r7, #6]
  402bf2:	f003 0304 	and.w	r3, r3, #4
  402bf6:	2b00      	cmp	r3, #0
  402bf8:	d003      	beq.n	402c02 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
  402bfa:	2001      	movs	r0, #1
  402bfc:	4b31      	ldr	r3, [pc, #196]	; (402cc4 <dmp_enable_feature+0x274>)
  402bfe:	4798      	blx	r3
  402c00:	e002      	b.n	402c08 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
  402c02:	2000      	movs	r0, #0
  402c04:	4b2f      	ldr	r3, [pc, #188]	; (402cc4 <dmp_enable_feature+0x274>)
  402c06:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
  402c08:	88fb      	ldrh	r3, [r7, #6]
  402c0a:	f003 0310 	and.w	r3, r3, #16
  402c0e:	2b00      	cmp	r3, #0
  402c10:	d003      	beq.n	402c1a <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
  402c12:	2001      	movs	r0, #1
  402c14:	4b2c      	ldr	r3, [pc, #176]	; (402cc8 <dmp_enable_feature+0x278>)
  402c16:	4798      	blx	r3
  402c18:	e002      	b.n	402c20 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
  402c1a:	2000      	movs	r0, #0
  402c1c:	4b2a      	ldr	r3, [pc, #168]	; (402cc8 <dmp_enable_feature+0x278>)
  402c1e:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
  402c20:	88fb      	ldrh	r3, [r7, #6]
  402c22:	f043 0308 	orr.w	r3, r3, #8
  402c26:	b29a      	uxth	r2, r3
  402c28:	4b28      	ldr	r3, [pc, #160]	; (402ccc <dmp_enable_feature+0x27c>)
  402c2a:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
  402c2c:	4b28      	ldr	r3, [pc, #160]	; (402cd0 <dmp_enable_feature+0x280>)
  402c2e:	4798      	blx	r3

    dmp.packet_length = 0;
  402c30:	4b26      	ldr	r3, [pc, #152]	; (402ccc <dmp_enable_feature+0x27c>)
  402c32:	2200      	movs	r2, #0
  402c34:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
  402c36:	88fb      	ldrh	r3, [r7, #6]
  402c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402c3c:	2b00      	cmp	r3, #0
  402c3e:	d005      	beq.n	402c4c <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
  402c40:	4b22      	ldr	r3, [pc, #136]	; (402ccc <dmp_enable_feature+0x27c>)
  402c42:	7b9b      	ldrb	r3, [r3, #14]
  402c44:	3306      	adds	r3, #6
  402c46:	b2da      	uxtb	r2, r3
  402c48:	4b20      	ldr	r3, [pc, #128]	; (402ccc <dmp_enable_feature+0x27c>)
  402c4a:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
  402c4c:	88fb      	ldrh	r3, [r7, #6]
  402c4e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402c52:	2b00      	cmp	r3, #0
  402c54:	d005      	beq.n	402c62 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
  402c56:	4b1d      	ldr	r3, [pc, #116]	; (402ccc <dmp_enable_feature+0x27c>)
  402c58:	7b9b      	ldrb	r3, [r3, #14]
  402c5a:	3306      	adds	r3, #6
  402c5c:	b2da      	uxtb	r2, r3
  402c5e:	4b1b      	ldr	r3, [pc, #108]	; (402ccc <dmp_enable_feature+0x27c>)
  402c60:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
  402c62:	88fb      	ldrh	r3, [r7, #6]
  402c64:	f003 0314 	and.w	r3, r3, #20
  402c68:	2b00      	cmp	r3, #0
  402c6a:	d005      	beq.n	402c78 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
  402c6c:	4b17      	ldr	r3, [pc, #92]	; (402ccc <dmp_enable_feature+0x27c>)
  402c6e:	7b9b      	ldrb	r3, [r3, #14]
  402c70:	3310      	adds	r3, #16
  402c72:	b2da      	uxtb	r2, r3
  402c74:	4b15      	ldr	r3, [pc, #84]	; (402ccc <dmp_enable_feature+0x27c>)
  402c76:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
  402c78:	88fb      	ldrh	r3, [r7, #6]
  402c7a:	f003 0303 	and.w	r3, r3, #3
  402c7e:	2b00      	cmp	r3, #0
  402c80:	d005      	beq.n	402c8e <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
  402c82:	4b12      	ldr	r3, [pc, #72]	; (402ccc <dmp_enable_feature+0x27c>)
  402c84:	7b9b      	ldrb	r3, [r3, #14]
  402c86:	3304      	adds	r3, #4
  402c88:	b2da      	uxtb	r2, r3
  402c8a:	4b10      	ldr	r3, [pc, #64]	; (402ccc <dmp_enable_feature+0x27c>)
  402c8c:	739a      	strb	r2, [r3, #14]

    return 0;
  402c8e:	2300      	movs	r3, #0
}
  402c90:	4618      	mov	r0, r3
  402c92:	3718      	adds	r7, #24
  402c94:	46bd      	mov	sp, r7
  402c96:	bd80      	pop	{r7, pc}
  402c98:	00401d65 	.word	0x00401d65
  402c9c:	00402cd5 	.word	0x00402cd5
  402ca0:	004025a1 	.word	0x004025a1
  402ca4:	0040281d 	.word	0x0040281d
  402ca8:	00402885 	.word	0x00402885
  402cac:	004028cd 	.word	0x004028cd
  402cb0:	00402915 	.word	0x00402915
  402cb4:	02cae309 	.word	0x02cae309
  402cb8:	0040295d 	.word	0x0040295d
  402cbc:	004029c1 	.word	0x004029c1
  402cc0:	00402a09 	.word	0x00402a09
  402cc4:	00402d41 	.word	0x00402d41
  402cc8:	00402d9d 	.word	0x00402d9d
  402ccc:	200004ac 	.word	0x200004ac
  402cd0:	00401119 	.word	0x00401119

00402cd4 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
  402cd4:	b580      	push	{r7, lr}
  402cd6:	b088      	sub	sp, #32
  402cd8:	af00      	add	r7, sp, #0
  402cda:	4603      	mov	r3, r0
  402cdc:	71fb      	strb	r3, [r7, #7]
    if (enable) {
  402cde:	79fb      	ldrb	r3, [r7, #7]
  402ce0:	2b00      	cmp	r3, #0
  402ce2:	d011      	beq.n	402d08 <dmp_enable_gyro_cal+0x34>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
  402ce4:	4a13      	ldr	r2, [pc, #76]	; (402d34 <dmp_enable_gyro_cal+0x60>)
  402ce6:	f107 0314 	add.w	r3, r7, #20
  402cea:	6810      	ldr	r0, [r2, #0]
  402cec:	6851      	ldr	r1, [r2, #4]
  402cee:	c303      	stmia	r3!, {r0, r1}
  402cf0:	7a12      	ldrb	r2, [r2, #8]
  402cf2:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
  402cf4:	f107 0314 	add.w	r3, r7, #20
  402cf8:	461a      	mov	r2, r3
  402cfa:	2109      	movs	r1, #9
  402cfc:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
  402d00:	4b0d      	ldr	r3, [pc, #52]	; (402d38 <dmp_enable_gyro_cal+0x64>)
  402d02:	4798      	blx	r3
  402d04:	4603      	mov	r3, r0
  402d06:	e010      	b.n	402d2a <dmp_enable_gyro_cal+0x56>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
  402d08:	4a0c      	ldr	r2, [pc, #48]	; (402d3c <dmp_enable_gyro_cal+0x68>)
  402d0a:	f107 0308 	add.w	r3, r7, #8
  402d0e:	6810      	ldr	r0, [r2, #0]
  402d10:	6851      	ldr	r1, [r2, #4]
  402d12:	c303      	stmia	r3!, {r0, r1}
  402d14:	7a12      	ldrb	r2, [r2, #8]
  402d16:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
  402d18:	f107 0308 	add.w	r3, r7, #8
  402d1c:	461a      	mov	r2, r3
  402d1e:	2109      	movs	r1, #9
  402d20:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
  402d24:	4b04      	ldr	r3, [pc, #16]	; (402d38 <dmp_enable_gyro_cal+0x64>)
  402d26:	4798      	blx	r3
  402d28:	4603      	mov	r3, r0
    }
}
  402d2a:	4618      	mov	r0, r3
  402d2c:	3720      	adds	r7, #32
  402d2e:	46bd      	mov	sp, r7
  402d30:	bd80      	pop	{r7, pc}
  402d32:	bf00      	nop
  402d34:	00407b40 	.word	0x00407b40
  402d38:	00401d65 	.word	0x00401d65
  402d3c:	00407b4c 	.word	0x00407b4c

00402d40 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
  402d40:	b580      	push	{r7, lr}
  402d42:	b084      	sub	sp, #16
  402d44:	af00      	add	r7, sp, #0
  402d46:	4603      	mov	r3, r0
  402d48:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
  402d4a:	79fb      	ldrb	r3, [r7, #7]
  402d4c:	2b00      	cmp	r3, #0
  402d4e:	d008      	beq.n	402d62 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
  402d50:	23c0      	movs	r3, #192	; 0xc0
  402d52:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
  402d54:	23c2      	movs	r3, #194	; 0xc2
  402d56:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
  402d58:	23c4      	movs	r3, #196	; 0xc4
  402d5a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
  402d5c:	23c6      	movs	r3, #198	; 0xc6
  402d5e:	73fb      	strb	r3, [r7, #15]
  402d60:	e006      	b.n	402d70 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
  402d62:	f107 030c 	add.w	r3, r7, #12
  402d66:	2204      	movs	r2, #4
  402d68:	218b      	movs	r1, #139	; 0x8b
  402d6a:	4618      	mov	r0, r3
  402d6c:	4b08      	ldr	r3, [pc, #32]	; (402d90 <dmp_enable_lp_quat+0x50>)
  402d6e:	4798      	blx	r3

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
  402d70:	f107 030c 	add.w	r3, r7, #12
  402d74:	461a      	mov	r2, r3
  402d76:	2104      	movs	r1, #4
  402d78:	f640 2098 	movw	r0, #2712	; 0xa98
  402d7c:	4b05      	ldr	r3, [pc, #20]	; (402d94 <dmp_enable_lp_quat+0x54>)
  402d7e:	4798      	blx	r3

    return mpu_reset_fifo();
  402d80:	4b05      	ldr	r3, [pc, #20]	; (402d98 <dmp_enable_lp_quat+0x58>)
  402d82:	4798      	blx	r3
  402d84:	4603      	mov	r3, r0
}
  402d86:	4618      	mov	r0, r3
  402d88:	3710      	adds	r7, #16
  402d8a:	46bd      	mov	sp, r7
  402d8c:	bd80      	pop	{r7, pc}
  402d8e:	bf00      	nop
  402d90:	00406b39 	.word	0x00406b39
  402d94:	00401d65 	.word	0x00401d65
  402d98:	00401119 	.word	0x00401119

00402d9c <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
  402d9c:	b580      	push	{r7, lr}
  402d9e:	b084      	sub	sp, #16
  402da0:	af00      	add	r7, sp, #0
  402da2:	4603      	mov	r3, r0
  402da4:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
  402da6:	79fb      	ldrb	r3, [r7, #7]
  402da8:	2b00      	cmp	r3, #0
  402daa:	d008      	beq.n	402dbe <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
  402dac:	2320      	movs	r3, #32
  402dae:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
  402db0:	2328      	movs	r3, #40	; 0x28
  402db2:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
  402db4:	2330      	movs	r3, #48	; 0x30
  402db6:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
  402db8:	2338      	movs	r3, #56	; 0x38
  402dba:	73fb      	strb	r3, [r7, #15]
  402dbc:	e006      	b.n	402dcc <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
  402dbe:	f107 030c 	add.w	r3, r7, #12
  402dc2:	2204      	movs	r2, #4
  402dc4:	21a3      	movs	r1, #163	; 0xa3
  402dc6:	4618      	mov	r0, r3
  402dc8:	4b08      	ldr	r3, [pc, #32]	; (402dec <dmp_enable_6x_lp_quat+0x50>)
  402dca:	4798      	blx	r3

    mpu_write_mem(CFG_8, 4, regs);
  402dcc:	f107 030c 	add.w	r3, r7, #12
  402dd0:	461a      	mov	r2, r3
  402dd2:	2104      	movs	r1, #4
  402dd4:	f640 209e 	movw	r0, #2718	; 0xa9e
  402dd8:	4b05      	ldr	r3, [pc, #20]	; (402df0 <dmp_enable_6x_lp_quat+0x54>)
  402dda:	4798      	blx	r3

    return mpu_reset_fifo();
  402ddc:	4b05      	ldr	r3, [pc, #20]	; (402df4 <dmp_enable_6x_lp_quat+0x58>)
  402dde:	4798      	blx	r3
  402de0:	4603      	mov	r3, r0
}
  402de2:	4618      	mov	r0, r3
  402de4:	3710      	adds	r7, #16
  402de6:	46bd      	mov	sp, r7
  402de8:	bd80      	pop	{r7, pc}
  402dea:	bf00      	nop
  402dec:	00406b39 	.word	0x00406b39
  402df0:	00401d65 	.word	0x00401d65
  402df4:	00401119 	.word	0x00401119

00402df8 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
  402df8:	b580      	push	{r7, lr}
  402dfa:	b084      	sub	sp, #16
  402dfc:	af00      	add	r7, sp, #0
  402dfe:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
  402e00:	687b      	ldr	r3, [r7, #4]
  402e02:	3303      	adds	r3, #3
  402e04:	781b      	ldrb	r3, [r3, #0]
  402e06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  402e0a:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
  402e0c:	687b      	ldr	r3, [r7, #4]
  402e0e:	3303      	adds	r3, #3
  402e10:	781b      	ldrb	r3, [r3, #0]
  402e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  402e16:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
  402e18:	687b      	ldr	r3, [r7, #4]
  402e1a:	3301      	adds	r3, #1
  402e1c:	781b      	ldrb	r3, [r3, #0]
  402e1e:	f003 0301 	and.w	r3, r3, #1
  402e22:	2b00      	cmp	r3, #0
  402e24:	d012      	beq.n	402e4c <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
  402e26:	7bbb      	ldrb	r3, [r7, #14]
  402e28:	08db      	lsrs	r3, r3, #3
  402e2a:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
  402e2c:	7bbb      	ldrb	r3, [r7, #14]
  402e2e:	f003 0307 	and.w	r3, r3, #7
  402e32:	b2db      	uxtb	r3, r3
  402e34:	3301      	adds	r3, #1
  402e36:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
  402e38:	4b10      	ldr	r3, [pc, #64]	; (402e7c <decode_gesture+0x84>)
  402e3a:	681b      	ldr	r3, [r3, #0]
  402e3c:	2b00      	cmp	r3, #0
  402e3e:	d005      	beq.n	402e4c <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
  402e40:	4b0e      	ldr	r3, [pc, #56]	; (402e7c <decode_gesture+0x84>)
  402e42:	681b      	ldr	r3, [r3, #0]
  402e44:	7b39      	ldrb	r1, [r7, #12]
  402e46:	7b7a      	ldrb	r2, [r7, #13]
  402e48:	4610      	mov	r0, r2
  402e4a:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
  402e4c:	687b      	ldr	r3, [r7, #4]
  402e4e:	3301      	adds	r3, #1
  402e50:	781b      	ldrb	r3, [r3, #0]
  402e52:	f003 0308 	and.w	r3, r3, #8
  402e56:	2b00      	cmp	r3, #0
  402e58:	d00a      	beq.n	402e70 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
  402e5a:	4b08      	ldr	r3, [pc, #32]	; (402e7c <decode_gesture+0x84>)
  402e5c:	685b      	ldr	r3, [r3, #4]
  402e5e:	2b00      	cmp	r3, #0
  402e60:	d006      	beq.n	402e70 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
  402e62:	4b06      	ldr	r3, [pc, #24]	; (402e7c <decode_gesture+0x84>)
  402e64:	685b      	ldr	r3, [r3, #4]
  402e66:	7bfa      	ldrb	r2, [r7, #15]
  402e68:	0992      	lsrs	r2, r2, #6
  402e6a:	b2d2      	uxtb	r2, r2
  402e6c:	4610      	mov	r0, r2
  402e6e:	4798      	blx	r3
    }

    return 0;
  402e70:	2300      	movs	r3, #0
}
  402e72:	4618      	mov	r0, r3
  402e74:	3710      	adds	r7, #16
  402e76:	46bd      	mov	sp, r7
  402e78:	bd80      	pop	{r7, pc}
  402e7a:	bf00      	nop
  402e7c:	200004ac 	.word	0x200004ac

00402e80 <dmp_read_fifo>:
 *  @param[out] sensors     Mask of sensors read from FIFO.
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat, unsigned long *timestamp, short *sensors, unsigned char *more)
{
  402e80:	b580      	push	{r7, lr}
  402e82:	b092      	sub	sp, #72	; 0x48
  402e84:	af00      	add	r7, sp, #0
  402e86:	60f8      	str	r0, [r7, #12]
  402e88:	60b9      	str	r1, [r7, #8]
  402e8a:	607a      	str	r2, [r7, #4]
  402e8c:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
  402e8e:	2300      	movs	r3, #0
  402e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
  402e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402e96:	2200      	movs	r2, #0
  402e98:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
  402e9a:	4bb2      	ldr	r3, [pc, #712]	; (403164 <dmp_read_fifo+0x2e4>)
  402e9c:	7b9b      	ldrb	r3, [r3, #14]
  402e9e:	b29b      	uxth	r3, r3
  402ea0:	f107 0120 	add.w	r1, r7, #32
  402ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  402ea6:	4618      	mov	r0, r3
  402ea8:	4baf      	ldr	r3, [pc, #700]	; (403168 <dmp_read_fifo+0x2e8>)
  402eaa:	4798      	blx	r3
  402eac:	4603      	mov	r3, r0
  402eae:	2b00      	cmp	r3, #0
  402eb0:	d002      	beq.n	402eb8 <dmp_read_fifo+0x38>
        return -1;
  402eb2:	f04f 33ff 	mov.w	r3, #4294967295
  402eb6:	e151      	b.n	40315c <dmp_read_fifo+0x2dc>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
  402eb8:	4baa      	ldr	r3, [pc, #680]	; (403164 <dmp_read_fifo+0x2e4>)
  402eba:	895b      	ldrh	r3, [r3, #10]
  402ebc:	f003 0314 	and.w	r3, r3, #20
  402ec0:	2b00      	cmp	r3, #0
  402ec2:	f000 8087 	beq.w	402fd4 <dmp_read_fifo+0x154>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
  402ec6:	f897 3020 	ldrb.w	r3, [r7, #32]
  402eca:	061a      	lsls	r2, r3, #24
  402ecc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  402ed0:	041b      	lsls	r3, r3, #16
  402ed2:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
  402ed4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  402ed8:	021b      	lsls	r3, r3, #8
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
  402eda:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
  402edc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  402ee0:	431a      	orrs	r2, r3
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
  402ee2:	687b      	ldr	r3, [r7, #4]
  402ee4:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
  402ee6:	687b      	ldr	r3, [r7, #4]
  402ee8:	3304      	adds	r3, #4
  402eea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
  402eee:	0611      	lsls	r1, r2, #24
  402ef0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
  402ef4:	0412      	lsls	r2, r2, #16
  402ef6:	4311      	orrs	r1, r2
            ((long)fifo_data[6] << 8) | fifo_data[7];
  402ef8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  402efc:	0212      	lsls	r2, r2, #8
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
  402efe:	430a      	orrs	r2, r1
            ((long)fifo_data[6] << 8) | fifo_data[7];
  402f00:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
  402f04:	430a      	orrs	r2, r1
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
  402f06:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
  402f08:	687b      	ldr	r3, [r7, #4]
  402f0a:	3308      	adds	r3, #8
  402f0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  402f10:	0611      	lsls	r1, r2, #24
  402f12:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
  402f16:	0412      	lsls	r2, r2, #16
  402f18:	4311      	orrs	r1, r2
            ((long)fifo_data[10] << 8) | fifo_data[11];
  402f1a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
  402f1e:	0212      	lsls	r2, r2, #8
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
  402f20:	430a      	orrs	r2, r1
            ((long)fifo_data[10] << 8) | fifo_data[11];
  402f22:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
  402f26:	430a      	orrs	r2, r1
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
  402f28:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
  402f2a:	687b      	ldr	r3, [r7, #4]
  402f2c:	330c      	adds	r3, #12
  402f2e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
  402f32:	0611      	lsls	r1, r2, #24
  402f34:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
  402f38:	0412      	lsls	r2, r2, #16
  402f3a:	4311      	orrs	r1, r2
            ((long)fifo_data[14] << 8) | fifo_data[15];
  402f3c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
  402f40:	0212      	lsls	r2, r2, #8
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
  402f42:	430a      	orrs	r2, r1
            ((long)fifo_data[14] << 8) | fifo_data[15];
  402f44:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
  402f48:	430a      	orrs	r2, r1
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
  402f4a:	601a      	str	r2, [r3, #0]
            ((long)fifo_data[14] << 8) | fifo_data[15];
        ii += 16;
  402f4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  402f50:	3310      	adds	r3, #16
  402f52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
  402f56:	687b      	ldr	r3, [r7, #4]
  402f58:	681b      	ldr	r3, [r3, #0]
  402f5a:	141b      	asrs	r3, r3, #16
  402f5c:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
  402f5e:	687b      	ldr	r3, [r7, #4]
  402f60:	3304      	adds	r3, #4
  402f62:	681b      	ldr	r3, [r3, #0]
  402f64:	141b      	asrs	r3, r3, #16
  402f66:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
  402f68:	687b      	ldr	r3, [r7, #4]
  402f6a:	3308      	adds	r3, #8
  402f6c:	681b      	ldr	r3, [r3, #0]
  402f6e:	141b      	asrs	r3, r3, #16
  402f70:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
  402f72:	687b      	ldr	r3, [r7, #4]
  402f74:	330c      	adds	r3, #12
  402f76:	681b      	ldr	r3, [r3, #0]
  402f78:	141b      	asrs	r3, r3, #16
  402f7a:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
  402f7c:	693b      	ldr	r3, [r7, #16]
  402f7e:	693a      	ldr	r2, [r7, #16]
  402f80:	fb02 f203 	mul.w	r2, r2, r3
  402f84:	697b      	ldr	r3, [r7, #20]
  402f86:	6979      	ldr	r1, [r7, #20]
  402f88:	fb01 f303 	mul.w	r3, r1, r3
  402f8c:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
  402f8e:	69bb      	ldr	r3, [r7, #24]
  402f90:	69b9      	ldr	r1, [r7, #24]
  402f92:	fb01 f303 	mul.w	r3, r1, r3
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
  402f96:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
  402f98:	69fb      	ldr	r3, [r7, #28]
  402f9a:	69f9      	ldr	r1, [r7, #28]
  402f9c:	fb01 f303 	mul.w	r3, r1, r3
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
  402fa0:	4413      	add	r3, r2
  402fa2:	643b      	str	r3, [r7, #64]	; 0x40
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
  402fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  402fa6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
  402faa:	db03      	blt.n	402fb4 <dmp_read_fifo+0x134>
  402fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  402fae:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
  402fb2:	dd07      	ble.n	402fc4 <dmp_read_fifo+0x144>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
  402fb4:	4b6d      	ldr	r3, [pc, #436]	; (40316c <dmp_read_fifo+0x2ec>)
  402fb6:	4798      	blx	r3
            sensors[0] = 0;
  402fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402fba:	2200      	movs	r2, #0
  402fbc:	801a      	strh	r2, [r3, #0]
            return -1;
  402fbe:	f04f 33ff 	mov.w	r3, #4294967295
  402fc2:	e0cb      	b.n	40315c <dmp_read_fifo+0x2dc>
        }
        sensors[0] |= INV_WXYZ_QUAT;
  402fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
  402fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402fce:	b21a      	sxth	r2, r3
  402fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402fd2:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
  402fd4:	4b63      	ldr	r3, [pc, #396]	; (403164 <dmp_read_fifo+0x2e4>)
  402fd6:	895b      	ldrh	r3, [r3, #10]
  402fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402fdc:	2b00      	cmp	r3, #0
  402fde:	d052      	beq.n	403086 <dmp_read_fifo+0x206>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
  402fe0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  402fe4:	f107 0248 	add.w	r2, r7, #72	; 0x48
  402fe8:	4413      	add	r3, r2
  402fea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  402fee:	021b      	lsls	r3, r3, #8
  402ff0:	b21a      	sxth	r2, r3
  402ff2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  402ff6:	3301      	adds	r3, #1
  402ff8:	f107 0148 	add.w	r1, r7, #72	; 0x48
  402ffc:	440b      	add	r3, r1
  402ffe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  403002:	b21b      	sxth	r3, r3
  403004:	4313      	orrs	r3, r2
  403006:	b21a      	sxth	r2, r3
  403008:	68bb      	ldr	r3, [r7, #8]
  40300a:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
  40300c:	68bb      	ldr	r3, [r7, #8]
  40300e:	3302      	adds	r3, #2
  403010:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  403014:	3202      	adds	r2, #2
  403016:	f107 0148 	add.w	r1, r7, #72	; 0x48
  40301a:	440a      	add	r2, r1
  40301c:	f812 2c28 	ldrb.w	r2, [r2, #-40]
  403020:	0212      	lsls	r2, r2, #8
  403022:	b211      	sxth	r1, r2
  403024:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  403028:	3203      	adds	r2, #3
  40302a:	f107 0048 	add.w	r0, r7, #72	; 0x48
  40302e:	4402      	add	r2, r0
  403030:	f812 2c28 	ldrb.w	r2, [r2, #-40]
  403034:	b212      	sxth	r2, r2
  403036:	430a      	orrs	r2, r1
  403038:	b212      	sxth	r2, r2
  40303a:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
  40303c:	68bb      	ldr	r3, [r7, #8]
  40303e:	3304      	adds	r3, #4
  403040:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  403044:	3204      	adds	r2, #4
  403046:	f107 0148 	add.w	r1, r7, #72	; 0x48
  40304a:	440a      	add	r2, r1
  40304c:	f812 2c28 	ldrb.w	r2, [r2, #-40]
  403050:	0212      	lsls	r2, r2, #8
  403052:	b211      	sxth	r1, r2
  403054:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  403058:	3205      	adds	r2, #5
  40305a:	f107 0048 	add.w	r0, r7, #72	; 0x48
  40305e:	4402      	add	r2, r0
  403060:	f812 2c28 	ldrb.w	r2, [r2, #-40]
  403064:	b212      	sxth	r2, r2
  403066:	430a      	orrs	r2, r1
  403068:	b212      	sxth	r2, r2
  40306a:	801a      	strh	r2, [r3, #0]
        ii += 6;
  40306c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  403070:	3306      	adds	r3, #6
  403072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
  403076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403078:	f9b3 3000 	ldrsh.w	r3, [r3]
  40307c:	f043 0308 	orr.w	r3, r3, #8
  403080:	b21a      	sxth	r2, r3
  403082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403084:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
  403086:	4b37      	ldr	r3, [pc, #220]	; (403164 <dmp_read_fifo+0x2e4>)
  403088:	895b      	ldrh	r3, [r3, #10]
  40308a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  40308e:	2b00      	cmp	r3, #0
  403090:	d052      	beq.n	403138 <dmp_read_fifo+0x2b8>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
  403092:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  403096:	f107 0248 	add.w	r2, r7, #72	; 0x48
  40309a:	4413      	add	r3, r2
  40309c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  4030a0:	021b      	lsls	r3, r3, #8
  4030a2:	b21a      	sxth	r2, r3
  4030a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  4030a8:	3301      	adds	r3, #1
  4030aa:	f107 0148 	add.w	r1, r7, #72	; 0x48
  4030ae:	440b      	add	r3, r1
  4030b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  4030b4:	b21b      	sxth	r3, r3
  4030b6:	4313      	orrs	r3, r2
  4030b8:	b21a      	sxth	r2, r3
  4030ba:	68fb      	ldr	r3, [r7, #12]
  4030bc:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
  4030be:	68fb      	ldr	r3, [r7, #12]
  4030c0:	3302      	adds	r3, #2
  4030c2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  4030c6:	3202      	adds	r2, #2
  4030c8:	f107 0148 	add.w	r1, r7, #72	; 0x48
  4030cc:	440a      	add	r2, r1
  4030ce:	f812 2c28 	ldrb.w	r2, [r2, #-40]
  4030d2:	0212      	lsls	r2, r2, #8
  4030d4:	b211      	sxth	r1, r2
  4030d6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  4030da:	3203      	adds	r2, #3
  4030dc:	f107 0048 	add.w	r0, r7, #72	; 0x48
  4030e0:	4402      	add	r2, r0
  4030e2:	f812 2c28 	ldrb.w	r2, [r2, #-40]
  4030e6:	b212      	sxth	r2, r2
  4030e8:	430a      	orrs	r2, r1
  4030ea:	b212      	sxth	r2, r2
  4030ec:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
  4030ee:	68fb      	ldr	r3, [r7, #12]
  4030f0:	3304      	adds	r3, #4
  4030f2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  4030f6:	3204      	adds	r2, #4
  4030f8:	f107 0148 	add.w	r1, r7, #72	; 0x48
  4030fc:	440a      	add	r2, r1
  4030fe:	f812 2c28 	ldrb.w	r2, [r2, #-40]
  403102:	0212      	lsls	r2, r2, #8
  403104:	b211      	sxth	r1, r2
  403106:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  40310a:	3205      	adds	r2, #5
  40310c:	f107 0048 	add.w	r0, r7, #72	; 0x48
  403110:	4402      	add	r2, r0
  403112:	f812 2c28 	ldrb.w	r2, [r2, #-40]
  403116:	b212      	sxth	r2, r2
  403118:	430a      	orrs	r2, r1
  40311a:	b212      	sxth	r2, r2
  40311c:	801a      	strh	r2, [r3, #0]
        ii += 6;
  40311e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  403122:	3306      	adds	r3, #6
  403124:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
  403128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40312a:	f9b3 3000 	ldrsh.w	r3, [r3]
  40312e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  403132:	b21a      	sxth	r2, r3
  403134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403136:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
  403138:	4b0a      	ldr	r3, [pc, #40]	; (403164 <dmp_read_fifo+0x2e4>)
  40313a:	895b      	ldrh	r3, [r3, #10]
  40313c:	f003 0303 	and.w	r3, r3, #3
  403140:	2b00      	cmp	r3, #0
  403142:	d007      	beq.n	403154 <dmp_read_fifo+0x2d4>
        decode_gesture(fifo_data + ii);
  403144:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  403148:	f107 0220 	add.w	r2, r7, #32
  40314c:	4413      	add	r3, r2
  40314e:	4618      	mov	r0, r3
  403150:	4b07      	ldr	r3, [pc, #28]	; (403170 <dmp_read_fifo+0x2f0>)
  403152:	4798      	blx	r3

    get_ms(timestamp);
  403154:	6838      	ldr	r0, [r7, #0]
  403156:	4b07      	ldr	r3, [pc, #28]	; (403174 <dmp_read_fifo+0x2f4>)
  403158:	4798      	blx	r3
    return 0;
  40315a:	2300      	movs	r3, #0
}
  40315c:	4618      	mov	r0, r3
  40315e:	3748      	adds	r7, #72	; 0x48
  403160:	46bd      	mov	sp, r7
  403162:	bd80      	pop	{r7, pc}
  403164:	200004ac 	.word	0x200004ac
  403168:	00401a3d 	.word	0x00401a3d
  40316c:	00401119 	.word	0x00401119
  403170:	00402df9 	.word	0x00402df9
  403174:	00403ccd 	.word	0x00403ccd

00403178 <motor_init>:
 */ 
 
#include "motor_driver.h"

void motor_init(void)
{
  403178:	b480      	push	{r7}
  40317a:	af00      	add	r7, sp, #0
	REG_CCFG_SYSIO |= CCFG_SYSIO_SYSIO12; //disable erase pin to give access to PB12 via PIO
  40317c:	4a82      	ldr	r2, [pc, #520]	; (403388 <motor_init+0x210>)
  40317e:	4b82      	ldr	r3, [pc, #520]	; (403388 <motor_init+0x210>)
  403180:	681b      	ldr	r3, [r3, #0]
  403182:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403186:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<31);		//Enable clock access for PWM
  403188:	4a80      	ldr	r2, [pc, #512]	; (40338c <motor_init+0x214>)
  40318a:	4b80      	ldr	r3, [pc, #512]	; (40338c <motor_init+0x214>)
  40318c:	681b      	ldr	r3, [r3, #0]
  40318e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403192:	6013      	str	r3, [r2, #0]
	
	//****Channel 3 (Motor 1)****//
	REG_PWM_CMR3 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  403194:	4a7e      	ldr	r2, [pc, #504]	; (403390 <motor_init+0x218>)
  403196:	4b7e      	ldr	r3, [pc, #504]	; (403390 <motor_init+0x218>)
  403198:	681b      	ldr	r3, [r3, #0]
  40319a:	f043 0304 	orr.w	r3, r3, #4
  40319e:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 |= (1<<9);			//output starts at high level
  4031a0:	4a7b      	ldr	r2, [pc, #492]	; (403390 <motor_init+0x218>)
  4031a2:	4b7b      	ldr	r3, [pc, #492]	; (403390 <motor_init+0x218>)
  4031a4:	681b      	ldr	r3, [r3, #0]
  4031a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4031aa:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 &= ~(1<<8);		//Left aligned output
  4031ac:	4a78      	ldr	r2, [pc, #480]	; (403390 <motor_init+0x218>)
  4031ae:	4b78      	ldr	r3, [pc, #480]	; (403390 <motor_init+0x218>)
  4031b0:	681b      	ldr	r3, [r3, #0]
  4031b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4031b6:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 &= ~(1<<10);		//Update Duty cycle (NOT period)
  4031b8:	4a75      	ldr	r2, [pc, #468]	; (403390 <motor_init+0x218>)
  4031ba:	4b75      	ldr	r3, [pc, #468]	; (403390 <motor_init+0x218>)
  4031bc:	681b      	ldr	r3, [r3, #0]
  4031be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4031c2:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY3 = 0;				//PWM Duty cycle (default = 0)
  4031c4:	4b73      	ldr	r3, [pc, #460]	; (403394 <motor_init+0x21c>)
  4031c6:	2200      	movs	r2, #0
  4031c8:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD3 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  4031ca:	4b73      	ldr	r3, [pc, #460]	; (403398 <motor_init+0x220>)
  4031cc:	2264      	movs	r2, #100	; 0x64
  4031ce:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<21);		//Enable peripheral control of PC21
  4031d0:	4a72      	ldr	r2, [pc, #456]	; (40339c <motor_init+0x224>)
  4031d2:	4b72      	ldr	r3, [pc, #456]	; (40339c <motor_init+0x224>)
  4031d4:	681b      	ldr	r3, [r3, #0]
  4031d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  4031da:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<21);		//Assign PC21 to PWM Peripheral B		
  4031dc:	4b70      	ldr	r3, [pc, #448]	; (4033a0 <motor_init+0x228>)
  4031de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4031e2:	601a      	str	r2, [r3, #0]
	REG_PIOB_PER |= (1<<12);		//Enable PIO control of PB12
  4031e4:	4a6f      	ldr	r2, [pc, #444]	; (4033a4 <motor_init+0x22c>)
  4031e6:	4b6f      	ldr	r3, [pc, #444]	; (4033a4 <motor_init+0x22c>)
  4031e8:	681b      	ldr	r3, [r3, #0]
  4031ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031ee:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<12);		//Set PB12 as output
  4031f0:	4a6d      	ldr	r2, [pc, #436]	; (4033a8 <motor_init+0x230>)
  4031f2:	4b6d      	ldr	r3, [pc, #436]	; (4033a8 <motor_init+0x230>)
  4031f4:	681b      	ldr	r3, [r3, #0]
  4031f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031fa:	6013      	str	r3, [r2, #0]
	FIN_1_Low;		
  4031fc:	4a6b      	ldr	r2, [pc, #428]	; (4033ac <motor_init+0x234>)
  4031fe:	4b6b      	ldr	r3, [pc, #428]	; (4033ac <motor_init+0x234>)
  403200:	681b      	ldr	r3, [r3, #0]
  403202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403206:	6013      	str	r3, [r2, #0]
	REG_PIOC_PER |= (1<<22);		//Enable PIO control of PC22
  403208:	4a69      	ldr	r2, [pc, #420]	; (4033b0 <motor_init+0x238>)
  40320a:	4b69      	ldr	r3, [pc, #420]	; (4033b0 <motor_init+0x238>)
  40320c:	681b      	ldr	r3, [r3, #0]
  40320e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403212:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<22);		//Set PC22 as output
  403214:	4a67      	ldr	r2, [pc, #412]	; (4033b4 <motor_init+0x23c>)
  403216:	4b67      	ldr	r3, [pc, #412]	; (4033b4 <motor_init+0x23c>)
  403218:	681b      	ldr	r3, [r3, #0]
  40321a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40321e:	6013      	str	r3, [r2, #0]
	RIN_1_Low;
  403220:	4a65      	ldr	r2, [pc, #404]	; (4033b8 <motor_init+0x240>)
  403222:	4b65      	ldr	r3, [pc, #404]	; (4033b8 <motor_init+0x240>)
  403224:	681b      	ldr	r3, [r3, #0]
  403226:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40322a:	6013      	str	r3, [r2, #0]
								
	//****Channel 2 (Motor 2)****//
	REG_PWM_CMR2 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  40322c:	4a63      	ldr	r2, [pc, #396]	; (4033bc <motor_init+0x244>)
  40322e:	4b63      	ldr	r3, [pc, #396]	; (4033bc <motor_init+0x244>)
  403230:	681b      	ldr	r3, [r3, #0]
  403232:	f043 0304 	orr.w	r3, r3, #4
  403236:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 |= (1<<9);			//output starts at low level
  403238:	4a60      	ldr	r2, [pc, #384]	; (4033bc <motor_init+0x244>)
  40323a:	4b60      	ldr	r3, [pc, #384]	; (4033bc <motor_init+0x244>)
  40323c:	681b      	ldr	r3, [r3, #0]
  40323e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  403242:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 &= ~(1<<8);		//Left aligned output
  403244:	4a5d      	ldr	r2, [pc, #372]	; (4033bc <motor_init+0x244>)
  403246:	4b5d      	ldr	r3, [pc, #372]	; (4033bc <motor_init+0x244>)
  403248:	681b      	ldr	r3, [r3, #0]
  40324a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40324e:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 &= ~(1<<10);		//Update Duty cycle (NOT period)
  403250:	4a5a      	ldr	r2, [pc, #360]	; (4033bc <motor_init+0x244>)
  403252:	4b5a      	ldr	r3, [pc, #360]	; (4033bc <motor_init+0x244>)
  403254:	681b      	ldr	r3, [r3, #0]
  403256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  40325a:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY2 = 0;				//PWM Duty cycle (default = 0)
  40325c:	4b58      	ldr	r3, [pc, #352]	; (4033c0 <motor_init+0x248>)
  40325e:	2200      	movs	r2, #0
  403260:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD2 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  403262:	4b58      	ldr	r3, [pc, #352]	; (4033c4 <motor_init+0x24c>)
  403264:	2264      	movs	r2, #100	; 0x64
  403266:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<20);		//Enable peripheral control of PC20
  403268:	4a4c      	ldr	r2, [pc, #304]	; (40339c <motor_init+0x224>)
  40326a:	4b4c      	ldr	r3, [pc, #304]	; (40339c <motor_init+0x224>)
  40326c:	681b      	ldr	r3, [r3, #0]
  40326e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403272:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<20);		//Assign VREF_1 to PWM Peripheral B			
  403274:	4b4a      	ldr	r3, [pc, #296]	; (4033a0 <motor_init+0x228>)
  403276:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40327a:	601a      	str	r2, [r3, #0]
	REG_PIOC_PER |= (1<<19);		//Enable PIO control of PC19
  40327c:	4a4c      	ldr	r2, [pc, #304]	; (4033b0 <motor_init+0x238>)
  40327e:	4b4c      	ldr	r3, [pc, #304]	; (4033b0 <motor_init+0x238>)
  403280:	681b      	ldr	r3, [r3, #0]
  403282:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403286:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<19);		//Set PC19 as output
  403288:	4a4a      	ldr	r2, [pc, #296]	; (4033b4 <motor_init+0x23c>)
  40328a:	4b4a      	ldr	r3, [pc, #296]	; (4033b4 <motor_init+0x23c>)
  40328c:	681b      	ldr	r3, [r3, #0]
  40328e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403292:	6013      	str	r3, [r2, #0]
	RIN_2_Low;		
  403294:	4a4c      	ldr	r2, [pc, #304]	; (4033c8 <motor_init+0x250>)
  403296:	4b4c      	ldr	r3, [pc, #304]	; (4033c8 <motor_init+0x250>)
  403298:	681b      	ldr	r3, [r3, #0]
  40329a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40329e:	6013      	str	r3, [r2, #0]
	REG_PIOA_PER |= (1<<31);		//Enable PIO control of PA31
  4032a0:	4a4a      	ldr	r2, [pc, #296]	; (4033cc <motor_init+0x254>)
  4032a2:	4b4a      	ldr	r3, [pc, #296]	; (4033cc <motor_init+0x254>)
  4032a4:	681b      	ldr	r3, [r3, #0]
  4032a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4032aa:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<31);		//Set PA31 as output
  4032ac:	4a48      	ldr	r2, [pc, #288]	; (4033d0 <motor_init+0x258>)
  4032ae:	4b48      	ldr	r3, [pc, #288]	; (4033d0 <motor_init+0x258>)
  4032b0:	681b      	ldr	r3, [r3, #0]
  4032b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4032b6:	6013      	str	r3, [r2, #0]
	FIN_2_Low;		
  4032b8:	4a3f      	ldr	r2, [pc, #252]	; (4033b8 <motor_init+0x240>)
  4032ba:	4b3f      	ldr	r3, [pc, #252]	; (4033b8 <motor_init+0x240>)
  4032bc:	681b      	ldr	r3, [r3, #0]
  4032be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4032c2:	6013      	str	r3, [r2, #0]

	//****Channel 1 (Motor 3)****//
	REG_PWM_CMR1 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  4032c4:	4a43      	ldr	r2, [pc, #268]	; (4033d4 <motor_init+0x25c>)
  4032c6:	4b43      	ldr	r3, [pc, #268]	; (4033d4 <motor_init+0x25c>)
  4032c8:	681b      	ldr	r3, [r3, #0]
  4032ca:	f043 0304 	orr.w	r3, r3, #4
  4032ce:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 |= (1<<9);			//output starts at low level
  4032d0:	4a40      	ldr	r2, [pc, #256]	; (4033d4 <motor_init+0x25c>)
  4032d2:	4b40      	ldr	r3, [pc, #256]	; (4033d4 <motor_init+0x25c>)
  4032d4:	681b      	ldr	r3, [r3, #0]
  4032d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4032da:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 &= ~(1<<8);		//Left aligned output
  4032dc:	4a3d      	ldr	r2, [pc, #244]	; (4033d4 <motor_init+0x25c>)
  4032de:	4b3d      	ldr	r3, [pc, #244]	; (4033d4 <motor_init+0x25c>)
  4032e0:	681b      	ldr	r3, [r3, #0]
  4032e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4032e6:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 &= ~(1<<10);		//Update Duty cycle (NOT period)
  4032e8:	4a3a      	ldr	r2, [pc, #232]	; (4033d4 <motor_init+0x25c>)
  4032ea:	4b3a      	ldr	r3, [pc, #232]	; (4033d4 <motor_init+0x25c>)
  4032ec:	681b      	ldr	r3, [r3, #0]
  4032ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4032f2:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY1 = 0;				//PWM Duty cycle (default = 0)
  4032f4:	4b38      	ldr	r3, [pc, #224]	; (4033d8 <motor_init+0x260>)
  4032f6:	2200      	movs	r2, #0
  4032f8:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD1 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  4032fa:	4b38      	ldr	r3, [pc, #224]	; (4033dc <motor_init+0x264>)
  4032fc:	2264      	movs	r2, #100	; 0x64
  4032fe:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<9);			//Enable peripheral control of PC9
  403300:	4a26      	ldr	r2, [pc, #152]	; (40339c <motor_init+0x224>)
  403302:	4b26      	ldr	r3, [pc, #152]	; (40339c <motor_init+0x224>)
  403304:	681b      	ldr	r3, [r3, #0]
  403306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40330a:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<9);		//Assign PC9 to PWM Peripheral B		
  40330c:	4b24      	ldr	r3, [pc, #144]	; (4033a0 <motor_init+0x228>)
  40330e:	f44f 7200 	mov.w	r2, #512	; 0x200
  403312:	601a      	str	r2, [r3, #0]
	REG_PIOA_PER |= (1<<30);		//Enable PIO control of PA30
  403314:	4a2d      	ldr	r2, [pc, #180]	; (4033cc <motor_init+0x254>)
  403316:	4b2d      	ldr	r3, [pc, #180]	; (4033cc <motor_init+0x254>)
  403318:	681b      	ldr	r3, [r3, #0]
  40331a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40331e:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<30);		//Set PA30 as output
  403320:	4a2b      	ldr	r2, [pc, #172]	; (4033d0 <motor_init+0x258>)
  403322:	4b2b      	ldr	r3, [pc, #172]	; (4033d0 <motor_init+0x258>)
  403324:	681b      	ldr	r3, [r3, #0]
  403326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40332a:	6013      	str	r3, [r2, #0]
	RIN_3_Low;		
  40332c:	4a26      	ldr	r2, [pc, #152]	; (4033c8 <motor_init+0x250>)
  40332e:	4b26      	ldr	r3, [pc, #152]	; (4033c8 <motor_init+0x250>)
  403330:	681b      	ldr	r3, [r3, #0]
  403332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403336:	6013      	str	r3, [r2, #0]
	REG_PIOA_PER |= (1<<29);		//Enable PIO control of PA29
  403338:	4a24      	ldr	r2, [pc, #144]	; (4033cc <motor_init+0x254>)
  40333a:	4b24      	ldr	r3, [pc, #144]	; (4033cc <motor_init+0x254>)
  40333c:	681b      	ldr	r3, [r3, #0]
  40333e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403342:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<29);		//Set PA29 as output
  403344:	4a22      	ldr	r2, [pc, #136]	; (4033d0 <motor_init+0x258>)
  403346:	4b22      	ldr	r3, [pc, #136]	; (4033d0 <motor_init+0x258>)
  403348:	681b      	ldr	r3, [r3, #0]
  40334a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40334e:	6013      	str	r3, [r2, #0]
	FIN_3_Low;
  403350:	4a1d      	ldr	r2, [pc, #116]	; (4033c8 <motor_init+0x250>)
  403352:	4b1d      	ldr	r3, [pc, #116]	; (4033c8 <motor_init+0x250>)
  403354:	681b      	ldr	r3, [r3, #0]
  403356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40335a:	6013      	str	r3, [r2, #0]
	
	//****Enable PWM Channels as last step of setup****//	
	REG_PWM_ENA |= PWM_ENA_CHID1;	//Enable PWM on channel 1
  40335c:	4a20      	ldr	r2, [pc, #128]	; (4033e0 <motor_init+0x268>)
  40335e:	4b20      	ldr	r3, [pc, #128]	; (4033e0 <motor_init+0x268>)
  403360:	681b      	ldr	r3, [r3, #0]
  403362:	f043 0302 	orr.w	r3, r3, #2
  403366:	6013      	str	r3, [r2, #0]
	REG_PWM_ENA |= PWM_ENA_CHID2;	//Enable PWM on channel 2
  403368:	4a1d      	ldr	r2, [pc, #116]	; (4033e0 <motor_init+0x268>)
  40336a:	4b1d      	ldr	r3, [pc, #116]	; (4033e0 <motor_init+0x268>)
  40336c:	681b      	ldr	r3, [r3, #0]
  40336e:	f043 0304 	orr.w	r3, r3, #4
  403372:	6013      	str	r3, [r2, #0]
	REG_PWM_ENA |= PWM_ENA_CHID3;	//Enable PWM on channel 3
  403374:	4a1a      	ldr	r2, [pc, #104]	; (4033e0 <motor_init+0x268>)
  403376:	4b1a      	ldr	r3, [pc, #104]	; (4033e0 <motor_init+0x268>)
  403378:	681b      	ldr	r3, [r3, #0]
  40337a:	f043 0308 	orr.w	r3, r3, #8
  40337e:	6013      	str	r3, [r2, #0]
}
  403380:	bf00      	nop
  403382:	46bd      	mov	sp, r7
  403384:	bc80      	pop	{r7}
  403386:	4770      	bx	lr
  403388:	400e0314 	.word	0x400e0314
  40338c:	400e0410 	.word	0x400e0410
  403390:	40020260 	.word	0x40020260
  403394:	40020264 	.word	0x40020264
  403398:	40020268 	.word	0x40020268
  40339c:	400e1204 	.word	0x400e1204
  4033a0:	400e1270 	.word	0x400e1270
  4033a4:	400e1000 	.word	0x400e1000
  4033a8:	400e1010 	.word	0x400e1010
  4033ac:	400e1034 	.word	0x400e1034
  4033b0:	400e1200 	.word	0x400e1200
  4033b4:	400e1210 	.word	0x400e1210
  4033b8:	400e1234 	.word	0x400e1234
  4033bc:	40020240 	.word	0x40020240
  4033c0:	40020244 	.word	0x40020244
  4033c4:	40020248 	.word	0x40020248
  4033c8:	400e0e34 	.word	0x400e0e34
  4033cc:	400e0e00 	.word	0x400e0e00
  4033d0:	400e0e10 	.word	0x400e0e10
  4033d4:	40020220 	.word	0x40020220
  4033d8:	40020224 	.word	0x40020224
  4033dc:	40020228 	.word	0x40020228
  4033e0:	40020004 	.word	0x40020004
  4033e4:	00000000 	.word	0x00000000

004033e8 <moveRobot>:

void moveRobot(float direction, unsigned char speed)
{
  4033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033ea:	b087      	sub	sp, #28
  4033ec:	af00      	add	r7, sp, #0
  4033ee:	6078      	str	r0, [r7, #4]
  4033f0:	460b      	mov	r3, r1
  4033f2:	70fb      	strb	r3, [r7, #3]
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
  4033f4:	e005      	b.n	403402 <moveRobot+0x1a>
		direction -= 360;
  4033f6:	4ba4      	ldr	r3, [pc, #656]	; (403688 <moveRobot+0x2a0>)
  4033f8:	49a4      	ldr	r1, [pc, #656]	; (40368c <moveRobot+0x2a4>)
  4033fa:	6878      	ldr	r0, [r7, #4]
  4033fc:	4798      	blx	r3
  4033fe:	4603      	mov	r3, r0
  403400:	607b      	str	r3, [r7, #4]
void moveRobot(float direction, unsigned char speed)
{
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
  403402:	4ba3      	ldr	r3, [pc, #652]	; (403690 <moveRobot+0x2a8>)
  403404:	49a3      	ldr	r1, [pc, #652]	; (403694 <moveRobot+0x2ac>)
  403406:	6878      	ldr	r0, [r7, #4]
  403408:	4798      	blx	r3
  40340a:	4603      	mov	r3, r0
  40340c:	2b00      	cmp	r3, #0
  40340e:	d1f2      	bne.n	4033f6 <moveRobot+0xe>
		direction -= 360;
	while(direction < -180)
  403410:	e005      	b.n	40341e <moveRobot+0x36>
		direction += 360;
  403412:	4ba1      	ldr	r3, [pc, #644]	; (403698 <moveRobot+0x2b0>)
  403414:	499d      	ldr	r1, [pc, #628]	; (40368c <moveRobot+0x2a4>)
  403416:	6878      	ldr	r0, [r7, #4]
  403418:	4798      	blx	r3
  40341a:	4603      	mov	r3, r0
  40341c:	607b      	str	r3, [r7, #4]
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
		direction -= 360;
	while(direction < -180)
  40341e:	4b9f      	ldr	r3, [pc, #636]	; (40369c <moveRobot+0x2b4>)
  403420:	499f      	ldr	r1, [pc, #636]	; (4036a0 <moveRobot+0x2b8>)
  403422:	6878      	ldr	r0, [r7, #4]
  403424:	4798      	blx	r3
  403426:	4603      	mov	r3, r0
  403428:	2b00      	cmp	r3, #0
  40342a:	d1f2      	bne.n	403412 <moveRobot+0x2a>
		direction += 360;
	//stop speed from being over max in case of user input error
	if(speed > 100)
  40342c:	78fb      	ldrb	r3, [r7, #3]
  40342e:	2b64      	cmp	r3, #100	; 0x64
  403430:	d901      	bls.n	403436 <moveRobot+0x4e>
		speed = 100;
  403432:	2364      	movs	r3, #100	; 0x64
  403434:	70fb      	strb	r3, [r7, #3]
	directionRad = (direction * M_PI) / 180; //convert desired direction to radians
  403436:	4b9b      	ldr	r3, [pc, #620]	; (4036a4 <moveRobot+0x2bc>)
  403438:	6878      	ldr	r0, [r7, #4]
  40343a:	4798      	blx	r3
  40343c:	4c9a      	ldr	r4, [pc, #616]	; (4036a8 <moveRobot+0x2c0>)
  40343e:	a38a      	add	r3, pc, #552	; (adr r3, 403668 <moveRobot+0x280>)
  403440:	e9d3 2300 	ldrd	r2, r3, [r3]
  403444:	47a0      	blx	r4
  403446:	4603      	mov	r3, r0
  403448:	460c      	mov	r4, r1
  40344a:	4618      	mov	r0, r3
  40344c:	4621      	mov	r1, r4
  40344e:	4c97      	ldr	r4, [pc, #604]	; (4036ac <moveRobot+0x2c4>)
  403450:	f04f 0200 	mov.w	r2, #0
  403454:	4b96      	ldr	r3, [pc, #600]	; (4036b0 <moveRobot+0x2c8>)
  403456:	47a0      	blx	r4
  403458:	4603      	mov	r3, r0
  40345a:	460c      	mov	r4, r1
  40345c:	4619      	mov	r1, r3
  40345e:	4622      	mov	r2, r4
  403460:	4b94      	ldr	r3, [pc, #592]	; (4036b4 <moveRobot+0x2cc>)
  403462:	4608      	mov	r0, r1
  403464:	4611      	mov	r1, r2
  403466:	4798      	blx	r3
  403468:	4603      	mov	r3, r0
  40346a:	60bb      	str	r3, [r7, #8]
	motor1Speed = speed * cos ((270 * M_PI) / 180 - directionRad );//radians
  40346c:	78fa      	ldrb	r2, [r7, #3]
  40346e:	4b92      	ldr	r3, [pc, #584]	; (4036b8 <moveRobot+0x2d0>)
  403470:	4610      	mov	r0, r2
  403472:	4798      	blx	r3
  403474:	4605      	mov	r5, r0
  403476:	460e      	mov	r6, r1
  403478:	4b8a      	ldr	r3, [pc, #552]	; (4036a4 <moveRobot+0x2bc>)
  40347a:	68b8      	ldr	r0, [r7, #8]
  40347c:	4798      	blx	r3
  40347e:	4602      	mov	r2, r0
  403480:	460b      	mov	r3, r1
  403482:	4c8e      	ldr	r4, [pc, #568]	; (4036bc <moveRobot+0x2d4>)
  403484:	a17a      	add	r1, pc, #488	; (adr r1, 403670 <moveRobot+0x288>)
  403486:	e9d1 0100 	ldrd	r0, r1, [r1]
  40348a:	47a0      	blx	r4
  40348c:	4603      	mov	r3, r0
  40348e:	460c      	mov	r4, r1
  403490:	4618      	mov	r0, r3
  403492:	4621      	mov	r1, r4
  403494:	4b8a      	ldr	r3, [pc, #552]	; (4036c0 <moveRobot+0x2d8>)
  403496:	4798      	blx	r3
  403498:	4602      	mov	r2, r0
  40349a:	460b      	mov	r3, r1
  40349c:	4c82      	ldr	r4, [pc, #520]	; (4036a8 <moveRobot+0x2c0>)
  40349e:	4628      	mov	r0, r5
  4034a0:	4631      	mov	r1, r6
  4034a2:	47a0      	blx	r4
  4034a4:	4603      	mov	r3, r0
  4034a6:	460c      	mov	r4, r1
  4034a8:	4619      	mov	r1, r3
  4034aa:	4622      	mov	r2, r4
  4034ac:	4b81      	ldr	r3, [pc, #516]	; (4036b4 <moveRobot+0x2cc>)
  4034ae:	4608      	mov	r0, r1
  4034b0:	4611      	mov	r1, r2
  4034b2:	4798      	blx	r3
  4034b4:	4603      	mov	r3, r0
  4034b6:	617b      	str	r3, [r7, #20]
	motor2Speed = speed * cos ((30  * M_PI) / 180 - directionRad );
  4034b8:	78fa      	ldrb	r2, [r7, #3]
  4034ba:	4b7f      	ldr	r3, [pc, #508]	; (4036b8 <moveRobot+0x2d0>)
  4034bc:	4610      	mov	r0, r2
  4034be:	4798      	blx	r3
  4034c0:	4605      	mov	r5, r0
  4034c2:	460e      	mov	r6, r1
  4034c4:	4b77      	ldr	r3, [pc, #476]	; (4036a4 <moveRobot+0x2bc>)
  4034c6:	68b8      	ldr	r0, [r7, #8]
  4034c8:	4798      	blx	r3
  4034ca:	4602      	mov	r2, r0
  4034cc:	460b      	mov	r3, r1
  4034ce:	4c7b      	ldr	r4, [pc, #492]	; (4036bc <moveRobot+0x2d4>)
  4034d0:	a169      	add	r1, pc, #420	; (adr r1, 403678 <moveRobot+0x290>)
  4034d2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4034d6:	47a0      	blx	r4
  4034d8:	4603      	mov	r3, r0
  4034da:	460c      	mov	r4, r1
  4034dc:	4618      	mov	r0, r3
  4034de:	4621      	mov	r1, r4
  4034e0:	4b77      	ldr	r3, [pc, #476]	; (4036c0 <moveRobot+0x2d8>)
  4034e2:	4798      	blx	r3
  4034e4:	4602      	mov	r2, r0
  4034e6:	460b      	mov	r3, r1
  4034e8:	4c6f      	ldr	r4, [pc, #444]	; (4036a8 <moveRobot+0x2c0>)
  4034ea:	4628      	mov	r0, r5
  4034ec:	4631      	mov	r1, r6
  4034ee:	47a0      	blx	r4
  4034f0:	4603      	mov	r3, r0
  4034f2:	460c      	mov	r4, r1
  4034f4:	4619      	mov	r1, r3
  4034f6:	4622      	mov	r2, r4
  4034f8:	4b6e      	ldr	r3, [pc, #440]	; (4036b4 <moveRobot+0x2cc>)
  4034fa:	4608      	mov	r0, r1
  4034fc:	4611      	mov	r1, r2
  4034fe:	4798      	blx	r3
  403500:	4603      	mov	r3, r0
  403502:	613b      	str	r3, [r7, #16]
	motor3Speed = speed * cos ((150 * M_PI) / 180 - directionRad );
  403504:	78fa      	ldrb	r2, [r7, #3]
  403506:	4b6c      	ldr	r3, [pc, #432]	; (4036b8 <moveRobot+0x2d0>)
  403508:	4610      	mov	r0, r2
  40350a:	4798      	blx	r3
  40350c:	4605      	mov	r5, r0
  40350e:	460e      	mov	r6, r1
  403510:	4b64      	ldr	r3, [pc, #400]	; (4036a4 <moveRobot+0x2bc>)
  403512:	68b8      	ldr	r0, [r7, #8]
  403514:	4798      	blx	r3
  403516:	4602      	mov	r2, r0
  403518:	460b      	mov	r3, r1
  40351a:	4c68      	ldr	r4, [pc, #416]	; (4036bc <moveRobot+0x2d4>)
  40351c:	a158      	add	r1, pc, #352	; (adr r1, 403680 <moveRobot+0x298>)
  40351e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403522:	47a0      	blx	r4
  403524:	4603      	mov	r3, r0
  403526:	460c      	mov	r4, r1
  403528:	4618      	mov	r0, r3
  40352a:	4621      	mov	r1, r4
  40352c:	4b64      	ldr	r3, [pc, #400]	; (4036c0 <moveRobot+0x2d8>)
  40352e:	4798      	blx	r3
  403530:	4602      	mov	r2, r0
  403532:	460b      	mov	r3, r1
  403534:	4c5c      	ldr	r4, [pc, #368]	; (4036a8 <moveRobot+0x2c0>)
  403536:	4628      	mov	r0, r5
  403538:	4631      	mov	r1, r6
  40353a:	47a0      	blx	r4
  40353c:	4603      	mov	r3, r0
  40353e:	460c      	mov	r4, r1
  403540:	4619      	mov	r1, r3
  403542:	4622      	mov	r2, r4
  403544:	4b5b      	ldr	r3, [pc, #364]	; (4036b4 <moveRobot+0x2cc>)
  403546:	4608      	mov	r0, r1
  403548:	4611      	mov	r1, r2
  40354a:	4798      	blx	r3
  40354c:	4603      	mov	r3, r0
  40354e:	60fb      	str	r3, [r7, #12]
	
	//motor 2 & 3 is wired backwards on test robot so forward and back is flipped
	if(motor1Speed > 0)
  403550:	4b4f      	ldr	r3, [pc, #316]	; (403690 <moveRobot+0x2a8>)
  403552:	f04f 0100 	mov.w	r1, #0
  403556:	6978      	ldr	r0, [r7, #20]
  403558:	4798      	blx	r3
  40355a:	4603      	mov	r3, r0
  40355c:	2b00      	cmp	r3, #0
  40355e:	d00c      	beq.n	40357a <moveRobot+0x192>
	{
		//Forward
		RIN_1_Low;
  403560:	4a58      	ldr	r2, [pc, #352]	; (4036c4 <moveRobot+0x2dc>)
  403562:	4b58      	ldr	r3, [pc, #352]	; (4036c4 <moveRobot+0x2dc>)
  403564:	681b      	ldr	r3, [r3, #0]
  403566:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40356a:	6013      	str	r3, [r2, #0]
		FIN_1_High;		
  40356c:	4a56      	ldr	r2, [pc, #344]	; (4036c8 <moveRobot+0x2e0>)
  40356e:	4b56      	ldr	r3, [pc, #344]	; (4036c8 <moveRobot+0x2e0>)
  403570:	681b      	ldr	r3, [r3, #0]
  403572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403576:	6013      	str	r3, [r2, #0]
  403578:	e024      	b.n	4035c4 <moveRobot+0x1dc>
	}
	else if (motor1Speed == 0)
  40357a:	4b54      	ldr	r3, [pc, #336]	; (4036cc <moveRobot+0x2e4>)
  40357c:	f04f 0100 	mov.w	r1, #0
  403580:	6978      	ldr	r0, [r7, #20]
  403582:	4798      	blx	r3
  403584:	4603      	mov	r3, r0
  403586:	2b00      	cmp	r3, #0
  403588:	d00c      	beq.n	4035a4 <moveRobot+0x1bc>
	{
		//Motor off (coast not brake)
		RIN_1_Low;
  40358a:	4a4e      	ldr	r2, [pc, #312]	; (4036c4 <moveRobot+0x2dc>)
  40358c:	4b4d      	ldr	r3, [pc, #308]	; (4036c4 <moveRobot+0x2dc>)
  40358e:	681b      	ldr	r3, [r3, #0]
  403590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403594:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  403596:	4a4e      	ldr	r2, [pc, #312]	; (4036d0 <moveRobot+0x2e8>)
  403598:	4b4d      	ldr	r3, [pc, #308]	; (4036d0 <moveRobot+0x2e8>)
  40359a:	681b      	ldr	r3, [r3, #0]
  40359c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4035a0:	6013      	str	r3, [r2, #0]
  4035a2:	e00f      	b.n	4035c4 <moveRobot+0x1dc>
	}
	else
	{
		//Reverse
		motor1Speed = motor1Speed * (-1); 
  4035a4:	697b      	ldr	r3, [r7, #20]
  4035a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  4035aa:	617b      	str	r3, [r7, #20]
		RIN_1_High;
  4035ac:	4a49      	ldr	r2, [pc, #292]	; (4036d4 <moveRobot+0x2ec>)
  4035ae:	4b49      	ldr	r3, [pc, #292]	; (4036d4 <moveRobot+0x2ec>)
  4035b0:	681b      	ldr	r3, [r3, #0]
  4035b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4035b6:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4035b8:	4a45      	ldr	r2, [pc, #276]	; (4036d0 <moveRobot+0x2e8>)
  4035ba:	4b45      	ldr	r3, [pc, #276]	; (4036d0 <moveRobot+0x2e8>)
  4035bc:	681b      	ldr	r3, [r3, #0]
  4035be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4035c2:	6013      	str	r3, [r2, #0]
	}

	if(motor2Speed > 0)
  4035c4:	4b32      	ldr	r3, [pc, #200]	; (403690 <moveRobot+0x2a8>)
  4035c6:	f04f 0100 	mov.w	r1, #0
  4035ca:	6938      	ldr	r0, [r7, #16]
  4035cc:	4798      	blx	r3
  4035ce:	4603      	mov	r3, r0
  4035d0:	2b00      	cmp	r3, #0
  4035d2:	d00c      	beq.n	4035ee <moveRobot+0x206>
	{
		//Forward
		RIN_2_Low;
  4035d4:	4a40      	ldr	r2, [pc, #256]	; (4036d8 <moveRobot+0x2f0>)
  4035d6:	4b40      	ldr	r3, [pc, #256]	; (4036d8 <moveRobot+0x2f0>)
  4035d8:	681b      	ldr	r3, [r3, #0]
  4035da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4035de:	6013      	str	r3, [r2, #0]
		FIN_2_High;
  4035e0:	4a3c      	ldr	r2, [pc, #240]	; (4036d4 <moveRobot+0x2ec>)
  4035e2:	4b3c      	ldr	r3, [pc, #240]	; (4036d4 <moveRobot+0x2ec>)
  4035e4:	681b      	ldr	r3, [r3, #0]
  4035e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4035ea:	6013      	str	r3, [r2, #0]
  4035ec:	e024      	b.n	403638 <moveRobot+0x250>
	}
	else if (motor2Speed == 0)
  4035ee:	4b37      	ldr	r3, [pc, #220]	; (4036cc <moveRobot+0x2e4>)
  4035f0:	f04f 0100 	mov.w	r1, #0
  4035f4:	6938      	ldr	r0, [r7, #16]
  4035f6:	4798      	blx	r3
  4035f8:	4603      	mov	r3, r0
  4035fa:	2b00      	cmp	r3, #0
  4035fc:	d00c      	beq.n	403618 <moveRobot+0x230>
	{
		//Motor off (coast not brake)
		RIN_2_Low;
  4035fe:	4a36      	ldr	r2, [pc, #216]	; (4036d8 <moveRobot+0x2f0>)
  403600:	4b35      	ldr	r3, [pc, #212]	; (4036d8 <moveRobot+0x2f0>)
  403602:	681b      	ldr	r3, [r3, #0]
  403604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403608:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  40360a:	4a2e      	ldr	r2, [pc, #184]	; (4036c4 <moveRobot+0x2dc>)
  40360c:	4b2d      	ldr	r3, [pc, #180]	; (4036c4 <moveRobot+0x2dc>)
  40360e:	681b      	ldr	r3, [r3, #0]
  403610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403614:	6013      	str	r3, [r2, #0]
  403616:	e00f      	b.n	403638 <moveRobot+0x250>
	}
	else
	{
		//Reverse
		motor2Speed = motor2Speed * (-1); 
  403618:	693b      	ldr	r3, [r7, #16]
  40361a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  40361e:	613b      	str	r3, [r7, #16]
		RIN_2_High;
  403620:	4a2e      	ldr	r2, [pc, #184]	; (4036dc <moveRobot+0x2f4>)
  403622:	4b2e      	ldr	r3, [pc, #184]	; (4036dc <moveRobot+0x2f4>)
  403624:	681b      	ldr	r3, [r3, #0]
  403626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40362a:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  40362c:	4a25      	ldr	r2, [pc, #148]	; (4036c4 <moveRobot+0x2dc>)
  40362e:	4b25      	ldr	r3, [pc, #148]	; (4036c4 <moveRobot+0x2dc>)
  403630:	681b      	ldr	r3, [r3, #0]
  403632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403636:	6013      	str	r3, [r2, #0]
	}
	
	if(motor3Speed > 0)
  403638:	4b15      	ldr	r3, [pc, #84]	; (403690 <moveRobot+0x2a8>)
  40363a:	f04f 0100 	mov.w	r1, #0
  40363e:	68f8      	ldr	r0, [r7, #12]
  403640:	4798      	blx	r3
  403642:	4603      	mov	r3, r0
  403644:	2b00      	cmp	r3, #0
  403646:	d04b      	beq.n	4036e0 <moveRobot+0x2f8>
	{
		//Forward
		RIN_3_Low;
  403648:	4a23      	ldr	r2, [pc, #140]	; (4036d8 <moveRobot+0x2f0>)
  40364a:	4b23      	ldr	r3, [pc, #140]	; (4036d8 <moveRobot+0x2f0>)
  40364c:	681b      	ldr	r3, [r3, #0]
  40364e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403652:	6013      	str	r3, [r2, #0]
		FIN_3_High;			
  403654:	4a21      	ldr	r2, [pc, #132]	; (4036dc <moveRobot+0x2f4>)
  403656:	4b21      	ldr	r3, [pc, #132]	; (4036dc <moveRobot+0x2f4>)
  403658:	681b      	ldr	r3, [r3, #0]
  40365a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40365e:	6013      	str	r3, [r2, #0]
  403660:	e063      	b.n	40372a <moveRobot+0x342>
  403662:	bf00      	nop
  403664:	f3af 8000 	nop.w
  403668:	54442d18 	.word	0x54442d18
  40366c:	400921fb 	.word	0x400921fb
  403670:	7f3321d2 	.word	0x7f3321d2
  403674:	4012d97c 	.word	0x4012d97c
  403678:	382d7365 	.word	0x382d7365
  40367c:	3fe0c152 	.word	0x3fe0c152
  403680:	c638d03f 	.word	0xc638d03f
  403684:	4004f1a6 	.word	0x4004f1a6
  403688:	00406371 	.word	0x00406371
  40368c:	43b40000 	.word	0x43b40000
  403690:	004068fd 	.word	0x004068fd
  403694:	43340000 	.word	0x43340000
  403698:	00406375 	.word	0x00406375
  40369c:	004068c1 	.word	0x004068c1
  4036a0:	c3340000 	.word	0xc3340000
  4036a4:	00405c9d 	.word	0x00405c9d
  4036a8:	00405d45 	.word	0x00405d45
  4036ac:	00405f99 	.word	0x00405f99
  4036b0:	40668000 	.word	0x40668000
  4036b4:	004062c9 	.word	0x004062c9
  4036b8:	00405c79 	.word	0x00405c79
  4036bc:	004059dd 	.word	0x004059dd
  4036c0:	00404725 	.word	0x00404725
  4036c4:	400e1234 	.word	0x400e1234
  4036c8:	400e1030 	.word	0x400e1030
  4036cc:	004068ad 	.word	0x004068ad
  4036d0:	400e1034 	.word	0x400e1034
  4036d4:	400e1230 	.word	0x400e1230
  4036d8:	400e0e34 	.word	0x400e0e34
  4036dc:	400e0e30 	.word	0x400e0e30
	}
	else if (motor3Speed == 0)
  4036e0:	4b1d      	ldr	r3, [pc, #116]	; (403758 <moveRobot+0x370>)
  4036e2:	f04f 0100 	mov.w	r1, #0
  4036e6:	68f8      	ldr	r0, [r7, #12]
  4036e8:	4798      	blx	r3
  4036ea:	4603      	mov	r3, r0
  4036ec:	2b00      	cmp	r3, #0
  4036ee:	d00c      	beq.n	40370a <moveRobot+0x322>
	{
		//Motor off (coast not brake)
		RIN_3_Low;
  4036f0:	4a1a      	ldr	r2, [pc, #104]	; (40375c <moveRobot+0x374>)
  4036f2:	4b1a      	ldr	r3, [pc, #104]	; (40375c <moveRobot+0x374>)
  4036f4:	681b      	ldr	r3, [r3, #0]
  4036f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4036fa:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  4036fc:	4a17      	ldr	r2, [pc, #92]	; (40375c <moveRobot+0x374>)
  4036fe:	4b17      	ldr	r3, [pc, #92]	; (40375c <moveRobot+0x374>)
  403700:	681b      	ldr	r3, [r3, #0]
  403702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403706:	6013      	str	r3, [r2, #0]
  403708:	e00f      	b.n	40372a <moveRobot+0x342>
	}
	else
	{
		//Reverse
		motor3Speed = motor3Speed * (-1); 
  40370a:	68fb      	ldr	r3, [r7, #12]
  40370c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  403710:	60fb      	str	r3, [r7, #12]
		RIN_3_High;
  403712:	4a13      	ldr	r2, [pc, #76]	; (403760 <moveRobot+0x378>)
  403714:	4b12      	ldr	r3, [pc, #72]	; (403760 <moveRobot+0x378>)
  403716:	681b      	ldr	r3, [r3, #0]
  403718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40371c:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  40371e:	4a0f      	ldr	r2, [pc, #60]	; (40375c <moveRobot+0x374>)
  403720:	4b0e      	ldr	r3, [pc, #56]	; (40375c <moveRobot+0x374>)
  403722:	681b      	ldr	r3, [r3, #0]
  403724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403728:	6013      	str	r3, [r2, #0]
	}
	REG_PWM_CUPD1 = (motor3Speed); //Update duty cycle as per calculations
  40372a:	4c0e      	ldr	r4, [pc, #56]	; (403764 <moveRobot+0x37c>)
  40372c:	4b0e      	ldr	r3, [pc, #56]	; (403768 <moveRobot+0x380>)
  40372e:	68f8      	ldr	r0, [r7, #12]
  403730:	4798      	blx	r3
  403732:	4603      	mov	r3, r0
  403734:	6023      	str	r3, [r4, #0]
	REG_PWM_CUPD2 = (motor2Speed); //Update duty cycle as per calculations
  403736:	4c0d      	ldr	r4, [pc, #52]	; (40376c <moveRobot+0x384>)
  403738:	4b0b      	ldr	r3, [pc, #44]	; (403768 <moveRobot+0x380>)
  40373a:	6938      	ldr	r0, [r7, #16]
  40373c:	4798      	blx	r3
  40373e:	4603      	mov	r3, r0
  403740:	6023      	str	r3, [r4, #0]
	REG_PWM_CUPD3 = (motor1Speed); //Update duty cycle as per calculations
  403742:	4c0b      	ldr	r4, [pc, #44]	; (403770 <moveRobot+0x388>)
  403744:	4b08      	ldr	r3, [pc, #32]	; (403768 <moveRobot+0x380>)
  403746:	6978      	ldr	r0, [r7, #20]
  403748:	4798      	blx	r3
  40374a:	4603      	mov	r3, r0
  40374c:	6023      	str	r3, [r4, #0]
}
  40374e:	bf00      	nop
  403750:	371c      	adds	r7, #28
  403752:	46bd      	mov	sp, r7
  403754:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403756:	bf00      	nop
  403758:	004068ad 	.word	0x004068ad
  40375c:	400e0e34 	.word	0x400e0e34
  403760:	400e0e30 	.word	0x400e0e30
  403764:	40020230 	.word	0x40020230
  403768:	00406911 	.word	0x00406911
  40376c:	40020250 	.word	0x40020250
  403770:	40020270 	.word	0x40020270

00403774 <rotateRobot>:

void rotateRobot(char direction, unsigned char speed)
{
  403774:	b480      	push	{r7}
  403776:	b083      	sub	sp, #12
  403778:	af00      	add	r7, sp, #0
  40377a:	4603      	mov	r3, r0
  40377c:	460a      	mov	r2, r1
  40377e:	71fb      	strb	r3, [r7, #7]
  403780:	4613      	mov	r3, r2
  403782:	71bb      	strb	r3, [r7, #6]
	if(direction == CW)			//enable all motors to spin the robot clockwise
  403784:	79fb      	ldrb	r3, [r7, #7]
  403786:	2b00      	cmp	r3, #0
  403788:	d124      	bne.n	4037d4 <rotateRobot+0x60>
	{
		RIN_1_High;
  40378a:	4a2d      	ldr	r2, [pc, #180]	; (403840 <rotateRobot+0xcc>)
  40378c:	4b2c      	ldr	r3, [pc, #176]	; (403840 <rotateRobot+0xcc>)
  40378e:	681b      	ldr	r3, [r3, #0]
  403790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403794:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  403796:	4a2b      	ldr	r2, [pc, #172]	; (403844 <rotateRobot+0xd0>)
  403798:	4b2a      	ldr	r3, [pc, #168]	; (403844 <rotateRobot+0xd0>)
  40379a:	681b      	ldr	r3, [r3, #0]
  40379c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4037a0:	6013      	str	r3, [r2, #0]
		RIN_2_High;
  4037a2:	4a29      	ldr	r2, [pc, #164]	; (403848 <rotateRobot+0xd4>)
  4037a4:	4b28      	ldr	r3, [pc, #160]	; (403848 <rotateRobot+0xd4>)
  4037a6:	681b      	ldr	r3, [r3, #0]
  4037a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4037ac:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  4037ae:	4a27      	ldr	r2, [pc, #156]	; (40384c <rotateRobot+0xd8>)
  4037b0:	4b26      	ldr	r3, [pc, #152]	; (40384c <rotateRobot+0xd8>)
  4037b2:	681b      	ldr	r3, [r3, #0]
  4037b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4037b8:	6013      	str	r3, [r2, #0]
		RIN_3_High;
  4037ba:	4a23      	ldr	r2, [pc, #140]	; (403848 <rotateRobot+0xd4>)
  4037bc:	4b22      	ldr	r3, [pc, #136]	; (403848 <rotateRobot+0xd4>)
  4037be:	681b      	ldr	r3, [r3, #0]
  4037c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4037c4:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  4037c6:	4a22      	ldr	r2, [pc, #136]	; (403850 <rotateRobot+0xdc>)
  4037c8:	4b21      	ldr	r3, [pc, #132]	; (403850 <rotateRobot+0xdc>)
  4037ca:	681b      	ldr	r3, [r3, #0]
  4037cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  4037d0:	6013      	str	r3, [r2, #0]
  4037d2:	e026      	b.n	403822 <rotateRobot+0xae>
	}
	else if(direction == CCW)	//enable all motors to spin the robot counter-clockwise
  4037d4:	79fb      	ldrb	r3, [r7, #7]
  4037d6:	2b01      	cmp	r3, #1
  4037d8:	d123      	bne.n	403822 <rotateRobot+0xae>
	{
		RIN_1_Low;
  4037da:	4a1c      	ldr	r2, [pc, #112]	; (40384c <rotateRobot+0xd8>)
  4037dc:	4b1b      	ldr	r3, [pc, #108]	; (40384c <rotateRobot+0xd8>)
  4037de:	681b      	ldr	r3, [r3, #0]
  4037e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4037e4:	6013      	str	r3, [r2, #0]
		FIN_1_High;
  4037e6:	4a1b      	ldr	r2, [pc, #108]	; (403854 <rotateRobot+0xe0>)
  4037e8:	4b1a      	ldr	r3, [pc, #104]	; (403854 <rotateRobot+0xe0>)
  4037ea:	681b      	ldr	r3, [r3, #0]
  4037ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4037f0:	6013      	str	r3, [r2, #0]
		RIN_2_Low;
  4037f2:	4a17      	ldr	r2, [pc, #92]	; (403850 <rotateRobot+0xdc>)
  4037f4:	4b16      	ldr	r3, [pc, #88]	; (403850 <rotateRobot+0xdc>)
  4037f6:	681b      	ldr	r3, [r3, #0]
  4037f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4037fc:	6013      	str	r3, [r2, #0]
		FIN_2_High;
  4037fe:	4a10      	ldr	r2, [pc, #64]	; (403840 <rotateRobot+0xcc>)
  403800:	4b0f      	ldr	r3, [pc, #60]	; (403840 <rotateRobot+0xcc>)
  403802:	681b      	ldr	r3, [r3, #0]
  403804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403808:	6013      	str	r3, [r2, #0]
		RIN_3_Low;
  40380a:	4a11      	ldr	r2, [pc, #68]	; (403850 <rotateRobot+0xdc>)
  40380c:	4b10      	ldr	r3, [pc, #64]	; (403850 <rotateRobot+0xdc>)
  40380e:	681b      	ldr	r3, [r3, #0]
  403810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403814:	6013      	str	r3, [r2, #0]
		FIN_3_High;
  403816:	4a0c      	ldr	r2, [pc, #48]	; (403848 <rotateRobot+0xd4>)
  403818:	4b0b      	ldr	r3, [pc, #44]	; (403848 <rotateRobot+0xd4>)
  40381a:	681b      	ldr	r3, [r3, #0]
  40381c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403820:	6013      	str	r3, [r2, #0]
	}
	//Update all duty cycles to match the desired rotation speed
	REG_PWM_CUPD1 = speed;
  403822:	4a0d      	ldr	r2, [pc, #52]	; (403858 <rotateRobot+0xe4>)
  403824:	79bb      	ldrb	r3, [r7, #6]
  403826:	6013      	str	r3, [r2, #0]
	REG_PWM_CUPD2 = speed;
  403828:	4a0c      	ldr	r2, [pc, #48]	; (40385c <rotateRobot+0xe8>)
  40382a:	79bb      	ldrb	r3, [r7, #6]
  40382c:	6013      	str	r3, [r2, #0]
	REG_PWM_CUPD3 = speed;	
  40382e:	4a0c      	ldr	r2, [pc, #48]	; (403860 <rotateRobot+0xec>)
  403830:	79bb      	ldrb	r3, [r7, #6]
  403832:	6013      	str	r3, [r2, #0]
}
  403834:	bf00      	nop
  403836:	370c      	adds	r7, #12
  403838:	46bd      	mov	sp, r7
  40383a:	bc80      	pop	{r7}
  40383c:	4770      	bx	lr
  40383e:	bf00      	nop
  403840:	400e1230 	.word	0x400e1230
  403844:	400e1034 	.word	0x400e1034
  403848:	400e0e30 	.word	0x400e0e30
  40384c:	400e1234 	.word	0x400e1234
  403850:	400e0e34 	.word	0x400e0e34
  403854:	400e1030 	.word	0x400e1030
  403858:	40020230 	.word	0x40020230
  40385c:	40020250 	.word	0x40020250
  403860:	40020270 	.word	0x40020270

00403864 <dockRobot>:

//assume max brightness is 0-100 (scale it to make this work)
void dockRobot(void)
{
  403864:	b590      	push	{r4, r7, lr}
  403866:	b085      	sub	sp, #20
  403868:	af00      	add	r7, sp, #0
	//10cm away 0x0070 - 0x0100
	//20cm away 0x0030 - 0x003f
	//30cm away 0x0020 - 0x0029
	
	uint16_t rightBrightness, leftBrightness;
	float diff = 0;
  40386a:	f04f 0300 	mov.w	r3, #0
  40386e:	60fb      	str	r3, [r7, #12]
	float rightBrightnessScaled, leftBrightnessScaled;
	
	leftBrightness = LightSensor_Data_Read(Mux_LHS_LightSens);
  403870:	20f9      	movs	r0, #249	; 0xf9
  403872:	4b3d      	ldr	r3, [pc, #244]	; (403968 <dockRobot+0x104>)
  403874:	4798      	blx	r3
  403876:	4603      	mov	r3, r0
  403878:	817b      	strh	r3, [r7, #10]
	rightBrightness = LightSensor_Data_Read(Mux_RHS_LightSens);
  40387a:	20f8      	movs	r0, #248	; 0xf8
  40387c:	4b3a      	ldr	r3, [pc, #232]	; (403968 <dockRobot+0x104>)
  40387e:	4798      	blx	r3
  403880:	4603      	mov	r3, r0
  403882:	813b      	strh	r3, [r7, #8]
	
	//frontProximity = Proximity_Data_Read(Mux_ProximityA); //need to test this
	
	if(rightBrightness > 0x0200 && leftBrightness > 0x0200)//if there is more light than ambient
  403884:	893b      	ldrh	r3, [r7, #8]
  403886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40388a:	d94a      	bls.n	403922 <dockRobot+0xbe>
  40388c:	897b      	ldrh	r3, [r7, #10]
  40388e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403892:	d946      	bls.n	403922 <dockRobot+0xbe>
	{
		//Scale brightness to calculate required position
		rightBrightnessScaled = (rightBrightness / 0xFFFF) * 100;
  403894:	893b      	ldrh	r3, [r7, #8]
  403896:	4a35      	ldr	r2, [pc, #212]	; (40396c <dockRobot+0x108>)
  403898:	fba2 2303 	umull	r2, r3, r2, r3
  40389c:	0bdb      	lsrs	r3, r3, #15
  40389e:	b29b      	uxth	r3, r3
  4038a0:	461a      	mov	r2, r3
  4038a2:	2364      	movs	r3, #100	; 0x64
  4038a4:	fb03 f202 	mul.w	r2, r3, r2
  4038a8:	4b31      	ldr	r3, [pc, #196]	; (403970 <dockRobot+0x10c>)
  4038aa:	4610      	mov	r0, r2
  4038ac:	4798      	blx	r3
  4038ae:	4603      	mov	r3, r0
  4038b0:	607b      	str	r3, [r7, #4]
		leftBrightnessScaled = (leftBrightness / 0xFFFF) * 100;
  4038b2:	897b      	ldrh	r3, [r7, #10]
  4038b4:	4a2d      	ldr	r2, [pc, #180]	; (40396c <dockRobot+0x108>)
  4038b6:	fba2 2303 	umull	r2, r3, r2, r3
  4038ba:	0bdb      	lsrs	r3, r3, #15
  4038bc:	b29b      	uxth	r3, r3
  4038be:	461a      	mov	r2, r3
  4038c0:	2364      	movs	r3, #100	; 0x64
  4038c2:	fb03 f202 	mul.w	r2, r3, r2
  4038c6:	4b2a      	ldr	r3, [pc, #168]	; (403970 <dockRobot+0x10c>)
  4038c8:	4610      	mov	r0, r2
  4038ca:	4798      	blx	r3
  4038cc:	4603      	mov	r3, r0
  4038ce:	603b      	str	r3, [r7, #0]
		//Zero Justified Normalized Differential Shade Calculation
		diff = 2 * (((rightBrightnessScaled * 100)/(rightBrightnessScaled + leftBrightnessScaled)) - 50);
  4038d0:	4b28      	ldr	r3, [pc, #160]	; (403974 <dockRobot+0x110>)
  4038d2:	4929      	ldr	r1, [pc, #164]	; (403978 <dockRobot+0x114>)
  4038d4:	6878      	ldr	r0, [r7, #4]
  4038d6:	4798      	blx	r3
  4038d8:	4603      	mov	r3, r0
  4038da:	461c      	mov	r4, r3
  4038dc:	4b27      	ldr	r3, [pc, #156]	; (40397c <dockRobot+0x118>)
  4038de:	6839      	ldr	r1, [r7, #0]
  4038e0:	6878      	ldr	r0, [r7, #4]
  4038e2:	4798      	blx	r3
  4038e4:	4603      	mov	r3, r0
  4038e6:	461a      	mov	r2, r3
  4038e8:	4b25      	ldr	r3, [pc, #148]	; (403980 <dockRobot+0x11c>)
  4038ea:	4611      	mov	r1, r2
  4038ec:	4620      	mov	r0, r4
  4038ee:	4798      	blx	r3
  4038f0:	4603      	mov	r3, r0
  4038f2:	461a      	mov	r2, r3
  4038f4:	4b23      	ldr	r3, [pc, #140]	; (403984 <dockRobot+0x120>)
  4038f6:	4924      	ldr	r1, [pc, #144]	; (403988 <dockRobot+0x124>)
  4038f8:	4610      	mov	r0, r2
  4038fa:	4798      	blx	r3
  4038fc:	4603      	mov	r3, r0
  4038fe:	461a      	mov	r2, r3
  403900:	4b1e      	ldr	r3, [pc, #120]	; (40397c <dockRobot+0x118>)
  403902:	4611      	mov	r1, r2
  403904:	4610      	mov	r0, r2
  403906:	4798      	blx	r3
  403908:	4603      	mov	r3, r0
  40390a:	60fb      	str	r3, [r7, #12]
		//Convert to degrees
		moveRobot(diff/2, 50);
  40390c:	4b1c      	ldr	r3, [pc, #112]	; (403980 <dockRobot+0x11c>)
  40390e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403912:	68f8      	ldr	r0, [r7, #12]
  403914:	4798      	blx	r3
  403916:	4603      	mov	r3, r0
  403918:	2132      	movs	r1, #50	; 0x32
  40391a:	4618      	mov	r0, r3
  40391c:	4b1b      	ldr	r3, [pc, #108]	; (40398c <dockRobot+0x128>)
  40391e:	4798      	blx	r3
  403920:	e01e      	b.n	403960 <dockRobot+0xfc>
	}
	else if((leftBrightness > 0x1000 || rightBrightness >  0x1000))// && frontProximity > 0x0300)
  403922:	897b      	ldrh	r3, [r7, #10]
  403924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  403928:	d803      	bhi.n	403932 <dockRobot+0xce>
  40392a:	893b      	ldrh	r3, [r7, #8]
  40392c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  403930:	d902      	bls.n	403938 <dockRobot+0xd4>
	{
		stopRobot();
  403932:	4b17      	ldr	r3, [pc, #92]	; (403990 <dockRobot+0x12c>)
  403934:	4798      	blx	r3
  403936:	e013      	b.n	403960 <dockRobot+0xfc>
	}
	else if((rightBrightness - leftBrightness) > 0x009F)
  403938:	893a      	ldrh	r2, [r7, #8]
  40393a:	897b      	ldrh	r3, [r7, #10]
  40393c:	1ad3      	subs	r3, r2, r3
  40393e:	2b9f      	cmp	r3, #159	; 0x9f
  403940:	dd04      	ble.n	40394c <dockRobot+0xe8>
	{
		rotateRobot(CW, 30); //turn right
  403942:	211e      	movs	r1, #30
  403944:	2000      	movs	r0, #0
  403946:	4b13      	ldr	r3, [pc, #76]	; (403994 <dockRobot+0x130>)
  403948:	4798      	blx	r3
	}
	else if((leftBrightness - rightBrightness) > 0x009F)
	{
		rotateRobot(CCW, 30);//turn left
	}
}
  40394a:	e009      	b.n	403960 <dockRobot+0xfc>
	}
	else if((rightBrightness - leftBrightness) > 0x009F)
	{
		rotateRobot(CW, 30); //turn right
	}
	else if((leftBrightness - rightBrightness) > 0x009F)
  40394c:	897a      	ldrh	r2, [r7, #10]
  40394e:	893b      	ldrh	r3, [r7, #8]
  403950:	1ad3      	subs	r3, r2, r3
  403952:	2b9f      	cmp	r3, #159	; 0x9f
  403954:	dd04      	ble.n	403960 <dockRobot+0xfc>
	{
		rotateRobot(CCW, 30);//turn left
  403956:	211e      	movs	r1, #30
  403958:	2001      	movs	r0, #1
  40395a:	4b0e      	ldr	r3, [pc, #56]	; (403994 <dockRobot+0x130>)
  40395c:	4798      	blx	r3
	}
}
  40395e:	e7ff      	b.n	403960 <dockRobot+0xfc>
  403960:	bf00      	nop
  403962:	3714      	adds	r7, #20
  403964:	46bd      	mov	sp, r7
  403966:	bd90      	pop	{r4, r7, pc}
  403968:	00404161 	.word	0x00404161
  40396c:	80008001 	.word	0x80008001
  403970:	004064dd 	.word	0x004064dd
  403974:	00406585 	.word	0x00406585
  403978:	42c80000 	.word	0x42c80000
  40397c:	00406375 	.word	0x00406375
  403980:	004066ed 	.word	0x004066ed
  403984:	00406371 	.word	0x00406371
  403988:	42480000 	.word	0x42480000
  40398c:	004033e9 	.word	0x004033e9
  403990:	00403999 	.word	0x00403999
  403994:	00403775 	.word	0x00403775

00403998 <stopRobot>:

void stopRobot(void)
{
  403998:	b480      	push	{r7}
  40399a:	af00      	add	r7, sp, #0
	//Stops the robot from moving
	FIN_1_Low;
  40399c:	4a13      	ldr	r2, [pc, #76]	; (4039ec <stopRobot+0x54>)
  40399e:	4b13      	ldr	r3, [pc, #76]	; (4039ec <stopRobot+0x54>)
  4039a0:	681b      	ldr	r3, [r3, #0]
  4039a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4039a6:	6013      	str	r3, [r2, #0]
	RIN_1_Low;
  4039a8:	4a11      	ldr	r2, [pc, #68]	; (4039f0 <stopRobot+0x58>)
  4039aa:	4b11      	ldr	r3, [pc, #68]	; (4039f0 <stopRobot+0x58>)
  4039ac:	681b      	ldr	r3, [r3, #0]
  4039ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4039b2:	6013      	str	r3, [r2, #0]
	FIN_2_Low;
  4039b4:	4a0e      	ldr	r2, [pc, #56]	; (4039f0 <stopRobot+0x58>)
  4039b6:	4b0e      	ldr	r3, [pc, #56]	; (4039f0 <stopRobot+0x58>)
  4039b8:	681b      	ldr	r3, [r3, #0]
  4039ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4039be:	6013      	str	r3, [r2, #0]
	RIN_2_Low;
  4039c0:	4a0c      	ldr	r2, [pc, #48]	; (4039f4 <stopRobot+0x5c>)
  4039c2:	4b0c      	ldr	r3, [pc, #48]	; (4039f4 <stopRobot+0x5c>)
  4039c4:	681b      	ldr	r3, [r3, #0]
  4039c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4039ca:	6013      	str	r3, [r2, #0]
	FIN_3_Low;
  4039cc:	4a09      	ldr	r2, [pc, #36]	; (4039f4 <stopRobot+0x5c>)
  4039ce:	4b09      	ldr	r3, [pc, #36]	; (4039f4 <stopRobot+0x5c>)
  4039d0:	681b      	ldr	r3, [r3, #0]
  4039d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  4039d6:	6013      	str	r3, [r2, #0]
	RIN_3_Low;
  4039d8:	4a06      	ldr	r2, [pc, #24]	; (4039f4 <stopRobot+0x5c>)
  4039da:	4b06      	ldr	r3, [pc, #24]	; (4039f4 <stopRobot+0x5c>)
  4039dc:	681b      	ldr	r3, [r3, #0]
  4039de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4039e2:	6013      	str	r3, [r2, #0]
  4039e4:	bf00      	nop
  4039e6:	46bd      	mov	sp, r7
  4039e8:	bc80      	pop	{r7}
  4039ea:	4770      	bx	lr
  4039ec:	400e1034 	.word	0x400e1034
  4039f0:	400e1234 	.word	0x400e1234
  4039f4:	400e0e34 	.word	0x400e0e34

004039f8 <SPI_Init>:
#include "sam.h"
#include <math.h>
#include "opt_interface.h"

void SPI_Init(void)
{
  4039f8:	b480      	push	{r7}
  4039fa:	af00      	add	r7, sp, #0
	REG_PMC_PCER0 |= PMC_PCER0_PID21; //Enable clock access to SPI
  4039fc:	4a2b      	ldr	r2, [pc, #172]	; (403aac <SPI_Init+0xb4>)
  4039fe:	4b2b      	ldr	r3, [pc, #172]	; (403aac <SPI_Init+0xb4>)
  403a00:	681b      	ldr	r3, [r3, #0]
  403a02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  403a06:	6013      	str	r3, [r2, #0]
	REG_SPI_WPMR |= (0x535049<<8); //SPI write protect key
  403a08:	4929      	ldr	r1, [pc, #164]	; (403ab0 <SPI_Init+0xb8>)
  403a0a:	4b29      	ldr	r3, [pc, #164]	; (403ab0 <SPI_Init+0xb8>)
  403a0c:	681a      	ldr	r2, [r3, #0]
  403a0e:	4b29      	ldr	r3, [pc, #164]	; (403ab4 <SPI_Init+0xbc>)
  403a10:	4313      	orrs	r3, r2
  403a12:	600b      	str	r3, [r1, #0]
	REG_SPI_WPMR &= ~(1<<0); //Disable SPI write protect
  403a14:	4a26      	ldr	r2, [pc, #152]	; (403ab0 <SPI_Init+0xb8>)
  403a16:	4b26      	ldr	r3, [pc, #152]	; (403ab0 <SPI_Init+0xb8>)
  403a18:	681b      	ldr	r3, [r3, #0]
  403a1a:	f023 0301 	bic.w	r3, r3, #1
  403a1e:	6013      	str	r3, [r2, #0]
	
	REG_SPI_CR |= SPI_CR_SWRST; //Software reset
  403a20:	4a25      	ldr	r2, [pc, #148]	; (403ab8 <SPI_Init+0xc0>)
  403a22:	4b25      	ldr	r3, [pc, #148]	; (403ab8 <SPI_Init+0xc0>)
  403a24:	681b      	ldr	r3, [r3, #0]
  403a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403a2a:	6013      	str	r3, [r2, #0]
	//Give control of MOSI, MISO & SCLK pins to SPI
	REG_PIOA_PDR |= PIO_PDR_P12; //Give control of MISO to SPI
  403a2c:	4a23      	ldr	r2, [pc, #140]	; (403abc <SPI_Init+0xc4>)
  403a2e:	4b23      	ldr	r3, [pc, #140]	; (403abc <SPI_Init+0xc4>)
  403a30:	681b      	ldr	r3, [r3, #0]
  403a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403a36:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //Give control of MOSI to SPI
  403a38:	4a20      	ldr	r2, [pc, #128]	; (403abc <SPI_Init+0xc4>)
  403a3a:	4b20      	ldr	r3, [pc, #128]	; (403abc <SPI_Init+0xc4>)
  403a3c:	681b      	ldr	r3, [r3, #0]
  403a3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403a42:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //Give control of SCLK to SPI
  403a44:	4a1d      	ldr	r2, [pc, #116]	; (403abc <SPI_Init+0xc4>)
  403a46:	4b1d      	ldr	r3, [pc, #116]	; (403abc <SPI_Init+0xc4>)
  403a48:	681b      	ldr	r3, [r3, #0]
  403a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  403a4e:	6013      	str	r3, [r2, #0]
	REG_PIOB_PER |= (1<<14);		//Enable PIO control of PB12
  403a50:	4a1b      	ldr	r2, [pc, #108]	; (403ac0 <SPI_Init+0xc8>)
  403a52:	4b1b      	ldr	r3, [pc, #108]	; (403ac0 <SPI_Init+0xc8>)
  403a54:	681b      	ldr	r3, [r3, #0]
  403a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  403a5a:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<14);		//Set PB12 as output
  403a5c:	4a19      	ldr	r2, [pc, #100]	; (403ac4 <SPI_Init+0xcc>)
  403a5e:	4b19      	ldr	r3, [pc, #100]	; (403ac4 <SPI_Init+0xcc>)
  403a60:	681b      	ldr	r3, [r3, #0]
  403a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  403a66:	6013      	str	r3, [r2, #0]
	REG_SPI_CR |= SPI_CR_SPIEN; //enable SPI	
  403a68:	4a13      	ldr	r2, [pc, #76]	; (403ab8 <SPI_Init+0xc0>)
  403a6a:	4b13      	ldr	r3, [pc, #76]	; (403ab8 <SPI_Init+0xc0>)
  403a6c:	681b      	ldr	r3, [r3, #0]
  403a6e:	f043 0301 	orr.w	r3, r3, #1
  403a72:	6013      	str	r3, [r2, #0]
	//REG_PIOB_PDR |= PIO_PDR_P14; //Give control of NPCS1 (on PB14/Pin 99) to SPI
	REG_SPI_MR |= SPI_MR_MSTR; //SPI in Master Mode
  403a74:	4a14      	ldr	r2, [pc, #80]	; (403ac8 <SPI_Init+0xd0>)
  403a76:	4b14      	ldr	r3, [pc, #80]	; (403ac8 <SPI_Init+0xd0>)
  403a78:	681b      	ldr	r3, [r3, #0]
  403a7a:	f043 0301 	orr.w	r3, r3, #1
  403a7e:	6013      	str	r3, [r2, #0]
	REG_SPI_MR &= ~SPI_MR_PS; //set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
  403a80:	4a11      	ldr	r2, [pc, #68]	; (403ac8 <SPI_Init+0xd0>)
  403a82:	4b11      	ldr	r3, [pc, #68]	; (403ac8 <SPI_Init+0xd0>)
  403a84:	681b      	ldr	r3, [r3, #0]
  403a86:	f023 0302 	bic.w	r3, r3, #2
  403a8a:	6013      	str	r3, [r2, #0]
	REG_SPI_MR |= SPI_MR_PCS(0b1101); //set slave to NPCS1 (only works while SPI_MR_PS = 0)	
  403a8c:	4a0e      	ldr	r2, [pc, #56]	; (403ac8 <SPI_Init+0xd0>)
  403a8e:	4b0e      	ldr	r3, [pc, #56]	; (403ac8 <SPI_Init+0xd0>)
  403a90:	681b      	ldr	r3, [r3, #0]
  403a92:	f443 2350 	orr.w	r3, r3, #851968	; 0xd0000
  403a96:	6013      	str	r3, [r2, #0]
	REG_SPI_CSR1 |= (1<<0) | (0xF0<<8) | (0x17<<24); // CPOL=1, 500k baud (2us period), 6us DLYBCT
  403a98:	490c      	ldr	r1, [pc, #48]	; (403acc <SPI_Init+0xd4>)
  403a9a:	4b0c      	ldr	r3, [pc, #48]	; (403acc <SPI_Init+0xd4>)
  403a9c:	681a      	ldr	r2, [r3, #0]
  403a9e:	4b0c      	ldr	r3, [pc, #48]	; (403ad0 <SPI_Init+0xd8>)
  403aa0:	4313      	orrs	r3, r2
  403aa2:	600b      	str	r3, [r1, #0]
}
  403aa4:	bf00      	nop
  403aa6:	46bd      	mov	sp, r7
  403aa8:	bc80      	pop	{r7}
  403aaa:	4770      	bx	lr
  403aac:	400e0410 	.word	0x400e0410
  403ab0:	400080e4 	.word	0x400080e4
  403ab4:	53504900 	.word	0x53504900
  403ab8:	40008000 	.word	0x40008000
  403abc:	400e0e04 	.word	0x400e0e04
  403ac0:	400e1000 	.word	0x400e1000
  403ac4:	400e1010 	.word	0x400e1010
  403ac8:	40008004 	.word	0x40008004
  403acc:	40008034 	.word	0x40008034
  403ad0:	1700f001 	.word	0x1700f001

00403ad4 <init_imu>:
uint32_t blinker = 0;
uint32_t check_IMU_FIFO = 0;

//Initialise the IMU, robotsetup MUST be run first
void init_imu(void)
{
  403ad4:	b580      	push	{r7, lr}
  403ad6:	b084      	sub	sp, #16
  403ad8:	af00      	add	r7, sp, #0
	unsigned char accel_fsr;
	unsigned short gyro_rate, gyro_fsr;
	int result =0;
  403ada:	2300      	movs	r3, #0
  403adc:	60fb      	str	r3, [r7, #12]
	};

	//GPIO Setup
	//We want to make an LED blink to test the timer
	//PMC is not required for such basic use of the GPIO
	REG_PIOA_PER |= PIO_PA27;										//Enable PA_27 (LED)
  403ade:	4a36      	ldr	r2, [pc, #216]	; (403bb8 <init_imu+0xe4>)
  403ae0:	4b35      	ldr	r3, [pc, #212]	; (403bb8 <init_imu+0xe4>)
  403ae2:	681b      	ldr	r3, [r3, #0]
  403ae4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  403ae8:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= PIO_PA27;										//Set PA_27 for output
  403aea:	4a34      	ldr	r2, [pc, #208]	; (403bbc <init_imu+0xe8>)
  403aec:	4b33      	ldr	r3, [pc, #204]	; (403bbc <init_imu+0xe8>)
  403aee:	681b      	ldr	r3, [r3, #0]
  403af0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  403af4:	6013      	str	r3, [r2, #0]
	
	//Initialise the IMU's driver	
	result += mpu_init(0);											// Initialise the MPU with no interrupts
  403af6:	2000      	movs	r0, #0
  403af8:	4b31      	ldr	r3, [pc, #196]	; (403bc0 <init_imu+0xec>)
  403afa:	4798      	blx	r3
  403afc:	4602      	mov	r2, r0
  403afe:	68fb      	ldr	r3, [r7, #12]
  403b00:	4413      	add	r3, r2
  403b02:	60fb      	str	r3, [r7, #12]
	result += mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);// Wake up all sensors
  403b04:	2079      	movs	r0, #121	; 0x79
  403b06:	4b2f      	ldr	r3, [pc, #188]	; (403bc4 <init_imu+0xf0>)
  403b08:	4798      	blx	r3
  403b0a:	4602      	mov	r2, r0
  403b0c:	68fb      	ldr	r3, [r7, #12]
  403b0e:	4413      	add	r3, r2
  403b10:	60fb      	str	r3, [r7, #12]
	//result += mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);	// Push xyz gyro and xyz accel data to the FIFO
	result += mpu_set_sample_rate(200);								// Set 200Hz sample rate
  403b12:	20c8      	movs	r0, #200	; 0xc8
  403b14:	4b2c      	ldr	r3, [pc, #176]	; (403bc8 <init_imu+0xf4>)
  403b16:	4798      	blx	r3
  403b18:	4602      	mov	r2, r0
  403b1a:	68fb      	ldr	r3, [r7, #12]
  403b1c:	4413      	add	r3, r2
  403b1e:	60fb      	str	r3, [r7, #12]
	result += mpu_set_compass_sample_rate(100);						// Set 100Hz compass sample rate (max)
  403b20:	2064      	movs	r0, #100	; 0x64
  403b22:	4b2a      	ldr	r3, [pc, #168]	; (403bcc <init_imu+0xf8>)
  403b24:	4798      	blx	r3
  403b26:	4602      	mov	r2, r0
  403b28:	68fb      	ldr	r3, [r7, #12]
  403b2a:	4413      	add	r3, r2
  403b2c:	60fb      	str	r3, [r7, #12]
	
	/* Read back configuration in case it was set improperly. */
	result += mpu_get_sample_rate(&gyro_rate);
  403b2e:	f107 0308 	add.w	r3, r7, #8
  403b32:	4618      	mov	r0, r3
  403b34:	4b26      	ldr	r3, [pc, #152]	; (403bd0 <init_imu+0xfc>)
  403b36:	4798      	blx	r3
  403b38:	4602      	mov	r2, r0
  403b3a:	68fb      	ldr	r3, [r7, #12]
  403b3c:	4413      	add	r3, r2
  403b3e:	60fb      	str	r3, [r7, #12]
	result += mpu_get_gyro_fsr(&gyro_fsr);
  403b40:	1dbb      	adds	r3, r7, #6
  403b42:	4618      	mov	r0, r3
  403b44:	4b23      	ldr	r3, [pc, #140]	; (403bd4 <init_imu+0x100>)
  403b46:	4798      	blx	r3
  403b48:	4602      	mov	r2, r0
  403b4a:	68fb      	ldr	r3, [r7, #12]
  403b4c:	4413      	add	r3, r2
  403b4e:	60fb      	str	r3, [r7, #12]
	result += mpu_get_accel_fsr(&accel_fsr);
  403b50:	f107 030b 	add.w	r3, r7, #11
  403b54:	4618      	mov	r0, r3
  403b56:	4b20      	ldr	r3, [pc, #128]	; (403bd8 <init_imu+0x104>)
  403b58:	4798      	blx	r3
  403b5a:	4602      	mov	r2, r0
  403b5c:	68fb      	ldr	r3, [r7, #12]
  403b5e:	4413      	add	r3, r2
  403b60:	60fb      	str	r3, [r7, #12]
	
	result += dmp_load_motion_driver_firmware();					// Load the DMP firmware
  403b62:	4b1e      	ldr	r3, [pc, #120]	; (403bdc <init_imu+0x108>)
  403b64:	4798      	blx	r3
  403b66:	4602      	mov	r2, r0
  403b68:	68fb      	ldr	r3, [r7, #12]
  403b6a:	4413      	add	r3, r2
  403b6c:	60fb      	str	r3, [r7, #12]
	result += dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));
  403b6e:	481c      	ldr	r0, [pc, #112]	; (403be0 <init_imu+0x10c>)
  403b70:	4b1c      	ldr	r3, [pc, #112]	; (403be4 <init_imu+0x110>)
  403b72:	4798      	blx	r3
  403b74:	4603      	mov	r3, r0
  403b76:	4618      	mov	r0, r3
  403b78:	4b1b      	ldr	r3, [pc, #108]	; (403be8 <init_imu+0x114>)
  403b7a:	4798      	blx	r3
  403b7c:	4602      	mov	r2, r0
  403b7e:	68fb      	ldr	r3, [r7, #12]
  403b80:	4413      	add	r3, r2
  403b82:	60fb      	str	r3, [r7, #12]
	//result += dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL);
	result += dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT);
  403b84:	2010      	movs	r0, #16
  403b86:	4b19      	ldr	r3, [pc, #100]	; (403bec <init_imu+0x118>)
  403b88:	4798      	blx	r3
  403b8a:	4602      	mov	r2, r0
  403b8c:	68fb      	ldr	r3, [r7, #12]
  403b8e:	4413      	add	r3, r2
  403b90:	60fb      	str	r3, [r7, #12]
	result += dmp_set_fifo_rate(200);								//200Hz update rate from the FIFO
  403b92:	20c8      	movs	r0, #200	; 0xc8
  403b94:	4b16      	ldr	r3, [pc, #88]	; (403bf0 <init_imu+0x11c>)
  403b96:	4798      	blx	r3
  403b98:	4602      	mov	r2, r0
  403b9a:	68fb      	ldr	r3, [r7, #12]
  403b9c:	4413      	add	r3, r2
  403b9e:	60fb      	str	r3, [r7, #12]
	result += mpu_set_dmp_state(1);
  403ba0:	2001      	movs	r0, #1
  403ba2:	4b14      	ldr	r3, [pc, #80]	; (403bf4 <init_imu+0x120>)
  403ba4:	4798      	blx	r3
  403ba6:	4602      	mov	r2, r0
  403ba8:	68fb      	ldr	r3, [r7, #12]
  403baa:	4413      	add	r3, r2
  403bac:	60fb      	str	r3, [r7, #12]
}
  403bae:	bf00      	nop
  403bb0:	3710      	adds	r7, #16
  403bb2:	46bd      	mov	sp, r7
  403bb4:	bd80      	pop	{r7, pc}
  403bb6:	bf00      	nop
  403bb8:	400e0e00 	.word	0x400e0e00
  403bbc:	400e0e10 	.word	0x400e0e10
  403bc0:	00400e19 	.word	0x00400e19
  403bc4:	00401871 	.word	0x00401871
  403bc8:	00401651 	.word	0x00401651
  403bcc:	00401741 	.word	0x00401741
  403bd0:	00401621 	.word	0x00401621
  403bd4:	00401329 	.word	0x00401329
  403bd8:	00401439 	.word	0x00401439
  403bdc:	0040230d 	.word	0x0040230d
  403be0:	20000040 	.word	0x20000040
  403be4:	00403bf9 	.word	0x00403bf9
  403be8:	00402331 	.word	0x00402331
  403bec:	00402a51 	.word	0x00402a51
  403bf0:	00402509 	.word	0x00402509
  403bf4:	00401fc5 	.word	0x00401fc5

00403bf8 <inv_orientation_matrix_to_scalar>:

unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
  403bf8:	b580      	push	{r7, lr}
  403bfa:	b084      	sub	sp, #16
  403bfc:	af00      	add	r7, sp, #0
  403bfe:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
  403c00:	6878      	ldr	r0, [r7, #4]
  403c02:	4b11      	ldr	r3, [pc, #68]	; (403c48 <inv_orientation_matrix_to_scalar+0x50>)
  403c04:	4798      	blx	r3
  403c06:	4603      	mov	r3, r0
  403c08:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
  403c0a:	687b      	ldr	r3, [r7, #4]
  403c0c:	3303      	adds	r3, #3
  403c0e:	4618      	mov	r0, r3
  403c10:	4b0d      	ldr	r3, [pc, #52]	; (403c48 <inv_orientation_matrix_to_scalar+0x50>)
  403c12:	4798      	blx	r3
  403c14:	4603      	mov	r3, r0
  403c16:	00db      	lsls	r3, r3, #3
  403c18:	b21a      	sxth	r2, r3
  403c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  403c1e:	4313      	orrs	r3, r2
  403c20:	b21b      	sxth	r3, r3
  403c22:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
  403c24:	687b      	ldr	r3, [r7, #4]
  403c26:	3306      	adds	r3, #6
  403c28:	4618      	mov	r0, r3
  403c2a:	4b07      	ldr	r3, [pc, #28]	; (403c48 <inv_orientation_matrix_to_scalar+0x50>)
  403c2c:	4798      	blx	r3
  403c2e:	4603      	mov	r3, r0
  403c30:	019b      	lsls	r3, r3, #6
  403c32:	b21a      	sxth	r2, r3
  403c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  403c38:	4313      	orrs	r3, r2
  403c3a:	b21b      	sxth	r3, r3
  403c3c:	81fb      	strh	r3, [r7, #14]

    return scalar;
  403c3e:	89fb      	ldrh	r3, [r7, #14]
}
  403c40:	4618      	mov	r0, r3
  403c42:	3710      	adds	r7, #16
  403c44:	46bd      	mov	sp, r7
  403c46:	bd80      	pop	{r7, pc}
  403c48:	00403c4d 	.word	0x00403c4d

00403c4c <inv_row_2_scale>:

unsigned short inv_row_2_scale(const signed char *row)
{
  403c4c:	b480      	push	{r7}
  403c4e:	b085      	sub	sp, #20
  403c50:	af00      	add	r7, sp, #0
  403c52:	6078      	str	r0, [r7, #4]
	unsigned short b;

	if (row[0] > 0)
  403c54:	687b      	ldr	r3, [r7, #4]
  403c56:	f993 3000 	ldrsb.w	r3, [r3]
  403c5a:	2b00      	cmp	r3, #0
  403c5c:	dd02      	ble.n	403c64 <inv_row_2_scale+0x18>
	b = 0;
  403c5e:	2300      	movs	r3, #0
  403c60:	81fb      	strh	r3, [r7, #14]
  403c62:	e02d      	b.n	403cc0 <inv_row_2_scale+0x74>
	else if (row[0] < 0)
  403c64:	687b      	ldr	r3, [r7, #4]
  403c66:	f993 3000 	ldrsb.w	r3, [r3]
  403c6a:	2b00      	cmp	r3, #0
  403c6c:	da02      	bge.n	403c74 <inv_row_2_scale+0x28>
	b = 4;
  403c6e:	2304      	movs	r3, #4
  403c70:	81fb      	strh	r3, [r7, #14]
  403c72:	e025      	b.n	403cc0 <inv_row_2_scale+0x74>
	else if (row[1] > 0)
  403c74:	687b      	ldr	r3, [r7, #4]
  403c76:	3301      	adds	r3, #1
  403c78:	f993 3000 	ldrsb.w	r3, [r3]
  403c7c:	2b00      	cmp	r3, #0
  403c7e:	dd02      	ble.n	403c86 <inv_row_2_scale+0x3a>
	b = 1;
  403c80:	2301      	movs	r3, #1
  403c82:	81fb      	strh	r3, [r7, #14]
  403c84:	e01c      	b.n	403cc0 <inv_row_2_scale+0x74>
	else if (row[1] < 0)
  403c86:	687b      	ldr	r3, [r7, #4]
  403c88:	3301      	adds	r3, #1
  403c8a:	f993 3000 	ldrsb.w	r3, [r3]
  403c8e:	2b00      	cmp	r3, #0
  403c90:	da02      	bge.n	403c98 <inv_row_2_scale+0x4c>
	b = 5;
  403c92:	2305      	movs	r3, #5
  403c94:	81fb      	strh	r3, [r7, #14]
  403c96:	e013      	b.n	403cc0 <inv_row_2_scale+0x74>
	else if (row[2] > 0)
  403c98:	687b      	ldr	r3, [r7, #4]
  403c9a:	3302      	adds	r3, #2
  403c9c:	f993 3000 	ldrsb.w	r3, [r3]
  403ca0:	2b00      	cmp	r3, #0
  403ca2:	dd02      	ble.n	403caa <inv_row_2_scale+0x5e>
	b = 2;
  403ca4:	2302      	movs	r3, #2
  403ca6:	81fb      	strh	r3, [r7, #14]
  403ca8:	e00a      	b.n	403cc0 <inv_row_2_scale+0x74>
	else if (row[2] < 0)
  403caa:	687b      	ldr	r3, [r7, #4]
  403cac:	3302      	adds	r3, #2
  403cae:	f993 3000 	ldrsb.w	r3, [r3]
  403cb2:	2b00      	cmp	r3, #0
  403cb4:	da02      	bge.n	403cbc <inv_row_2_scale+0x70>
	b = 6;
  403cb6:	2306      	movs	r3, #6
  403cb8:	81fb      	strh	r3, [r7, #14]
  403cba:	e001      	b.n	403cc0 <inv_row_2_scale+0x74>
	else
	b = 7;      // error
  403cbc:	2307      	movs	r3, #7
  403cbe:	81fb      	strh	r3, [r7, #14]
	return b;
  403cc0:	89fb      	ldrh	r3, [r7, #14]
}
  403cc2:	4618      	mov	r0, r3
  403cc4:	3714      	adds	r7, #20
  403cc6:	46bd      	mov	sp, r7
  403cc8:	bc80      	pop	{r7}
  403cca:	4770      	bx	lr

00403ccc <get_ms>:
	eulerAngle->roll = (atan2(2*x*w-2*y*z , -sqx + sqy - sqz + sqw))*180/M_PI;
}

//Reads the system uptime count generated by Timer0
int get_ms(uint32_t *timestamp)
{
  403ccc:	b480      	push	{r7}
  403cce:	b083      	sub	sp, #12
  403cd0:	af00      	add	r7, sp, #0
  403cd2:	6078      	str	r0, [r7, #4]
	if(!timestamp)
  403cd4:	687b      	ldr	r3, [r7, #4]
  403cd6:	2b00      	cmp	r3, #0
  403cd8:	d101      	bne.n	403cde <get_ms+0x12>
		return 1;	
  403cda:	2301      	movs	r3, #1
  403cdc:	e004      	b.n	403ce8 <get_ms+0x1c>
	*timestamp = systemTimestamp;
  403cde:	4b05      	ldr	r3, [pc, #20]	; (403cf4 <get_ms+0x28>)
  403ce0:	681a      	ldr	r2, [r3, #0]
  403ce2:	687b      	ldr	r3, [r7, #4]
  403ce4:	601a      	str	r2, [r3, #0]
	return 0;
  403ce6:	2300      	movs	r3, #0
}
  403ce8:	4618      	mov	r0, r3
  403cea:	370c      	adds	r7, #12
  403cec:	46bd      	mov	sp, r7
  403cee:	bc80      	pop	{r7}
  403cf0:	4770      	bx	lr
  403cf2:	bf00      	nop
  403cf4:	200004bc 	.word	0x200004bc

00403cf8 <delay_ms>:

//Wait for period_ms seconds
int delay_ms(uint32_t period_ms)
{
  403cf8:	b480      	push	{r7}
  403cfa:	b085      	sub	sp, #20
  403cfc:	af00      	add	r7, sp, #0
  403cfe:	6078      	str	r0, [r7, #4]
	uint32_t startTime = systemTimestamp;
  403d00:	4b08      	ldr	r3, [pc, #32]	; (403d24 <delay_ms+0x2c>)
  403d02:	681b      	ldr	r3, [r3, #0]
  403d04:	60fb      	str	r3, [r7, #12]

	while(systemTimestamp < (startTime + period_ms))
  403d06:	bf00      	nop
  403d08:	68fa      	ldr	r2, [r7, #12]
  403d0a:	687b      	ldr	r3, [r7, #4]
  403d0c:	441a      	add	r2, r3
  403d0e:	4b05      	ldr	r3, [pc, #20]	; (403d24 <delay_ms+0x2c>)
  403d10:	681b      	ldr	r3, [r3, #0]
  403d12:	429a      	cmp	r2, r3
  403d14:	d8f8      	bhi.n	403d08 <delay_ms+0x10>
	{

	}
	return 0;
  403d16:	2300      	movs	r3, #0
}
  403d18:	4618      	mov	r0, r3
  403d1a:	3714      	adds	r7, #20
  403d1c:	46bd      	mov	sp, r7
  403d1e:	bc80      	pop	{r7}
  403d20:	4770      	bx	lr
  403d22:	bf00      	nop
  403d24:	200004bc 	.word	0x200004bc

00403d28 <twi_write_imu>:

//twi write function that has parameters compatible with the IMU's drivers
char twi_write_imu (unsigned char slave_addr, unsigned char reg_addr, unsigned char length, unsigned char const *data)
{
  403d28:	b480      	push	{r7}
  403d2a:	b085      	sub	sp, #20
  403d2c:	af00      	add	r7, sp, #0
  403d2e:	603b      	str	r3, [r7, #0]
  403d30:	4603      	mov	r3, r0
  403d32:	71fb      	strb	r3, [r7, #7]
  403d34:	460b      	mov	r3, r1
  403d36:	71bb      	strb	r3, [r7, #6]
  403d38:	4613      	mov	r3, r2
  403d3a:	717b      	strb	r3, [r7, #5]
	//note txcomp MUST = 1 before writing
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
  403d3c:	4a24      	ldr	r2, [pc, #144]	; (403dd0 <twi_write_imu+0xa8>)
  403d3e:	4b24      	ldr	r3, [pc, #144]	; (403dd0 <twi_write_imu+0xa8>)
  403d40:	681b      	ldr	r3, [r3, #0]
  403d42:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403d46:	6013      	str	r3, [r2, #0]
	REG_TWI2_MMR
  403d48:	4a22      	ldr	r2, [pc, #136]	; (403dd4 <twi_write_imu+0xac>)
		=	TWI_MMR_DADR(slave_addr)		//Slave device address
  403d4a:	79fb      	ldrb	r3, [r7, #7]
  403d4c:	041b      	lsls	r3, r3, #16
  403d4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
		|	TWI_MMR_IADRSZ_1_BYTE;				//Register address byte length (0-3)
  403d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
char twi_write_imu (unsigned char slave_addr, unsigned char reg_addr, unsigned char length, unsigned char const *data)
{
	//note txcomp MUST = 1 before writing
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
	REG_TWI2_MMR
		=	TWI_MMR_DADR(slave_addr)		//Slave device address
  403d56:	6013      	str	r3, [r2, #0]
		|	TWI_MMR_IADRSZ_1_BYTE;				//Register address byte length (0-3)
	REG_TWI2_IADR = reg_addr;					//set up address to write to
  403d58:	4a1f      	ldr	r2, [pc, #124]	; (403dd8 <twi_write_imu+0xb0>)
  403d5a:	79bb      	ldrb	r3, [r7, #6]
  403d5c:	6013      	str	r3, [r2, #0]

	if(length == 1)
  403d5e:	797b      	ldrb	r3, [r7, #5]
  403d60:	2b01      	cmp	r3, #1
  403d62:	d10e      	bne.n	403d82 <twi_write_imu+0x5a>
	{
		REG_TWI2_THR = data[0];						//set up data to transmit
  403d64:	4a1d      	ldr	r2, [pc, #116]	; (403ddc <twi_write_imu+0xb4>)
  403d66:	683b      	ldr	r3, [r7, #0]
  403d68:	781b      	ldrb	r3, [r3, #0]
  403d6a:	6013      	str	r3, [r2, #0]
		REG_TWI2_CR = TWI_CR_STOP;					// Send a stop bit
  403d6c:	4b18      	ldr	r3, [pc, #96]	; (403dd0 <twi_write_imu+0xa8>)
  403d6e:	2202      	movs	r2, #2
  403d70:	601a      	str	r2, [r3, #0]
		while(!IMU_TXRDY);								//while Transmit Holding Register not ready. wait.
  403d72:	bf00      	nop
  403d74:	4b1a      	ldr	r3, [pc, #104]	; (403de0 <twi_write_imu+0xb8>)
  403d76:	681b      	ldr	r3, [r3, #0]
  403d78:	f003 0304 	and.w	r3, r3, #4
  403d7c:	2b00      	cmp	r3, #0
  403d7e:	d0f9      	beq.n	403d74 <twi_write_imu+0x4c>
  403d80:	e019      	b.n	403db6 <twi_write_imu+0x8e>
	} else {
		for(unsigned char b = 0; b < length; b++)	//Send data bit by bit until data length is reached
  403d82:	2300      	movs	r3, #0
  403d84:	73fb      	strb	r3, [r7, #15]
  403d86:	e00f      	b.n	403da8 <twi_write_imu+0x80>
		{
			REG_TWI2_THR = data[b];					//set up data to transmit
  403d88:	4914      	ldr	r1, [pc, #80]	; (403ddc <twi_write_imu+0xb4>)
  403d8a:	7bfb      	ldrb	r3, [r7, #15]
  403d8c:	683a      	ldr	r2, [r7, #0]
  403d8e:	4413      	add	r3, r2
  403d90:	781b      	ldrb	r3, [r3, #0]
  403d92:	600b      	str	r3, [r1, #0]
			while(!IMU_TXRDY);							//while Transmit Holding Register not ready. wait.
  403d94:	bf00      	nop
  403d96:	4b12      	ldr	r3, [pc, #72]	; (403de0 <twi_write_imu+0xb8>)
  403d98:	681b      	ldr	r3, [r3, #0]
  403d9a:	f003 0304 	and.w	r3, r3, #4
  403d9e:	2b00      	cmp	r3, #0
  403da0:	d0f9      	beq.n	403d96 <twi_write_imu+0x6e>
	{
		REG_TWI2_THR = data[0];						//set up data to transmit
		REG_TWI2_CR = TWI_CR_STOP;					// Send a stop bit
		while(!IMU_TXRDY);								//while Transmit Holding Register not ready. wait.
	} else {
		for(unsigned char b = 0; b < length; b++)	//Send data bit by bit until data length is reached
  403da2:	7bfb      	ldrb	r3, [r7, #15]
  403da4:	3301      	adds	r3, #1
  403da6:	73fb      	strb	r3, [r7, #15]
  403da8:	7bfa      	ldrb	r2, [r7, #15]
  403daa:	797b      	ldrb	r3, [r7, #5]
  403dac:	429a      	cmp	r2, r3
  403dae:	d3eb      	bcc.n	403d88 <twi_write_imu+0x60>
		{
			REG_TWI2_THR = data[b];					//set up data to transmit
			while(!IMU_TXRDY);							//while Transmit Holding Register not ready. wait.
		}
	
		REG_TWI2_CR = TWI_CR_STOP;					// Send a stop bit
  403db0:	4b07      	ldr	r3, [pc, #28]	; (403dd0 <twi_write_imu+0xa8>)
  403db2:	2202      	movs	r2, #2
  403db4:	601a      	str	r2, [r3, #0]
	}
	while(!IMU_TXCOMP);								//while transmit not complete. wait.
  403db6:	bf00      	nop
  403db8:	4b09      	ldr	r3, [pc, #36]	; (403de0 <twi_write_imu+0xb8>)
  403dba:	681b      	ldr	r3, [r3, #0]
  403dbc:	f003 0301 	and.w	r3, r3, #1
  403dc0:	2b00      	cmp	r3, #0
  403dc2:	d0f9      	beq.n	403db8 <twi_write_imu+0x90>
	return 0;
  403dc4:	2300      	movs	r3, #0
}
  403dc6:	4618      	mov	r0, r3
  403dc8:	3714      	adds	r7, #20
  403dca:	46bd      	mov	sp, r7
  403dcc:	bc80      	pop	{r7}
  403dce:	4770      	bx	lr
  403dd0:	40040000 	.word	0x40040000
  403dd4:	40040004 	.word	0x40040004
  403dd8:	4004000c 	.word	0x4004000c
  403ddc:	40040034 	.word	0x40040034
  403de0:	40040020 	.word	0x40040020

00403de4 <twi_read_imu>:

//twi read function that has parameters compatible with the IMU's drivers
char twi_read_imu(unsigned char slave_addr, unsigned char reg_addr, unsigned char length, unsigned char *data)
{
  403de4:	b480      	push	{r7}
  403de6:	b085      	sub	sp, #20
  403de8:	af00      	add	r7, sp, #0
  403dea:	603b      	str	r3, [r7, #0]
  403dec:	4603      	mov	r3, r0
  403dee:	71fb      	strb	r3, [r7, #7]
  403df0:	460b      	mov	r3, r1
  403df2:	71bb      	strb	r3, [r7, #6]
  403df4:	4613      	mov	r3, r2
  403df6:	717b      	strb	r3, [r7, #5]
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
  403df8:	4a2d      	ldr	r2, [pc, #180]	; (403eb0 <twi_read_imu+0xcc>)
  403dfa:	4b2d      	ldr	r3, [pc, #180]	; (403eb0 <twi_read_imu+0xcc>)
  403dfc:	681b      	ldr	r3, [r3, #0]
  403dfe:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403e02:	6013      	str	r3, [r2, #0]
	REG_TWI2_MMR
  403e04:	4a2b      	ldr	r2, [pc, #172]	; (403eb4 <twi_read_imu+0xd0>)
		=	TWI_MMR_DADR(slave_addr)		//Slave device address
  403e06:	79fb      	ldrb	r3, [r7, #7]
  403e08:	041b      	lsls	r3, r3, #16
  403e0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
		|	(TWI_MMR_MREAD)						//Set to read from register
		|	TWI_MMR_IADRSZ_1_BYTE;				//Register addr byte length (0-3)
  403e0e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
//twi read function that has parameters compatible with the IMU's drivers
char twi_read_imu(unsigned char slave_addr, unsigned char reg_addr, unsigned char length, unsigned char *data)
{
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
	REG_TWI2_MMR
		=	TWI_MMR_DADR(slave_addr)		//Slave device address
  403e12:	6013      	str	r3, [r2, #0]
		|	(TWI_MMR_MREAD)						//Set to read from register
		|	TWI_MMR_IADRSZ_1_BYTE;				//Register addr byte length (0-3)
	REG_TWI2_IADR = reg_addr;					//set up address to read from
  403e14:	4a28      	ldr	r2, [pc, #160]	; (403eb8 <twi_read_imu+0xd4>)
  403e16:	79bb      	ldrb	r3, [r7, #6]
  403e18:	6013      	str	r3, [r2, #0]
	
	if (length == 1)							//If only ready one byte, then START and STOP bits need to be set at the same time
  403e1a:	797b      	ldrb	r3, [r7, #5]
  403e1c:	2b01      	cmp	r3, #1
  403e1e:	d117      	bne.n	403e50 <twi_read_imu+0x6c>
	{
		REG_TWI2_CR
  403e20:	4b23      	ldr	r3, [pc, #140]	; (403eb0 <twi_read_imu+0xcc>)
			=	TWI_CR_START
  403e22:	2203      	movs	r2, #3
  403e24:	601a      	str	r2, [r3, #0]
			|	TWI_CR_STOP;					//Send a START and STOP condition as required (single byte read)	
		while(!IMU_RXRDY);							//while Receive Holding Register not ready. wait.
  403e26:	bf00      	nop
  403e28:	4b24      	ldr	r3, [pc, #144]	; (403ebc <twi_read_imu+0xd8>)
  403e2a:	681b      	ldr	r3, [r3, #0]
  403e2c:	f003 0302 	and.w	r3, r3, #2
  403e30:	2b00      	cmp	r3, #0
  403e32:	d0f9      	beq.n	403e28 <twi_read_imu+0x44>
		data[0] = REG_TWI2_RHR;					//store data received		
  403e34:	4b22      	ldr	r3, [pc, #136]	; (403ec0 <twi_read_imu+0xdc>)
  403e36:	681b      	ldr	r3, [r3, #0]
  403e38:	b2da      	uxtb	r2, r3
  403e3a:	683b      	ldr	r3, [r7, #0]
  403e3c:	701a      	strb	r2, [r3, #0]
		while(!IMU_TXCOMP);							//while transmit not complete. wait.
  403e3e:	bf00      	nop
  403e40:	4b1e      	ldr	r3, [pc, #120]	; (403ebc <twi_read_imu+0xd8>)
  403e42:	681b      	ldr	r3, [r3, #0]
  403e44:	f003 0301 	and.w	r3, r3, #1
  403e48:	2b00      	cmp	r3, #0
  403e4a:	d0f9      	beq.n	403e40 <twi_read_imu+0x5c>
		return 0;
  403e4c:	2300      	movs	r3, #0
  403e4e:	e02a      	b.n	403ea6 <twi_read_imu+0xc2>
	} else {
		REG_TWI2_CR =	TWI_CR_START;			//Send start bit
  403e50:	4b17      	ldr	r3, [pc, #92]	; (403eb0 <twi_read_imu+0xcc>)
  403e52:	2201      	movs	r2, #1
  403e54:	601a      	str	r2, [r3, #0]
		for(unsigned char b = 0; b < length; b++)
  403e56:	2300      	movs	r3, #0
  403e58:	73fb      	strb	r3, [r7, #15]
  403e5a:	e018      	b.n	403e8e <twi_read_imu+0xaa>
		{
			while(!IMU_RXRDY);
  403e5c:	bf00      	nop
  403e5e:	4b17      	ldr	r3, [pc, #92]	; (403ebc <twi_read_imu+0xd8>)
  403e60:	681b      	ldr	r3, [r3, #0]
  403e62:	f003 0302 	and.w	r3, r3, #2
  403e66:	2b00      	cmp	r3, #0
  403e68:	d0f9      	beq.n	403e5e <twi_read_imu+0x7a>
			data[b] = REG_TWI2_RHR;
  403e6a:	7bfb      	ldrb	r3, [r7, #15]
  403e6c:	683a      	ldr	r2, [r7, #0]
  403e6e:	4413      	add	r3, r2
  403e70:	4a13      	ldr	r2, [pc, #76]	; (403ec0 <twi_read_imu+0xdc>)
  403e72:	6812      	ldr	r2, [r2, #0]
  403e74:	b2d2      	uxtb	r2, r2
  403e76:	701a      	strb	r2, [r3, #0]
			if(b == length-2)
  403e78:	7bfa      	ldrb	r2, [r7, #15]
  403e7a:	797b      	ldrb	r3, [r7, #5]
  403e7c:	3b02      	subs	r3, #2
  403e7e:	429a      	cmp	r2, r3
  403e80:	d102      	bne.n	403e88 <twi_read_imu+0xa4>
				REG_TWI2_CR =	TWI_CR_STOP;	//Send stop on reception of 2nd to last byte
  403e82:	4b0b      	ldr	r3, [pc, #44]	; (403eb0 <twi_read_imu+0xcc>)
  403e84:	2202      	movs	r2, #2
  403e86:	601a      	str	r2, [r3, #0]
		data[0] = REG_TWI2_RHR;					//store data received		
		while(!IMU_TXCOMP);							//while transmit not complete. wait.
		return 0;
	} else {
		REG_TWI2_CR =	TWI_CR_START;			//Send start bit
		for(unsigned char b = 0; b < length; b++)
  403e88:	7bfb      	ldrb	r3, [r7, #15]
  403e8a:	3301      	adds	r3, #1
  403e8c:	73fb      	strb	r3, [r7, #15]
  403e8e:	7bfa      	ldrb	r2, [r7, #15]
  403e90:	797b      	ldrb	r3, [r7, #5]
  403e92:	429a      	cmp	r2, r3
  403e94:	d3e2      	bcc.n	403e5c <twi_read_imu+0x78>
			while(!IMU_RXRDY);
			data[b] = REG_TWI2_RHR;
			if(b == length-2)
				REG_TWI2_CR =	TWI_CR_STOP;	//Send stop on reception of 2nd to last byte
		}
		while(!IMU_TXCOMP);							//while transmit not complete. wait.
  403e96:	bf00      	nop
  403e98:	4b08      	ldr	r3, [pc, #32]	; (403ebc <twi_read_imu+0xd8>)
  403e9a:	681b      	ldr	r3, [r3, #0]
  403e9c:	f003 0301 	and.w	r3, r3, #1
  403ea0:	2b00      	cmp	r3, #0
  403ea2:	d0f9      	beq.n	403e98 <twi_read_imu+0xb4>
	}
	return 0;
  403ea4:	2300      	movs	r3, #0
}
  403ea6:	4618      	mov	r0, r3
  403ea8:	3714      	adds	r7, #20
  403eaa:	46bd      	mov	sp, r7
  403eac:	bc80      	pop	{r7}
  403eae:	4770      	bx	lr
  403eb0:	40040000 	.word	0x40040000
  403eb4:	40040004 	.word	0x40040004
  403eb8:	4004000c 	.word	0x4004000c
  403ebc:	40040020 	.word	0x40040020
  403ec0:	40040030 	.word	0x40040030

00403ec4 <TC0_Handler>:

//Timer0: systemTimestamp is a counter that increments once every ms. It is used for timing in the DMP driver
//This interrupt is also currently attempting to read the IMUs FIFO buffer at 200Hz
void TC0_Handler()
{
  403ec4:	b590      	push	{r4, r7, lr}
  403ec6:	b085      	sub	sp, #20
  403ec8:	af02      	add	r7, sp, #8
	//The interrupt handler for timer counter 0
	//Triggers every 1ms
	if(REG_TC0_SR0 & TC_SR_CPCS)									//If RC compare flag
  403eca:	4b22      	ldr	r3, [pc, #136]	; (403f54 <TC0_Handler+0x90>)
  403ecc:	681b      	ldr	r3, [r3, #0]
  403ece:	f003 0310 	and.w	r3, r3, #16
  403ed2:	2b00      	cmp	r3, #0
  403ed4:	d03a      	beq.n	403f4c <TC0_Handler+0x88>
	{
		systemTimestamp++;
  403ed6:	4b20      	ldr	r3, [pc, #128]	; (403f58 <TC0_Handler+0x94>)
  403ed8:	681b      	ldr	r3, [r3, #0]
  403eda:	3301      	adds	r3, #1
  403edc:	4a1e      	ldr	r2, [pc, #120]	; (403f58 <TC0_Handler+0x94>)
  403ede:	6013      	str	r3, [r2, #0]
		if(systemTimestamp >= (blinker + 1000))						//Blink LED so we can see system is active
  403ee0:	4b1e      	ldr	r3, [pc, #120]	; (403f5c <TC0_Handler+0x98>)
  403ee2:	681b      	ldr	r3, [r3, #0]
  403ee4:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
  403ee8:	4b1b      	ldr	r3, [pc, #108]	; (403f58 <TC0_Handler+0x94>)
  403eea:	681b      	ldr	r3, [r3, #0]
  403eec:	429a      	cmp	r2, r3
  403eee:	d816      	bhi.n	403f1e <TC0_Handler+0x5a>
		{
			blinker = systemTimestamp;
  403ef0:	4b19      	ldr	r3, [pc, #100]	; (403f58 <TC0_Handler+0x94>)
  403ef2:	681b      	ldr	r3, [r3, #0]
  403ef4:	4a19      	ldr	r2, [pc, #100]	; (403f5c <TC0_Handler+0x98>)
  403ef6:	6013      	str	r3, [r2, #0]
			if(REG_PIOA_ODSR & LED1) REG_PIOA_CODR |= LED1; else REG_PIOA_SODR |= LED1;
  403ef8:	4b19      	ldr	r3, [pc, #100]	; (403f60 <TC0_Handler+0x9c>)
  403efa:	681b      	ldr	r3, [r3, #0]
  403efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  403f00:	2b00      	cmp	r3, #0
  403f02:	d006      	beq.n	403f12 <TC0_Handler+0x4e>
  403f04:	4a17      	ldr	r2, [pc, #92]	; (403f64 <TC0_Handler+0xa0>)
  403f06:	4b17      	ldr	r3, [pc, #92]	; (403f64 <TC0_Handler+0xa0>)
  403f08:	681b      	ldr	r3, [r3, #0]
  403f0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  403f0e:	6013      	str	r3, [r2, #0]
  403f10:	e005      	b.n	403f1e <TC0_Handler+0x5a>
  403f12:	4a15      	ldr	r2, [pc, #84]	; (403f68 <TC0_Handler+0xa4>)
  403f14:	4b14      	ldr	r3, [pc, #80]	; (403f68 <TC0_Handler+0xa4>)
  403f16:	681b      	ldr	r3, [r3, #0]
  403f18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  403f1c:	6013      	str	r3, [r2, #0]
		}
		if(systemTimestamp >= (check_IMU_FIFO + 5))						//Read IMUs FIFO every 5ms
  403f1e:	4b13      	ldr	r3, [pc, #76]	; (403f6c <TC0_Handler+0xa8>)
  403f20:	681b      	ldr	r3, [r3, #0]
  403f22:	1d5a      	adds	r2, r3, #5
  403f24:	4b0c      	ldr	r3, [pc, #48]	; (403f58 <TC0_Handler+0x94>)
  403f26:	681b      	ldr	r3, [r3, #0]
  403f28:	429a      	cmp	r2, r3
  403f2a:	d80f      	bhi.n	403f4c <TC0_Handler+0x88>
		{
			check_IMU_FIFO = systemTimestamp;
  403f2c:	4b0a      	ldr	r3, [pc, #40]	; (403f58 <TC0_Handler+0x94>)
  403f2e:	681b      	ldr	r3, [r3, #0]
  403f30:	4a0e      	ldr	r2, [pc, #56]	; (403f6c <TC0_Handler+0xa8>)
  403f32:	6013      	str	r3, [r2, #0]
			int returnVal = dmp_read_fifo(gyro, accel, ptQuat, &sensor_timestamp, &sensors, &more);	// Read the FIFO
  403f34:	4b0e      	ldr	r3, [pc, #56]	; (403f70 <TC0_Handler+0xac>)
  403f36:	681a      	ldr	r2, [r3, #0]
  403f38:	4b0e      	ldr	r3, [pc, #56]	; (403f74 <TC0_Handler+0xb0>)
  403f3a:	9301      	str	r3, [sp, #4]
  403f3c:	4b0e      	ldr	r3, [pc, #56]	; (403f78 <TC0_Handler+0xb4>)
  403f3e:	9300      	str	r3, [sp, #0]
  403f40:	4b0e      	ldr	r3, [pc, #56]	; (403f7c <TC0_Handler+0xb8>)
  403f42:	490f      	ldr	r1, [pc, #60]	; (403f80 <TC0_Handler+0xbc>)
  403f44:	480f      	ldr	r0, [pc, #60]	; (403f84 <TC0_Handler+0xc0>)
  403f46:	4c10      	ldr	r4, [pc, #64]	; (403f88 <TC0_Handler+0xc4>)
  403f48:	47a0      	blx	r4
  403f4a:	6078      	str	r0, [r7, #4]
		}
	}
}
  403f4c:	bf00      	nop
  403f4e:	370c      	adds	r7, #12
  403f50:	46bd      	mov	sp, r7
  403f52:	bd90      	pop	{r4, r7, pc}
  403f54:	40010020 	.word	0x40010020
  403f58:	200004bc 	.word	0x200004bc
  403f5c:	200004c0 	.word	0x200004c0
  403f60:	400e0e38 	.word	0x400e0e38
  403f64:	400e0e34 	.word	0x400e0e34
  403f68:	400e0e30 	.word	0x400e0e30
  403f6c:	200004c4 	.word	0x200004c4
  403f70:	2000003c 	.word	0x2000003c
  403f74:	20000fc6 	.word	0x20000fc6
  403f78:	20000fe4 	.word	0x20000fe4
  403f7c:	20000fe0 	.word	0x20000fe0
  403f80:	20000fb8 	.word	0x20000fb8
  403f84:	20000fc0 	.word	0x20000fc0
  403f88:	00402e81 	.word	0x00402e81

00403f8c <ADC_ReadCH>:

#include "robotdefines.h"

/******** ADC Read Channel Read ********/
uint16_t ADC_ReadCH(uint8_t channel)
{
  403f8c:	b480      	push	{r7}
  403f8e:	b085      	sub	sp, #20
  403f90:	af00      	add	r7, sp, #0
  403f92:	4603      	mov	r3, r0
  403f94:	71fb      	strb	r3, [r7, #7]
	uint16_t ADCdata;
	REG_ADC_CHER = (1<<channel);		//Enables ADC on specified channel
  403f96:	4a11      	ldr	r2, [pc, #68]	; (403fdc <ADC_ReadCH+0x50>)
  403f98:	79fb      	ldrb	r3, [r7, #7]
  403f9a:	2101      	movs	r1, #1
  403f9c:	fa01 f303 	lsl.w	r3, r1, r3
  403fa0:	6013      	str	r3, [r2, #0]
	ADCstartconversion;					//Start conversion
  403fa2:	4a0f      	ldr	r2, [pc, #60]	; (403fe0 <ADC_ReadCH+0x54>)
  403fa4:	4b0e      	ldr	r3, [pc, #56]	; (403fe0 <ADC_ReadCH+0x54>)
  403fa6:	681b      	ldr	r3, [r3, #0]
  403fa8:	f043 0302 	orr.w	r3, r3, #2
  403fac:	6013      	str	r3, [r2, #0]
	while(!(REG_ADC_ISR & (1<<24)));	//Wait for DRDY flag
  403fae:	bf00      	nop
  403fb0:	4b0c      	ldr	r3, [pc, #48]	; (403fe4 <ADC_ReadCH+0x58>)
  403fb2:	681b      	ldr	r3, [r3, #0]
  403fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  403fb8:	2b00      	cmp	r3, #0
  403fba:	d0f9      	beq.n	403fb0 <ADC_ReadCH+0x24>
	REG_ADC_CHDR = (1<<channel);		//Disable channel on completion
  403fbc:	4a0a      	ldr	r2, [pc, #40]	; (403fe8 <ADC_ReadCH+0x5c>)
  403fbe:	79fb      	ldrb	r3, [r7, #7]
  403fc0:	2101      	movs	r1, #1
  403fc2:	fa01 f303 	lsl.w	r3, r1, r3
  403fc6:	6013      	str	r3, [r2, #0]
	ADCdata = REG_ADC_LCDR;				//Read data from last converted data register
  403fc8:	4b08      	ldr	r3, [pc, #32]	; (403fec <ADC_ReadCH+0x60>)
  403fca:	681b      	ldr	r3, [r3, #0]
  403fcc:	81fb      	strh	r3, [r7, #14]
	return(ADCdata);
  403fce:	89fb      	ldrh	r3, [r7, #14]
}
  403fd0:	4618      	mov	r0, r3
  403fd2:	3714      	adds	r7, #20
  403fd4:	46bd      	mov	sp, r7
  403fd6:	bc80      	pop	{r7}
  403fd8:	4770      	bx	lr
  403fda:	bf00      	nop
  403fdc:	40038010 	.word	0x40038010
  403fe0:	40038000 	.word	0x40038000
  403fe4:	40038030 	.word	0x40038030
  403fe8:	40038014 	.word	0x40038014
  403fec:	40038020 	.word	0x40038020

00403ff0 <twi0Init>:

#include "twi0_interface.h"


void twi0Init(void)
{
  403ff0:	b480      	push	{r7}
  403ff2:	b083      	sub	sp, #12
  403ff4:	af00      	add	r7, sp, #0
	/******** TWI0 SETUP ********/
	REG_PMC_PCER0 |= (1<<19);				//Enable clock access to TWI0, Peripheral TWI0_ID = 19
  403ff6:	4a1e      	ldr	r2, [pc, #120]	; (404070 <twi0Init+0x80>)
  403ff8:	4b1d      	ldr	r3, [pc, #116]	; (404070 <twi0Init+0x80>)
  403ffa:	681b      	ldr	r3, [r3, #0]
  403ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  404000:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR  |= (1<<3);				// Enable peripheralA control of PA3 (TWD0)
  404002:	4a1c      	ldr	r2, [pc, #112]	; (404074 <twi0Init+0x84>)
  404004:	4b1b      	ldr	r3, [pc, #108]	; (404074 <twi0Init+0x84>)
  404006:	681b      	ldr	r3, [r3, #0]
  404008:	f043 0308 	orr.w	r3, r3, #8
  40400c:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR  |= (1<<4);				// Enable peripheralA control of PA4 (TWCK0)
  40400e:	4a19      	ldr	r2, [pc, #100]	; (404074 <twi0Init+0x84>)
  404010:	4b18      	ldr	r3, [pc, #96]	; (404074 <twi0Init+0x84>)
  404012:	681b      	ldr	r3, [r3, #0]
  404014:	f043 0310 	orr.w	r3, r3, #16
  404018:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR = (1<<7);					//Software Reset
  40401a:	4b17      	ldr	r3, [pc, #92]	; (404078 <twi0Init+0x88>)
  40401c:	2280      	movs	r2, #128	; 0x80
  40401e:	601a      	str	r2, [r3, #0]
	/* TWI0 Clock Waveform Setup */
	//NOTE: A high period of 0.6uSec and a low period of 1.3uSec is required by both the Proximity and Light Sensors
	uint8_t CKDIV, CHDIV, CLDIV;
	CKDIV = 1;
  404020:	2301      	movs	r3, #1
  404022:	71fb      	strb	r3, [r7, #7]
	CLDIV = 63;								//x=63 1.3uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
  404024:	233f      	movs	r3, #63	; 0x3f
  404026:	71bb      	strb	r3, [r7, #6]
	CHDIV = 28;								//x=28, 0.6uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
  404028:	231c      	movs	r3, #28
  40402a:	717b      	strb	r3, [r7, #5]
	REG_TWI0_CWGR |= (CKDIV<<16);			//Clock speed 400000, fast mode
  40402c:	4913      	ldr	r1, [pc, #76]	; (40407c <twi0Init+0x8c>)
  40402e:	4b13      	ldr	r3, [pc, #76]	; (40407c <twi0Init+0x8c>)
  404030:	681b      	ldr	r3, [r3, #0]
  404032:	79fa      	ldrb	r2, [r7, #7]
  404034:	0412      	lsls	r2, r2, #16
  404036:	4313      	orrs	r3, r2
  404038:	600b      	str	r3, [r1, #0]
	REG_TWI0_CWGR |= (CHDIV<<8);			//Clock high period  0.6uSec
  40403a:	4910      	ldr	r1, [pc, #64]	; (40407c <twi0Init+0x8c>)
  40403c:	4b0f      	ldr	r3, [pc, #60]	; (40407c <twi0Init+0x8c>)
  40403e:	681b      	ldr	r3, [r3, #0]
  404040:	797a      	ldrb	r2, [r7, #5]
  404042:	0212      	lsls	r2, r2, #8
  404044:	4313      	orrs	r3, r2
  404046:	600b      	str	r3, [r1, #0]
	REG_TWI0_CWGR |= (CLDIV<<0);			//Clock low period 1.3uSec
  404048:	490c      	ldr	r1, [pc, #48]	; (40407c <twi0Init+0x8c>)
  40404a:	4b0c      	ldr	r3, [pc, #48]	; (40407c <twi0Init+0x8c>)
  40404c:	681a      	ldr	r2, [r3, #0]
  40404e:	79bb      	ldrb	r3, [r7, #6]
  404050:	4313      	orrs	r3, r2
  404052:	600b      	str	r3, [r1, #0]
	REG_TWI0_CR |= (1<<2)|(1<<5);			//Master mode enabled, Slave disabled
  404054:	4a08      	ldr	r2, [pc, #32]	; (404078 <twi0Init+0x88>)
  404056:	4b08      	ldr	r3, [pc, #32]	; (404078 <twi0Init+0x88>)
  404058:	681b      	ldr	r3, [r3, #0]
  40405a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  40405e:	6013      	str	r3, [r2, #0]
	uint8_t dummy = REG_TWI0_RHR;			//Ensure RXRDY flag is cleared
  404060:	4b07      	ldr	r3, [pc, #28]	; (404080 <twi0Init+0x90>)
  404062:	681b      	ldr	r3, [r3, #0]
  404064:	713b      	strb	r3, [r7, #4]
}
  404066:	bf00      	nop
  404068:	370c      	adds	r7, #12
  40406a:	46bd      	mov	sp, r7
  40406c:	bc80      	pop	{r7}
  40406e:	4770      	bx	lr
  404070:	400e0410 	.word	0x400e0410
  404074:	400e0e04 	.word	0x400e0e04
  404078:	40018000 	.word	0x40018000
  40407c:	40018010 	.word	0x40018010
  404080:	40018030 	.word	0x40018030

00404084 <FastChargeController_Setup>:

/******** Fast Charge Controller Registry Setup ********/
void FastChargeController_Setup(void)
{
  404084:	b580      	push	{r7, lr}
  404086:	af00      	add	r7, sp, #0
	//Chip disable (CD) line on PB2 set to enable
	REG_PIOB_PER |= (1<<2);		//Give control of PB2 to PIOB controller
  404088:	4a11      	ldr	r2, [pc, #68]	; (4040d0 <FastChargeController_Setup+0x4c>)
  40408a:	4b11      	ldr	r3, [pc, #68]	; (4040d0 <FastChargeController_Setup+0x4c>)
  40408c:	681b      	ldr	r3, [r3, #0]
  40408e:	f043 0304 	orr.w	r3, r3, #4
  404092:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<2);		//Set PB2 as an output
  404094:	4a0f      	ldr	r2, [pc, #60]	; (4040d4 <FastChargeController_Setup+0x50>)
  404096:	4b0f      	ldr	r3, [pc, #60]	; (4040d4 <FastChargeController_Setup+0x50>)
  404098:	681b      	ldr	r3, [r3, #0]
  40409a:	f043 0304 	orr.w	r3, r3, #4
  40409e:	6013      	str	r3, [r2, #0]
	REG_PIOB_CODR |= (1<<2);	//Set PB2 to low
  4040a0:	4a0d      	ldr	r2, [pc, #52]	; (4040d8 <FastChargeController_Setup+0x54>)
  4040a2:	4b0d      	ldr	r3, [pc, #52]	; (4040d8 <FastChargeController_Setup+0x54>)
  4040a4:	681b      	ldr	r3, [r3, #0]
  4040a6:	f043 0304 	orr.w	r3, r3, #4
  4040aa:	6013      	str	r3, [r2, #0]
	TWI0_Write(TWI0_FastChargeChipAddress, controlReg, initControl);	// Ensures that CE bit is clear in case safety timer has gone off in previous charge.
  4040ac:	2204      	movs	r2, #4
  4040ae:	2102      	movs	r1, #2
  4040b0:	206b      	movs	r0, #107	; 0x6b
  4040b2:	4b0a      	ldr	r3, [pc, #40]	; (4040dc <FastChargeController_Setup+0x58>)
  4040b4:	4798      	blx	r3
	TWI0_Write(TWI0_FastChargeChipAddress, battVReg, initBattV);		// Vreg = 4.0v, input current = 2.5A
  4040b6:	2266      	movs	r2, #102	; 0x66
  4040b8:	2103      	movs	r1, #3
  4040ba:	206b      	movs	r0, #107	; 0x6b
  4040bc:	4b07      	ldr	r3, [pc, #28]	; (4040dc <FastChargeController_Setup+0x58>)
  4040be:	4798      	blx	r3
	TWI0_Write(TWI0_FastChargeChipAddress, chargeReg, initCharge);		// charge current set to max Ic=2875mA, termination current Iterm=100mA (default)
  4040c0:	22fa      	movs	r2, #250	; 0xfa
  4040c2:	2105      	movs	r1, #5
  4040c4:	206b      	movs	r0, #107	; 0x6b
  4040c6:	4b05      	ldr	r3, [pc, #20]	; (4040dc <FastChargeController_Setup+0x58>)
  4040c8:	4798      	blx	r3
}
  4040ca:	bf00      	nop
  4040cc:	bd80      	pop	{r7, pc}
  4040ce:	bf00      	nop
  4040d0:	400e1000 	.word	0x400e1000
  4040d4:	400e1010 	.word	0x400e1010
  4040d8:	400e1034 	.word	0x400e1034
  4040dc:	004041f9 	.word	0x004041f9

004040e0 <LightSensor_Setup>:

/******** Light Sensor Registry Setup ********/
//White Light Detection Enabled with low lux (40ms integration time), No Trigger, Auto Mode
//Only sets up one light sensor at a time, not both
void LightSensor_Setup(uint8_t channel)
{
  4040e0:	b580      	push	{r7, lr}
  4040e2:	b082      	sub	sp, #8
  4040e4:	af00      	add	r7, sp, #0
  4040e6:	4603      	mov	r3, r0
  4040e8:	71fb      	strb	r3, [r7, #7]
	TWI0_MuxSwitch(channel); //Set multiplexer address to correct device
  4040ea:	79fb      	ldrb	r3, [r7, #7]
  4040ec:	4618      	mov	r0, r3
  4040ee:	4b05      	ldr	r3, [pc, #20]	; (404104 <LightSensor_Setup+0x24>)
  4040f0:	4798      	blx	r3
	TWI0_Write(TWI0_LightSensorAddress, LightSens_Config, LightSens_Auto_LowLux);
  4040f2:	2200      	movs	r2, #0
  4040f4:	2100      	movs	r1, #0
  4040f6:	2010      	movs	r0, #16
  4040f8:	4b03      	ldr	r3, [pc, #12]	; (404108 <LightSensor_Setup+0x28>)
  4040fa:	4798      	blx	r3
}
  4040fc:	bf00      	nop
  4040fe:	3708      	adds	r7, #8
  404100:	46bd      	mov	sp, r7
  404102:	bd80      	pop	{r7, pc}
  404104:	00404191 	.word	0x00404191
  404108:	004041f9 	.word	0x004041f9

0040410c <Proximity_Setup>:

/******** Proximity Sensor Registry Setup ********/
//This function will pass the desired channel to the Multiplexer and setup an *individual* proximity sensor
void Proximity_Setup(uint8_t channel)
{
  40410c:	b580      	push	{r7, lr}
  40410e:	b082      	sub	sp, #8
  404110:	af00      	add	r7, sp, #0
  404112:	4603      	mov	r3, r0
  404114:	71fb      	strb	r3, [r7, #7]
	TWI0_MuxSwitch(channel); //Set multiplexer address to correct device
  404116:	79fb      	ldrb	r3, [r7, #7]
  404118:	4618      	mov	r0, r3
  40411a:	4b0f      	ldr	r3, [pc, #60]	; (404158 <Proximity_Setup+0x4c>)
  40411c:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_Enable, PDisable);			//Disable and Power down
  40411e:	2200      	movs	r2, #0
  404120:	2180      	movs	r1, #128	; 0x80
  404122:	2039      	movs	r0, #57	; 0x39
  404124:	4b0d      	ldr	r3, [pc, #52]	; (40415c <Proximity_Setup+0x50>)
  404126:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_PTime, PTIME);				//Proximity ADC time: 2.73 ms, minimum proximity integration time
  404128:	22ff      	movs	r2, #255	; 0xff
  40412a:	2182      	movs	r1, #130	; 0x82
  40412c:	2039      	movs	r0, #57	; 0x39
  40412e:	4b0b      	ldr	r3, [pc, #44]	; (40415c <Proximity_Setup+0x50>)
  404130:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_PPulse, PPULSE);			//Sets the number of Proximity pulses that the LDR pin will generate during the prox Accum state: (recommended proximity pulse count = 8) PREVIOUSLY HAD BEEN SET TO 0X02
  404132:	2208      	movs	r2, #8
  404134:	218e      	movs	r1, #142	; 0x8e
  404136:	2039      	movs	r0, #57	; 0x39
  404138:	4b08      	ldr	r3, [pc, #32]	; (40415c <Proximity_Setup+0x50>)
  40413a:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_GainControl, PDiode);		//Gain Control register: LED = 100mA, Proximity diode select, Proximity gain x1, recommended settings
  40413c:	2220      	movs	r2, #32
  40413e:	218f      	movs	r1, #143	; 0x8f
  404140:	2039      	movs	r0, #57	; 0x39
  404142:	4b06      	ldr	r3, [pc, #24]	; (40415c <Proximity_Setup+0x50>)
  404144:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_Enable, PEnable);			//Power ON, Proximity Enable
  404146:	2205      	movs	r2, #5
  404148:	2180      	movs	r1, #128	; 0x80
  40414a:	2039      	movs	r0, #57	; 0x39
  40414c:	4b03      	ldr	r3, [pc, #12]	; (40415c <Proximity_Setup+0x50>)
  40414e:	4798      	blx	r3
}
  404150:	bf00      	nop
  404152:	3708      	adds	r7, #8
  404154:	46bd      	mov	sp, r7
  404156:	bd80      	pop	{r7, pc}
  404158:	00404191 	.word	0x00404191
  40415c:	004041f9 	.word	0x004041f9

00404160 <LightSensor_Data_Read>:
}

/******** Light Sensor Data Read ********/
//Retrieves the White Light (16-bit) data from the selected Light Sensor
uint16_t LightSensor_Data_Read(uint8_t channel)
{
  404160:	b580      	push	{r7, lr}
  404162:	b084      	sub	sp, #16
  404164:	af00      	add	r7, sp, #0
  404166:	4603      	mov	r3, r0
  404168:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	TWI0_MuxSwitch(channel);	//Set multiplexer address to correct device
  40416a:	79fb      	ldrb	r3, [r7, #7]
  40416c:	4618      	mov	r0, r3
  40416e:	4b06      	ldr	r3, [pc, #24]	; (404188 <LightSensor_Data_Read+0x28>)
  404170:	4798      	blx	r3
	data = TWI0_ReadDB(TWI0_LightSensorAddress, LightSensorWhite);
  404172:	210b      	movs	r1, #11
  404174:	2010      	movs	r0, #16
  404176:	4b05      	ldr	r3, [pc, #20]	; (40418c <LightSensor_Data_Read+0x2c>)
  404178:	4798      	blx	r3
  40417a:	4603      	mov	r3, r0
  40417c:	81fb      	strh	r3, [r7, #14]
	return data;
  40417e:	89fb      	ldrh	r3, [r7, #14]
}
  404180:	4618      	mov	r0, r3
  404182:	3710      	adds	r7, #16
  404184:	46bd      	mov	sp, r7
  404186:	bd80      	pop	{r7, pc}
  404188:	00404191 	.word	0x00404191
  40418c:	0040427d 	.word	0x0040427d

00404190 <TWI0_MuxSwitch>:

/******** TWI0 Multiplexer Channel Select ********/
//Sets the Multiplexer to desired channel. Can put called by the user but is mostly called by other functions
void TWI0_MuxSwitch(uint8_t channel)
{
  404190:	b480      	push	{r7}
  404192:	b083      	sub	sp, #12
  404194:	af00      	add	r7, sp, #0
  404196:	4603      	mov	r3, r0
  404198:	71fb      	strb	r3, [r7, #7]
	REG_TWI0_CR |= (1<<2)|(1<<5);			//Master mode enabled, Slave disabled
  40419a:	4a13      	ldr	r2, [pc, #76]	; (4041e8 <TWI0_MuxSwitch+0x58>)
  40419c:	4b12      	ldr	r3, [pc, #72]	; (4041e8 <TWI0_MuxSwitch+0x58>)
  40419e:	681b      	ldr	r3, [r3, #0]
  4041a0:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  4041a4:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (TWI0_Mux_Address<<16);	//Set Slave Device address
  4041a6:	4b11      	ldr	r3, [pc, #68]	; (4041ec <TWI0_MuxSwitch+0x5c>)
  4041a8:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
  4041ac:	601a      	str	r2, [r3, #0]
	//No internal address and set to master write mode by default of zero
	REG_TWI0_THR = channel;					//Load THR and writing to THR causes start to be sent
  4041ae:	4a10      	ldr	r2, [pc, #64]	; (4041f0 <TWI0_MuxSwitch+0x60>)
  4041b0:	79fb      	ldrb	r3, [r7, #7]
  4041b2:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR |= (1<<1);					//Set STOP bit after tx
  4041b4:	4a0c      	ldr	r2, [pc, #48]	; (4041e8 <TWI0_MuxSwitch+0x58>)
  4041b6:	4b0c      	ldr	r3, [pc, #48]	; (4041e8 <TWI0_MuxSwitch+0x58>)
  4041b8:	681b      	ldr	r3, [r3, #0]
  4041ba:	f043 0302 	orr.w	r3, r3, #2
  4041be:	6013      	str	r3, [r2, #0]
	while(!(twi0TXRDY));					//wait for start and data to be shifted out of holding register
  4041c0:	bf00      	nop
  4041c2:	4b0c      	ldr	r3, [pc, #48]	; (4041f4 <TWI0_MuxSwitch+0x64>)
  4041c4:	681b      	ldr	r3, [r3, #0]
  4041c6:	f003 0304 	and.w	r3, r3, #4
  4041ca:	2b00      	cmp	r3, #0
  4041cc:	d0f9      	beq.n	4041c2 <TWI0_MuxSwitch+0x32>
	while(!(twi0TXCOMP));					//Communication complete, holding and shifting registers empty, Stop sent
  4041ce:	bf00      	nop
  4041d0:	4b08      	ldr	r3, [pc, #32]	; (4041f4 <TWI0_MuxSwitch+0x64>)
  4041d2:	681b      	ldr	r3, [r3, #0]
  4041d4:	f003 0301 	and.w	r3, r3, #1
  4041d8:	2b00      	cmp	r3, #0
  4041da:	d0f9      	beq.n	4041d0 <TWI0_MuxSwitch+0x40>
}
  4041dc:	bf00      	nop
  4041de:	370c      	adds	r7, #12
  4041e0:	46bd      	mov	sp, r7
  4041e2:	bc80      	pop	{r7}
  4041e4:	4770      	bx	lr
  4041e6:	bf00      	nop
  4041e8:	40018000 	.word	0x40018000
  4041ec:	40018004 	.word	0x40018004
  4041f0:	40018034 	.word	0x40018034
  4041f4:	40018020 	.word	0x40018020

004041f8 <TWI0_Write>:
	return data;
}

/******** TWI0 Write ********/
void TWI0_Write(uint8_t SlaveAddress, uint8_t intAddress, uint8_t Data)
{
  4041f8:	b480      	push	{r7}
  4041fa:	b083      	sub	sp, #12
  4041fc:	af00      	add	r7, sp, #0
  4041fe:	4603      	mov	r3, r0
  404200:	71fb      	strb	r3, [r7, #7]
  404202:	460b      	mov	r3, r1
  404204:	71bb      	strb	r3, [r7, #6]
  404206:	4613      	mov	r3, r2
  404208:	717b      	strb	r3, [r7, #5]
	REG_TWI0_CR |= (1<<2)|(1<<5);		//Enable master mode and disable slave mode
  40420a:	4a17      	ldr	r2, [pc, #92]	; (404268 <TWI0_Write+0x70>)
  40420c:	4b16      	ldr	r3, [pc, #88]	; (404268 <TWI0_Write+0x70>)
  40420e:	681b      	ldr	r3, [r3, #0]
  404210:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  404214:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (SlaveAddress<<16);	//Slave address (eg. Mux or Fast Charge Chip)
  404216:	4a15      	ldr	r2, [pc, #84]	; (40426c <TWI0_Write+0x74>)
  404218:	79fb      	ldrb	r3, [r7, #7]
  40421a:	041b      	lsls	r3, r3, #16
  40421c:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR |= (1<<8);				//Set one-byte internal device address
  40421e:	4a13      	ldr	r2, [pc, #76]	; (40426c <TWI0_Write+0x74>)
  404220:	4b12      	ldr	r3, [pc, #72]	; (40426c <TWI0_Write+0x74>)
  404222:	681b      	ldr	r3, [r3, #0]
  404224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404228:	6013      	str	r3, [r2, #0]
	//Master write direction default by 0
	REG_TWI0_IADR = intAddress;			//Set up the address to write to
  40422a:	4a11      	ldr	r2, [pc, #68]	; (404270 <TWI0_Write+0x78>)
  40422c:	79bb      	ldrb	r3, [r7, #6]
  40422e:	6013      	str	r3, [r2, #0]
	REG_TWI0_THR = Data;				//Load the transmit holding register with data to send (start bit is also sent)
  404230:	4a10      	ldr	r2, [pc, #64]	; (404274 <TWI0_Write+0x7c>)
  404232:	797b      	ldrb	r3, [r7, #5]
  404234:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR |= (1<<1);				//Set the STOP bit
  404236:	4a0c      	ldr	r2, [pc, #48]	; (404268 <TWI0_Write+0x70>)
  404238:	4b0b      	ldr	r3, [pc, #44]	; (404268 <TWI0_Write+0x70>)
  40423a:	681b      	ldr	r3, [r3, #0]
  40423c:	f043 0302 	orr.w	r3, r3, #2
  404240:	6013      	str	r3, [r2, #0]
	while(!(twi0TXRDY));				//while Transmit Holding Register not ready. wait.
  404242:	bf00      	nop
  404244:	4b0c      	ldr	r3, [pc, #48]	; (404278 <TWI0_Write+0x80>)
  404246:	681b      	ldr	r3, [r3, #0]
  404248:	f003 0304 	and.w	r3, r3, #4
  40424c:	2b00      	cmp	r3, #0
  40424e:	d0f9      	beq.n	404244 <TWI0_Write+0x4c>
	while(!(twi0TXCOMP));				//while transmit not complete. wait.
  404250:	bf00      	nop
  404252:	4b09      	ldr	r3, [pc, #36]	; (404278 <TWI0_Write+0x80>)
  404254:	681b      	ldr	r3, [r3, #0]
  404256:	f003 0301 	and.w	r3, r3, #1
  40425a:	2b00      	cmp	r3, #0
  40425c:	d0f9      	beq.n	404252 <TWI0_Write+0x5a>
}
  40425e:	bf00      	nop
  404260:	370c      	adds	r7, #12
  404262:	46bd      	mov	sp, r7
  404264:	bc80      	pop	{r7}
  404266:	4770      	bx	lr
  404268:	40018000 	.word	0x40018000
  40426c:	40018004 	.word	0x40018004
  404270:	4001800c 	.word	0x4001800c
  404274:	40018034 	.word	0x40018034
  404278:	40018020 	.word	0x40018020

0040427c <TWI0_ReadDB>:
}

/******** TWI0 Read - Double Byte ********/
//This read function is for peripherals with 16 bits of data and an internal address
uint16_t TWI0_ReadDB(uint8_t SlaveAddress, uint8_t intAddress)
{
  40427c:	b480      	push	{r7}
  40427e:	b085      	sub	sp, #20
  404280:	af00      	add	r7, sp, #0
  404282:	4603      	mov	r3, r0
  404284:	460a      	mov	r2, r1
  404286:	71fb      	strb	r3, [r7, #7]
  404288:	4613      	mov	r3, r2
  40428a:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;
	uint16_t data;
	REG_TWI0_CR |= (1<<2)|(1<<5);		//Enable master mode and disable slave mode
  40428c:	4a26      	ldr	r2, [pc, #152]	; (404328 <TWI0_ReadDB+0xac>)
  40428e:	4b26      	ldr	r3, [pc, #152]	; (404328 <TWI0_ReadDB+0xac>)
  404290:	681b      	ldr	r3, [r3, #0]
  404292:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  404296:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (SlaveAddress<<16);	//Device Slave address
  404298:	4a24      	ldr	r2, [pc, #144]	; (40432c <TWI0_ReadDB+0xb0>)
  40429a:	79fb      	ldrb	r3, [r7, #7]
  40429c:	041b      	lsls	r3, r3, #16
  40429e:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR |= (1<<8);				//Set one-byte internal device address
  4042a0:	4a22      	ldr	r2, [pc, #136]	; (40432c <TWI0_ReadDB+0xb0>)
  4042a2:	4b22      	ldr	r3, [pc, #136]	; (40432c <TWI0_ReadDB+0xb0>)
  4042a4:	681b      	ldr	r3, [r3, #0]
  4042a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4042aa:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR |= (1<<12);			//Master read direction = 1
  4042ac:	4a1f      	ldr	r2, [pc, #124]	; (40432c <TWI0_ReadDB+0xb0>)
  4042ae:	4b1f      	ldr	r3, [pc, #124]	; (40432c <TWI0_ReadDB+0xb0>)
  4042b0:	681b      	ldr	r3, [r3, #0]
  4042b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4042b6:	6013      	str	r3, [r2, #0]
	REG_TWI0_IADR = intAddress;			//Set up device internal address to read from
  4042b8:	4a1d      	ldr	r2, [pc, #116]	; (404330 <TWI0_ReadDB+0xb4>)
  4042ba:	79bb      	ldrb	r3, [r7, #6]
  4042bc:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR |= (1<<0);				//Send a START bit as required (single byte read)
  4042be:	4a1a      	ldr	r2, [pc, #104]	; (404328 <TWI0_ReadDB+0xac>)
  4042c0:	4b19      	ldr	r3, [pc, #100]	; (404328 <TWI0_ReadDB+0xac>)
  4042c2:	681b      	ldr	r3, [r3, #0]
  4042c4:	f043 0301 	orr.w	r3, r3, #1
  4042c8:	6013      	str	r3, [r2, #0]
	while(!(twi0RXRDY));				//While Receive Holding Register not ready. wait.
  4042ca:	bf00      	nop
  4042cc:	4b19      	ldr	r3, [pc, #100]	; (404334 <TWI0_ReadDB+0xb8>)
  4042ce:	681b      	ldr	r3, [r3, #0]
  4042d0:	f003 0302 	and.w	r3, r3, #2
  4042d4:	2b00      	cmp	r3, #0
  4042d6:	d0f9      	beq.n	4042cc <TWI0_ReadDB+0x50>
	data1 = REG_TWI0_RHR;				//Store data received (the lower byte of 16-bit data)
  4042d8:	4b17      	ldr	r3, [pc, #92]	; (404338 <TWI0_ReadDB+0xbc>)
  4042da:	681b      	ldr	r3, [r3, #0]
  4042dc:	73fb      	strb	r3, [r7, #15]
	REG_TWI0_CR |= (1<<1);				//Set STOP bit as required
  4042de:	4a12      	ldr	r2, [pc, #72]	; (404328 <TWI0_ReadDB+0xac>)
  4042e0:	4b11      	ldr	r3, [pc, #68]	; (404328 <TWI0_ReadDB+0xac>)
  4042e2:	681b      	ldr	r3, [r3, #0]
  4042e4:	f043 0302 	orr.w	r3, r3, #2
  4042e8:	6013      	str	r3, [r2, #0]
	while(!(twi0RXRDY));				//While Receive Holding Register not ready. wait.
  4042ea:	bf00      	nop
  4042ec:	4b11      	ldr	r3, [pc, #68]	; (404334 <TWI0_ReadDB+0xb8>)
  4042ee:	681b      	ldr	r3, [r3, #0]
  4042f0:	f003 0302 	and.w	r3, r3, #2
  4042f4:	2b00      	cmp	r3, #0
  4042f6:	d0f9      	beq.n	4042ec <TWI0_ReadDB+0x70>
	data2 = REG_TWI0_RHR;				//Store data received (the upper byte of 16-bit data)
  4042f8:	4b0f      	ldr	r3, [pc, #60]	; (404338 <TWI0_ReadDB+0xbc>)
  4042fa:	681b      	ldr	r3, [r3, #0]
  4042fc:	73bb      	strb	r3, [r7, #14]
	while(!(twi0TXCOMP));				//While transmit not complete. wait.
  4042fe:	bf00      	nop
  404300:	4b0c      	ldr	r3, [pc, #48]	; (404334 <TWI0_ReadDB+0xb8>)
  404302:	681b      	ldr	r3, [r3, #0]
  404304:	f003 0301 	and.w	r3, r3, #1
  404308:	2b00      	cmp	r3, #0
  40430a:	d0f9      	beq.n	404300 <TWI0_ReadDB+0x84>
	data = (data2 << 8) | data1;		//Puts the two 8 bits into 16 bits
  40430c:	7bbb      	ldrb	r3, [r7, #14]
  40430e:	021b      	lsls	r3, r3, #8
  404310:	b21a      	sxth	r2, r3
  404312:	7bfb      	ldrb	r3, [r7, #15]
  404314:	b21b      	sxth	r3, r3
  404316:	4313      	orrs	r3, r2
  404318:	b21b      	sxth	r3, r3
  40431a:	81bb      	strh	r3, [r7, #12]
	return data;
  40431c:	89bb      	ldrh	r3, [r7, #12]
}
  40431e:	4618      	mov	r0, r3
  404320:	3714      	adds	r7, #20
  404322:	46bd      	mov	sp, r7
  404324:	bc80      	pop	{r7}
  404326:	4770      	bx	lr
  404328:	40018000 	.word	0x40018000
  40432c:	40018004 	.word	0x40018004
  404330:	4001800c 	.word	0x4001800c
  404334:	40018020 	.word	0x40018020
  404338:	40018030 	.word	0x40018030

0040433c <Reset_Handler>:
  40433c:	b580      	push	{r7, lr}
  40433e:	b082      	sub	sp, #8
  404340:	af00      	add	r7, sp, #0
  404342:	4b16      	ldr	r3, [pc, #88]	; (40439c <Reset_Handler+0x60>)
  404344:	607b      	str	r3, [r7, #4]
  404346:	4b16      	ldr	r3, [pc, #88]	; (4043a0 <Reset_Handler+0x64>)
  404348:	603b      	str	r3, [r7, #0]
  40434a:	687a      	ldr	r2, [r7, #4]
  40434c:	683b      	ldr	r3, [r7, #0]
  40434e:	429a      	cmp	r2, r3
  404350:	d00c      	beq.n	40436c <Reset_Handler+0x30>
  404352:	e007      	b.n	404364 <Reset_Handler+0x28>
  404354:	683b      	ldr	r3, [r7, #0]
  404356:	1d1a      	adds	r2, r3, #4
  404358:	603a      	str	r2, [r7, #0]
  40435a:	687a      	ldr	r2, [r7, #4]
  40435c:	1d11      	adds	r1, r2, #4
  40435e:	6079      	str	r1, [r7, #4]
  404360:	6812      	ldr	r2, [r2, #0]
  404362:	601a      	str	r2, [r3, #0]
  404364:	683b      	ldr	r3, [r7, #0]
  404366:	4a0f      	ldr	r2, [pc, #60]	; (4043a4 <Reset_Handler+0x68>)
  404368:	4293      	cmp	r3, r2
  40436a:	d3f3      	bcc.n	404354 <Reset_Handler+0x18>
  40436c:	4b0e      	ldr	r3, [pc, #56]	; (4043a8 <Reset_Handler+0x6c>)
  40436e:	603b      	str	r3, [r7, #0]
  404370:	e004      	b.n	40437c <Reset_Handler+0x40>
  404372:	683b      	ldr	r3, [r7, #0]
  404374:	1d1a      	adds	r2, r3, #4
  404376:	603a      	str	r2, [r7, #0]
  404378:	2200      	movs	r2, #0
  40437a:	601a      	str	r2, [r3, #0]
  40437c:	683b      	ldr	r3, [r7, #0]
  40437e:	4a0b      	ldr	r2, [pc, #44]	; (4043ac <Reset_Handler+0x70>)
  404380:	4293      	cmp	r3, r2
  404382:	d3f6      	bcc.n	404372 <Reset_Handler+0x36>
  404384:	4b0a      	ldr	r3, [pc, #40]	; (4043b0 <Reset_Handler+0x74>)
  404386:	607b      	str	r3, [r7, #4]
  404388:	4a0a      	ldr	r2, [pc, #40]	; (4043b4 <Reset_Handler+0x78>)
  40438a:	687b      	ldr	r3, [r7, #4]
  40438c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404390:	6093      	str	r3, [r2, #8]
  404392:	4b09      	ldr	r3, [pc, #36]	; (4043b8 <Reset_Handler+0x7c>)
  404394:	4798      	blx	r3
  404396:	4b09      	ldr	r3, [pc, #36]	; (4043bc <Reset_Handler+0x80>)
  404398:	4798      	blx	r3
  40439a:	e7fe      	b.n	40439a <Reset_Handler+0x5e>
  40439c:	00407d74 	.word	0x00407d74
  4043a0:	20000000 	.word	0x20000000
  4043a4:	20000478 	.word	0x20000478
  4043a8:	20000478 	.word	0x20000478
  4043ac:	20000fe8 	.word	0x20000fe8
  4043b0:	00400000 	.word	0x00400000
  4043b4:	e000ed00 	.word	0xe000ed00
  4043b8:	00406951 	.word	0x00406951
  4043bc:	004043f9 	.word	0x004043f9

004043c0 <Dummy_Handler>:
  4043c0:	b480      	push	{r7}
  4043c2:	af00      	add	r7, sp, #0
  4043c4:	e7fe      	b.n	4043c4 <Dummy_Handler+0x4>
  4043c6:	bf00      	nop

004043c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4043c8:	b480      	push	{r7}
  4043ca:	b083      	sub	sp, #12
  4043cc:	af00      	add	r7, sp, #0
  4043ce:	4603      	mov	r3, r0
  4043d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4043d2:	4908      	ldr	r1, [pc, #32]	; (4043f4 <NVIC_EnableIRQ+0x2c>)
  4043d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4043d8:	095b      	lsrs	r3, r3, #5
  4043da:	79fa      	ldrb	r2, [r7, #7]
  4043dc:	f002 021f 	and.w	r2, r2, #31
  4043e0:	2001      	movs	r0, #1
  4043e2:	fa00 f202 	lsl.w	r2, r0, r2
  4043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4043ea:	bf00      	nop
  4043ec:	370c      	adds	r7, #12
  4043ee:	46bd      	mov	sp, r7
  4043f0:	bc80      	pop	{r7}
  4043f2:	4770      	bx	lr
  4043f4:	e000e100 	.word	0xe000e100

004043f8 <main>:
/******** Global Variables ********/
uint8_t SBtest, SBtest1;
uint16_t DBtest, DBtest1, DBtest2;

int main(void)
{
  4043f8:	b580      	push	{r7, lr}
  4043fa:	b08a      	sub	sp, #40	; 0x28
  4043fc:	af00      	add	r7, sp, #0
	setup();
  4043fe:	4b13      	ldr	r3, [pc, #76]	; (40444c <main+0x54>)
  404400:	4798      	blx	r3
	//Comms
	struct frame_info frame;
	struct message_info message;
	//Optical
	struct Position opticalData;
	opticalData.x = 0;
  404402:	f04f 0300 	mov.w	r3, #0
  404406:	60bb      	str	r3, [r7, #8]
	opticalData.y = 0;
  404408:	f04f 0300 	mov.w	r3, #0
  40440c:	60fb      	str	r3, [r7, #12]
	while(1)
	{		
		if(batteryLow)
		{			
			//moveRobot(0, 50);
			dockRobot();
  40440e:	4b10      	ldr	r3, [pc, #64]	; (404450 <main+0x58>)
  404410:	4798      	blx	r3
		}
		
		if(FrameBufferInfoGetFull(&frame) == 0)
  404412:	f107 031c 	add.w	r3, r7, #28
  404416:	4618      	mov	r0, r3
  404418:	4b0e      	ldr	r3, [pc, #56]	; (404454 <main+0x5c>)
  40441a:	4798      	blx	r3
  40441c:	4603      	mov	r3, r0
  40441e:	2b00      	cmp	r3, #0
  404420:	d1f5      	bne.n	40440e <main+0x16>
		{
			InterpretXbeeAPIFrame(frame);
  404422:	f107 031c 	add.w	r3, r7, #28
  404426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40442a:	4b0b      	ldr	r3, [pc, #44]	; (404458 <main+0x60>)
  40442c:	4798      	blx	r3

			if(MessageBufferInfoGetFull(&message) == 0)
  40442e:	f107 0310 	add.w	r3, r7, #16
  404432:	4618      	mov	r0, r3
  404434:	4b09      	ldr	r3, [pc, #36]	; (40445c <main+0x64>)
  404436:	4798      	blx	r3
  404438:	4603      	mov	r3, r0
  40443a:	2b00      	cmp	r3, #0
  40443c:	d1e7      	bne.n	40440e <main+0x16>
			{
				InterpretSwarmMessage(message);
  40443e:	f107 0310 	add.w	r3, r7, #16
  404442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404446:	4b06      	ldr	r3, [pc, #24]	; (404460 <main+0x68>)
  404448:	4798      	blx	r3
			}
		}


	}
  40444a:	e7e0      	b.n	40440e <main+0x16>
  40444c:	00404465 	.word	0x00404465
  404450:	00403865 	.word	0x00403865
  404454:	00400a95 	.word	0x00400a95
  404458:	004001ed 	.word	0x004001ed
  40445c:	00400cc9 	.word	0x00400cc9
  404460:	0040014d 	.word	0x0040014d

00404464 <setup>:

}

void setup(void)
{
  404464:	b580      	push	{r7, lr}
  404466:	af00      	add	r7, sp, #0
	REG_WDT_MR = (1 << 15); 				//WDT Disable
  404468:	4b83      	ldr	r3, [pc, #524]	; (404678 <setup+0x214>)
  40446a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40446e:	601a      	str	r2, [r3, #0]

	/******** CLOCK Setup @ 100MHz ********/
	REG_EFC_FMR = ((1<<26) | (5<<8));		//Set Flash Wait State for 100MHz
  404470:	4b82      	ldr	r3, [pc, #520]	; (40467c <setup+0x218>)
  404472:	4a83      	ldr	r2, [pc, #524]	; (404680 <setup+0x21c>)
  404474:	601a      	str	r2, [r3, #0]
	REG_PMC_WPMR = 0x504D4300;				//Disable PMC write protect
  404476:	4b83      	ldr	r3, [pc, #524]	; (404684 <setup+0x220>)
  404478:	4a83      	ldr	r2, [pc, #524]	; (404688 <setup+0x224>)
  40447a:	601a      	str	r2, [r3, #0]
	REG_CKGR_MOR |= (0x37<<16) | (0x14<<8); //Set 5ms main xtal osc. Start up time. Start Up Time = 8 * MOSCXTST / SLCK => MOSCXTST = 20
  40447c:	4a83      	ldr	r2, [pc, #524]	; (40468c <setup+0x228>)
  40447e:	4b83      	ldr	r3, [pc, #524]	; (40468c <setup+0x228>)
  404480:	681b      	ldr	r3, [r3, #0]
  404482:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404486:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  40448a:	6013      	str	r3, [r2, #0]
	REG_CKGR_MOR |= (0x37<<16) | (1<<0);	//Enable the external crystal connected to XIN and XOUT
  40448c:	4a7f      	ldr	r2, [pc, #508]	; (40468c <setup+0x228>)
  40448e:	4b7f      	ldr	r3, [pc, #508]	; (40468c <setup+0x228>)
  404490:	681b      	ldr	r3, [r3, #0]
  404492:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404496:	f043 0301 	orr.w	r3, r3, #1
  40449a:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & 0x01));			//Wait for the main crystal oscillator to stabilize
  40449c:	bf00      	nop
  40449e:	4b7c      	ldr	r3, [pc, #496]	; (404690 <setup+0x22c>)
  4044a0:	681b      	ldr	r3, [r3, #0]
  4044a2:	f003 0301 	and.w	r3, r3, #1
  4044a6:	2b00      	cmp	r3, #0
  4044a8:	d0f9      	beq.n	40449e <setup+0x3a>
	REG_CKGR_MOR |= (0x37<<16) | (1<<24);	//MAINCK source set to external xtal
  4044aa:	4a78      	ldr	r2, [pc, #480]	; (40468c <setup+0x228>)
  4044ac:	4b77      	ldr	r3, [pc, #476]	; (40468c <setup+0x228>)
  4044ae:	681b      	ldr	r3, [r3, #0]
  4044b0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4044b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4044b8:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & 0x10000));			//Wait for the source changeover to be complete
  4044ba:	bf00      	nop
  4044bc:	4b74      	ldr	r3, [pc, #464]	; (404690 <setup+0x22c>)
  4044be:	681b      	ldr	r3, [r3, #0]
  4044c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4044c4:	2b00      	cmp	r3, #0
  4044c6:	d0f9      	beq.n	4044bc <setup+0x58>
	REG_CKGR_MOR = 0x01371401;				//Disable the RC oscillator
  4044c8:	4b70      	ldr	r3, [pc, #448]	; (40468c <setup+0x228>)
  4044ca:	4a72      	ldr	r2, [pc, #456]	; (404694 <setup+0x230>)
  4044cc:	601a      	str	r2, [r3, #0]
	REG_CKGR_PLLAR |= (1<<29) | (0x03<<0) | (0x18<<16) | (0x3F<<8); //Sets PLL to Divide by 3, Multiply by 25 and wait 63 SLCK cycles
  4044ce:	4972      	ldr	r1, [pc, #456]	; (404698 <setup+0x234>)
  4044d0:	4b71      	ldr	r3, [pc, #452]	; (404698 <setup+0x234>)
  4044d2:	681a      	ldr	r2, [r3, #0]
  4044d4:	4b71      	ldr	r3, [pc, #452]	; (40469c <setup+0x238>)
  4044d6:	4313      	orrs	r3, r2
  4044d8:	600b      	str	r3, [r1, #0]
	while(!(REG_PMC_SR & 0x02));			//Wait for PLL LOCKA bit to be set
  4044da:	bf00      	nop
  4044dc:	4b6c      	ldr	r3, [pc, #432]	; (404690 <setup+0x22c>)
  4044de:	681b      	ldr	r3, [r3, #0]
  4044e0:	f003 0302 	and.w	r3, r3, #2
  4044e4:	2b00      	cmp	r3, #0
  4044e6:	d0f9      	beq.n	4044dc <setup+0x78>
	REG_PMC_MCKR = (2<<0);					//Set PLLA_CLK as MCK
  4044e8:	4b6d      	ldr	r3, [pc, #436]	; (4046a0 <setup+0x23c>)
  4044ea:	2202      	movs	r2, #2
  4044ec:	601a      	str	r2, [r3, #0]
	while(!(REG_PMC_SR & 0x08));			//Wait for MCK ready
  4044ee:	bf00      	nop
  4044f0:	4b67      	ldr	r3, [pc, #412]	; (404690 <setup+0x22c>)
  4044f2:	681b      	ldr	r3, [r3, #0]
  4044f4:	f003 0308 	and.w	r3, r3, #8
  4044f8:	2b00      	cmp	r3, #0
  4044fa:	d0f9      	beq.n	4044f0 <setup+0x8c>
	
	/******** PIO Controller Setup ********/
	REG_PMC_PCER0 |= (1<<11);	//Enable clock access to PIO controller A
  4044fc:	4a69      	ldr	r2, [pc, #420]	; (4046a4 <setup+0x240>)
  4044fe:	4b69      	ldr	r3, [pc, #420]	; (4046a4 <setup+0x240>)
  404500:	681b      	ldr	r3, [r3, #0]
  404502:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404506:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<12);	//Enable clock access to PIO controller B
  404508:	4a66      	ldr	r2, [pc, #408]	; (4046a4 <setup+0x240>)
  40450a:	4b66      	ldr	r3, [pc, #408]	; (4046a4 <setup+0x240>)
  40450c:	681b      	ldr	r3, [r3, #0]
  40450e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  404512:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<13);	//Enable clock access to PIO controller C
  404514:	4a63      	ldr	r2, [pc, #396]	; (4046a4 <setup+0x240>)
  404516:	4b63      	ldr	r3, [pc, #396]	; (4046a4 <setup+0x240>)
  404518:	681b      	ldr	r3, [r3, #0]
  40451a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40451e:	6013      	str	r3, [r2, #0]
	REG_PIOA_WPMR = 0x50494F00; //Disable PIOA write protect
  404520:	4b61      	ldr	r3, [pc, #388]	; (4046a8 <setup+0x244>)
  404522:	4a62      	ldr	r2, [pc, #392]	; (4046ac <setup+0x248>)
  404524:	601a      	str	r2, [r3, #0]
	REG_PIOB_WPMR = 0x50494F00; //Disable PIOB write protect
  404526:	4b62      	ldr	r3, [pc, #392]	; (4046b0 <setup+0x24c>)
  404528:	4a60      	ldr	r2, [pc, #384]	; (4046ac <setup+0x248>)
  40452a:	601a      	str	r2, [r3, #0]
	REG_PIOC_WPMR = 0x50494F00; //Disable PIOC write protect
  40452c:	4b61      	ldr	r3, [pc, #388]	; (4046b4 <setup+0x250>)
  40452e:	4a5f      	ldr	r2, [pc, #380]	; (4046ac <setup+0x248>)
  404530:	601a      	str	r2, [r3, #0]
	
	motor_init();
  404532:	4b61      	ldr	r3, [pc, #388]	; (4046b8 <setup+0x254>)
  404534:	4798      	blx	r3
	SPI_Init();
  404536:	4b61      	ldr	r3, [pc, #388]	; (4046bc <setup+0x258>)
  404538:	4798      	blx	r3
	//Mouse_Init(); //May require further testing - Adam
	CommunicationSetup();
  40453a:	4b61      	ldr	r3, [pc, #388]	; (4046c0 <setup+0x25c>)
  40453c:	4798      	blx	r3
	init_imu();
  40453e:	4b61      	ldr	r3, [pc, #388]	; (4046c4 <setup+0x260>)
  404540:	4798      	blx	r3
	twi0Init();
  404542:	4b61      	ldr	r3, [pc, #388]	; (4046c8 <setup+0x264>)
  404544:	4798      	blx	r3

	/******** LED Setup ********/
	REG_PIOA_PER |= ((1<<28) | (1<<27));	//Enable PIO control of D1 & D3.
  404546:	4a61      	ldr	r2, [pc, #388]	; (4046cc <setup+0x268>)
  404548:	4b60      	ldr	r3, [pc, #384]	; (4046cc <setup+0x268>)
  40454a:	681b      	ldr	r3, [r3, #0]
  40454c:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
  404550:	6013      	str	r3, [r2, #0]
	REG_PIOC_PER |= (1<<8);					//Enable PIO control of D2
  404552:	4a5f      	ldr	r2, [pc, #380]	; (4046d0 <setup+0x26c>)
  404554:	4b5e      	ldr	r3, [pc, #376]	; (4046d0 <setup+0x26c>)
  404556:	681b      	ldr	r3, [r3, #0]
  404558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40455c:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= ((1<<28) | (1<<27));	//Set D1 & D3 as outputs
  40455e:	4a5d      	ldr	r2, [pc, #372]	; (4046d4 <setup+0x270>)
  404560:	4b5c      	ldr	r3, [pc, #368]	; (4046d4 <setup+0x270>)
  404562:	681b      	ldr	r3, [r3, #0]
  404564:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
  404568:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<8);					//Set D2 as an output
  40456a:	4a5b      	ldr	r2, [pc, #364]	; (4046d8 <setup+0x274>)
  40456c:	4b5a      	ldr	r3, [pc, #360]	; (4046d8 <setup+0x274>)
  40456e:	681b      	ldr	r3, [r3, #0]
  404570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404574:	6013      	str	r3, [r2, #0]
	D1off;									//D1 starts up off
  404576:	4a59      	ldr	r2, [pc, #356]	; (4046dc <setup+0x278>)
  404578:	4b58      	ldr	r3, [pc, #352]	; (4046dc <setup+0x278>)
  40457a:	681b      	ldr	r3, [r3, #0]
  40457c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  404580:	6013      	str	r3, [r2, #0]
	D2off;									//D2 starts up off
  404582:	4a57      	ldr	r2, [pc, #348]	; (4046e0 <setup+0x27c>)
  404584:	4b56      	ldr	r3, [pc, #344]	; (4046e0 <setup+0x27c>)
  404586:	681b      	ldr	r3, [r3, #0]
  404588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40458c:	6013      	str	r3, [r2, #0]
	D3off;									//D3 starts up off
  40458e:	4a53      	ldr	r2, [pc, #332]	; (4046dc <setup+0x278>)
  404590:	4b52      	ldr	r3, [pc, #328]	; (4046dc <setup+0x278>)
  404592:	681b      	ldr	r3, [r3, #0]
  404594:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  404598:	6013      	str	r3, [r2, #0]
	
	/******** ADC SETUP, 10 bit default SINGLE CONVERSION SINGLE CHANNEL MODE  ********/
	REG_ADC_WPMR = 0x41444300;						//Disable ADC write protect
  40459a:	4b52      	ldr	r3, [pc, #328]	; (4046e4 <setup+0x280>)
  40459c:	4a52      	ldr	r2, [pc, #328]	; (4046e8 <setup+0x284>)
  40459e:	601a      	str	r2, [r3, #0]
	REG_PMC_PCER0 |= (1<<29);						//Enable peripheral clock on ADC
  4045a0:	4a40      	ldr	r2, [pc, #256]	; (4046a4 <setup+0x240>)
  4045a2:	4b40      	ldr	r3, [pc, #256]	; (4046a4 <setup+0x240>)
  4045a4:	681b      	ldr	r3, [r3, #0]
  4045a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4045aa:	6013      	str	r3, [r2, #0]
	REG_ADC_MR |= ((49<<8) | (3<<16) | (2<<28));	//Prescale ADC conversion by 49 (100MHZ/((49+1)x2))=1MHZ. Startup time is 24 ADC clock cycles. Field 28 must be programmed with value 2.
  4045ac:	494f      	ldr	r1, [pc, #316]	; (4046ec <setup+0x288>)
  4045ae:	4b4f      	ldr	r3, [pc, #316]	; (4046ec <setup+0x288>)
  4045b0:	681a      	ldr	r2, [r3, #0]
  4045b2:	4b4f      	ldr	r3, [pc, #316]	; (4046f0 <setup+0x28c>)
  4045b4:	4313      	orrs	r3, r2
  4045b6:	600b      	str	r3, [r1, #0]
	
	/****************TWI2(ID22) SETUP***************/
	REG_PMC_PCER0
	|=	(1<<ID_TWI2);						//Enable clock access to TWI2, Peripheral TWI2_ID = 22
  4045b8:	4a3a      	ldr	r2, [pc, #232]	; (4046a4 <setup+0x240>)
  4045ba:	4b3a      	ldr	r3, [pc, #232]	; (4046a4 <setup+0x240>)
  4045bc:	681b      	ldr	r3, [r3, #0]
  4045be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4045c2:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR
	|=	PIO_PDR_P0							//Enable peripheralB control of PB0 (TWD2)
  4045c4:	4a4b      	ldr	r2, [pc, #300]	; (4046f4 <setup+0x290>)
  4045c6:	4b4b      	ldr	r3, [pc, #300]	; (4046f4 <setup+0x290>)
  4045c8:	681b      	ldr	r3, [r3, #0]
  4045ca:	f043 0303 	orr.w	r3, r3, #3
  4045ce:	6013      	str	r3, [r2, #0]
	|	PIO_PDR_P1;							//Enable peripheralB control of PB1 (TWCK2)
	REG_PIOB_ABCDSR
	|=	PIO_ABCDSR_P0						//Set peripheral B
  4045d0:	4a49      	ldr	r2, [pc, #292]	; (4046f8 <setup+0x294>)
  4045d2:	4b49      	ldr	r3, [pc, #292]	; (4046f8 <setup+0x294>)
  4045d4:	681b      	ldr	r3, [r3, #0]
  4045d6:	f043 0303 	orr.w	r3, r3, #3
  4045da:	6013      	str	r3, [r2, #0]
	|	PIO_ABCDSR_P1;
	REG_TWI2_CR
  4045dc:	4b47      	ldr	r3, [pc, #284]	; (4046fc <setup+0x298>)
	=	TWI_CR_SWRST;						//Software Reset
  4045de:	2280      	movs	r2, #128	; 0x80
  4045e0:	601a      	str	r2, [r3, #0]
	
	//TWI2 Clock Waveform Setup.
	//1.3uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
	//0.6uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
	REG_TWI2_CWGR
	|=	TWI_CWGR_CKDIV(1)					//Clock speed 400000, fast mode
  4045e2:	4a47      	ldr	r2, [pc, #284]	; (404700 <setup+0x29c>)
  4045e4:	4b46      	ldr	r3, [pc, #280]	; (404700 <setup+0x29c>)
  4045e6:	681b      	ldr	r3, [r3, #0]
  4045e8:	f443 338e 	orr.w	r3, r3, #72704	; 0x11c00
  4045ec:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
  4045f0:	6013      	str	r3, [r2, #0]
	|	TWI_CWGR_CLDIV(63)					//Clock low period 1.3uSec
	|	TWI_CWGR_CHDIV(28);					//Clock high period  0.6uSec
	REG_TWI2_CR
	|=	TWI_CR_MSEN							//Master mode enabled
  4045f2:	4a42      	ldr	r2, [pc, #264]	; (4046fc <setup+0x298>)
  4045f4:	4b41      	ldr	r3, [pc, #260]	; (4046fc <setup+0x298>)
  4045f6:	681b      	ldr	r3, [r3, #0]
  4045f8:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  4045fc:	6013      	str	r3, [r2, #0]

	/****************TIMER0 SETUP***************/
	//Timer0 is used for delay_ms and get_ms functions required by the imu driver
	//TC Channel Mode Register (Pg877)
	REG_PMC_PCER0
	|=	(1<<ID_TC0);						//Enable TC clock (ID_TC0 is the peripheral identifier for timer counter 0)
  4045fe:	4a29      	ldr	r2, [pc, #164]	; (4046a4 <setup+0x240>)
  404600:	4b28      	ldr	r3, [pc, #160]	; (4046a4 <setup+0x240>)
  404602:	681b      	ldr	r3, [r3, #0]
  404604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  404608:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(ID_TC0);
  40460a:	2017      	movs	r0, #23
  40460c:	4b3d      	ldr	r3, [pc, #244]	; (404704 <setup+0x2a0>)
  40460e:	4798      	blx	r3
	REG_TC0_CMR0
	|=	TC_CMR_TCCLKS_TIMER_CLOCK3			//Prescaler MCK/32
  404610:	4a3d      	ldr	r2, [pc, #244]	; (404708 <setup+0x2a4>)
  404612:	4b3d      	ldr	r3, [pc, #244]	; (404708 <setup+0x2a4>)
  404614:	681b      	ldr	r3, [r3, #0]
  404616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
  40461a:	f043 0302 	orr.w	r3, r3, #2
  40461e:	6013      	str	r3, [r2, #0]
	|	TC_CMR_WAVE							//Waveform mode
	|	TC_CMR_WAVSEL_UP_RC;				//Clear on RC compare
	//TC interrupt enable register
	REG_TC0_IER0
	|=	TC_IER_CPCS;						//Enable Register C compare interrupt
  404620:	4a3a      	ldr	r2, [pc, #232]	; (40470c <setup+0x2a8>)
  404622:	4b3a      	ldr	r3, [pc, #232]	; (40470c <setup+0x2a8>)
  404624:	681b      	ldr	r3, [r3, #0]
  404626:	f043 0310 	orr.w	r3, r3, #16
  40462a:	6013      	str	r3, [r2, #0]
	//Set Register C
	REG_TC0_RC0
  40462c:	4b38      	ldr	r3, [pc, #224]	; (404710 <setup+0x2ac>)
	=	3125;								//Trigger once every 1/1000th of a second (100Mhz/32/1000)
  40462e:	f640 4235 	movw	r2, #3125	; 0xc35
  404632:	601a      	str	r2, [r3, #0]
	//Clock control register
	REG_TC0_CCR0
	|=	TC_CCR_CLKEN						//Enable the timer clk.
  404634:	4a37      	ldr	r2, [pc, #220]	; (404714 <setup+0x2b0>)
  404636:	4b37      	ldr	r3, [pc, #220]	; (404714 <setup+0x2b0>)
  404638:	681b      	ldr	r3, [r3, #0]
  40463a:	f043 0305 	orr.w	r3, r3, #5
  40463e:	6013      	str	r3, [r2, #0]
	|	TC_CCR_SWTRG;

	LightSensor_Setup(Mux_RHS_LightSens);
  404640:	20f8      	movs	r0, #248	; 0xf8
  404642:	4b35      	ldr	r3, [pc, #212]	; (404718 <setup+0x2b4>)
  404644:	4798      	blx	r3
	LightSensor_Setup(Mux_LHS_LightSens);
  404646:	20f9      	movs	r0, #249	; 0xf9
  404648:	4b33      	ldr	r3, [pc, #204]	; (404718 <setup+0x2b4>)
  40464a:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityA);
  40464c:	20fa      	movs	r0, #250	; 0xfa
  40464e:	4b33      	ldr	r3, [pc, #204]	; (40471c <setup+0x2b8>)
  404650:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityB);
  404652:	20ff      	movs	r0, #255	; 0xff
  404654:	4b31      	ldr	r3, [pc, #196]	; (40471c <setup+0x2b8>)
  404656:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityC);
  404658:	20fe      	movs	r0, #254	; 0xfe
  40465a:	4b30      	ldr	r3, [pc, #192]	; (40471c <setup+0x2b8>)
  40465c:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityD);
  40465e:	20fd      	movs	r0, #253	; 0xfd
  404660:	4b2e      	ldr	r3, [pc, #184]	; (40471c <setup+0x2b8>)
  404662:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityE);
  404664:	20fc      	movs	r0, #252	; 0xfc
  404666:	4b2d      	ldr	r3, [pc, #180]	; (40471c <setup+0x2b8>)
  404668:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityF);
  40466a:	20fb      	movs	r0, #251	; 0xfb
  40466c:	4b2b      	ldr	r3, [pc, #172]	; (40471c <setup+0x2b8>)
  40466e:	4798      	blx	r3
	FastChargeController_Setup(); //Sets Voltage and Current registers on FCC
  404670:	4b2b      	ldr	r3, [pc, #172]	; (404720 <setup+0x2bc>)
  404672:	4798      	blx	r3
}
  404674:	bf00      	nop
  404676:	bd80      	pop	{r7, pc}
  404678:	400e1454 	.word	0x400e1454
  40467c:	400e0a00 	.word	0x400e0a00
  404680:	04000500 	.word	0x04000500
  404684:	400e04e4 	.word	0x400e04e4
  404688:	504d4300 	.word	0x504d4300
  40468c:	400e0420 	.word	0x400e0420
  404690:	400e0468 	.word	0x400e0468
  404694:	01371401 	.word	0x01371401
  404698:	400e0428 	.word	0x400e0428
  40469c:	20183f03 	.word	0x20183f03
  4046a0:	400e0430 	.word	0x400e0430
  4046a4:	400e0410 	.word	0x400e0410
  4046a8:	400e0ee4 	.word	0x400e0ee4
  4046ac:	50494f00 	.word	0x50494f00
  4046b0:	400e10e4 	.word	0x400e10e4
  4046b4:	400e12e4 	.word	0x400e12e4
  4046b8:	00403179 	.word	0x00403179
  4046bc:	004039f9 	.word	0x004039f9
  4046c0:	00400365 	.word	0x00400365
  4046c4:	00403ad5 	.word	0x00403ad5
  4046c8:	00403ff1 	.word	0x00403ff1
  4046cc:	400e0e00 	.word	0x400e0e00
  4046d0:	400e1200 	.word	0x400e1200
  4046d4:	400e0e10 	.word	0x400e0e10
  4046d8:	400e1210 	.word	0x400e1210
  4046dc:	400e0e34 	.word	0x400e0e34
  4046e0:	400e1234 	.word	0x400e1234
  4046e4:	400380e4 	.word	0x400380e4
  4046e8:	41444300 	.word	0x41444300
  4046ec:	40038004 	.word	0x40038004
  4046f0:	20033100 	.word	0x20033100
  4046f4:	400e1004 	.word	0x400e1004
  4046f8:	400e1070 	.word	0x400e1070
  4046fc:	40040000 	.word	0x40040000
  404700:	40040010 	.word	0x40040010
  404704:	004043c9 	.word	0x004043c9
  404708:	40010004 	.word	0x40010004
  40470c:	40010024 	.word	0x40010024
  404710:	4001001c 	.word	0x4001001c
  404714:	40010000 	.word	0x40010000
  404718:	004040e1 	.word	0x004040e1
  40471c:	0040410d 	.word	0x0040410d
  404720:	00404085 	.word	0x00404085

00404724 <cos>:
  404724:	b530      	push	{r4, r5, lr}
  404726:	4a22      	ldr	r2, [pc, #136]	; (4047b0 <cos+0x8c>)
  404728:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40472c:	4293      	cmp	r3, r2
  40472e:	b087      	sub	sp, #28
  404730:	dd1b      	ble.n	40476a <cos+0x46>
  404732:	4a20      	ldr	r2, [pc, #128]	; (4047b4 <cos+0x90>)
  404734:	4293      	cmp	r3, r2
  404736:	dd05      	ble.n	404744 <cos+0x20>
  404738:	4602      	mov	r2, r0
  40473a:	460b      	mov	r3, r1
  40473c:	f001 f94e 	bl	4059dc <__aeabi_dsub>
  404740:	b007      	add	sp, #28
  404742:	bd30      	pop	{r4, r5, pc}
  404744:	aa02      	add	r2, sp, #8
  404746:	f000 f837 	bl	4047b8 <__ieee754_rem_pio2>
  40474a:	f000 0303 	and.w	r3, r0, #3
  40474e:	2b01      	cmp	r3, #1
  404750:	d01a      	beq.n	404788 <cos+0x64>
  404752:	2b02      	cmp	r3, #2
  404754:	d00f      	beq.n	404776 <cos+0x52>
  404756:	b31b      	cbz	r3, 4047a0 <cos+0x7c>
  404758:	2401      	movs	r4, #1
  40475a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40475e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404762:	9400      	str	r4, [sp, #0]
  404764:	f000 ff6c 	bl	405640 <__kernel_sin>
  404768:	e7ea      	b.n	404740 <cos+0x1c>
  40476a:	2200      	movs	r2, #0
  40476c:	2300      	movs	r3, #0
  40476e:	f000 fa47 	bl	404c00 <__kernel_cos>
  404772:	b007      	add	sp, #28
  404774:	bd30      	pop	{r4, r5, pc}
  404776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40477a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40477e:	f000 fa3f 	bl	404c00 <__kernel_cos>
  404782:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404786:	e7db      	b.n	404740 <cos+0x1c>
  404788:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40478c:	9300      	str	r3, [sp, #0]
  40478e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404792:	4622      	mov	r2, r4
  404794:	462b      	mov	r3, r5
  404796:	f000 ff53 	bl	405640 <__kernel_sin>
  40479a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40479e:	e7cf      	b.n	404740 <cos+0x1c>
  4047a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4047a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4047a8:	f000 fa2a 	bl	404c00 <__kernel_cos>
  4047ac:	e7c8      	b.n	404740 <cos+0x1c>
  4047ae:	bf00      	nop
  4047b0:	3fe921fb 	.word	0x3fe921fb
  4047b4:	7fefffff 	.word	0x7fefffff

004047b8 <__ieee754_rem_pio2>:
  4047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047bc:	4e94      	ldr	r6, [pc, #592]	; (404a10 <__ieee754_rem_pio2+0x258>)
  4047be:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4047c2:	42b7      	cmp	r7, r6
  4047c4:	b091      	sub	sp, #68	; 0x44
  4047c6:	f340 8082 	ble.w	4048ce <__ieee754_rem_pio2+0x116>
  4047ca:	4692      	mov	sl, r2
  4047cc:	4a91      	ldr	r2, [pc, #580]	; (404a14 <__ieee754_rem_pio2+0x25c>)
  4047ce:	4297      	cmp	r7, r2
  4047d0:	460c      	mov	r4, r1
  4047d2:	dc26      	bgt.n	404822 <__ieee754_rem_pio2+0x6a>
  4047d4:	2900      	cmp	r1, #0
  4047d6:	a384      	add	r3, pc, #528	; (adr r3, 4049e8 <__ieee754_rem_pio2+0x230>)
  4047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047dc:	f340 81a8 	ble.w	404b30 <__ieee754_rem_pio2+0x378>
  4047e0:	f001 f8fc 	bl	4059dc <__aeabi_dsub>
  4047e4:	4b8c      	ldr	r3, [pc, #560]	; (404a18 <__ieee754_rem_pio2+0x260>)
  4047e6:	429f      	cmp	r7, r3
  4047e8:	4604      	mov	r4, r0
  4047ea:	460d      	mov	r5, r1
  4047ec:	f000 8084 	beq.w	4048f8 <__ieee754_rem_pio2+0x140>
  4047f0:	a37f      	add	r3, pc, #508	; (adr r3, 4049f0 <__ieee754_rem_pio2+0x238>)
  4047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047f6:	f001 f8f1 	bl	4059dc <__aeabi_dsub>
  4047fa:	4602      	mov	r2, r0
  4047fc:	460b      	mov	r3, r1
  4047fe:	e9ca 2300 	strd	r2, r3, [sl]
  404802:	4620      	mov	r0, r4
  404804:	4629      	mov	r1, r5
  404806:	f001 f8e9 	bl	4059dc <__aeabi_dsub>
  40480a:	a379      	add	r3, pc, #484	; (adr r3, 4049f0 <__ieee754_rem_pio2+0x238>)
  40480c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404810:	f001 f8e4 	bl	4059dc <__aeabi_dsub>
  404814:	2501      	movs	r5, #1
  404816:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40481a:	4628      	mov	r0, r5
  40481c:	b011      	add	sp, #68	; 0x44
  40481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404822:	4a7e      	ldr	r2, [pc, #504]	; (404a1c <__ieee754_rem_pio2+0x264>)
  404824:	4297      	cmp	r7, r2
  404826:	f340 8084 	ble.w	404932 <__ieee754_rem_pio2+0x17a>
  40482a:	4a7d      	ldr	r2, [pc, #500]	; (404a20 <__ieee754_rem_pio2+0x268>)
  40482c:	4297      	cmp	r7, r2
  40482e:	dc59      	bgt.n	4048e4 <__ieee754_rem_pio2+0x12c>
  404830:	153d      	asrs	r5, r7, #20
  404832:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  404836:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  40483a:	4619      	mov	r1, r3
  40483c:	461f      	mov	r7, r3
  40483e:	4606      	mov	r6, r0
  404840:	f001 fd1a 	bl	406278 <__aeabi_d2iz>
  404844:	f001 fa18 	bl	405c78 <__aeabi_i2d>
  404848:	4680      	mov	r8, r0
  40484a:	4689      	mov	r9, r1
  40484c:	4602      	mov	r2, r0
  40484e:	460b      	mov	r3, r1
  404850:	4630      	mov	r0, r6
  404852:	4639      	mov	r1, r7
  404854:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  404858:	f001 f8c0 	bl	4059dc <__aeabi_dsub>
  40485c:	2200      	movs	r2, #0
  40485e:	4b71      	ldr	r3, [pc, #452]	; (404a24 <__ieee754_rem_pio2+0x26c>)
  404860:	f001 fa70 	bl	405d44 <__aeabi_dmul>
  404864:	4689      	mov	r9, r1
  404866:	4680      	mov	r8, r0
  404868:	f001 fd06 	bl	406278 <__aeabi_d2iz>
  40486c:	f001 fa04 	bl	405c78 <__aeabi_i2d>
  404870:	4602      	mov	r2, r0
  404872:	460b      	mov	r3, r1
  404874:	4606      	mov	r6, r0
  404876:	460f      	mov	r7, r1
  404878:	4640      	mov	r0, r8
  40487a:	4649      	mov	r1, r9
  40487c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  404880:	f001 f8ac 	bl	4059dc <__aeabi_dsub>
  404884:	2200      	movs	r2, #0
  404886:	4b67      	ldr	r3, [pc, #412]	; (404a24 <__ieee754_rem_pio2+0x26c>)
  404888:	f001 fa5c 	bl	405d44 <__aeabi_dmul>
  40488c:	2200      	movs	r2, #0
  40488e:	2300      	movs	r3, #0
  404890:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  404894:	f001 fcbe 	bl	406214 <__aeabi_dcmpeq>
  404898:	2800      	cmp	r0, #0
  40489a:	f000 8175 	beq.w	404b88 <__ieee754_rem_pio2+0x3d0>
  40489e:	2300      	movs	r3, #0
  4048a0:	4630      	mov	r0, r6
  4048a2:	4639      	mov	r1, r7
  4048a4:	2200      	movs	r2, #0
  4048a6:	f001 fcb5 	bl	406214 <__aeabi_dcmpeq>
  4048aa:	2800      	cmp	r0, #0
  4048ac:	bf14      	ite	ne
  4048ae:	2301      	movne	r3, #1
  4048b0:	2302      	moveq	r3, #2
  4048b2:	4a5d      	ldr	r2, [pc, #372]	; (404a28 <__ieee754_rem_pio2+0x270>)
  4048b4:	9201      	str	r2, [sp, #4]
  4048b6:	2102      	movs	r1, #2
  4048b8:	9100      	str	r1, [sp, #0]
  4048ba:	462a      	mov	r2, r5
  4048bc:	4651      	mov	r1, sl
  4048be:	a80a      	add	r0, sp, #40	; 0x28
  4048c0:	f000 fac2 	bl	404e48 <__kernel_rem_pio2>
  4048c4:	2c00      	cmp	r4, #0
  4048c6:	f2c0 8151 	blt.w	404b6c <__ieee754_rem_pio2+0x3b4>
  4048ca:	4605      	mov	r5, r0
  4048cc:	e006      	b.n	4048dc <__ieee754_rem_pio2+0x124>
  4048ce:	e9c2 0100 	strd	r0, r1, [r2]
  4048d2:	2500      	movs	r5, #0
  4048d4:	2400      	movs	r4, #0
  4048d6:	e9c2 4502 	strd	r4, r5, [r2, #8]
  4048da:	2500      	movs	r5, #0
  4048dc:	4628      	mov	r0, r5
  4048de:	b011      	add	sp, #68	; 0x44
  4048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048e4:	4602      	mov	r2, r0
  4048e6:	460b      	mov	r3, r1
  4048e8:	f001 f878 	bl	4059dc <__aeabi_dsub>
  4048ec:	2500      	movs	r5, #0
  4048ee:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4048f2:	e9ca 0100 	strd	r0, r1, [sl]
  4048f6:	e7f1      	b.n	4048dc <__ieee754_rem_pio2+0x124>
  4048f8:	a33f      	add	r3, pc, #252	; (adr r3, 4049f8 <__ieee754_rem_pio2+0x240>)
  4048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4048fe:	f001 f86d 	bl	4059dc <__aeabi_dsub>
  404902:	a33f      	add	r3, pc, #252	; (adr r3, 404a00 <__ieee754_rem_pio2+0x248>)
  404904:	e9d3 2300 	ldrd	r2, r3, [r3]
  404908:	460d      	mov	r5, r1
  40490a:	4604      	mov	r4, r0
  40490c:	f001 f866 	bl	4059dc <__aeabi_dsub>
  404910:	4602      	mov	r2, r0
  404912:	460b      	mov	r3, r1
  404914:	e9ca 2300 	strd	r2, r3, [sl]
  404918:	4629      	mov	r1, r5
  40491a:	4620      	mov	r0, r4
  40491c:	f001 f85e 	bl	4059dc <__aeabi_dsub>
  404920:	a337      	add	r3, pc, #220	; (adr r3, 404a00 <__ieee754_rem_pio2+0x248>)
  404922:	e9d3 2300 	ldrd	r2, r3, [r3]
  404926:	f001 f859 	bl	4059dc <__aeabi_dsub>
  40492a:	2501      	movs	r5, #1
  40492c:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404930:	e7d4      	b.n	4048dc <__ieee754_rem_pio2+0x124>
  404932:	f000 ff3b 	bl	4057ac <fabs>
  404936:	a334      	add	r3, pc, #208	; (adr r3, 404a08 <__ieee754_rem_pio2+0x250>)
  404938:	e9d3 2300 	ldrd	r2, r3, [r3]
  40493c:	4680      	mov	r8, r0
  40493e:	4689      	mov	r9, r1
  404940:	f001 fa00 	bl	405d44 <__aeabi_dmul>
  404944:	2200      	movs	r2, #0
  404946:	4b39      	ldr	r3, [pc, #228]	; (404a2c <__ieee754_rem_pio2+0x274>)
  404948:	f001 f84a 	bl	4059e0 <__adddf3>
  40494c:	f001 fc94 	bl	406278 <__aeabi_d2iz>
  404950:	4605      	mov	r5, r0
  404952:	f001 f991 	bl	405c78 <__aeabi_i2d>
  404956:	a324      	add	r3, pc, #144	; (adr r3, 4049e8 <__ieee754_rem_pio2+0x230>)
  404958:	e9d3 2300 	ldrd	r2, r3, [r3]
  40495c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404960:	f001 f9f0 	bl	405d44 <__aeabi_dmul>
  404964:	4602      	mov	r2, r0
  404966:	460b      	mov	r3, r1
  404968:	4640      	mov	r0, r8
  40496a:	4649      	mov	r1, r9
  40496c:	f001 f836 	bl	4059dc <__aeabi_dsub>
  404970:	a31f      	add	r3, pc, #124	; (adr r3, 4049f0 <__ieee754_rem_pio2+0x238>)
  404972:	e9d3 2300 	ldrd	r2, r3, [r3]
  404976:	4680      	mov	r8, r0
  404978:	4689      	mov	r9, r1
  40497a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40497e:	f001 f9e1 	bl	405d44 <__aeabi_dmul>
  404982:	2d1f      	cmp	r5, #31
  404984:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404988:	dc54      	bgt.n	404a34 <__ieee754_rem_pio2+0x27c>
  40498a:	4b29      	ldr	r3, [pc, #164]	; (404a30 <__ieee754_rem_pio2+0x278>)
  40498c:	1e6a      	subs	r2, r5, #1
  40498e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404992:	429f      	cmp	r7, r3
  404994:	d04e      	beq.n	404a34 <__ieee754_rem_pio2+0x27c>
  404996:	4602      	mov	r2, r0
  404998:	460b      	mov	r3, r1
  40499a:	4640      	mov	r0, r8
  40499c:	4649      	mov	r1, r9
  40499e:	f001 f81d 	bl	4059dc <__aeabi_dsub>
  4049a2:	4602      	mov	r2, r0
  4049a4:	460b      	mov	r3, r1
  4049a6:	e9ca 2300 	strd	r2, r3, [sl]
  4049aa:	4683      	mov	fp, r0
  4049ac:	460e      	mov	r6, r1
  4049ae:	465a      	mov	r2, fp
  4049b0:	4633      	mov	r3, r6
  4049b2:	4640      	mov	r0, r8
  4049b4:	4649      	mov	r1, r9
  4049b6:	f001 f811 	bl	4059dc <__aeabi_dsub>
  4049ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4049be:	f001 f80d 	bl	4059dc <__aeabi_dsub>
  4049c2:	2c00      	cmp	r4, #0
  4049c4:	4602      	mov	r2, r0
  4049c6:	460b      	mov	r3, r1
  4049c8:	e9ca 2302 	strd	r2, r3, [sl, #8]
  4049cc:	da86      	bge.n	4048dc <__ieee754_rem_pio2+0x124>
  4049ce:	465b      	mov	r3, fp
  4049d0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  4049d4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4049d8:	e88a 0048 	stmia.w	sl, {r3, r6}
  4049dc:	f8ca 100c 	str.w	r1, [sl, #12]
  4049e0:	f8ca 0008 	str.w	r0, [sl, #8]
  4049e4:	426d      	negs	r5, r5
  4049e6:	e779      	b.n	4048dc <__ieee754_rem_pio2+0x124>
  4049e8:	54400000 	.word	0x54400000
  4049ec:	3ff921fb 	.word	0x3ff921fb
  4049f0:	1a626331 	.word	0x1a626331
  4049f4:	3dd0b461 	.word	0x3dd0b461
  4049f8:	1a600000 	.word	0x1a600000
  4049fc:	3dd0b461 	.word	0x3dd0b461
  404a00:	2e037073 	.word	0x2e037073
  404a04:	3ba3198a 	.word	0x3ba3198a
  404a08:	6dc9c883 	.word	0x6dc9c883
  404a0c:	3fe45f30 	.word	0x3fe45f30
  404a10:	3fe921fb 	.word	0x3fe921fb
  404a14:	4002d97b 	.word	0x4002d97b
  404a18:	3ff921fb 	.word	0x3ff921fb
  404a1c:	413921fb 	.word	0x413921fb
  404a20:	7fefffff 	.word	0x7fefffff
  404a24:	41700000 	.word	0x41700000
  404a28:	00407bf0 	.word	0x00407bf0
  404a2c:	3fe00000 	.word	0x3fe00000
  404a30:	00407b70 	.word	0x00407b70
  404a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404a38:	4640      	mov	r0, r8
  404a3a:	4649      	mov	r1, r9
  404a3c:	f000 ffce 	bl	4059dc <__aeabi_dsub>
  404a40:	153a      	asrs	r2, r7, #20
  404a42:	f3c1 530a 	ubfx	r3, r1, #20, #11
  404a46:	1ad3      	subs	r3, r2, r3
  404a48:	2b10      	cmp	r3, #16
  404a4a:	4683      	mov	fp, r0
  404a4c:	460e      	mov	r6, r1
  404a4e:	9209      	str	r2, [sp, #36]	; 0x24
  404a50:	e9ca 0100 	strd	r0, r1, [sl]
  404a54:	ddab      	ble.n	4049ae <__ieee754_rem_pio2+0x1f6>
  404a56:	a35e      	add	r3, pc, #376	; (adr r3, 404bd0 <__ieee754_rem_pio2+0x418>)
  404a58:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404a60:	f001 f970 	bl	405d44 <__aeabi_dmul>
  404a64:	4606      	mov	r6, r0
  404a66:	460f      	mov	r7, r1
  404a68:	4602      	mov	r2, r0
  404a6a:	460b      	mov	r3, r1
  404a6c:	4640      	mov	r0, r8
  404a6e:	4649      	mov	r1, r9
  404a70:	f000 ffb4 	bl	4059dc <__aeabi_dsub>
  404a74:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404a78:	4602      	mov	r2, r0
  404a7a:	460b      	mov	r3, r1
  404a7c:	4640      	mov	r0, r8
  404a7e:	4649      	mov	r1, r9
  404a80:	f000 ffac 	bl	4059dc <__aeabi_dsub>
  404a84:	4632      	mov	r2, r6
  404a86:	463b      	mov	r3, r7
  404a88:	f000 ffa8 	bl	4059dc <__aeabi_dsub>
  404a8c:	a352      	add	r3, pc, #328	; (adr r3, 404bd8 <__ieee754_rem_pio2+0x420>)
  404a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a92:	4606      	mov	r6, r0
  404a94:	460f      	mov	r7, r1
  404a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404a9a:	f001 f953 	bl	405d44 <__aeabi_dmul>
  404a9e:	4632      	mov	r2, r6
  404aa0:	463b      	mov	r3, r7
  404aa2:	f000 ff9b 	bl	4059dc <__aeabi_dsub>
  404aa6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404aae:	4602      	mov	r2, r0
  404ab0:	460b      	mov	r3, r1
  404ab2:	4640      	mov	r0, r8
  404ab4:	4649      	mov	r1, r9
  404ab6:	f000 ff91 	bl	4059dc <__aeabi_dsub>
  404aba:	460b      	mov	r3, r1
  404abc:	f3c1 570a 	ubfx	r7, r1, #20, #11
  404ac0:	460e      	mov	r6, r1
  404ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ac4:	1bcf      	subs	r7, r1, r7
  404ac6:	4602      	mov	r2, r0
  404ac8:	2f31      	cmp	r7, #49	; 0x31
  404aca:	4683      	mov	fp, r0
  404acc:	e9ca 2300 	strd	r2, r3, [sl]
  404ad0:	dd7a      	ble.n	404bc8 <__ieee754_rem_pio2+0x410>
  404ad2:	a343      	add	r3, pc, #268	; (adr r3, 404be0 <__ieee754_rem_pio2+0x428>)
  404ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ad8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404adc:	f001 f932 	bl	405d44 <__aeabi_dmul>
  404ae0:	4606      	mov	r6, r0
  404ae2:	460f      	mov	r7, r1
  404ae4:	4602      	mov	r2, r0
  404ae6:	460b      	mov	r3, r1
  404ae8:	4640      	mov	r0, r8
  404aea:	4649      	mov	r1, r9
  404aec:	e9cd 8906 	strd	r8, r9, [sp, #24]
  404af0:	f000 ff74 	bl	4059dc <__aeabi_dsub>
  404af4:	4602      	mov	r2, r0
  404af6:	460b      	mov	r3, r1
  404af8:	4680      	mov	r8, r0
  404afa:	4689      	mov	r9, r1
  404afc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404b00:	f000 ff6c 	bl	4059dc <__aeabi_dsub>
  404b04:	4632      	mov	r2, r6
  404b06:	463b      	mov	r3, r7
  404b08:	f000 ff68 	bl	4059dc <__aeabi_dsub>
  404b0c:	a336      	add	r3, pc, #216	; (adr r3, 404be8 <__ieee754_rem_pio2+0x430>)
  404b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b12:	4606      	mov	r6, r0
  404b14:	460f      	mov	r7, r1
  404b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404b1a:	f001 f913 	bl	405d44 <__aeabi_dmul>
  404b1e:	4632      	mov	r2, r6
  404b20:	463b      	mov	r3, r7
  404b22:	f000 ff5b 	bl	4059dc <__aeabi_dsub>
  404b26:	4602      	mov	r2, r0
  404b28:	460b      	mov	r3, r1
  404b2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404b2e:	e734      	b.n	40499a <__ieee754_rem_pio2+0x1e2>
  404b30:	f000 ff56 	bl	4059e0 <__adddf3>
  404b34:	4b30      	ldr	r3, [pc, #192]	; (404bf8 <__ieee754_rem_pio2+0x440>)
  404b36:	429f      	cmp	r7, r3
  404b38:	4604      	mov	r4, r0
  404b3a:	460d      	mov	r5, r1
  404b3c:	d026      	beq.n	404b8c <__ieee754_rem_pio2+0x3d4>
  404b3e:	a32c      	add	r3, pc, #176	; (adr r3, 404bf0 <__ieee754_rem_pio2+0x438>)
  404b40:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b44:	f000 ff4c 	bl	4059e0 <__adddf3>
  404b48:	4602      	mov	r2, r0
  404b4a:	460b      	mov	r3, r1
  404b4c:	e9ca 2300 	strd	r2, r3, [sl]
  404b50:	4629      	mov	r1, r5
  404b52:	4620      	mov	r0, r4
  404b54:	f000 ff42 	bl	4059dc <__aeabi_dsub>
  404b58:	a325      	add	r3, pc, #148	; (adr r3, 404bf0 <__ieee754_rem_pio2+0x438>)
  404b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b5e:	f000 ff3f 	bl	4059e0 <__adddf3>
  404b62:	f04f 35ff 	mov.w	r5, #4294967295
  404b66:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404b6a:	e6b7      	b.n	4048dc <__ieee754_rem_pio2+0x124>
  404b6c:	f8da 2004 	ldr.w	r2, [sl, #4]
  404b70:	f8da 300c 	ldr.w	r3, [sl, #12]
  404b74:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404b78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404b7c:	4245      	negs	r5, r0
  404b7e:	f8ca 2004 	str.w	r2, [sl, #4]
  404b82:	f8ca 300c 	str.w	r3, [sl, #12]
  404b86:	e6a9      	b.n	4048dc <__ieee754_rem_pio2+0x124>
  404b88:	2303      	movs	r3, #3
  404b8a:	e692      	b.n	4048b2 <__ieee754_rem_pio2+0xfa>
  404b8c:	a310      	add	r3, pc, #64	; (adr r3, 404bd0 <__ieee754_rem_pio2+0x418>)
  404b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b92:	f000 ff25 	bl	4059e0 <__adddf3>
  404b96:	a310      	add	r3, pc, #64	; (adr r3, 404bd8 <__ieee754_rem_pio2+0x420>)
  404b98:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b9c:	460d      	mov	r5, r1
  404b9e:	4604      	mov	r4, r0
  404ba0:	f000 ff1e 	bl	4059e0 <__adddf3>
  404ba4:	4602      	mov	r2, r0
  404ba6:	460b      	mov	r3, r1
  404ba8:	e9ca 2300 	strd	r2, r3, [sl]
  404bac:	4629      	mov	r1, r5
  404bae:	4620      	mov	r0, r4
  404bb0:	f000 ff14 	bl	4059dc <__aeabi_dsub>
  404bb4:	a308      	add	r3, pc, #32	; (adr r3, 404bd8 <__ieee754_rem_pio2+0x420>)
  404bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bba:	f000 ff11 	bl	4059e0 <__adddf3>
  404bbe:	f04f 35ff 	mov.w	r5, #4294967295
  404bc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404bc6:	e689      	b.n	4048dc <__ieee754_rem_pio2+0x124>
  404bc8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404bcc:	e6ef      	b.n	4049ae <__ieee754_rem_pio2+0x1f6>
  404bce:	bf00      	nop
  404bd0:	1a600000 	.word	0x1a600000
  404bd4:	3dd0b461 	.word	0x3dd0b461
  404bd8:	2e037073 	.word	0x2e037073
  404bdc:	3ba3198a 	.word	0x3ba3198a
  404be0:	2e000000 	.word	0x2e000000
  404be4:	3ba3198a 	.word	0x3ba3198a
  404be8:	252049c1 	.word	0x252049c1
  404bec:	397b839a 	.word	0x397b839a
  404bf0:	1a626331 	.word	0x1a626331
  404bf4:	3dd0b461 	.word	0x3dd0b461
  404bf8:	3ff921fb 	.word	0x3ff921fb
  404bfc:	00000000 	.word	0x00000000

00404c00 <__kernel_cos>:
  404c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  404c08:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  404c0c:	b085      	sub	sp, #20
  404c0e:	460c      	mov	r4, r1
  404c10:	4692      	mov	sl, r2
  404c12:	469b      	mov	fp, r3
  404c14:	4605      	mov	r5, r0
  404c16:	da6b      	bge.n	404cf0 <__kernel_cos+0xf0>
  404c18:	f001 fb2e 	bl	406278 <__aeabi_d2iz>
  404c1c:	2800      	cmp	r0, #0
  404c1e:	f000 80e8 	beq.w	404df2 <__kernel_cos+0x1f2>
  404c22:	462a      	mov	r2, r5
  404c24:	4623      	mov	r3, r4
  404c26:	4628      	mov	r0, r5
  404c28:	4621      	mov	r1, r4
  404c2a:	f001 f88b 	bl	405d44 <__aeabi_dmul>
  404c2e:	a374      	add	r3, pc, #464	; (adr r3, 404e00 <__kernel_cos+0x200>)
  404c30:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c34:	4680      	mov	r8, r0
  404c36:	4689      	mov	r9, r1
  404c38:	f001 f884 	bl	405d44 <__aeabi_dmul>
  404c3c:	a372      	add	r3, pc, #456	; (adr r3, 404e08 <__kernel_cos+0x208>)
  404c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c42:	f000 fecd 	bl	4059e0 <__adddf3>
  404c46:	4642      	mov	r2, r8
  404c48:	464b      	mov	r3, r9
  404c4a:	f001 f87b 	bl	405d44 <__aeabi_dmul>
  404c4e:	a370      	add	r3, pc, #448	; (adr r3, 404e10 <__kernel_cos+0x210>)
  404c50:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c54:	f000 fec2 	bl	4059dc <__aeabi_dsub>
  404c58:	4642      	mov	r2, r8
  404c5a:	464b      	mov	r3, r9
  404c5c:	f001 f872 	bl	405d44 <__aeabi_dmul>
  404c60:	a36d      	add	r3, pc, #436	; (adr r3, 404e18 <__kernel_cos+0x218>)
  404c62:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c66:	f000 febb 	bl	4059e0 <__adddf3>
  404c6a:	4642      	mov	r2, r8
  404c6c:	464b      	mov	r3, r9
  404c6e:	f001 f869 	bl	405d44 <__aeabi_dmul>
  404c72:	a36b      	add	r3, pc, #428	; (adr r3, 404e20 <__kernel_cos+0x220>)
  404c74:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c78:	f000 feb0 	bl	4059dc <__aeabi_dsub>
  404c7c:	4642      	mov	r2, r8
  404c7e:	464b      	mov	r3, r9
  404c80:	f001 f860 	bl	405d44 <__aeabi_dmul>
  404c84:	a368      	add	r3, pc, #416	; (adr r3, 404e28 <__kernel_cos+0x228>)
  404c86:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c8a:	f000 fea9 	bl	4059e0 <__adddf3>
  404c8e:	4642      	mov	r2, r8
  404c90:	464b      	mov	r3, r9
  404c92:	f001 f857 	bl	405d44 <__aeabi_dmul>
  404c96:	e9cd 0100 	strd	r0, r1, [sp]
  404c9a:	2200      	movs	r2, #0
  404c9c:	4b64      	ldr	r3, [pc, #400]	; (404e30 <__kernel_cos+0x230>)
  404c9e:	4640      	mov	r0, r8
  404ca0:	4649      	mov	r1, r9
  404ca2:	f001 f84f 	bl	405d44 <__aeabi_dmul>
  404ca6:	e9dd 2300 	ldrd	r2, r3, [sp]
  404caa:	4606      	mov	r6, r0
  404cac:	460f      	mov	r7, r1
  404cae:	4640      	mov	r0, r8
  404cb0:	4649      	mov	r1, r9
  404cb2:	f001 f847 	bl	405d44 <__aeabi_dmul>
  404cb6:	4652      	mov	r2, sl
  404cb8:	4680      	mov	r8, r0
  404cba:	4689      	mov	r9, r1
  404cbc:	465b      	mov	r3, fp
  404cbe:	4628      	mov	r0, r5
  404cc0:	4621      	mov	r1, r4
  404cc2:	f001 f83f 	bl	405d44 <__aeabi_dmul>
  404cc6:	4602      	mov	r2, r0
  404cc8:	460b      	mov	r3, r1
  404cca:	4640      	mov	r0, r8
  404ccc:	4649      	mov	r1, r9
  404cce:	f000 fe85 	bl	4059dc <__aeabi_dsub>
  404cd2:	4602      	mov	r2, r0
  404cd4:	460b      	mov	r3, r1
  404cd6:	4630      	mov	r0, r6
  404cd8:	4639      	mov	r1, r7
  404cda:	f000 fe7f 	bl	4059dc <__aeabi_dsub>
  404cde:	4602      	mov	r2, r0
  404ce0:	460b      	mov	r3, r1
  404ce2:	2000      	movs	r0, #0
  404ce4:	4953      	ldr	r1, [pc, #332]	; (404e34 <__kernel_cos+0x234>)
  404ce6:	f000 fe79 	bl	4059dc <__aeabi_dsub>
  404cea:	b005      	add	sp, #20
  404cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cf0:	4602      	mov	r2, r0
  404cf2:	460b      	mov	r3, r1
  404cf4:	f001 f826 	bl	405d44 <__aeabi_dmul>
  404cf8:	a341      	add	r3, pc, #260	; (adr r3, 404e00 <__kernel_cos+0x200>)
  404cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cfe:	4680      	mov	r8, r0
  404d00:	4689      	mov	r9, r1
  404d02:	f001 f81f 	bl	405d44 <__aeabi_dmul>
  404d06:	a340      	add	r3, pc, #256	; (adr r3, 404e08 <__kernel_cos+0x208>)
  404d08:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d0c:	f000 fe68 	bl	4059e0 <__adddf3>
  404d10:	4642      	mov	r2, r8
  404d12:	464b      	mov	r3, r9
  404d14:	f001 f816 	bl	405d44 <__aeabi_dmul>
  404d18:	a33d      	add	r3, pc, #244	; (adr r3, 404e10 <__kernel_cos+0x210>)
  404d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d1e:	f000 fe5d 	bl	4059dc <__aeabi_dsub>
  404d22:	4642      	mov	r2, r8
  404d24:	464b      	mov	r3, r9
  404d26:	f001 f80d 	bl	405d44 <__aeabi_dmul>
  404d2a:	a33b      	add	r3, pc, #236	; (adr r3, 404e18 <__kernel_cos+0x218>)
  404d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d30:	f000 fe56 	bl	4059e0 <__adddf3>
  404d34:	4642      	mov	r2, r8
  404d36:	464b      	mov	r3, r9
  404d38:	f001 f804 	bl	405d44 <__aeabi_dmul>
  404d3c:	a338      	add	r3, pc, #224	; (adr r3, 404e20 <__kernel_cos+0x220>)
  404d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d42:	f000 fe4b 	bl	4059dc <__aeabi_dsub>
  404d46:	4642      	mov	r2, r8
  404d48:	464b      	mov	r3, r9
  404d4a:	f000 fffb 	bl	405d44 <__aeabi_dmul>
  404d4e:	a336      	add	r3, pc, #216	; (adr r3, 404e28 <__kernel_cos+0x228>)
  404d50:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d54:	f000 fe44 	bl	4059e0 <__adddf3>
  404d58:	464b      	mov	r3, r9
  404d5a:	4642      	mov	r2, r8
  404d5c:	f000 fff2 	bl	405d44 <__aeabi_dmul>
  404d60:	4b35      	ldr	r3, [pc, #212]	; (404e38 <__kernel_cos+0x238>)
  404d62:	429e      	cmp	r6, r3
  404d64:	e9cd 0100 	strd	r0, r1, [sp]
  404d68:	dd97      	ble.n	404c9a <__kernel_cos+0x9a>
  404d6a:	4b34      	ldr	r3, [pc, #208]	; (404e3c <__kernel_cos+0x23c>)
  404d6c:	429e      	cmp	r6, r3
  404d6e:	f04f 0200 	mov.w	r2, #0
  404d72:	dc38      	bgt.n	404de6 <__kernel_cos+0x1e6>
  404d74:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  404d78:	2000      	movs	r0, #0
  404d7a:	492e      	ldr	r1, [pc, #184]	; (404e34 <__kernel_cos+0x234>)
  404d7c:	4616      	mov	r6, r2
  404d7e:	461f      	mov	r7, r3
  404d80:	f000 fe2c 	bl	4059dc <__aeabi_dsub>
  404d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d88:	2200      	movs	r2, #0
  404d8a:	4b29      	ldr	r3, [pc, #164]	; (404e30 <__kernel_cos+0x230>)
  404d8c:	4640      	mov	r0, r8
  404d8e:	4649      	mov	r1, r9
  404d90:	f000 ffd8 	bl	405d44 <__aeabi_dmul>
  404d94:	4632      	mov	r2, r6
  404d96:	463b      	mov	r3, r7
  404d98:	f000 fe20 	bl	4059dc <__aeabi_dsub>
  404d9c:	e9dd 2300 	ldrd	r2, r3, [sp]
  404da0:	4606      	mov	r6, r0
  404da2:	460f      	mov	r7, r1
  404da4:	4640      	mov	r0, r8
  404da6:	4649      	mov	r1, r9
  404da8:	f000 ffcc 	bl	405d44 <__aeabi_dmul>
  404dac:	4652      	mov	r2, sl
  404dae:	4680      	mov	r8, r0
  404db0:	4689      	mov	r9, r1
  404db2:	465b      	mov	r3, fp
  404db4:	4628      	mov	r0, r5
  404db6:	4621      	mov	r1, r4
  404db8:	f000 ffc4 	bl	405d44 <__aeabi_dmul>
  404dbc:	4602      	mov	r2, r0
  404dbe:	460b      	mov	r3, r1
  404dc0:	4640      	mov	r0, r8
  404dc2:	4649      	mov	r1, r9
  404dc4:	f000 fe0a 	bl	4059dc <__aeabi_dsub>
  404dc8:	4602      	mov	r2, r0
  404dca:	460b      	mov	r3, r1
  404dcc:	4630      	mov	r0, r6
  404dce:	4639      	mov	r1, r7
  404dd0:	f000 fe04 	bl	4059dc <__aeabi_dsub>
  404dd4:	4602      	mov	r2, r0
  404dd6:	460b      	mov	r3, r1
  404dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ddc:	f000 fdfe 	bl	4059dc <__aeabi_dsub>
  404de0:	b005      	add	sp, #20
  404de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404de6:	4b16      	ldr	r3, [pc, #88]	; (404e40 <__kernel_cos+0x240>)
  404de8:	4f16      	ldr	r7, [pc, #88]	; (404e44 <__kernel_cos+0x244>)
  404dea:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404dee:	2600      	movs	r6, #0
  404df0:	e7ca      	b.n	404d88 <__kernel_cos+0x188>
  404df2:	4910      	ldr	r1, [pc, #64]	; (404e34 <__kernel_cos+0x234>)
  404df4:	2000      	movs	r0, #0
  404df6:	b005      	add	sp, #20
  404df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dfc:	f3af 8000 	nop.w
  404e00:	be8838d4 	.word	0xbe8838d4
  404e04:	bda8fae9 	.word	0xbda8fae9
  404e08:	bdb4b1c4 	.word	0xbdb4b1c4
  404e0c:	3e21ee9e 	.word	0x3e21ee9e
  404e10:	809c52ad 	.word	0x809c52ad
  404e14:	3e927e4f 	.word	0x3e927e4f
  404e18:	19cb1590 	.word	0x19cb1590
  404e1c:	3efa01a0 	.word	0x3efa01a0
  404e20:	16c15177 	.word	0x16c15177
  404e24:	3f56c16c 	.word	0x3f56c16c
  404e28:	5555554c 	.word	0x5555554c
  404e2c:	3fa55555 	.word	0x3fa55555
  404e30:	3fe00000 	.word	0x3fe00000
  404e34:	3ff00000 	.word	0x3ff00000
  404e38:	3fd33332 	.word	0x3fd33332
  404e3c:	3fe90000 	.word	0x3fe90000
  404e40:	3fe70000 	.word	0x3fe70000
  404e44:	3fd20000 	.word	0x3fd20000

00404e48 <__kernel_rem_pio2>:
  404e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e4c:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  404e50:	4c79      	ldr	r4, [pc, #484]	; (405038 <__kernel_rem_pio2+0x1f0>)
  404e52:	9ea6      	ldr	r6, [sp, #664]	; 0x298
  404e54:	4d79      	ldr	r5, [pc, #484]	; (40503c <__kernel_rem_pio2+0x1f4>)
  404e56:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  404e5a:	9409      	str	r4, [sp, #36]	; 0x24
  404e5c:	4626      	mov	r6, r4
  404e5e:	1ed4      	subs	r4, r2, #3
  404e60:	fb85 7504 	smull	r7, r5, r5, r4
  404e64:	17e4      	asrs	r4, r4, #31
  404e66:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  404e6a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  404e6e:	461d      	mov	r5, r3
  404e70:	930c      	str	r3, [sp, #48]	; 0x30
  404e72:	1c63      	adds	r3, r4, #1
  404e74:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  404e78:	3d01      	subs	r5, #1
  404e7a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404e7e:	9308      	str	r3, [sp, #32]
  404e80:	462b      	mov	r3, r5
  404e82:	940d      	str	r4, [sp, #52]	; 0x34
  404e84:	9502      	str	r5, [sp, #8]
  404e86:	1b65      	subs	r5, r4, r5
  404e88:	18f4      	adds	r4, r6, r3
  404e8a:	9004      	str	r0, [sp, #16]
  404e8c:	910a      	str	r1, [sp, #40]	; 0x28
  404e8e:	d416      	bmi.n	404ebe <__kernel_rem_pio2+0x76>
  404e90:	442c      	add	r4, r5
  404e92:	3401      	adds	r4, #1
  404e94:	ae22      	add	r6, sp, #136	; 0x88
  404e96:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  404e98:	e008      	b.n	404eac <__kernel_rem_pio2+0x64>
  404e9a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  404e9e:	f000 feeb 	bl	405c78 <__aeabi_i2d>
  404ea2:	3501      	adds	r5, #1
  404ea4:	42a5      	cmp	r5, r4
  404ea6:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404eaa:	d008      	beq.n	404ebe <__kernel_rem_pio2+0x76>
  404eac:	2d00      	cmp	r5, #0
  404eae:	daf4      	bge.n	404e9a <__kernel_rem_pio2+0x52>
  404eb0:	3501      	adds	r5, #1
  404eb2:	2000      	movs	r0, #0
  404eb4:	2100      	movs	r1, #0
  404eb6:	42a5      	cmp	r5, r4
  404eb8:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404ebc:	d1f6      	bne.n	404eac <__kernel_rem_pio2+0x64>
  404ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ec0:	2b00      	cmp	r3, #0
  404ec2:	db31      	blt.n	404f28 <__kernel_rem_pio2+0xe0>
  404ec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404ec8:	a974      	add	r1, sp, #464	; 0x1d0
  404eca:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  404ece:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  404ed2:	9a02      	ldr	r2, [sp, #8]
  404ed4:	a924      	add	r1, sp, #144	; 0x90
  404ed6:	00db      	lsls	r3, r3, #3
  404ed8:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
  404edc:	9301      	str	r3, [sp, #4]
  404ede:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
  404ee2:	9b02      	ldr	r3, [sp, #8]
  404ee4:	2b00      	cmp	r3, #0
  404ee6:	f2c0 8190 	blt.w	40520a <__kernel_rem_pio2+0x3c2>
  404eea:	9b04      	ldr	r3, [sp, #16]
  404eec:	f1a3 0508 	sub.w	r5, r3, #8
  404ef0:	9b01      	ldr	r3, [sp, #4]
  404ef2:	464c      	mov	r4, r9
  404ef4:	eb09 0803 	add.w	r8, r9, r3
  404ef8:	2600      	movs	r6, #0
  404efa:	2700      	movs	r7, #0
  404efc:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  404f00:	e874 0102 	ldrd	r0, r1, [r4], #-8
  404f04:	f000 ff1e 	bl	405d44 <__aeabi_dmul>
  404f08:	4602      	mov	r2, r0
  404f0a:	460b      	mov	r3, r1
  404f0c:	4630      	mov	r0, r6
  404f0e:	4639      	mov	r1, r7
  404f10:	f000 fd66 	bl	4059e0 <__adddf3>
  404f14:	4544      	cmp	r4, r8
  404f16:	4606      	mov	r6, r0
  404f18:	460f      	mov	r7, r1
  404f1a:	d1ef      	bne.n	404efc <__kernel_rem_pio2+0xb4>
  404f1c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  404f20:	45da      	cmp	sl, fp
  404f22:	f109 0908 	add.w	r9, r9, #8
  404f26:	d1dc      	bne.n	404ee2 <__kernel_rem_pio2+0x9a>
  404f28:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404f2a:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  404f2e:	3b02      	subs	r3, #2
  404f30:	009b      	lsls	r3, r3, #2
  404f32:	1d1a      	adds	r2, r3, #4
  404f34:	a910      	add	r1, sp, #64	; 0x40
  404f36:	440a      	add	r2, r1
  404f38:	440b      	add	r3, r1
  404f3a:	920f      	str	r2, [sp, #60]	; 0x3c
  404f3c:	930e      	str	r3, [sp, #56]	; 0x38
  404f3e:	ab9c      	add	r3, sp, #624	; 0x270
  404f40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404f44:	2d00      	cmp	r5, #0
  404f46:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  404f4a:	dd2b      	ble.n	404fa4 <__kernel_rem_pio2+0x15c>
  404f4c:	ab9c      	add	r3, sp, #624	; 0x270
  404f4e:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
  404f52:	3ca8      	subs	r4, #168	; 0xa8
  404f54:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
  404f58:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  404f5c:	2200      	movs	r2, #0
  404f5e:	4b38      	ldr	r3, [pc, #224]	; (405040 <__kernel_rem_pio2+0x1f8>)
  404f60:	4630      	mov	r0, r6
  404f62:	4639      	mov	r1, r7
  404f64:	f000 feee 	bl	405d44 <__aeabi_dmul>
  404f68:	f001 f986 	bl	406278 <__aeabi_d2iz>
  404f6c:	f000 fe84 	bl	405c78 <__aeabi_i2d>
  404f70:	2200      	movs	r2, #0
  404f72:	4b34      	ldr	r3, [pc, #208]	; (405044 <__kernel_rem_pio2+0x1fc>)
  404f74:	4680      	mov	r8, r0
  404f76:	4689      	mov	r9, r1
  404f78:	f000 fee4 	bl	405d44 <__aeabi_dmul>
  404f7c:	4602      	mov	r2, r0
  404f7e:	460b      	mov	r3, r1
  404f80:	4630      	mov	r0, r6
  404f82:	4639      	mov	r1, r7
  404f84:	f000 fd2a 	bl	4059dc <__aeabi_dsub>
  404f88:	f001 f976 	bl	406278 <__aeabi_d2iz>
  404f8c:	e874 2302 	ldrd	r2, r3, [r4], #-8
  404f90:	f84a 0f04 	str.w	r0, [sl, #4]!
  404f94:	4649      	mov	r1, r9
  404f96:	4640      	mov	r0, r8
  404f98:	f000 fd22 	bl	4059e0 <__adddf3>
  404f9c:	455c      	cmp	r4, fp
  404f9e:	4606      	mov	r6, r0
  404fa0:	460f      	mov	r7, r1
  404fa2:	d1db      	bne.n	404f5c <__kernel_rem_pio2+0x114>
  404fa4:	9c08      	ldr	r4, [sp, #32]
  404fa6:	4630      	mov	r0, r6
  404fa8:	4639      	mov	r1, r7
  404faa:	4622      	mov	r2, r4
  404fac:	f000 fc8c 	bl	4058c8 <scalbn>
  404fb0:	2200      	movs	r2, #0
  404fb2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  404fb6:	4606      	mov	r6, r0
  404fb8:	460f      	mov	r7, r1
  404fba:	f000 fec3 	bl	405d44 <__aeabi_dmul>
  404fbe:	f000 fbfb 	bl	4057b8 <floor>
  404fc2:	2200      	movs	r2, #0
  404fc4:	4b20      	ldr	r3, [pc, #128]	; (405048 <__kernel_rem_pio2+0x200>)
  404fc6:	f000 febd 	bl	405d44 <__aeabi_dmul>
  404fca:	4602      	mov	r2, r0
  404fcc:	460b      	mov	r3, r1
  404fce:	4630      	mov	r0, r6
  404fd0:	4639      	mov	r1, r7
  404fd2:	f000 fd03 	bl	4059dc <__aeabi_dsub>
  404fd6:	460f      	mov	r7, r1
  404fd8:	4606      	mov	r6, r0
  404fda:	f001 f94d 	bl	406278 <__aeabi_d2iz>
  404fde:	4681      	mov	r9, r0
  404fe0:	f000 fe4a 	bl	405c78 <__aeabi_i2d>
  404fe4:	4602      	mov	r2, r0
  404fe6:	460b      	mov	r3, r1
  404fe8:	4630      	mov	r0, r6
  404fea:	4639      	mov	r1, r7
  404fec:	f000 fcf6 	bl	4059dc <__aeabi_dsub>
  404ff0:	2c00      	cmp	r4, #0
  404ff2:	4606      	mov	r6, r0
  404ff4:	460f      	mov	r7, r1
  404ff6:	f340 80ef 	ble.w	4051d8 <__kernel_rem_pio2+0x390>
  404ffa:	1e69      	subs	r1, r5, #1
  404ffc:	aa10      	add	r2, sp, #64	; 0x40
  404ffe:	f1c4 0318 	rsb	r3, r4, #24
  405002:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  405006:	fa42 f003 	asr.w	r0, r2, r3
  40500a:	fa00 f303 	lsl.w	r3, r0, r3
  40500e:	1ad3      	subs	r3, r2, r3
  405010:	aa10      	add	r2, sp, #64	; 0x40
  405012:	f1c4 0817 	rsb	r8, r4, #23
  405016:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  40501a:	4481      	add	r9, r0
  40501c:	fa43 f808 	asr.w	r8, r3, r8
  405020:	f1b8 0f00 	cmp.w	r8, #0
  405024:	dd3d      	ble.n	4050a2 <__kernel_rem_pio2+0x25a>
  405026:	2d00      	cmp	r5, #0
  405028:	f109 0901 	add.w	r9, r9, #1
  40502c:	f340 82d6 	ble.w	4055dc <__kernel_rem_pio2+0x794>
  405030:	2200      	movs	r2, #0
  405032:	4614      	mov	r4, r2
  405034:	a90f      	add	r1, sp, #60	; 0x3c
  405036:	e011      	b.n	40505c <__kernel_rem_pio2+0x214>
  405038:	00407cf8 	.word	0x00407cf8
  40503c:	2aaaaaab 	.word	0x2aaaaaab
  405040:	3e700000 	.word	0x3e700000
  405044:	41700000 	.word	0x41700000
  405048:	40200000 	.word	0x40200000
  40504c:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
  405050:	b10b      	cbz	r3, 405056 <__kernel_rem_pio2+0x20e>
  405052:	6008      	str	r0, [r1, #0]
  405054:	2401      	movs	r4, #1
  405056:	3201      	adds	r2, #1
  405058:	4295      	cmp	r5, r2
  40505a:	dd0d      	ble.n	405078 <__kernel_rem_pio2+0x230>
  40505c:	f851 3f04 	ldr.w	r3, [r1, #4]!
  405060:	2c00      	cmp	r4, #0
  405062:	d0f3      	beq.n	40504c <__kernel_rem_pio2+0x204>
  405064:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
  405068:	3201      	adds	r2, #1
  40506a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  40506e:	4295      	cmp	r5, r2
  405070:	600b      	str	r3, [r1, #0]
  405072:	f04f 0401 	mov.w	r4, #1
  405076:	dcf1      	bgt.n	40505c <__kernel_rem_pio2+0x214>
  405078:	9b08      	ldr	r3, [sp, #32]
  40507a:	2b00      	cmp	r3, #0
  40507c:	dd0d      	ble.n	40509a <__kernel_rem_pio2+0x252>
  40507e:	2b01      	cmp	r3, #1
  405080:	f000 80b2 	beq.w	4051e8 <__kernel_rem_pio2+0x3a0>
  405084:	2b02      	cmp	r3, #2
  405086:	d108      	bne.n	40509a <__kernel_rem_pio2+0x252>
  405088:	1e6a      	subs	r2, r5, #1
  40508a:	ab10      	add	r3, sp, #64	; 0x40
  40508c:	a910      	add	r1, sp, #64	; 0x40
  40508e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405092:	f3c3 0315 	ubfx	r3, r3, #0, #22
  405096:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40509a:	f1b8 0f02 	cmp.w	r8, #2
  40509e:	f000 8082 	beq.w	4051a6 <__kernel_rem_pio2+0x35e>
  4050a2:	2200      	movs	r2, #0
  4050a4:	2300      	movs	r3, #0
  4050a6:	4630      	mov	r0, r6
  4050a8:	4639      	mov	r1, r7
  4050aa:	f001 f8b3 	bl	406214 <__aeabi_dcmpeq>
  4050ae:	2800      	cmp	r0, #0
  4050b0:	f000 825e 	beq.w	405570 <__kernel_rem_pio2+0x728>
  4050b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050b6:	f105 3bff 	add.w	fp, r5, #4294967295
  4050ba:	455b      	cmp	r3, fp
  4050bc:	dc10      	bgt.n	4050e0 <__kernel_rem_pio2+0x298>
  4050be:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  4050c2:	aa10      	add	r2, sp, #64	; 0x40
  4050c4:	3b01      	subs	r3, #1
  4050c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4050c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4050cc:	2200      	movs	r2, #0
  4050ce:	f853 1904 	ldr.w	r1, [r3], #-4
  4050d2:	4283      	cmp	r3, r0
  4050d4:	ea42 0201 	orr.w	r2, r2, r1
  4050d8:	d1f9      	bne.n	4050ce <__kernel_rem_pio2+0x286>
  4050da:	2a00      	cmp	r2, #0
  4050dc:	f040 80b2 	bne.w	405244 <__kernel_rem_pio2+0x3fc>
  4050e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050e2:	aa10      	add	r2, sp, #64	; 0x40
  4050e4:	3b01      	subs	r3, #1
  4050e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4050ea:	2b00      	cmp	r3, #0
  4050ec:	f040 8274 	bne.w	4055d8 <__kernel_rem_pio2+0x790>
  4050f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4050f2:	2301      	movs	r3, #1
  4050f4:	f852 1904 	ldr.w	r1, [r2], #-4
  4050f8:	3301      	adds	r3, #1
  4050fa:	2900      	cmp	r1, #0
  4050fc:	d0fa      	beq.n	4050f4 <__kernel_rem_pio2+0x2ac>
  4050fe:	18e9      	adds	r1, r5, r3
  405100:	1c6a      	adds	r2, r5, #1
  405102:	428a      	cmp	r2, r1
  405104:	910b      	str	r1, [sp, #44]	; 0x2c
  405106:	dc49      	bgt.n	40519c <__kernel_rem_pio2+0x354>
  405108:	990d      	ldr	r1, [sp, #52]	; 0x34
  40510a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40510c:	1851      	adds	r1, r2, r1
  40510e:	00db      	lsls	r3, r3, #3
  405110:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  405114:	9305      	str	r3, [sp, #20]
  405116:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  405118:	4405      	add	r5, r0
  40511a:	3901      	subs	r1, #1
  40511c:	00e8      	lsls	r0, r5, #3
  40511e:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
  405122:	ab24      	add	r3, sp, #144	; 0x90
  405124:	00d2      	lsls	r2, r2, #3
  405126:	eb03 0b00 	add.w	fp, r3, r0
  40512a:	ab74      	add	r3, sp, #464	; 0x1d0
  40512c:	4413      	add	r3, r2
  40512e:	9301      	str	r3, [sp, #4]
  405130:	f1a2 0308 	sub.w	r3, r2, #8
  405134:	9006      	str	r0, [sp, #24]
  405136:	9307      	str	r3, [sp, #28]
  405138:	f04f 0900 	mov.w	r9, #0
  40513c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
  405140:	f000 fd9a 	bl	405c78 <__aeabi_i2d>
  405144:	9b02      	ldr	r3, [sp, #8]
  405146:	2b00      	cmp	r3, #0
  405148:	e8eb 0102 	strd	r0, r1, [fp], #8
  40514c:	db28      	blt.n	4051a0 <__kernel_rem_pio2+0x358>
  40514e:	9b06      	ldr	r3, [sp, #24]
  405150:	eb03 0409 	add.w	r4, r3, r9
  405154:	9b07      	ldr	r3, [sp, #28]
  405156:	eb09 0803 	add.w	r8, r9, r3
  40515a:	ab24      	add	r3, sp, #144	; 0x90
  40515c:	441c      	add	r4, r3
  40515e:	4498      	add	r8, r3
  405160:	9b04      	ldr	r3, [sp, #16]
  405162:	2600      	movs	r6, #0
  405164:	f1a3 0508 	sub.w	r5, r3, #8
  405168:	2700      	movs	r7, #0
  40516a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  40516e:	e874 0102 	ldrd	r0, r1, [r4], #-8
  405172:	f000 fde7 	bl	405d44 <__aeabi_dmul>
  405176:	4602      	mov	r2, r0
  405178:	460b      	mov	r3, r1
  40517a:	4630      	mov	r0, r6
  40517c:	4639      	mov	r1, r7
  40517e:	f000 fc2f 	bl	4059e0 <__adddf3>
  405182:	4544      	cmp	r4, r8
  405184:	4606      	mov	r6, r0
  405186:	460f      	mov	r7, r1
  405188:	d1ef      	bne.n	40516a <__kernel_rem_pio2+0x322>
  40518a:	9b01      	ldr	r3, [sp, #4]
  40518c:	e8e3 6702 	strd	r6, r7, [r3], #8
  405190:	9301      	str	r3, [sp, #4]
  405192:	9b05      	ldr	r3, [sp, #20]
  405194:	f109 0908 	add.w	r9, r9, #8
  405198:	4599      	cmp	r9, r3
  40519a:	d1cf      	bne.n	40513c <__kernel_rem_pio2+0x2f4>
  40519c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40519e:	e6ce      	b.n	404f3e <__kernel_rem_pio2+0xf6>
  4051a0:	2600      	movs	r6, #0
  4051a2:	2700      	movs	r7, #0
  4051a4:	e7f1      	b.n	40518a <__kernel_rem_pio2+0x342>
  4051a6:	4632      	mov	r2, r6
  4051a8:	463b      	mov	r3, r7
  4051aa:	2000      	movs	r0, #0
  4051ac:	49b0      	ldr	r1, [pc, #704]	; (405470 <__kernel_rem_pio2+0x628>)
  4051ae:	f000 fc15 	bl	4059dc <__aeabi_dsub>
  4051b2:	4606      	mov	r6, r0
  4051b4:	460f      	mov	r7, r1
  4051b6:	2c00      	cmp	r4, #0
  4051b8:	f43f af73 	beq.w	4050a2 <__kernel_rem_pio2+0x25a>
  4051bc:	9a08      	ldr	r2, [sp, #32]
  4051be:	49ac      	ldr	r1, [pc, #688]	; (405470 <__kernel_rem_pio2+0x628>)
  4051c0:	2000      	movs	r0, #0
  4051c2:	f000 fb81 	bl	4058c8 <scalbn>
  4051c6:	4602      	mov	r2, r0
  4051c8:	460b      	mov	r3, r1
  4051ca:	4630      	mov	r0, r6
  4051cc:	4639      	mov	r1, r7
  4051ce:	f000 fc05 	bl	4059dc <__aeabi_dsub>
  4051d2:	4606      	mov	r6, r0
  4051d4:	460f      	mov	r7, r1
  4051d6:	e764      	b.n	4050a2 <__kernel_rem_pio2+0x25a>
  4051d8:	d110      	bne.n	4051fc <__kernel_rem_pio2+0x3b4>
  4051da:	1e6b      	subs	r3, r5, #1
  4051dc:	aa10      	add	r2, sp, #64	; 0x40
  4051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4051e2:	ea4f 58e3 	mov.w	r8, r3, asr #23
  4051e6:	e71b      	b.n	405020 <__kernel_rem_pio2+0x1d8>
  4051e8:	1e6a      	subs	r2, r5, #1
  4051ea:	ab10      	add	r3, sp, #64	; 0x40
  4051ec:	a910      	add	r1, sp, #64	; 0x40
  4051ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4051f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
  4051f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4051fa:	e74e      	b.n	40509a <__kernel_rem_pio2+0x252>
  4051fc:	2200      	movs	r2, #0
  4051fe:	4b9d      	ldr	r3, [pc, #628]	; (405474 <__kernel_rem_pio2+0x62c>)
  405200:	f001 f826 	bl	406250 <__aeabi_dcmpge>
  405204:	b958      	cbnz	r0, 40521e <__kernel_rem_pio2+0x3d6>
  405206:	4680      	mov	r8, r0
  405208:	e74b      	b.n	4050a2 <__kernel_rem_pio2+0x25a>
  40520a:	2600      	movs	r6, #0
  40520c:	2700      	movs	r7, #0
  40520e:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  405212:	45da      	cmp	sl, fp
  405214:	f109 0908 	add.w	r9, r9, #8
  405218:	f47f ae63 	bne.w	404ee2 <__kernel_rem_pio2+0x9a>
  40521c:	e684      	b.n	404f28 <__kernel_rem_pio2+0xe0>
  40521e:	2d00      	cmp	r5, #0
  405220:	f109 0901 	add.w	r9, r9, #1
  405224:	bfc8      	it	gt
  405226:	f04f 0802 	movgt.w	r8, #2
  40522a:	f73f af01 	bgt.w	405030 <__kernel_rem_pio2+0x1e8>
  40522e:	4632      	mov	r2, r6
  405230:	463b      	mov	r3, r7
  405232:	2000      	movs	r0, #0
  405234:	498e      	ldr	r1, [pc, #568]	; (405470 <__kernel_rem_pio2+0x628>)
  405236:	f000 fbd1 	bl	4059dc <__aeabi_dsub>
  40523a:	f04f 0802 	mov.w	r8, #2
  40523e:	4606      	mov	r6, r0
  405240:	460f      	mov	r7, r1
  405242:	e72e      	b.n	4050a2 <__kernel_rem_pio2+0x25a>
  405244:	ab10      	add	r3, sp, #64	; 0x40
  405246:	9a08      	ldr	r2, [sp, #32]
  405248:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
  40524c:	f8cd 9014 	str.w	r9, [sp, #20]
  405250:	3a18      	subs	r2, #24
  405252:	f8cd 8004 	str.w	r8, [sp, #4]
  405256:	9208      	str	r2, [sp, #32]
  405258:	b96b      	cbnz	r3, 405276 <__kernel_rem_pio2+0x42e>
  40525a:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
  40525e:	3b01      	subs	r3, #1
  405260:	a910      	add	r1, sp, #64	; 0x40
  405262:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  405266:	f853 1904 	ldr.w	r1, [r3], #-4
  40526a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40526e:	3a18      	subs	r2, #24
  405270:	2900      	cmp	r1, #0
  405272:	d0f8      	beq.n	405266 <__kernel_rem_pio2+0x41e>
  405274:	9208      	str	r2, [sp, #32]
  405276:	9a08      	ldr	r2, [sp, #32]
  405278:	497d      	ldr	r1, [pc, #500]	; (405470 <__kernel_rem_pio2+0x628>)
  40527a:	2000      	movs	r0, #0
  40527c:	f000 fb24 	bl	4058c8 <scalbn>
  405280:	f1bb 0f00 	cmp.w	fp, #0
  405284:	4604      	mov	r4, r0
  405286:	460d      	mov	r5, r1
  405288:	f2c0 81b8 	blt.w	4055fc <__kernel_rem_pio2+0x7b4>
  40528c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  405290:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
  405294:	aa10      	add	r2, sp, #64	; 0x40
  405296:	eb02 068b 	add.w	r6, r2, fp, lsl #2
  40529a:	eb08 0903 	add.w	r9, r8, r3
  40529e:	9304      	str	r3, [sp, #16]
  4052a0:	3604      	adds	r6, #4
  4052a2:	f109 0708 	add.w	r7, r9, #8
  4052a6:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  4052aa:	f000 fce5 	bl	405c78 <__aeabi_i2d>
  4052ae:	4622      	mov	r2, r4
  4052b0:	462b      	mov	r3, r5
  4052b2:	f000 fd47 	bl	405d44 <__aeabi_dmul>
  4052b6:	2200      	movs	r2, #0
  4052b8:	e967 0102 	strd	r0, r1, [r7, #-8]!
  4052bc:	4b6e      	ldr	r3, [pc, #440]	; (405478 <__kernel_rem_pio2+0x630>)
  4052be:	4620      	mov	r0, r4
  4052c0:	4629      	mov	r1, r5
  4052c2:	f000 fd3f 	bl	405d44 <__aeabi_dmul>
  4052c6:	45b8      	cmp	r8, r7
  4052c8:	4604      	mov	r4, r0
  4052ca:	460d      	mov	r5, r1
  4052cc:	d1eb      	bne.n	4052a6 <__kernel_rem_pio2+0x45e>
  4052ce:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  4052d2:	464b      	mov	r3, r9
  4052d4:	f8cd a008 	str.w	sl, [sp, #8]
  4052d8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4052dc:	f8cd b018 	str.w	fp, [sp, #24]
  4052e0:	f04f 0900 	mov.w	r9, #0
  4052e4:	469b      	mov	fp, r3
  4052e6:	f1ba 0f00 	cmp.w	sl, #0
  4052ea:	f2c0 812a 	blt.w	405542 <__kernel_rem_pio2+0x6fa>
  4052ee:	f8df 818c 	ldr.w	r8, [pc, #396]	; 40547c <__kernel_rem_pio2+0x634>
  4052f2:	465d      	mov	r5, fp
  4052f4:	a35c      	add	r3, pc, #368	; (adr r3, 405468 <__kernel_rem_pio2+0x620>)
  4052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052fa:	2600      	movs	r6, #0
  4052fc:	2700      	movs	r7, #0
  4052fe:	2400      	movs	r4, #0
  405300:	e003      	b.n	40530a <__kernel_rem_pio2+0x4c2>
  405302:	45a1      	cmp	r9, r4
  405304:	db10      	blt.n	405328 <__kernel_rem_pio2+0x4e0>
  405306:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
  40530a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  40530e:	f000 fd19 	bl	405d44 <__aeabi_dmul>
  405312:	4602      	mov	r2, r0
  405314:	460b      	mov	r3, r1
  405316:	4630      	mov	r0, r6
  405318:	4639      	mov	r1, r7
  40531a:	f000 fb61 	bl	4059e0 <__adddf3>
  40531e:	3401      	adds	r4, #1
  405320:	45a2      	cmp	sl, r4
  405322:	4606      	mov	r6, r0
  405324:	460f      	mov	r7, r1
  405326:	daec      	bge.n	405302 <__kernel_rem_pio2+0x4ba>
  405328:	9b02      	ldr	r3, [sp, #8]
  40532a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40532e:	f1ab 0b08 	sub.w	fp, fp, #8
  405332:	e9c3 6700 	strd	r6, r7, [r3]
  405336:	ab72      	add	r3, sp, #456	; 0x1c8
  405338:	455b      	cmp	r3, fp
  40533a:	f109 0901 	add.w	r9, r9, #1
  40533e:	d1d2      	bne.n	4052e6 <__kernel_rem_pio2+0x49e>
  405340:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  405342:	f8dd b018 	ldr.w	fp, [sp, #24]
  405346:	f8dd a008 	ldr.w	sl, [sp, #8]
  40534a:	2b03      	cmp	r3, #3
  40534c:	f200 8083 	bhi.w	405456 <__kernel_rem_pio2+0x60e>
  405350:	e8df f013 	tbh	[pc, r3, lsl #1]
  405354:	009600d5 	.word	0x009600d5
  405358:	00040096 	.word	0x00040096
  40535c:	f1bb 0f00 	cmp.w	fp, #0
  405360:	f340 8156 	ble.w	405610 <__kernel_rem_pio2+0x7c8>
  405364:	9b04      	ldr	r3, [sp, #16]
  405366:	f8cd b008 	str.w	fp, [sp, #8]
  40536a:	eb0a 0803 	add.w	r8, sl, r3
  40536e:	e9d8 6700 	ldrd	r6, r7, [r8]
  405372:	46d3      	mov	fp, sl
  405374:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  405378:	4632      	mov	r2, r6
  40537a:	463b      	mov	r3, r7
  40537c:	4648      	mov	r0, r9
  40537e:	4651      	mov	r1, sl
  405380:	f000 fb2e 	bl	4059e0 <__adddf3>
  405384:	4604      	mov	r4, r0
  405386:	460d      	mov	r5, r1
  405388:	4602      	mov	r2, r0
  40538a:	460b      	mov	r3, r1
  40538c:	4648      	mov	r0, r9
  40538e:	4651      	mov	r1, sl
  405390:	f000 fb24 	bl	4059dc <__aeabi_dsub>
  405394:	4632      	mov	r2, r6
  405396:	463b      	mov	r3, r7
  405398:	f000 fb22 	bl	4059e0 <__adddf3>
  40539c:	e9c8 0100 	strd	r0, r1, [r8]
  4053a0:	e968 4502 	strd	r4, r5, [r8, #-8]!
  4053a4:	45c3      	cmp	fp, r8
  4053a6:	4626      	mov	r6, r4
  4053a8:	462f      	mov	r7, r5
  4053aa:	d1e3      	bne.n	405374 <__kernel_rem_pio2+0x52c>
  4053ac:	46da      	mov	sl, fp
  4053ae:	f8dd b008 	ldr.w	fp, [sp, #8]
  4053b2:	f1bb 0f01 	cmp.w	fp, #1
  4053b6:	f340 812b 	ble.w	405610 <__kernel_rem_pio2+0x7c8>
  4053ba:	9b04      	ldr	r3, [sp, #16]
  4053bc:	4453      	add	r3, sl
  4053be:	e9d3 6700 	ldrd	r6, r7, [r3]
  4053c2:	4698      	mov	r8, r3
  4053c4:	4699      	mov	r9, r3
  4053c6:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  4053ca:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  4053ce:	4630      	mov	r0, r6
  4053d0:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4053d4:	461a      	mov	r2, r3
  4053d6:	4639      	mov	r1, r7
  4053d8:	4623      	mov	r3, r4
  4053da:	f000 fb01 	bl	4059e0 <__adddf3>
  4053de:	4604      	mov	r4, r0
  4053e0:	460d      	mov	r5, r1
  4053e2:	4602      	mov	r2, r0
  4053e4:	460b      	mov	r3, r1
  4053e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4053ea:	f000 faf7 	bl	4059dc <__aeabi_dsub>
  4053ee:	4632      	mov	r2, r6
  4053f0:	463b      	mov	r3, r7
  4053f2:	f000 faf5 	bl	4059e0 <__adddf3>
  4053f6:	e9c9 0100 	strd	r0, r1, [r9]
  4053fa:	e969 4502 	strd	r4, r5, [r9, #-8]!
  4053fe:	45cb      	cmp	fp, r9
  405400:	4626      	mov	r6, r4
  405402:	462f      	mov	r7, r5
  405404:	d1e1      	bne.n	4053ca <__kernel_rem_pio2+0x582>
  405406:	2300      	movs	r3, #0
  405408:	f108 0808 	add.w	r8, r8, #8
  40540c:	461d      	mov	r5, r3
  40540e:	ac50      	add	r4, sp, #320	; 0x140
  405410:	4618      	mov	r0, r3
  405412:	4629      	mov	r1, r5
  405414:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  405418:	f000 fae2 	bl	4059e0 <__adddf3>
  40541c:	4544      	cmp	r4, r8
  40541e:	4603      	mov	r3, r0
  405420:	460d      	mov	r5, r1
  405422:	d1f5      	bne.n	405410 <__kernel_rem_pio2+0x5c8>
  405424:	9a01      	ldr	r2, [sp, #4]
  405426:	2a00      	cmp	r2, #0
  405428:	f000 80da 	beq.w	4055e0 <__kernel_rem_pio2+0x798>
  40542c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40542e:	f8da 4004 	ldr.w	r4, [sl, #4]
  405432:	f8da 200c 	ldr.w	r2, [sl, #12]
  405436:	f8da 1000 	ldr.w	r1, [sl]
  40543a:	f8da 0008 	ldr.w	r0, [sl, #8]
  40543e:	613b      	str	r3, [r7, #16]
  405440:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  405444:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  405448:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  40544c:	617d      	str	r5, [r7, #20]
  40544e:	607c      	str	r4, [r7, #4]
  405450:	60fb      	str	r3, [r7, #12]
  405452:	6039      	str	r1, [r7, #0]
  405454:	60b8      	str	r0, [r7, #8]
  405456:	9b05      	ldr	r3, [sp, #20]
  405458:	f003 0007 	and.w	r0, r3, #7
  40545c:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  405460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405464:	f3af 8000 	nop.w
  405468:	40000000 	.word	0x40000000
  40546c:	3ff921fb 	.word	0x3ff921fb
  405470:	3ff00000 	.word	0x3ff00000
  405474:	3fe00000 	.word	0x3fe00000
  405478:	3e700000 	.word	0x3e700000
  40547c:	00407d08 	.word	0x00407d08
  405480:	9c04      	ldr	r4, [sp, #16]
  405482:	2600      	movs	r6, #0
  405484:	3408      	adds	r4, #8
  405486:	4454      	add	r4, sl
  405488:	4633      	mov	r3, r6
  40548a:	4630      	mov	r0, r6
  40548c:	4619      	mov	r1, r3
  40548e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  405492:	f000 faa5 	bl	4059e0 <__adddf3>
  405496:	4554      	cmp	r4, sl
  405498:	4606      	mov	r6, r0
  40549a:	460b      	mov	r3, r1
  40549c:	d1f5      	bne.n	40548a <__kernel_rem_pio2+0x642>
  40549e:	9a01      	ldr	r2, [sp, #4]
  4054a0:	4630      	mov	r0, r6
  4054a2:	4619      	mov	r1, r3
  4054a4:	2a00      	cmp	r2, #0
  4054a6:	d04f      	beq.n	405548 <__kernel_rem_pio2+0x700>
  4054a8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4054aa:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  4054ae:	4632      	mov	r2, r6
  4054b0:	6044      	str	r4, [r0, #4]
  4054b2:	6006      	str	r6, [r0, #0]
  4054b4:	e9da 0100 	ldrd	r0, r1, [sl]
  4054b8:	f000 fa90 	bl	4059dc <__aeabi_dsub>
  4054bc:	f1bb 0f00 	cmp.w	fp, #0
  4054c0:	4602      	mov	r2, r0
  4054c2:	460b      	mov	r3, r1
  4054c4:	dd0d      	ble.n	4054e2 <__kernel_rem_pio2+0x69a>
  4054c6:	2401      	movs	r4, #1
  4054c8:	4610      	mov	r0, r2
  4054ca:	4619      	mov	r1, r3
  4054cc:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  4054d0:	f000 fa86 	bl	4059e0 <__adddf3>
  4054d4:	3401      	adds	r4, #1
  4054d6:	45a3      	cmp	fp, r4
  4054d8:	4602      	mov	r2, r0
  4054da:	460b      	mov	r3, r1
  4054dc:	daf4      	bge.n	4054c8 <__kernel_rem_pio2+0x680>
  4054de:	9901      	ldr	r1, [sp, #4]
  4054e0:	b109      	cbz	r1, 4054e6 <__kernel_rem_pio2+0x69e>
  4054e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4054e6:	4619      	mov	r1, r3
  4054e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054ea:	4610      	mov	r0, r2
  4054ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
  4054f0:	9b05      	ldr	r3, [sp, #20]
  4054f2:	f003 0007 	and.w	r0, r3, #7
  4054f6:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4054fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054fe:	9b04      	ldr	r3, [sp, #16]
  405500:	2200      	movs	r2, #0
  405502:	3308      	adds	r3, #8
  405504:	449a      	add	sl, r3
  405506:	4613      	mov	r3, r2
  405508:	4610      	mov	r0, r2
  40550a:	4619      	mov	r1, r3
  40550c:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
  405510:	f000 fa66 	bl	4059e0 <__adddf3>
  405514:	f10b 3bff 	add.w	fp, fp, #4294967295
  405518:	f1bb 3fff 	cmp.w	fp, #4294967295
  40551c:	4602      	mov	r2, r0
  40551e:	460b      	mov	r3, r1
  405520:	d1f2      	bne.n	405508 <__kernel_rem_pio2+0x6c0>
  405522:	9901      	ldr	r1, [sp, #4]
  405524:	b109      	cbz	r1, 40552a <__kernel_rem_pio2+0x6e2>
  405526:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40552a:	4619      	mov	r1, r3
  40552c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40552e:	4610      	mov	r0, r2
  405530:	e9c3 0100 	strd	r0, r1, [r3]
  405534:	9b05      	ldr	r3, [sp, #20]
  405536:	f003 0007 	and.w	r0, r3, #7
  40553a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  40553e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405542:	2600      	movs	r6, #0
  405544:	2700      	movs	r7, #0
  405546:	e6ef      	b.n	405328 <__kernel_rem_pio2+0x4e0>
  405548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40554a:	4632      	mov	r2, r6
  40554c:	e9c3 0100 	strd	r0, r1, [r3]
  405550:	460b      	mov	r3, r1
  405552:	e9da 0100 	ldrd	r0, r1, [sl]
  405556:	f000 fa41 	bl	4059dc <__aeabi_dsub>
  40555a:	f1bb 0f00 	cmp.w	fp, #0
  40555e:	4602      	mov	r2, r0
  405560:	460b      	mov	r3, r1
  405562:	dcb0      	bgt.n	4054c6 <__kernel_rem_pio2+0x67e>
  405564:	4619      	mov	r1, r3
  405566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405568:	4610      	mov	r0, r2
  40556a:	e9c3 0102 	strd	r0, r1, [r3, #8]
  40556e:	e7bf      	b.n	4054f0 <__kernel_rem_pio2+0x6a8>
  405570:	9b08      	ldr	r3, [sp, #32]
  405572:	f8cd 9014 	str.w	r9, [sp, #20]
  405576:	425a      	negs	r2, r3
  405578:	4630      	mov	r0, r6
  40557a:	4639      	mov	r1, r7
  40557c:	f8cd 8004 	str.w	r8, [sp, #4]
  405580:	f000 f9a2 	bl	4058c8 <scalbn>
  405584:	2200      	movs	r2, #0
  405586:	4b2c      	ldr	r3, [pc, #176]	; (405638 <__kernel_rem_pio2+0x7f0>)
  405588:	4606      	mov	r6, r0
  40558a:	460f      	mov	r7, r1
  40558c:	f000 fe60 	bl	406250 <__aeabi_dcmpge>
  405590:	2800      	cmp	r0, #0
  405592:	d040      	beq.n	405616 <__kernel_rem_pio2+0x7ce>
  405594:	2200      	movs	r2, #0
  405596:	4b29      	ldr	r3, [pc, #164]	; (40563c <__kernel_rem_pio2+0x7f4>)
  405598:	4630      	mov	r0, r6
  40559a:	4639      	mov	r1, r7
  40559c:	f000 fbd2 	bl	405d44 <__aeabi_dmul>
  4055a0:	f000 fe6a 	bl	406278 <__aeabi_d2iz>
  4055a4:	4604      	mov	r4, r0
  4055a6:	f000 fb67 	bl	405c78 <__aeabi_i2d>
  4055aa:	2200      	movs	r2, #0
  4055ac:	4b22      	ldr	r3, [pc, #136]	; (405638 <__kernel_rem_pio2+0x7f0>)
  4055ae:	f000 fbc9 	bl	405d44 <__aeabi_dmul>
  4055b2:	460b      	mov	r3, r1
  4055b4:	4602      	mov	r2, r0
  4055b6:	4639      	mov	r1, r7
  4055b8:	4630      	mov	r0, r6
  4055ba:	f000 fa0f 	bl	4059dc <__aeabi_dsub>
  4055be:	f000 fe5b 	bl	406278 <__aeabi_d2iz>
  4055c2:	9b08      	ldr	r3, [sp, #32]
  4055c4:	3318      	adds	r3, #24
  4055c6:	f105 0b01 	add.w	fp, r5, #1
  4055ca:	9308      	str	r3, [sp, #32]
  4055cc:	ab10      	add	r3, sp, #64	; 0x40
  4055ce:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  4055d2:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
  4055d6:	e64e      	b.n	405276 <__kernel_rem_pio2+0x42e>
  4055d8:	2301      	movs	r3, #1
  4055da:	e590      	b.n	4050fe <__kernel_rem_pio2+0x2b6>
  4055dc:	2400      	movs	r4, #0
  4055de:	e54b      	b.n	405078 <__kernel_rem_pio2+0x230>
  4055e0:	4618      	mov	r0, r3
  4055e2:	4629      	mov	r1, r5
  4055e4:	e9da 2300 	ldrd	r2, r3, [sl]
  4055e8:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  4055ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4055ee:	e9c7 0104 	strd	r0, r1, [r7, #16]
  4055f2:	e9c7 2300 	strd	r2, r3, [r7]
  4055f6:	e9c7 4502 	strd	r4, r5, [r7, #8]
  4055fa:	e72c      	b.n	405456 <__kernel_rem_pio2+0x60e>
  4055fc:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4055fe:	2b03      	cmp	r3, #3
  405600:	f63f af29 	bhi.w	405456 <__kernel_rem_pio2+0x60e>
  405604:	e8df f003 	tbb	[pc, r3]
  405608:	02101015 	.word	0x02101015
  40560c:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  405610:	2300      	movs	r3, #0
  405612:	461d      	mov	r5, r3
  405614:	e706      	b.n	405424 <__kernel_rem_pio2+0x5dc>
  405616:	4630      	mov	r0, r6
  405618:	4639      	mov	r1, r7
  40561a:	f000 fe2d 	bl	406278 <__aeabi_d2iz>
  40561e:	ab10      	add	r3, sp, #64	; 0x40
  405620:	46ab      	mov	fp, r5
  405622:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  405626:	e626      	b.n	405276 <__kernel_rem_pio2+0x42e>
  405628:	2600      	movs	r6, #0
  40562a:	4633      	mov	r3, r6
  40562c:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  405630:	e735      	b.n	40549e <__kernel_rem_pio2+0x656>
  405632:	2200      	movs	r2, #0
  405634:	4613      	mov	r3, r2
  405636:	e774      	b.n	405522 <__kernel_rem_pio2+0x6da>
  405638:	41700000 	.word	0x41700000
  40563c:	3e700000 	.word	0x3e700000

00405640 <__kernel_sin>:
  405640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405644:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  405648:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  40564c:	b085      	sub	sp, #20
  40564e:	460c      	mov	r4, r1
  405650:	4690      	mov	r8, r2
  405652:	4699      	mov	r9, r3
  405654:	4605      	mov	r5, r0
  405656:	da04      	bge.n	405662 <__kernel_sin+0x22>
  405658:	f000 fe0e 	bl	406278 <__aeabi_d2iz>
  40565c:	2800      	cmp	r0, #0
  40565e:	f000 8085 	beq.w	40576c <__kernel_sin+0x12c>
  405662:	462a      	mov	r2, r5
  405664:	4623      	mov	r3, r4
  405666:	4628      	mov	r0, r5
  405668:	4621      	mov	r1, r4
  40566a:	f000 fb6b 	bl	405d44 <__aeabi_dmul>
  40566e:	4606      	mov	r6, r0
  405670:	460f      	mov	r7, r1
  405672:	4602      	mov	r2, r0
  405674:	460b      	mov	r3, r1
  405676:	4628      	mov	r0, r5
  405678:	4621      	mov	r1, r4
  40567a:	f000 fb63 	bl	405d44 <__aeabi_dmul>
  40567e:	a33e      	add	r3, pc, #248	; (adr r3, 405778 <__kernel_sin+0x138>)
  405680:	e9d3 2300 	ldrd	r2, r3, [r3]
  405684:	4682      	mov	sl, r0
  405686:	468b      	mov	fp, r1
  405688:	4630      	mov	r0, r6
  40568a:	4639      	mov	r1, r7
  40568c:	f000 fb5a 	bl	405d44 <__aeabi_dmul>
  405690:	a33b      	add	r3, pc, #236	; (adr r3, 405780 <__kernel_sin+0x140>)
  405692:	e9d3 2300 	ldrd	r2, r3, [r3]
  405696:	f000 f9a1 	bl	4059dc <__aeabi_dsub>
  40569a:	4632      	mov	r2, r6
  40569c:	463b      	mov	r3, r7
  40569e:	f000 fb51 	bl	405d44 <__aeabi_dmul>
  4056a2:	a339      	add	r3, pc, #228	; (adr r3, 405788 <__kernel_sin+0x148>)
  4056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056a8:	f000 f99a 	bl	4059e0 <__adddf3>
  4056ac:	4632      	mov	r2, r6
  4056ae:	463b      	mov	r3, r7
  4056b0:	f000 fb48 	bl	405d44 <__aeabi_dmul>
  4056b4:	a336      	add	r3, pc, #216	; (adr r3, 405790 <__kernel_sin+0x150>)
  4056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056ba:	f000 f98f 	bl	4059dc <__aeabi_dsub>
  4056be:	4632      	mov	r2, r6
  4056c0:	463b      	mov	r3, r7
  4056c2:	f000 fb3f 	bl	405d44 <__aeabi_dmul>
  4056c6:	a334      	add	r3, pc, #208	; (adr r3, 405798 <__kernel_sin+0x158>)
  4056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056cc:	f000 f988 	bl	4059e0 <__adddf3>
  4056d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4056d2:	e9cd 0100 	strd	r0, r1, [sp]
  4056d6:	b39b      	cbz	r3, 405740 <__kernel_sin+0x100>
  4056d8:	2200      	movs	r2, #0
  4056da:	4b33      	ldr	r3, [pc, #204]	; (4057a8 <__kernel_sin+0x168>)
  4056dc:	4640      	mov	r0, r8
  4056de:	4649      	mov	r1, r9
  4056e0:	f000 fb30 	bl	405d44 <__aeabi_dmul>
  4056e4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4056e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4056ec:	4650      	mov	r0, sl
  4056ee:	4659      	mov	r1, fp
  4056f0:	f000 fb28 	bl	405d44 <__aeabi_dmul>
  4056f4:	4602      	mov	r2, r0
  4056f6:	460b      	mov	r3, r1
  4056f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4056fc:	f000 f96e 	bl	4059dc <__aeabi_dsub>
  405700:	4632      	mov	r2, r6
  405702:	463b      	mov	r3, r7
  405704:	f000 fb1e 	bl	405d44 <__aeabi_dmul>
  405708:	4642      	mov	r2, r8
  40570a:	464b      	mov	r3, r9
  40570c:	f000 f966 	bl	4059dc <__aeabi_dsub>
  405710:	a323      	add	r3, pc, #140	; (adr r3, 4057a0 <__kernel_sin+0x160>)
  405712:	e9d3 2300 	ldrd	r2, r3, [r3]
  405716:	4606      	mov	r6, r0
  405718:	460f      	mov	r7, r1
  40571a:	4650      	mov	r0, sl
  40571c:	4659      	mov	r1, fp
  40571e:	f000 fb11 	bl	405d44 <__aeabi_dmul>
  405722:	4602      	mov	r2, r0
  405724:	460b      	mov	r3, r1
  405726:	4630      	mov	r0, r6
  405728:	4639      	mov	r1, r7
  40572a:	f000 f959 	bl	4059e0 <__adddf3>
  40572e:	4602      	mov	r2, r0
  405730:	460b      	mov	r3, r1
  405732:	4628      	mov	r0, r5
  405734:	4621      	mov	r1, r4
  405736:	f000 f951 	bl	4059dc <__aeabi_dsub>
  40573a:	b005      	add	sp, #20
  40573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405740:	4602      	mov	r2, r0
  405742:	460b      	mov	r3, r1
  405744:	4630      	mov	r0, r6
  405746:	4639      	mov	r1, r7
  405748:	f000 fafc 	bl	405d44 <__aeabi_dmul>
  40574c:	a314      	add	r3, pc, #80	; (adr r3, 4057a0 <__kernel_sin+0x160>)
  40574e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405752:	f000 f943 	bl	4059dc <__aeabi_dsub>
  405756:	4652      	mov	r2, sl
  405758:	465b      	mov	r3, fp
  40575a:	f000 faf3 	bl	405d44 <__aeabi_dmul>
  40575e:	462a      	mov	r2, r5
  405760:	4623      	mov	r3, r4
  405762:	f000 f93d 	bl	4059e0 <__adddf3>
  405766:	b005      	add	sp, #20
  405768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40576c:	4628      	mov	r0, r5
  40576e:	4621      	mov	r1, r4
  405770:	b005      	add	sp, #20
  405772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405776:	bf00      	nop
  405778:	5acfd57c 	.word	0x5acfd57c
  40577c:	3de5d93a 	.word	0x3de5d93a
  405780:	8a2b9ceb 	.word	0x8a2b9ceb
  405784:	3e5ae5e6 	.word	0x3e5ae5e6
  405788:	57b1fe7d 	.word	0x57b1fe7d
  40578c:	3ec71de3 	.word	0x3ec71de3
  405790:	19c161d5 	.word	0x19c161d5
  405794:	3f2a01a0 	.word	0x3f2a01a0
  405798:	1110f8a6 	.word	0x1110f8a6
  40579c:	3f811111 	.word	0x3f811111
  4057a0:	55555549 	.word	0x55555549
  4057a4:	3fc55555 	.word	0x3fc55555
  4057a8:	3fe00000 	.word	0x3fe00000

004057ac <fabs>:
  4057ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4057b0:	4770      	bx	lr
  4057b2:	bf00      	nop
  4057b4:	0000      	movs	r0, r0
	...

004057b8 <floor>:
  4057b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
  4057bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4057c0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  4057c4:	2e13      	cmp	r6, #19
  4057c6:	460b      	mov	r3, r1
  4057c8:	460d      	mov	r5, r1
  4057ca:	4604      	mov	r4, r0
  4057cc:	4688      	mov	r8, r1
  4057ce:	4607      	mov	r7, r0
  4057d0:	dc1c      	bgt.n	40580c <floor+0x54>
  4057d2:	2e00      	cmp	r6, #0
  4057d4:	db3f      	blt.n	405856 <floor+0x9e>
  4057d6:	4a3a      	ldr	r2, [pc, #232]	; (4058c0 <floor+0x108>)
  4057d8:	fa42 f906 	asr.w	r9, r2, r6
  4057dc:	ea01 0209 	and.w	r2, r1, r9
  4057e0:	4302      	orrs	r2, r0
  4057e2:	4686      	mov	lr, r0
  4057e4:	d017      	beq.n	405816 <floor+0x5e>
  4057e6:	a334      	add	r3, pc, #208	; (adr r3, 4058b8 <floor+0x100>)
  4057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4057ec:	f000 f8f8 	bl	4059e0 <__adddf3>
  4057f0:	2200      	movs	r2, #0
  4057f2:	2300      	movs	r3, #0
  4057f4:	f000 fd36 	bl	406264 <__aeabi_dcmpgt>
  4057f8:	b120      	cbz	r0, 405804 <floor+0x4c>
  4057fa:	2d00      	cmp	r5, #0
  4057fc:	db40      	blt.n	405880 <floor+0xc8>
  4057fe:	ea28 0509 	bic.w	r5, r8, r9
  405802:	2700      	movs	r7, #0
  405804:	4638      	mov	r0, r7
  405806:	4629      	mov	r1, r5
  405808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40580c:	2e33      	cmp	r6, #51	; 0x33
  40580e:	dd06      	ble.n	40581e <floor+0x66>
  405810:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  405814:	d02f      	beq.n	405876 <floor+0xbe>
  405816:	4620      	mov	r0, r4
  405818:	4619      	mov	r1, r3
  40581a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40581e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  405822:	f04f 39ff 	mov.w	r9, #4294967295
  405826:	fa29 f902 	lsr.w	r9, r9, r2
  40582a:	ea10 0f09 	tst.w	r0, r9
  40582e:	d0f2      	beq.n	405816 <floor+0x5e>
  405830:	a321      	add	r3, pc, #132	; (adr r3, 4058b8 <floor+0x100>)
  405832:	e9d3 2300 	ldrd	r2, r3, [r3]
  405836:	f000 f8d3 	bl	4059e0 <__adddf3>
  40583a:	2200      	movs	r2, #0
  40583c:	2300      	movs	r3, #0
  40583e:	f000 fd11 	bl	406264 <__aeabi_dcmpgt>
  405842:	2800      	cmp	r0, #0
  405844:	d0de      	beq.n	405804 <floor+0x4c>
  405846:	2d00      	cmp	r5, #0
  405848:	db20      	blt.n	40588c <floor+0xd4>
  40584a:	4645      	mov	r5, r8
  40584c:	ea27 0709 	bic.w	r7, r7, r9
  405850:	4638      	mov	r0, r7
  405852:	4629      	mov	r1, r5
  405854:	e7d8      	b.n	405808 <floor+0x50>
  405856:	a318      	add	r3, pc, #96	; (adr r3, 4058b8 <floor+0x100>)
  405858:	e9d3 2300 	ldrd	r2, r3, [r3]
  40585c:	f000 f8c0 	bl	4059e0 <__adddf3>
  405860:	2200      	movs	r2, #0
  405862:	2300      	movs	r3, #0
  405864:	f000 fcfe 	bl	406264 <__aeabi_dcmpgt>
  405868:	2800      	cmp	r0, #0
  40586a:	d0cb      	beq.n	405804 <floor+0x4c>
  40586c:	2d00      	cmp	r5, #0
  40586e:	db18      	blt.n	4058a2 <floor+0xea>
  405870:	2700      	movs	r7, #0
  405872:	463d      	mov	r5, r7
  405874:	e7c6      	b.n	405804 <floor+0x4c>
  405876:	4602      	mov	r2, r0
  405878:	460b      	mov	r3, r1
  40587a:	f000 f8b1 	bl	4059e0 <__adddf3>
  40587e:	e7cc      	b.n	40581a <floor+0x62>
  405880:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  405884:	fa43 f606 	asr.w	r6, r3, r6
  405888:	44b0      	add	r8, r6
  40588a:	e7b8      	b.n	4057fe <floor+0x46>
  40588c:	2e14      	cmp	r6, #20
  40588e:	d010      	beq.n	4058b2 <floor+0xfa>
  405890:	2301      	movs	r3, #1
  405892:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  405896:	fa03 f606 	lsl.w	r6, r3, r6
  40589a:	1937      	adds	r7, r6, r4
  40589c:	bf28      	it	cs
  40589e:	4498      	addcs	r8, r3
  4058a0:	e7d3      	b.n	40584a <floor+0x92>
  4058a2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  4058a6:	4b07      	ldr	r3, [pc, #28]	; (4058c4 <floor+0x10c>)
  4058a8:	4322      	orrs	r2, r4
  4058aa:	bf18      	it	ne
  4058ac:	461d      	movne	r5, r3
  4058ae:	2700      	movs	r7, #0
  4058b0:	e7a8      	b.n	405804 <floor+0x4c>
  4058b2:	f105 0801 	add.w	r8, r5, #1
  4058b6:	e7c8      	b.n	40584a <floor+0x92>
  4058b8:	8800759c 	.word	0x8800759c
  4058bc:	7e37e43c 	.word	0x7e37e43c
  4058c0:	000fffff 	.word	0x000fffff
  4058c4:	bff00000 	.word	0xbff00000

004058c8 <scalbn>:
  4058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
  4058ce:	4604      	mov	r4, r0
  4058d0:	460d      	mov	r5, r1
  4058d2:	460b      	mov	r3, r1
  4058d4:	4617      	mov	r7, r2
  4058d6:	bb06      	cbnz	r6, 40591a <scalbn+0x52>
  4058d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4058dc:	4303      	orrs	r3, r0
  4058de:	d025      	beq.n	40592c <scalbn+0x64>
  4058e0:	2200      	movs	r2, #0
  4058e2:	4b35      	ldr	r3, [pc, #212]	; (4059b8 <scalbn+0xf0>)
  4058e4:	f000 fa2e 	bl	405d44 <__aeabi_dmul>
  4058e8:	4a34      	ldr	r2, [pc, #208]	; (4059bc <scalbn+0xf4>)
  4058ea:	4297      	cmp	r7, r2
  4058ec:	4604      	mov	r4, r0
  4058ee:	460d      	mov	r5, r1
  4058f0:	460b      	mov	r3, r1
  4058f2:	db2a      	blt.n	40594a <scalbn+0x82>
  4058f4:	f3c1 560a 	ubfx	r6, r1, #20, #11
  4058f8:	3e36      	subs	r6, #54	; 0x36
  4058fa:	443e      	add	r6, r7
  4058fc:	f240 72fe 	movw	r2, #2046	; 0x7fe
  405900:	4296      	cmp	r6, r2
  405902:	dc28      	bgt.n	405956 <scalbn+0x8e>
  405904:	2e00      	cmp	r6, #0
  405906:	dd12      	ble.n	40592e <scalbn+0x66>
  405908:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  40590c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  405910:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  405914:	4620      	mov	r0, r4
  405916:	4629      	mov	r1, r5
  405918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40591a:	f240 72ff 	movw	r2, #2047	; 0x7ff
  40591e:	4296      	cmp	r6, r2
  405920:	d1eb      	bne.n	4058fa <scalbn+0x32>
  405922:	4602      	mov	r2, r0
  405924:	460b      	mov	r3, r1
  405926:	f000 f85b 	bl	4059e0 <__adddf3>
  40592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40592c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40592e:	f116 0f35 	cmn.w	r6, #53	; 0x35
  405932:	da1d      	bge.n	405970 <scalbn+0xa8>
  405934:	f24c 3350 	movw	r3, #50000	; 0xc350
  405938:	429f      	cmp	r7, r3
  40593a:	4622      	mov	r2, r4
  40593c:	462b      	mov	r3, r5
  40593e:	dc25      	bgt.n	40598c <scalbn+0xc4>
  405940:	a119      	add	r1, pc, #100	; (adr r1, 4059a8 <scalbn+0xe0>)
  405942:	e9d1 0100 	ldrd	r0, r1, [r1]
  405946:	f000 f83d 	bl	4059c4 <copysign>
  40594a:	a317      	add	r3, pc, #92	; (adr r3, 4059a8 <scalbn+0xe0>)
  40594c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405950:	f000 f9f8 	bl	405d44 <__aeabi_dmul>
  405954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405956:	4622      	mov	r2, r4
  405958:	462b      	mov	r3, r5
  40595a:	a115      	add	r1, pc, #84	; (adr r1, 4059b0 <scalbn+0xe8>)
  40595c:	e9d1 0100 	ldrd	r0, r1, [r1]
  405960:	f000 f830 	bl	4059c4 <copysign>
  405964:	a312      	add	r3, pc, #72	; (adr r3, 4059b0 <scalbn+0xe8>)
  405966:	e9d3 2300 	ldrd	r2, r3, [r3]
  40596a:	f000 f9eb 	bl	405d44 <__aeabi_dmul>
  40596e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405970:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  405974:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  405978:	3636      	adds	r6, #54	; 0x36
  40597a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  40597e:	4620      	mov	r0, r4
  405980:	4629      	mov	r1, r5
  405982:	2200      	movs	r2, #0
  405984:	4b0e      	ldr	r3, [pc, #56]	; (4059c0 <scalbn+0xf8>)
  405986:	f000 f9dd 	bl	405d44 <__aeabi_dmul>
  40598a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40598c:	a108      	add	r1, pc, #32	; (adr r1, 4059b0 <scalbn+0xe8>)
  40598e:	e9d1 0100 	ldrd	r0, r1, [r1]
  405992:	f000 f817 	bl	4059c4 <copysign>
  405996:	a306      	add	r3, pc, #24	; (adr r3, 4059b0 <scalbn+0xe8>)
  405998:	e9d3 2300 	ldrd	r2, r3, [r3]
  40599c:	f000 f9d2 	bl	405d44 <__aeabi_dmul>
  4059a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059a2:	bf00      	nop
  4059a4:	f3af 8000 	nop.w
  4059a8:	c2f8f359 	.word	0xc2f8f359
  4059ac:	01a56e1f 	.word	0x01a56e1f
  4059b0:	8800759c 	.word	0x8800759c
  4059b4:	7e37e43c 	.word	0x7e37e43c
  4059b8:	43500000 	.word	0x43500000
  4059bc:	ffff3cb0 	.word	0xffff3cb0
  4059c0:	3c900000 	.word	0x3c900000

004059c4 <copysign>:
  4059c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  4059c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  4059cc:	ea42 0103 	orr.w	r1, r2, r3
  4059d0:	4770      	bx	lr
  4059d2:	bf00      	nop

004059d4 <__aeabi_drsub>:
  4059d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4059d8:	e002      	b.n	4059e0 <__adddf3>
  4059da:	bf00      	nop

004059dc <__aeabi_dsub>:
  4059dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004059e0 <__adddf3>:
  4059e0:	b530      	push	{r4, r5, lr}
  4059e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4059e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4059ea:	ea94 0f05 	teq	r4, r5
  4059ee:	bf08      	it	eq
  4059f0:	ea90 0f02 	teqeq	r0, r2
  4059f4:	bf1f      	itttt	ne
  4059f6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4059fa:	ea55 0c02 	orrsne.w	ip, r5, r2
  4059fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405a02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405a06:	f000 80e2 	beq.w	405bce <__adddf3+0x1ee>
  405a0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405a0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405a12:	bfb8      	it	lt
  405a14:	426d      	neglt	r5, r5
  405a16:	dd0c      	ble.n	405a32 <__adddf3+0x52>
  405a18:	442c      	add	r4, r5
  405a1a:	ea80 0202 	eor.w	r2, r0, r2
  405a1e:	ea81 0303 	eor.w	r3, r1, r3
  405a22:	ea82 0000 	eor.w	r0, r2, r0
  405a26:	ea83 0101 	eor.w	r1, r3, r1
  405a2a:	ea80 0202 	eor.w	r2, r0, r2
  405a2e:	ea81 0303 	eor.w	r3, r1, r3
  405a32:	2d36      	cmp	r5, #54	; 0x36
  405a34:	bf88      	it	hi
  405a36:	bd30      	pophi	{r4, r5, pc}
  405a38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405a3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405a40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405a44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405a48:	d002      	beq.n	405a50 <__adddf3+0x70>
  405a4a:	4240      	negs	r0, r0
  405a4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405a50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405a54:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405a58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405a5c:	d002      	beq.n	405a64 <__adddf3+0x84>
  405a5e:	4252      	negs	r2, r2
  405a60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405a64:	ea94 0f05 	teq	r4, r5
  405a68:	f000 80a7 	beq.w	405bba <__adddf3+0x1da>
  405a6c:	f1a4 0401 	sub.w	r4, r4, #1
  405a70:	f1d5 0e20 	rsbs	lr, r5, #32
  405a74:	db0d      	blt.n	405a92 <__adddf3+0xb2>
  405a76:	fa02 fc0e 	lsl.w	ip, r2, lr
  405a7a:	fa22 f205 	lsr.w	r2, r2, r5
  405a7e:	1880      	adds	r0, r0, r2
  405a80:	f141 0100 	adc.w	r1, r1, #0
  405a84:	fa03 f20e 	lsl.w	r2, r3, lr
  405a88:	1880      	adds	r0, r0, r2
  405a8a:	fa43 f305 	asr.w	r3, r3, r5
  405a8e:	4159      	adcs	r1, r3
  405a90:	e00e      	b.n	405ab0 <__adddf3+0xd0>
  405a92:	f1a5 0520 	sub.w	r5, r5, #32
  405a96:	f10e 0e20 	add.w	lr, lr, #32
  405a9a:	2a01      	cmp	r2, #1
  405a9c:	fa03 fc0e 	lsl.w	ip, r3, lr
  405aa0:	bf28      	it	cs
  405aa2:	f04c 0c02 	orrcs.w	ip, ip, #2
  405aa6:	fa43 f305 	asr.w	r3, r3, r5
  405aaa:	18c0      	adds	r0, r0, r3
  405aac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405ab0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405ab4:	d507      	bpl.n	405ac6 <__adddf3+0xe6>
  405ab6:	f04f 0e00 	mov.w	lr, #0
  405aba:	f1dc 0c00 	rsbs	ip, ip, #0
  405abe:	eb7e 0000 	sbcs.w	r0, lr, r0
  405ac2:	eb6e 0101 	sbc.w	r1, lr, r1
  405ac6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405aca:	d31b      	bcc.n	405b04 <__adddf3+0x124>
  405acc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405ad0:	d30c      	bcc.n	405aec <__adddf3+0x10c>
  405ad2:	0849      	lsrs	r1, r1, #1
  405ad4:	ea5f 0030 	movs.w	r0, r0, rrx
  405ad8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405adc:	f104 0401 	add.w	r4, r4, #1
  405ae0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405ae4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405ae8:	f080 809a 	bcs.w	405c20 <__adddf3+0x240>
  405aec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405af0:	bf08      	it	eq
  405af2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405af6:	f150 0000 	adcs.w	r0, r0, #0
  405afa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405afe:	ea41 0105 	orr.w	r1, r1, r5
  405b02:	bd30      	pop	{r4, r5, pc}
  405b04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405b08:	4140      	adcs	r0, r0
  405b0a:	eb41 0101 	adc.w	r1, r1, r1
  405b0e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405b12:	f1a4 0401 	sub.w	r4, r4, #1
  405b16:	d1e9      	bne.n	405aec <__adddf3+0x10c>
  405b18:	f091 0f00 	teq	r1, #0
  405b1c:	bf04      	itt	eq
  405b1e:	4601      	moveq	r1, r0
  405b20:	2000      	moveq	r0, #0
  405b22:	fab1 f381 	clz	r3, r1
  405b26:	bf08      	it	eq
  405b28:	3320      	addeq	r3, #32
  405b2a:	f1a3 030b 	sub.w	r3, r3, #11
  405b2e:	f1b3 0220 	subs.w	r2, r3, #32
  405b32:	da0c      	bge.n	405b4e <__adddf3+0x16e>
  405b34:	320c      	adds	r2, #12
  405b36:	dd08      	ble.n	405b4a <__adddf3+0x16a>
  405b38:	f102 0c14 	add.w	ip, r2, #20
  405b3c:	f1c2 020c 	rsb	r2, r2, #12
  405b40:	fa01 f00c 	lsl.w	r0, r1, ip
  405b44:	fa21 f102 	lsr.w	r1, r1, r2
  405b48:	e00c      	b.n	405b64 <__adddf3+0x184>
  405b4a:	f102 0214 	add.w	r2, r2, #20
  405b4e:	bfd8      	it	le
  405b50:	f1c2 0c20 	rsble	ip, r2, #32
  405b54:	fa01 f102 	lsl.w	r1, r1, r2
  405b58:	fa20 fc0c 	lsr.w	ip, r0, ip
  405b5c:	bfdc      	itt	le
  405b5e:	ea41 010c 	orrle.w	r1, r1, ip
  405b62:	4090      	lslle	r0, r2
  405b64:	1ae4      	subs	r4, r4, r3
  405b66:	bfa2      	ittt	ge
  405b68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405b6c:	4329      	orrge	r1, r5
  405b6e:	bd30      	popge	{r4, r5, pc}
  405b70:	ea6f 0404 	mvn.w	r4, r4
  405b74:	3c1f      	subs	r4, #31
  405b76:	da1c      	bge.n	405bb2 <__adddf3+0x1d2>
  405b78:	340c      	adds	r4, #12
  405b7a:	dc0e      	bgt.n	405b9a <__adddf3+0x1ba>
  405b7c:	f104 0414 	add.w	r4, r4, #20
  405b80:	f1c4 0220 	rsb	r2, r4, #32
  405b84:	fa20 f004 	lsr.w	r0, r0, r4
  405b88:	fa01 f302 	lsl.w	r3, r1, r2
  405b8c:	ea40 0003 	orr.w	r0, r0, r3
  405b90:	fa21 f304 	lsr.w	r3, r1, r4
  405b94:	ea45 0103 	orr.w	r1, r5, r3
  405b98:	bd30      	pop	{r4, r5, pc}
  405b9a:	f1c4 040c 	rsb	r4, r4, #12
  405b9e:	f1c4 0220 	rsb	r2, r4, #32
  405ba2:	fa20 f002 	lsr.w	r0, r0, r2
  405ba6:	fa01 f304 	lsl.w	r3, r1, r4
  405baa:	ea40 0003 	orr.w	r0, r0, r3
  405bae:	4629      	mov	r1, r5
  405bb0:	bd30      	pop	{r4, r5, pc}
  405bb2:	fa21 f004 	lsr.w	r0, r1, r4
  405bb6:	4629      	mov	r1, r5
  405bb8:	bd30      	pop	{r4, r5, pc}
  405bba:	f094 0f00 	teq	r4, #0
  405bbe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405bc2:	bf06      	itte	eq
  405bc4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405bc8:	3401      	addeq	r4, #1
  405bca:	3d01      	subne	r5, #1
  405bcc:	e74e      	b.n	405a6c <__adddf3+0x8c>
  405bce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405bd2:	bf18      	it	ne
  405bd4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405bd8:	d029      	beq.n	405c2e <__adddf3+0x24e>
  405bda:	ea94 0f05 	teq	r4, r5
  405bde:	bf08      	it	eq
  405be0:	ea90 0f02 	teqeq	r0, r2
  405be4:	d005      	beq.n	405bf2 <__adddf3+0x212>
  405be6:	ea54 0c00 	orrs.w	ip, r4, r0
  405bea:	bf04      	itt	eq
  405bec:	4619      	moveq	r1, r3
  405bee:	4610      	moveq	r0, r2
  405bf0:	bd30      	pop	{r4, r5, pc}
  405bf2:	ea91 0f03 	teq	r1, r3
  405bf6:	bf1e      	ittt	ne
  405bf8:	2100      	movne	r1, #0
  405bfa:	2000      	movne	r0, #0
  405bfc:	bd30      	popne	{r4, r5, pc}
  405bfe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405c02:	d105      	bne.n	405c10 <__adddf3+0x230>
  405c04:	0040      	lsls	r0, r0, #1
  405c06:	4149      	adcs	r1, r1
  405c08:	bf28      	it	cs
  405c0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405c0e:	bd30      	pop	{r4, r5, pc}
  405c10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405c14:	bf3c      	itt	cc
  405c16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405c1a:	bd30      	popcc	{r4, r5, pc}
  405c1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405c20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405c24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405c28:	f04f 0000 	mov.w	r0, #0
  405c2c:	bd30      	pop	{r4, r5, pc}
  405c2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405c32:	bf1a      	itte	ne
  405c34:	4619      	movne	r1, r3
  405c36:	4610      	movne	r0, r2
  405c38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405c3c:	bf1c      	itt	ne
  405c3e:	460b      	movne	r3, r1
  405c40:	4602      	movne	r2, r0
  405c42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405c46:	bf06      	itte	eq
  405c48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405c4c:	ea91 0f03 	teqeq	r1, r3
  405c50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405c54:	bd30      	pop	{r4, r5, pc}
  405c56:	bf00      	nop

00405c58 <__aeabi_ui2d>:
  405c58:	f090 0f00 	teq	r0, #0
  405c5c:	bf04      	itt	eq
  405c5e:	2100      	moveq	r1, #0
  405c60:	4770      	bxeq	lr
  405c62:	b530      	push	{r4, r5, lr}
  405c64:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405c68:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405c6c:	f04f 0500 	mov.w	r5, #0
  405c70:	f04f 0100 	mov.w	r1, #0
  405c74:	e750      	b.n	405b18 <__adddf3+0x138>
  405c76:	bf00      	nop

00405c78 <__aeabi_i2d>:
  405c78:	f090 0f00 	teq	r0, #0
  405c7c:	bf04      	itt	eq
  405c7e:	2100      	moveq	r1, #0
  405c80:	4770      	bxeq	lr
  405c82:	b530      	push	{r4, r5, lr}
  405c84:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405c88:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405c8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405c90:	bf48      	it	mi
  405c92:	4240      	negmi	r0, r0
  405c94:	f04f 0100 	mov.w	r1, #0
  405c98:	e73e      	b.n	405b18 <__adddf3+0x138>
  405c9a:	bf00      	nop

00405c9c <__aeabi_f2d>:
  405c9c:	0042      	lsls	r2, r0, #1
  405c9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405ca2:	ea4f 0131 	mov.w	r1, r1, rrx
  405ca6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405caa:	bf1f      	itttt	ne
  405cac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405cb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405cb4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405cb8:	4770      	bxne	lr
  405cba:	f092 0f00 	teq	r2, #0
  405cbe:	bf14      	ite	ne
  405cc0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405cc4:	4770      	bxeq	lr
  405cc6:	b530      	push	{r4, r5, lr}
  405cc8:	f44f 7460 	mov.w	r4, #896	; 0x380
  405ccc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405cd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405cd4:	e720      	b.n	405b18 <__adddf3+0x138>
  405cd6:	bf00      	nop

00405cd8 <__aeabi_ul2d>:
  405cd8:	ea50 0201 	orrs.w	r2, r0, r1
  405cdc:	bf08      	it	eq
  405cde:	4770      	bxeq	lr
  405ce0:	b530      	push	{r4, r5, lr}
  405ce2:	f04f 0500 	mov.w	r5, #0
  405ce6:	e00a      	b.n	405cfe <__aeabi_l2d+0x16>

00405ce8 <__aeabi_l2d>:
  405ce8:	ea50 0201 	orrs.w	r2, r0, r1
  405cec:	bf08      	it	eq
  405cee:	4770      	bxeq	lr
  405cf0:	b530      	push	{r4, r5, lr}
  405cf2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405cf6:	d502      	bpl.n	405cfe <__aeabi_l2d+0x16>
  405cf8:	4240      	negs	r0, r0
  405cfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405cfe:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405d02:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405d06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405d0a:	f43f aedc 	beq.w	405ac6 <__adddf3+0xe6>
  405d0e:	f04f 0203 	mov.w	r2, #3
  405d12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405d16:	bf18      	it	ne
  405d18:	3203      	addne	r2, #3
  405d1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405d1e:	bf18      	it	ne
  405d20:	3203      	addne	r2, #3
  405d22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405d26:	f1c2 0320 	rsb	r3, r2, #32
  405d2a:	fa00 fc03 	lsl.w	ip, r0, r3
  405d2e:	fa20 f002 	lsr.w	r0, r0, r2
  405d32:	fa01 fe03 	lsl.w	lr, r1, r3
  405d36:	ea40 000e 	orr.w	r0, r0, lr
  405d3a:	fa21 f102 	lsr.w	r1, r1, r2
  405d3e:	4414      	add	r4, r2
  405d40:	e6c1      	b.n	405ac6 <__adddf3+0xe6>
  405d42:	bf00      	nop

00405d44 <__aeabi_dmul>:
  405d44:	b570      	push	{r4, r5, r6, lr}
  405d46:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405d4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405d4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405d52:	bf1d      	ittte	ne
  405d54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405d58:	ea94 0f0c 	teqne	r4, ip
  405d5c:	ea95 0f0c 	teqne	r5, ip
  405d60:	f000 f8de 	bleq	405f20 <__aeabi_dmul+0x1dc>
  405d64:	442c      	add	r4, r5
  405d66:	ea81 0603 	eor.w	r6, r1, r3
  405d6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405d6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405d72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405d76:	bf18      	it	ne
  405d78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405d7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405d84:	d038      	beq.n	405df8 <__aeabi_dmul+0xb4>
  405d86:	fba0 ce02 	umull	ip, lr, r0, r2
  405d8a:	f04f 0500 	mov.w	r5, #0
  405d8e:	fbe1 e502 	umlal	lr, r5, r1, r2
  405d92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405d96:	fbe0 e503 	umlal	lr, r5, r0, r3
  405d9a:	f04f 0600 	mov.w	r6, #0
  405d9e:	fbe1 5603 	umlal	r5, r6, r1, r3
  405da2:	f09c 0f00 	teq	ip, #0
  405da6:	bf18      	it	ne
  405da8:	f04e 0e01 	orrne.w	lr, lr, #1
  405dac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405db0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405db4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405db8:	d204      	bcs.n	405dc4 <__aeabi_dmul+0x80>
  405dba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405dbe:	416d      	adcs	r5, r5
  405dc0:	eb46 0606 	adc.w	r6, r6, r6
  405dc4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405dc8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405dcc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405dd0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405dd4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405dd8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405ddc:	bf88      	it	hi
  405dde:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405de2:	d81e      	bhi.n	405e22 <__aeabi_dmul+0xde>
  405de4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405de8:	bf08      	it	eq
  405dea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405dee:	f150 0000 	adcs.w	r0, r0, #0
  405df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405df6:	bd70      	pop	{r4, r5, r6, pc}
  405df8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405dfc:	ea46 0101 	orr.w	r1, r6, r1
  405e00:	ea40 0002 	orr.w	r0, r0, r2
  405e04:	ea81 0103 	eor.w	r1, r1, r3
  405e08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405e0c:	bfc2      	ittt	gt
  405e0e:	ebd4 050c 	rsbsgt	r5, r4, ip
  405e12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405e16:	bd70      	popgt	{r4, r5, r6, pc}
  405e18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405e1c:	f04f 0e00 	mov.w	lr, #0
  405e20:	3c01      	subs	r4, #1
  405e22:	f300 80ab 	bgt.w	405f7c <__aeabi_dmul+0x238>
  405e26:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405e2a:	bfde      	ittt	le
  405e2c:	2000      	movle	r0, #0
  405e2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405e32:	bd70      	pople	{r4, r5, r6, pc}
  405e34:	f1c4 0400 	rsb	r4, r4, #0
  405e38:	3c20      	subs	r4, #32
  405e3a:	da35      	bge.n	405ea8 <__aeabi_dmul+0x164>
  405e3c:	340c      	adds	r4, #12
  405e3e:	dc1b      	bgt.n	405e78 <__aeabi_dmul+0x134>
  405e40:	f104 0414 	add.w	r4, r4, #20
  405e44:	f1c4 0520 	rsb	r5, r4, #32
  405e48:	fa00 f305 	lsl.w	r3, r0, r5
  405e4c:	fa20 f004 	lsr.w	r0, r0, r4
  405e50:	fa01 f205 	lsl.w	r2, r1, r5
  405e54:	ea40 0002 	orr.w	r0, r0, r2
  405e58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405e5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405e60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405e64:	fa21 f604 	lsr.w	r6, r1, r4
  405e68:	eb42 0106 	adc.w	r1, r2, r6
  405e6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405e70:	bf08      	it	eq
  405e72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405e76:	bd70      	pop	{r4, r5, r6, pc}
  405e78:	f1c4 040c 	rsb	r4, r4, #12
  405e7c:	f1c4 0520 	rsb	r5, r4, #32
  405e80:	fa00 f304 	lsl.w	r3, r0, r4
  405e84:	fa20 f005 	lsr.w	r0, r0, r5
  405e88:	fa01 f204 	lsl.w	r2, r1, r4
  405e8c:	ea40 0002 	orr.w	r0, r0, r2
  405e90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405e94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405e98:	f141 0100 	adc.w	r1, r1, #0
  405e9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405ea0:	bf08      	it	eq
  405ea2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405ea6:	bd70      	pop	{r4, r5, r6, pc}
  405ea8:	f1c4 0520 	rsb	r5, r4, #32
  405eac:	fa00 f205 	lsl.w	r2, r0, r5
  405eb0:	ea4e 0e02 	orr.w	lr, lr, r2
  405eb4:	fa20 f304 	lsr.w	r3, r0, r4
  405eb8:	fa01 f205 	lsl.w	r2, r1, r5
  405ebc:	ea43 0302 	orr.w	r3, r3, r2
  405ec0:	fa21 f004 	lsr.w	r0, r1, r4
  405ec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ec8:	fa21 f204 	lsr.w	r2, r1, r4
  405ecc:	ea20 0002 	bic.w	r0, r0, r2
  405ed0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405ed4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405ed8:	bf08      	it	eq
  405eda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405ede:	bd70      	pop	{r4, r5, r6, pc}
  405ee0:	f094 0f00 	teq	r4, #0
  405ee4:	d10f      	bne.n	405f06 <__aeabi_dmul+0x1c2>
  405ee6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405eea:	0040      	lsls	r0, r0, #1
  405eec:	eb41 0101 	adc.w	r1, r1, r1
  405ef0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405ef4:	bf08      	it	eq
  405ef6:	3c01      	subeq	r4, #1
  405ef8:	d0f7      	beq.n	405eea <__aeabi_dmul+0x1a6>
  405efa:	ea41 0106 	orr.w	r1, r1, r6
  405efe:	f095 0f00 	teq	r5, #0
  405f02:	bf18      	it	ne
  405f04:	4770      	bxne	lr
  405f06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405f0a:	0052      	lsls	r2, r2, #1
  405f0c:	eb43 0303 	adc.w	r3, r3, r3
  405f10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405f14:	bf08      	it	eq
  405f16:	3d01      	subeq	r5, #1
  405f18:	d0f7      	beq.n	405f0a <__aeabi_dmul+0x1c6>
  405f1a:	ea43 0306 	orr.w	r3, r3, r6
  405f1e:	4770      	bx	lr
  405f20:	ea94 0f0c 	teq	r4, ip
  405f24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405f28:	bf18      	it	ne
  405f2a:	ea95 0f0c 	teqne	r5, ip
  405f2e:	d00c      	beq.n	405f4a <__aeabi_dmul+0x206>
  405f30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405f34:	bf18      	it	ne
  405f36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405f3a:	d1d1      	bne.n	405ee0 <__aeabi_dmul+0x19c>
  405f3c:	ea81 0103 	eor.w	r1, r1, r3
  405f40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405f44:	f04f 0000 	mov.w	r0, #0
  405f48:	bd70      	pop	{r4, r5, r6, pc}
  405f4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405f4e:	bf06      	itte	eq
  405f50:	4610      	moveq	r0, r2
  405f52:	4619      	moveq	r1, r3
  405f54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405f58:	d019      	beq.n	405f8e <__aeabi_dmul+0x24a>
  405f5a:	ea94 0f0c 	teq	r4, ip
  405f5e:	d102      	bne.n	405f66 <__aeabi_dmul+0x222>
  405f60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405f64:	d113      	bne.n	405f8e <__aeabi_dmul+0x24a>
  405f66:	ea95 0f0c 	teq	r5, ip
  405f6a:	d105      	bne.n	405f78 <__aeabi_dmul+0x234>
  405f6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405f70:	bf1c      	itt	ne
  405f72:	4610      	movne	r0, r2
  405f74:	4619      	movne	r1, r3
  405f76:	d10a      	bne.n	405f8e <__aeabi_dmul+0x24a>
  405f78:	ea81 0103 	eor.w	r1, r1, r3
  405f7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405f80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405f84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405f88:	f04f 0000 	mov.w	r0, #0
  405f8c:	bd70      	pop	{r4, r5, r6, pc}
  405f8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405f92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405f96:	bd70      	pop	{r4, r5, r6, pc}

00405f98 <__aeabi_ddiv>:
  405f98:	b570      	push	{r4, r5, r6, lr}
  405f9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405f9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405fa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405fa6:	bf1d      	ittte	ne
  405fa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405fac:	ea94 0f0c 	teqne	r4, ip
  405fb0:	ea95 0f0c 	teqne	r5, ip
  405fb4:	f000 f8a7 	bleq	406106 <__aeabi_ddiv+0x16e>
  405fb8:	eba4 0405 	sub.w	r4, r4, r5
  405fbc:	ea81 0e03 	eor.w	lr, r1, r3
  405fc0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405fc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405fc8:	f000 8088 	beq.w	4060dc <__aeabi_ddiv+0x144>
  405fcc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405fd0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405fd4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405fd8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405fdc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405fe0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405fe4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405fe8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405fec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405ff0:	429d      	cmp	r5, r3
  405ff2:	bf08      	it	eq
  405ff4:	4296      	cmpeq	r6, r2
  405ff6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405ffa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405ffe:	d202      	bcs.n	406006 <__aeabi_ddiv+0x6e>
  406000:	085b      	lsrs	r3, r3, #1
  406002:	ea4f 0232 	mov.w	r2, r2, rrx
  406006:	1ab6      	subs	r6, r6, r2
  406008:	eb65 0503 	sbc.w	r5, r5, r3
  40600c:	085b      	lsrs	r3, r3, #1
  40600e:	ea4f 0232 	mov.w	r2, r2, rrx
  406012:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  406016:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40601a:	ebb6 0e02 	subs.w	lr, r6, r2
  40601e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406022:	bf22      	ittt	cs
  406024:	1ab6      	subcs	r6, r6, r2
  406026:	4675      	movcs	r5, lr
  406028:	ea40 000c 	orrcs.w	r0, r0, ip
  40602c:	085b      	lsrs	r3, r3, #1
  40602e:	ea4f 0232 	mov.w	r2, r2, rrx
  406032:	ebb6 0e02 	subs.w	lr, r6, r2
  406036:	eb75 0e03 	sbcs.w	lr, r5, r3
  40603a:	bf22      	ittt	cs
  40603c:	1ab6      	subcs	r6, r6, r2
  40603e:	4675      	movcs	r5, lr
  406040:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406044:	085b      	lsrs	r3, r3, #1
  406046:	ea4f 0232 	mov.w	r2, r2, rrx
  40604a:	ebb6 0e02 	subs.w	lr, r6, r2
  40604e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406052:	bf22      	ittt	cs
  406054:	1ab6      	subcs	r6, r6, r2
  406056:	4675      	movcs	r5, lr
  406058:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40605c:	085b      	lsrs	r3, r3, #1
  40605e:	ea4f 0232 	mov.w	r2, r2, rrx
  406062:	ebb6 0e02 	subs.w	lr, r6, r2
  406066:	eb75 0e03 	sbcs.w	lr, r5, r3
  40606a:	bf22      	ittt	cs
  40606c:	1ab6      	subcs	r6, r6, r2
  40606e:	4675      	movcs	r5, lr
  406070:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406074:	ea55 0e06 	orrs.w	lr, r5, r6
  406078:	d018      	beq.n	4060ac <__aeabi_ddiv+0x114>
  40607a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40607e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406082:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406086:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40608a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40608e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406092:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406096:	d1c0      	bne.n	40601a <__aeabi_ddiv+0x82>
  406098:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40609c:	d10b      	bne.n	4060b6 <__aeabi_ddiv+0x11e>
  40609e:	ea41 0100 	orr.w	r1, r1, r0
  4060a2:	f04f 0000 	mov.w	r0, #0
  4060a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4060aa:	e7b6      	b.n	40601a <__aeabi_ddiv+0x82>
  4060ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4060b0:	bf04      	itt	eq
  4060b2:	4301      	orreq	r1, r0
  4060b4:	2000      	moveq	r0, #0
  4060b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4060ba:	bf88      	it	hi
  4060bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4060c0:	f63f aeaf 	bhi.w	405e22 <__aeabi_dmul+0xde>
  4060c4:	ebb5 0c03 	subs.w	ip, r5, r3
  4060c8:	bf04      	itt	eq
  4060ca:	ebb6 0c02 	subseq.w	ip, r6, r2
  4060ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4060d2:	f150 0000 	adcs.w	r0, r0, #0
  4060d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4060da:	bd70      	pop	{r4, r5, r6, pc}
  4060dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4060e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4060e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4060e8:	bfc2      	ittt	gt
  4060ea:	ebd4 050c 	rsbsgt	r5, r4, ip
  4060ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4060f2:	bd70      	popgt	{r4, r5, r6, pc}
  4060f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4060f8:	f04f 0e00 	mov.w	lr, #0
  4060fc:	3c01      	subs	r4, #1
  4060fe:	e690      	b.n	405e22 <__aeabi_dmul+0xde>
  406100:	ea45 0e06 	orr.w	lr, r5, r6
  406104:	e68d      	b.n	405e22 <__aeabi_dmul+0xde>
  406106:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40610a:	ea94 0f0c 	teq	r4, ip
  40610e:	bf08      	it	eq
  406110:	ea95 0f0c 	teqeq	r5, ip
  406114:	f43f af3b 	beq.w	405f8e <__aeabi_dmul+0x24a>
  406118:	ea94 0f0c 	teq	r4, ip
  40611c:	d10a      	bne.n	406134 <__aeabi_ddiv+0x19c>
  40611e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406122:	f47f af34 	bne.w	405f8e <__aeabi_dmul+0x24a>
  406126:	ea95 0f0c 	teq	r5, ip
  40612a:	f47f af25 	bne.w	405f78 <__aeabi_dmul+0x234>
  40612e:	4610      	mov	r0, r2
  406130:	4619      	mov	r1, r3
  406132:	e72c      	b.n	405f8e <__aeabi_dmul+0x24a>
  406134:	ea95 0f0c 	teq	r5, ip
  406138:	d106      	bne.n	406148 <__aeabi_ddiv+0x1b0>
  40613a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40613e:	f43f aefd 	beq.w	405f3c <__aeabi_dmul+0x1f8>
  406142:	4610      	mov	r0, r2
  406144:	4619      	mov	r1, r3
  406146:	e722      	b.n	405f8e <__aeabi_dmul+0x24a>
  406148:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40614c:	bf18      	it	ne
  40614e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406152:	f47f aec5 	bne.w	405ee0 <__aeabi_dmul+0x19c>
  406156:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40615a:	f47f af0d 	bne.w	405f78 <__aeabi_dmul+0x234>
  40615e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406162:	f47f aeeb 	bne.w	405f3c <__aeabi_dmul+0x1f8>
  406166:	e712      	b.n	405f8e <__aeabi_dmul+0x24a>

00406168 <__gedf2>:
  406168:	f04f 3cff 	mov.w	ip, #4294967295
  40616c:	e006      	b.n	40617c <__cmpdf2+0x4>
  40616e:	bf00      	nop

00406170 <__ledf2>:
  406170:	f04f 0c01 	mov.w	ip, #1
  406174:	e002      	b.n	40617c <__cmpdf2+0x4>
  406176:	bf00      	nop

00406178 <__cmpdf2>:
  406178:	f04f 0c01 	mov.w	ip, #1
  40617c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406180:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406184:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406188:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40618c:	bf18      	it	ne
  40618e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406192:	d01b      	beq.n	4061cc <__cmpdf2+0x54>
  406194:	b001      	add	sp, #4
  406196:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40619a:	bf0c      	ite	eq
  40619c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4061a0:	ea91 0f03 	teqne	r1, r3
  4061a4:	bf02      	ittt	eq
  4061a6:	ea90 0f02 	teqeq	r0, r2
  4061aa:	2000      	moveq	r0, #0
  4061ac:	4770      	bxeq	lr
  4061ae:	f110 0f00 	cmn.w	r0, #0
  4061b2:	ea91 0f03 	teq	r1, r3
  4061b6:	bf58      	it	pl
  4061b8:	4299      	cmppl	r1, r3
  4061ba:	bf08      	it	eq
  4061bc:	4290      	cmpeq	r0, r2
  4061be:	bf2c      	ite	cs
  4061c0:	17d8      	asrcs	r0, r3, #31
  4061c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4061c6:	f040 0001 	orr.w	r0, r0, #1
  4061ca:	4770      	bx	lr
  4061cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4061d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4061d4:	d102      	bne.n	4061dc <__cmpdf2+0x64>
  4061d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4061da:	d107      	bne.n	4061ec <__cmpdf2+0x74>
  4061dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4061e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4061e4:	d1d6      	bne.n	406194 <__cmpdf2+0x1c>
  4061e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4061ea:	d0d3      	beq.n	406194 <__cmpdf2+0x1c>
  4061ec:	f85d 0b04 	ldr.w	r0, [sp], #4
  4061f0:	4770      	bx	lr
  4061f2:	bf00      	nop

004061f4 <__aeabi_cdrcmple>:
  4061f4:	4684      	mov	ip, r0
  4061f6:	4610      	mov	r0, r2
  4061f8:	4662      	mov	r2, ip
  4061fa:	468c      	mov	ip, r1
  4061fc:	4619      	mov	r1, r3
  4061fe:	4663      	mov	r3, ip
  406200:	e000      	b.n	406204 <__aeabi_cdcmpeq>
  406202:	bf00      	nop

00406204 <__aeabi_cdcmpeq>:
  406204:	b501      	push	{r0, lr}
  406206:	f7ff ffb7 	bl	406178 <__cmpdf2>
  40620a:	2800      	cmp	r0, #0
  40620c:	bf48      	it	mi
  40620e:	f110 0f00 	cmnmi.w	r0, #0
  406212:	bd01      	pop	{r0, pc}

00406214 <__aeabi_dcmpeq>:
  406214:	f84d ed08 	str.w	lr, [sp, #-8]!
  406218:	f7ff fff4 	bl	406204 <__aeabi_cdcmpeq>
  40621c:	bf0c      	ite	eq
  40621e:	2001      	moveq	r0, #1
  406220:	2000      	movne	r0, #0
  406222:	f85d fb08 	ldr.w	pc, [sp], #8
  406226:	bf00      	nop

00406228 <__aeabi_dcmplt>:
  406228:	f84d ed08 	str.w	lr, [sp, #-8]!
  40622c:	f7ff ffea 	bl	406204 <__aeabi_cdcmpeq>
  406230:	bf34      	ite	cc
  406232:	2001      	movcc	r0, #1
  406234:	2000      	movcs	r0, #0
  406236:	f85d fb08 	ldr.w	pc, [sp], #8
  40623a:	bf00      	nop

0040623c <__aeabi_dcmple>:
  40623c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406240:	f7ff ffe0 	bl	406204 <__aeabi_cdcmpeq>
  406244:	bf94      	ite	ls
  406246:	2001      	movls	r0, #1
  406248:	2000      	movhi	r0, #0
  40624a:	f85d fb08 	ldr.w	pc, [sp], #8
  40624e:	bf00      	nop

00406250 <__aeabi_dcmpge>:
  406250:	f84d ed08 	str.w	lr, [sp, #-8]!
  406254:	f7ff ffce 	bl	4061f4 <__aeabi_cdrcmple>
  406258:	bf94      	ite	ls
  40625a:	2001      	movls	r0, #1
  40625c:	2000      	movhi	r0, #0
  40625e:	f85d fb08 	ldr.w	pc, [sp], #8
  406262:	bf00      	nop

00406264 <__aeabi_dcmpgt>:
  406264:	f84d ed08 	str.w	lr, [sp, #-8]!
  406268:	f7ff ffc4 	bl	4061f4 <__aeabi_cdrcmple>
  40626c:	bf34      	ite	cc
  40626e:	2001      	movcc	r0, #1
  406270:	2000      	movcs	r0, #0
  406272:	f85d fb08 	ldr.w	pc, [sp], #8
  406276:	bf00      	nop

00406278 <__aeabi_d2iz>:
  406278:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40627c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406280:	d215      	bcs.n	4062ae <__aeabi_d2iz+0x36>
  406282:	d511      	bpl.n	4062a8 <__aeabi_d2iz+0x30>
  406284:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406288:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40628c:	d912      	bls.n	4062b4 <__aeabi_d2iz+0x3c>
  40628e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406296:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40629a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40629e:	fa23 f002 	lsr.w	r0, r3, r2
  4062a2:	bf18      	it	ne
  4062a4:	4240      	negne	r0, r0
  4062a6:	4770      	bx	lr
  4062a8:	f04f 0000 	mov.w	r0, #0
  4062ac:	4770      	bx	lr
  4062ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4062b2:	d105      	bne.n	4062c0 <__aeabi_d2iz+0x48>
  4062b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4062b8:	bf08      	it	eq
  4062ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4062be:	4770      	bx	lr
  4062c0:	f04f 0000 	mov.w	r0, #0
  4062c4:	4770      	bx	lr
  4062c6:	bf00      	nop

004062c8 <__aeabi_d2f>:
  4062c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4062cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4062d0:	bf24      	itt	cs
  4062d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4062d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4062da:	d90d      	bls.n	4062f8 <__aeabi_d2f+0x30>
  4062dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4062e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4062e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4062e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4062ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4062f0:	bf08      	it	eq
  4062f2:	f020 0001 	biceq.w	r0, r0, #1
  4062f6:	4770      	bx	lr
  4062f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4062fc:	d121      	bne.n	406342 <__aeabi_d2f+0x7a>
  4062fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  406302:	bfbc      	itt	lt
  406304:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  406308:	4770      	bxlt	lr
  40630a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40630e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  406312:	f1c2 0218 	rsb	r2, r2, #24
  406316:	f1c2 0c20 	rsb	ip, r2, #32
  40631a:	fa10 f30c 	lsls.w	r3, r0, ip
  40631e:	fa20 f002 	lsr.w	r0, r0, r2
  406322:	bf18      	it	ne
  406324:	f040 0001 	orrne.w	r0, r0, #1
  406328:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40632c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  406330:	fa03 fc0c 	lsl.w	ip, r3, ip
  406334:	ea40 000c 	orr.w	r0, r0, ip
  406338:	fa23 f302 	lsr.w	r3, r3, r2
  40633c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  406340:	e7cc      	b.n	4062dc <__aeabi_d2f+0x14>
  406342:	ea7f 5362 	mvns.w	r3, r2, asr #21
  406346:	d107      	bne.n	406358 <__aeabi_d2f+0x90>
  406348:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40634c:	bf1e      	ittt	ne
  40634e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  406352:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  406356:	4770      	bxne	lr
  406358:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40635c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406360:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406364:	4770      	bx	lr
  406366:	bf00      	nop

00406368 <__aeabi_frsub>:
  406368:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40636c:	e002      	b.n	406374 <__addsf3>
  40636e:	bf00      	nop

00406370 <__aeabi_fsub>:
  406370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00406374 <__addsf3>:
  406374:	0042      	lsls	r2, r0, #1
  406376:	bf1f      	itttt	ne
  406378:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40637c:	ea92 0f03 	teqne	r2, r3
  406380:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  406384:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  406388:	d06a      	beq.n	406460 <__addsf3+0xec>
  40638a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40638e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  406392:	bfc1      	itttt	gt
  406394:	18d2      	addgt	r2, r2, r3
  406396:	4041      	eorgt	r1, r0
  406398:	4048      	eorgt	r0, r1
  40639a:	4041      	eorgt	r1, r0
  40639c:	bfb8      	it	lt
  40639e:	425b      	neglt	r3, r3
  4063a0:	2b19      	cmp	r3, #25
  4063a2:	bf88      	it	hi
  4063a4:	4770      	bxhi	lr
  4063a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4063aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4063ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  4063b2:	bf18      	it	ne
  4063b4:	4240      	negne	r0, r0
  4063b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4063ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4063be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4063c2:	bf18      	it	ne
  4063c4:	4249      	negne	r1, r1
  4063c6:	ea92 0f03 	teq	r2, r3
  4063ca:	d03f      	beq.n	40644c <__addsf3+0xd8>
  4063cc:	f1a2 0201 	sub.w	r2, r2, #1
  4063d0:	fa41 fc03 	asr.w	ip, r1, r3
  4063d4:	eb10 000c 	adds.w	r0, r0, ip
  4063d8:	f1c3 0320 	rsb	r3, r3, #32
  4063dc:	fa01 f103 	lsl.w	r1, r1, r3
  4063e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4063e4:	d502      	bpl.n	4063ec <__addsf3+0x78>
  4063e6:	4249      	negs	r1, r1
  4063e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  4063ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4063f0:	d313      	bcc.n	40641a <__addsf3+0xa6>
  4063f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4063f6:	d306      	bcc.n	406406 <__addsf3+0x92>
  4063f8:	0840      	lsrs	r0, r0, #1
  4063fa:	ea4f 0131 	mov.w	r1, r1, rrx
  4063fe:	f102 0201 	add.w	r2, r2, #1
  406402:	2afe      	cmp	r2, #254	; 0xfe
  406404:	d251      	bcs.n	4064aa <__addsf3+0x136>
  406406:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40640a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40640e:	bf08      	it	eq
  406410:	f020 0001 	biceq.w	r0, r0, #1
  406414:	ea40 0003 	orr.w	r0, r0, r3
  406418:	4770      	bx	lr
  40641a:	0049      	lsls	r1, r1, #1
  40641c:	eb40 0000 	adc.w	r0, r0, r0
  406420:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  406424:	f1a2 0201 	sub.w	r2, r2, #1
  406428:	d1ed      	bne.n	406406 <__addsf3+0x92>
  40642a:	fab0 fc80 	clz	ip, r0
  40642e:	f1ac 0c08 	sub.w	ip, ip, #8
  406432:	ebb2 020c 	subs.w	r2, r2, ip
  406436:	fa00 f00c 	lsl.w	r0, r0, ip
  40643a:	bfaa      	itet	ge
  40643c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  406440:	4252      	neglt	r2, r2
  406442:	4318      	orrge	r0, r3
  406444:	bfbc      	itt	lt
  406446:	40d0      	lsrlt	r0, r2
  406448:	4318      	orrlt	r0, r3
  40644a:	4770      	bx	lr
  40644c:	f092 0f00 	teq	r2, #0
  406450:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  406454:	bf06      	itte	eq
  406456:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40645a:	3201      	addeq	r2, #1
  40645c:	3b01      	subne	r3, #1
  40645e:	e7b5      	b.n	4063cc <__addsf3+0x58>
  406460:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406464:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406468:	bf18      	it	ne
  40646a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40646e:	d021      	beq.n	4064b4 <__addsf3+0x140>
  406470:	ea92 0f03 	teq	r2, r3
  406474:	d004      	beq.n	406480 <__addsf3+0x10c>
  406476:	f092 0f00 	teq	r2, #0
  40647a:	bf08      	it	eq
  40647c:	4608      	moveq	r0, r1
  40647e:	4770      	bx	lr
  406480:	ea90 0f01 	teq	r0, r1
  406484:	bf1c      	itt	ne
  406486:	2000      	movne	r0, #0
  406488:	4770      	bxne	lr
  40648a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40648e:	d104      	bne.n	40649a <__addsf3+0x126>
  406490:	0040      	lsls	r0, r0, #1
  406492:	bf28      	it	cs
  406494:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  406498:	4770      	bx	lr
  40649a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40649e:	bf3c      	itt	cc
  4064a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4064a4:	4770      	bxcc	lr
  4064a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4064aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  4064ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4064b2:	4770      	bx	lr
  4064b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
  4064b8:	bf16      	itet	ne
  4064ba:	4608      	movne	r0, r1
  4064bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  4064c0:	4601      	movne	r1, r0
  4064c2:	0242      	lsls	r2, r0, #9
  4064c4:	bf06      	itte	eq
  4064c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4064ca:	ea90 0f01 	teqeq	r0, r1
  4064ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4064d2:	4770      	bx	lr

004064d4 <__aeabi_ui2f>:
  4064d4:	f04f 0300 	mov.w	r3, #0
  4064d8:	e004      	b.n	4064e4 <__aeabi_i2f+0x8>
  4064da:	bf00      	nop

004064dc <__aeabi_i2f>:
  4064dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4064e0:	bf48      	it	mi
  4064e2:	4240      	negmi	r0, r0
  4064e4:	ea5f 0c00 	movs.w	ip, r0
  4064e8:	bf08      	it	eq
  4064ea:	4770      	bxeq	lr
  4064ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4064f0:	4601      	mov	r1, r0
  4064f2:	f04f 0000 	mov.w	r0, #0
  4064f6:	e01c      	b.n	406532 <__aeabi_l2f+0x2a>

004064f8 <__aeabi_ul2f>:
  4064f8:	ea50 0201 	orrs.w	r2, r0, r1
  4064fc:	bf08      	it	eq
  4064fe:	4770      	bxeq	lr
  406500:	f04f 0300 	mov.w	r3, #0
  406504:	e00a      	b.n	40651c <__aeabi_l2f+0x14>
  406506:	bf00      	nop

00406508 <__aeabi_l2f>:
  406508:	ea50 0201 	orrs.w	r2, r0, r1
  40650c:	bf08      	it	eq
  40650e:	4770      	bxeq	lr
  406510:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  406514:	d502      	bpl.n	40651c <__aeabi_l2f+0x14>
  406516:	4240      	negs	r0, r0
  406518:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40651c:	ea5f 0c01 	movs.w	ip, r1
  406520:	bf02      	ittt	eq
  406522:	4684      	moveq	ip, r0
  406524:	4601      	moveq	r1, r0
  406526:	2000      	moveq	r0, #0
  406528:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40652c:	bf08      	it	eq
  40652e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  406532:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  406536:	fabc f28c 	clz	r2, ip
  40653a:	3a08      	subs	r2, #8
  40653c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  406540:	db10      	blt.n	406564 <__aeabi_l2f+0x5c>
  406542:	fa01 fc02 	lsl.w	ip, r1, r2
  406546:	4463      	add	r3, ip
  406548:	fa00 fc02 	lsl.w	ip, r0, r2
  40654c:	f1c2 0220 	rsb	r2, r2, #32
  406550:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406554:	fa20 f202 	lsr.w	r2, r0, r2
  406558:	eb43 0002 	adc.w	r0, r3, r2
  40655c:	bf08      	it	eq
  40655e:	f020 0001 	biceq.w	r0, r0, #1
  406562:	4770      	bx	lr
  406564:	f102 0220 	add.w	r2, r2, #32
  406568:	fa01 fc02 	lsl.w	ip, r1, r2
  40656c:	f1c2 0220 	rsb	r2, r2, #32
  406570:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  406574:	fa21 f202 	lsr.w	r2, r1, r2
  406578:	eb43 0002 	adc.w	r0, r3, r2
  40657c:	bf08      	it	eq
  40657e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  406582:	4770      	bx	lr

00406584 <__aeabi_fmul>:
  406584:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406588:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40658c:	bf1e      	ittt	ne
  40658e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406592:	ea92 0f0c 	teqne	r2, ip
  406596:	ea93 0f0c 	teqne	r3, ip
  40659a:	d06f      	beq.n	40667c <__aeabi_fmul+0xf8>
  40659c:	441a      	add	r2, r3
  40659e:	ea80 0c01 	eor.w	ip, r0, r1
  4065a2:	0240      	lsls	r0, r0, #9
  4065a4:	bf18      	it	ne
  4065a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4065aa:	d01e      	beq.n	4065ea <__aeabi_fmul+0x66>
  4065ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  4065b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  4065b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4065b8:	fba0 3101 	umull	r3, r1, r0, r1
  4065bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4065c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4065c4:	bf3e      	ittt	cc
  4065c6:	0049      	lslcc	r1, r1, #1
  4065c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4065cc:	005b      	lslcc	r3, r3, #1
  4065ce:	ea40 0001 	orr.w	r0, r0, r1
  4065d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4065d6:	2afd      	cmp	r2, #253	; 0xfd
  4065d8:	d81d      	bhi.n	406616 <__aeabi_fmul+0x92>
  4065da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4065de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4065e2:	bf08      	it	eq
  4065e4:	f020 0001 	biceq.w	r0, r0, #1
  4065e8:	4770      	bx	lr
  4065ea:	f090 0f00 	teq	r0, #0
  4065ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4065f2:	bf08      	it	eq
  4065f4:	0249      	lsleq	r1, r1, #9
  4065f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4065fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4065fe:	3a7f      	subs	r2, #127	; 0x7f
  406600:	bfc2      	ittt	gt
  406602:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406606:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40660a:	4770      	bxgt	lr
  40660c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406610:	f04f 0300 	mov.w	r3, #0
  406614:	3a01      	subs	r2, #1
  406616:	dc5d      	bgt.n	4066d4 <__aeabi_fmul+0x150>
  406618:	f112 0f19 	cmn.w	r2, #25
  40661c:	bfdc      	itt	le
  40661e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  406622:	4770      	bxle	lr
  406624:	f1c2 0200 	rsb	r2, r2, #0
  406628:	0041      	lsls	r1, r0, #1
  40662a:	fa21 f102 	lsr.w	r1, r1, r2
  40662e:	f1c2 0220 	rsb	r2, r2, #32
  406632:	fa00 fc02 	lsl.w	ip, r0, r2
  406636:	ea5f 0031 	movs.w	r0, r1, rrx
  40663a:	f140 0000 	adc.w	r0, r0, #0
  40663e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  406642:	bf08      	it	eq
  406644:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  406648:	4770      	bx	lr
  40664a:	f092 0f00 	teq	r2, #0
  40664e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406652:	bf02      	ittt	eq
  406654:	0040      	lsleq	r0, r0, #1
  406656:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40665a:	3a01      	subeq	r2, #1
  40665c:	d0f9      	beq.n	406652 <__aeabi_fmul+0xce>
  40665e:	ea40 000c 	orr.w	r0, r0, ip
  406662:	f093 0f00 	teq	r3, #0
  406666:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40666a:	bf02      	ittt	eq
  40666c:	0049      	lsleq	r1, r1, #1
  40666e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406672:	3b01      	subeq	r3, #1
  406674:	d0f9      	beq.n	40666a <__aeabi_fmul+0xe6>
  406676:	ea41 010c 	orr.w	r1, r1, ip
  40667a:	e78f      	b.n	40659c <__aeabi_fmul+0x18>
  40667c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406680:	ea92 0f0c 	teq	r2, ip
  406684:	bf18      	it	ne
  406686:	ea93 0f0c 	teqne	r3, ip
  40668a:	d00a      	beq.n	4066a2 <__aeabi_fmul+0x11e>
  40668c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406690:	bf18      	it	ne
  406692:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406696:	d1d8      	bne.n	40664a <__aeabi_fmul+0xc6>
  406698:	ea80 0001 	eor.w	r0, r0, r1
  40669c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4066a0:	4770      	bx	lr
  4066a2:	f090 0f00 	teq	r0, #0
  4066a6:	bf17      	itett	ne
  4066a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  4066ac:	4608      	moveq	r0, r1
  4066ae:	f091 0f00 	teqne	r1, #0
  4066b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  4066b6:	d014      	beq.n	4066e2 <__aeabi_fmul+0x15e>
  4066b8:	ea92 0f0c 	teq	r2, ip
  4066bc:	d101      	bne.n	4066c2 <__aeabi_fmul+0x13e>
  4066be:	0242      	lsls	r2, r0, #9
  4066c0:	d10f      	bne.n	4066e2 <__aeabi_fmul+0x15e>
  4066c2:	ea93 0f0c 	teq	r3, ip
  4066c6:	d103      	bne.n	4066d0 <__aeabi_fmul+0x14c>
  4066c8:	024b      	lsls	r3, r1, #9
  4066ca:	bf18      	it	ne
  4066cc:	4608      	movne	r0, r1
  4066ce:	d108      	bne.n	4066e2 <__aeabi_fmul+0x15e>
  4066d0:	ea80 0001 	eor.w	r0, r0, r1
  4066d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4066d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4066dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4066e0:	4770      	bx	lr
  4066e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4066e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  4066ea:	4770      	bx	lr

004066ec <__aeabi_fdiv>:
  4066ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4066f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4066f4:	bf1e      	ittt	ne
  4066f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4066fa:	ea92 0f0c 	teqne	r2, ip
  4066fe:	ea93 0f0c 	teqne	r3, ip
  406702:	d069      	beq.n	4067d8 <__aeabi_fdiv+0xec>
  406704:	eba2 0203 	sub.w	r2, r2, r3
  406708:	ea80 0c01 	eor.w	ip, r0, r1
  40670c:	0249      	lsls	r1, r1, #9
  40670e:	ea4f 2040 	mov.w	r0, r0, lsl #9
  406712:	d037      	beq.n	406784 <__aeabi_fdiv+0x98>
  406714:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  406718:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  40671c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  406720:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406724:	428b      	cmp	r3, r1
  406726:	bf38      	it	cc
  406728:	005b      	lslcc	r3, r3, #1
  40672a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  40672e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  406732:	428b      	cmp	r3, r1
  406734:	bf24      	itt	cs
  406736:	1a5b      	subcs	r3, r3, r1
  406738:	ea40 000c 	orrcs.w	r0, r0, ip
  40673c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  406740:	bf24      	itt	cs
  406742:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  406746:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40674a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40674e:	bf24      	itt	cs
  406750:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  406754:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406758:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40675c:	bf24      	itt	cs
  40675e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  406762:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406766:	011b      	lsls	r3, r3, #4
  406768:	bf18      	it	ne
  40676a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40676e:	d1e0      	bne.n	406732 <__aeabi_fdiv+0x46>
  406770:	2afd      	cmp	r2, #253	; 0xfd
  406772:	f63f af50 	bhi.w	406616 <__aeabi_fmul+0x92>
  406776:	428b      	cmp	r3, r1
  406778:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40677c:	bf08      	it	eq
  40677e:	f020 0001 	biceq.w	r0, r0, #1
  406782:	4770      	bx	lr
  406784:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406788:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40678c:	327f      	adds	r2, #127	; 0x7f
  40678e:	bfc2      	ittt	gt
  406790:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406794:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406798:	4770      	bxgt	lr
  40679a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40679e:	f04f 0300 	mov.w	r3, #0
  4067a2:	3a01      	subs	r2, #1
  4067a4:	e737      	b.n	406616 <__aeabi_fmul+0x92>
  4067a6:	f092 0f00 	teq	r2, #0
  4067aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4067ae:	bf02      	ittt	eq
  4067b0:	0040      	lsleq	r0, r0, #1
  4067b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4067b6:	3a01      	subeq	r2, #1
  4067b8:	d0f9      	beq.n	4067ae <__aeabi_fdiv+0xc2>
  4067ba:	ea40 000c 	orr.w	r0, r0, ip
  4067be:	f093 0f00 	teq	r3, #0
  4067c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4067c6:	bf02      	ittt	eq
  4067c8:	0049      	lsleq	r1, r1, #1
  4067ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4067ce:	3b01      	subeq	r3, #1
  4067d0:	d0f9      	beq.n	4067c6 <__aeabi_fdiv+0xda>
  4067d2:	ea41 010c 	orr.w	r1, r1, ip
  4067d6:	e795      	b.n	406704 <__aeabi_fdiv+0x18>
  4067d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4067dc:	ea92 0f0c 	teq	r2, ip
  4067e0:	d108      	bne.n	4067f4 <__aeabi_fdiv+0x108>
  4067e2:	0242      	lsls	r2, r0, #9
  4067e4:	f47f af7d 	bne.w	4066e2 <__aeabi_fmul+0x15e>
  4067e8:	ea93 0f0c 	teq	r3, ip
  4067ec:	f47f af70 	bne.w	4066d0 <__aeabi_fmul+0x14c>
  4067f0:	4608      	mov	r0, r1
  4067f2:	e776      	b.n	4066e2 <__aeabi_fmul+0x15e>
  4067f4:	ea93 0f0c 	teq	r3, ip
  4067f8:	d104      	bne.n	406804 <__aeabi_fdiv+0x118>
  4067fa:	024b      	lsls	r3, r1, #9
  4067fc:	f43f af4c 	beq.w	406698 <__aeabi_fmul+0x114>
  406800:	4608      	mov	r0, r1
  406802:	e76e      	b.n	4066e2 <__aeabi_fmul+0x15e>
  406804:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406808:	bf18      	it	ne
  40680a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40680e:	d1ca      	bne.n	4067a6 <__aeabi_fdiv+0xba>
  406810:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  406814:	f47f af5c 	bne.w	4066d0 <__aeabi_fmul+0x14c>
  406818:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40681c:	f47f af3c 	bne.w	406698 <__aeabi_fmul+0x114>
  406820:	e75f      	b.n	4066e2 <__aeabi_fmul+0x15e>
  406822:	bf00      	nop

00406824 <__gesf2>:
  406824:	f04f 3cff 	mov.w	ip, #4294967295
  406828:	e006      	b.n	406838 <__cmpsf2+0x4>
  40682a:	bf00      	nop

0040682c <__lesf2>:
  40682c:	f04f 0c01 	mov.w	ip, #1
  406830:	e002      	b.n	406838 <__cmpsf2+0x4>
  406832:	bf00      	nop

00406834 <__cmpsf2>:
  406834:	f04f 0c01 	mov.w	ip, #1
  406838:	f84d cd04 	str.w	ip, [sp, #-4]!
  40683c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406840:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406844:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406848:	bf18      	it	ne
  40684a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40684e:	d011      	beq.n	406874 <__cmpsf2+0x40>
  406850:	b001      	add	sp, #4
  406852:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  406856:	bf18      	it	ne
  406858:	ea90 0f01 	teqne	r0, r1
  40685c:	bf58      	it	pl
  40685e:	ebb2 0003 	subspl.w	r0, r2, r3
  406862:	bf88      	it	hi
  406864:	17c8      	asrhi	r0, r1, #31
  406866:	bf38      	it	cc
  406868:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  40686c:	bf18      	it	ne
  40686e:	f040 0001 	orrne.w	r0, r0, #1
  406872:	4770      	bx	lr
  406874:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406878:	d102      	bne.n	406880 <__cmpsf2+0x4c>
  40687a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40687e:	d105      	bne.n	40688c <__cmpsf2+0x58>
  406880:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406884:	d1e4      	bne.n	406850 <__cmpsf2+0x1c>
  406886:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40688a:	d0e1      	beq.n	406850 <__cmpsf2+0x1c>
  40688c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406890:	4770      	bx	lr
  406892:	bf00      	nop

00406894 <__aeabi_cfrcmple>:
  406894:	4684      	mov	ip, r0
  406896:	4608      	mov	r0, r1
  406898:	4661      	mov	r1, ip
  40689a:	e7ff      	b.n	40689c <__aeabi_cfcmpeq>

0040689c <__aeabi_cfcmpeq>:
  40689c:	b50f      	push	{r0, r1, r2, r3, lr}
  40689e:	f7ff ffc9 	bl	406834 <__cmpsf2>
  4068a2:	2800      	cmp	r0, #0
  4068a4:	bf48      	it	mi
  4068a6:	f110 0f00 	cmnmi.w	r0, #0
  4068aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

004068ac <__aeabi_fcmpeq>:
  4068ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068b0:	f7ff fff4 	bl	40689c <__aeabi_cfcmpeq>
  4068b4:	bf0c      	ite	eq
  4068b6:	2001      	moveq	r0, #1
  4068b8:	2000      	movne	r0, #0
  4068ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4068be:	bf00      	nop

004068c0 <__aeabi_fcmplt>:
  4068c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068c4:	f7ff ffea 	bl	40689c <__aeabi_cfcmpeq>
  4068c8:	bf34      	ite	cc
  4068ca:	2001      	movcc	r0, #1
  4068cc:	2000      	movcs	r0, #0
  4068ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4068d2:	bf00      	nop

004068d4 <__aeabi_fcmple>:
  4068d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068d8:	f7ff ffe0 	bl	40689c <__aeabi_cfcmpeq>
  4068dc:	bf94      	ite	ls
  4068de:	2001      	movls	r0, #1
  4068e0:	2000      	movhi	r0, #0
  4068e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4068e6:	bf00      	nop

004068e8 <__aeabi_fcmpge>:
  4068e8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068ec:	f7ff ffd2 	bl	406894 <__aeabi_cfrcmple>
  4068f0:	bf94      	ite	ls
  4068f2:	2001      	movls	r0, #1
  4068f4:	2000      	movhi	r0, #0
  4068f6:	f85d fb08 	ldr.w	pc, [sp], #8
  4068fa:	bf00      	nop

004068fc <__aeabi_fcmpgt>:
  4068fc:	f84d ed08 	str.w	lr, [sp, #-8]!
  406900:	f7ff ffc8 	bl	406894 <__aeabi_cfrcmple>
  406904:	bf34      	ite	cc
  406906:	2001      	movcc	r0, #1
  406908:	2000      	movcs	r0, #0
  40690a:	f85d fb08 	ldr.w	pc, [sp], #8
  40690e:	bf00      	nop

00406910 <__aeabi_f2uiz>:
  406910:	0042      	lsls	r2, r0, #1
  406912:	d20e      	bcs.n	406932 <__aeabi_f2uiz+0x22>
  406914:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  406918:	d30b      	bcc.n	406932 <__aeabi_f2uiz+0x22>
  40691a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40691e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  406922:	d409      	bmi.n	406938 <__aeabi_f2uiz+0x28>
  406924:	ea4f 2300 	mov.w	r3, r0, lsl #8
  406928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40692c:	fa23 f002 	lsr.w	r0, r3, r2
  406930:	4770      	bx	lr
  406932:	f04f 0000 	mov.w	r0, #0
  406936:	4770      	bx	lr
  406938:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40693c:	d101      	bne.n	406942 <__aeabi_f2uiz+0x32>
  40693e:	0242      	lsls	r2, r0, #9
  406940:	d102      	bne.n	406948 <__aeabi_f2uiz+0x38>
  406942:	f04f 30ff 	mov.w	r0, #4294967295
  406946:	4770      	bx	lr
  406948:	f04f 0000 	mov.w	r0, #0
  40694c:	4770      	bx	lr
  40694e:	bf00      	nop

00406950 <__libc_init_array>:
  406950:	b570      	push	{r4, r5, r6, lr}
  406952:	4e0f      	ldr	r6, [pc, #60]	; (406990 <__libc_init_array+0x40>)
  406954:	4d0f      	ldr	r5, [pc, #60]	; (406994 <__libc_init_array+0x44>)
  406956:	1b76      	subs	r6, r6, r5
  406958:	10b6      	asrs	r6, r6, #2
  40695a:	bf18      	it	ne
  40695c:	2400      	movne	r4, #0
  40695e:	d005      	beq.n	40696c <__libc_init_array+0x1c>
  406960:	3401      	adds	r4, #1
  406962:	f855 3b04 	ldr.w	r3, [r5], #4
  406966:	4798      	blx	r3
  406968:	42a6      	cmp	r6, r4
  40696a:	d1f9      	bne.n	406960 <__libc_init_array+0x10>
  40696c:	4e0a      	ldr	r6, [pc, #40]	; (406998 <__libc_init_array+0x48>)
  40696e:	4d0b      	ldr	r5, [pc, #44]	; (40699c <__libc_init_array+0x4c>)
  406970:	1b76      	subs	r6, r6, r5
  406972:	f001 f9ed 	bl	407d50 <_init>
  406976:	10b6      	asrs	r6, r6, #2
  406978:	bf18      	it	ne
  40697a:	2400      	movne	r4, #0
  40697c:	d006      	beq.n	40698c <__libc_init_array+0x3c>
  40697e:	3401      	adds	r4, #1
  406980:	f855 3b04 	ldr.w	r3, [r5], #4
  406984:	4798      	blx	r3
  406986:	42a6      	cmp	r6, r4
  406988:	d1f9      	bne.n	40697e <__libc_init_array+0x2e>
  40698a:	bd70      	pop	{r4, r5, r6, pc}
  40698c:	bd70      	pop	{r4, r5, r6, pc}
  40698e:	bf00      	nop
  406990:	00407d5c 	.word	0x00407d5c
  406994:	00407d5c 	.word	0x00407d5c
  406998:	00407d64 	.word	0x00407d64
  40699c:	00407d5c 	.word	0x00407d5c

004069a0 <memcmp>:
  4069a0:	2a03      	cmp	r2, #3
  4069a2:	b470      	push	{r4, r5, r6}
  4069a4:	d926      	bls.n	4069f4 <memcmp+0x54>
  4069a6:	ea40 0301 	orr.w	r3, r0, r1
  4069aa:	079b      	lsls	r3, r3, #30
  4069ac:	d011      	beq.n	4069d2 <memcmp+0x32>
  4069ae:	7804      	ldrb	r4, [r0, #0]
  4069b0:	780d      	ldrb	r5, [r1, #0]
  4069b2:	42ac      	cmp	r4, r5
  4069b4:	d122      	bne.n	4069fc <memcmp+0x5c>
  4069b6:	4402      	add	r2, r0
  4069b8:	1c43      	adds	r3, r0, #1
  4069ba:	e005      	b.n	4069c8 <memcmp+0x28>
  4069bc:	f813 4b01 	ldrb.w	r4, [r3], #1
  4069c0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  4069c4:	42ac      	cmp	r4, r5
  4069c6:	d119      	bne.n	4069fc <memcmp+0x5c>
  4069c8:	4293      	cmp	r3, r2
  4069ca:	d1f7      	bne.n	4069bc <memcmp+0x1c>
  4069cc:	2000      	movs	r0, #0
  4069ce:	bc70      	pop	{r4, r5, r6}
  4069d0:	4770      	bx	lr
  4069d2:	460c      	mov	r4, r1
  4069d4:	4603      	mov	r3, r0
  4069d6:	681e      	ldr	r6, [r3, #0]
  4069d8:	6825      	ldr	r5, [r4, #0]
  4069da:	42ae      	cmp	r6, r5
  4069dc:	4618      	mov	r0, r3
  4069de:	4621      	mov	r1, r4
  4069e0:	f103 0304 	add.w	r3, r3, #4
  4069e4:	f104 0404 	add.w	r4, r4, #4
  4069e8:	d1e1      	bne.n	4069ae <memcmp+0xe>
  4069ea:	3a04      	subs	r2, #4
  4069ec:	2a03      	cmp	r2, #3
  4069ee:	4618      	mov	r0, r3
  4069f0:	4621      	mov	r1, r4
  4069f2:	d8f0      	bhi.n	4069d6 <memcmp+0x36>
  4069f4:	2a00      	cmp	r2, #0
  4069f6:	d1da      	bne.n	4069ae <memcmp+0xe>
  4069f8:	4610      	mov	r0, r2
  4069fa:	e7e8      	b.n	4069ce <memcmp+0x2e>
  4069fc:	1b60      	subs	r0, r4, r5
  4069fe:	bc70      	pop	{r4, r5, r6}
  406a00:	4770      	bx	lr
  406a02:	bf00      	nop

00406a04 <memcpy>:
  406a04:	4684      	mov	ip, r0
  406a06:	ea41 0300 	orr.w	r3, r1, r0
  406a0a:	f013 0303 	ands.w	r3, r3, #3
  406a0e:	d16d      	bne.n	406aec <memcpy+0xe8>
  406a10:	3a40      	subs	r2, #64	; 0x40
  406a12:	d341      	bcc.n	406a98 <memcpy+0x94>
  406a14:	f851 3b04 	ldr.w	r3, [r1], #4
  406a18:	f840 3b04 	str.w	r3, [r0], #4
  406a1c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a20:	f840 3b04 	str.w	r3, [r0], #4
  406a24:	f851 3b04 	ldr.w	r3, [r1], #4
  406a28:	f840 3b04 	str.w	r3, [r0], #4
  406a2c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a30:	f840 3b04 	str.w	r3, [r0], #4
  406a34:	f851 3b04 	ldr.w	r3, [r1], #4
  406a38:	f840 3b04 	str.w	r3, [r0], #4
  406a3c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a40:	f840 3b04 	str.w	r3, [r0], #4
  406a44:	f851 3b04 	ldr.w	r3, [r1], #4
  406a48:	f840 3b04 	str.w	r3, [r0], #4
  406a4c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a50:	f840 3b04 	str.w	r3, [r0], #4
  406a54:	f851 3b04 	ldr.w	r3, [r1], #4
  406a58:	f840 3b04 	str.w	r3, [r0], #4
  406a5c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a60:	f840 3b04 	str.w	r3, [r0], #4
  406a64:	f851 3b04 	ldr.w	r3, [r1], #4
  406a68:	f840 3b04 	str.w	r3, [r0], #4
  406a6c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a70:	f840 3b04 	str.w	r3, [r0], #4
  406a74:	f851 3b04 	ldr.w	r3, [r1], #4
  406a78:	f840 3b04 	str.w	r3, [r0], #4
  406a7c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a80:	f840 3b04 	str.w	r3, [r0], #4
  406a84:	f851 3b04 	ldr.w	r3, [r1], #4
  406a88:	f840 3b04 	str.w	r3, [r0], #4
  406a8c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a90:	f840 3b04 	str.w	r3, [r0], #4
  406a94:	3a40      	subs	r2, #64	; 0x40
  406a96:	d2bd      	bcs.n	406a14 <memcpy+0x10>
  406a98:	3230      	adds	r2, #48	; 0x30
  406a9a:	d311      	bcc.n	406ac0 <memcpy+0xbc>
  406a9c:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa0:	f840 3b04 	str.w	r3, [r0], #4
  406aa4:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa8:	f840 3b04 	str.w	r3, [r0], #4
  406aac:	f851 3b04 	ldr.w	r3, [r1], #4
  406ab0:	f840 3b04 	str.w	r3, [r0], #4
  406ab4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ab8:	f840 3b04 	str.w	r3, [r0], #4
  406abc:	3a10      	subs	r2, #16
  406abe:	d2ed      	bcs.n	406a9c <memcpy+0x98>
  406ac0:	320c      	adds	r2, #12
  406ac2:	d305      	bcc.n	406ad0 <memcpy+0xcc>
  406ac4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ac8:	f840 3b04 	str.w	r3, [r0], #4
  406acc:	3a04      	subs	r2, #4
  406ace:	d2f9      	bcs.n	406ac4 <memcpy+0xc0>
  406ad0:	3204      	adds	r2, #4
  406ad2:	d008      	beq.n	406ae6 <memcpy+0xe2>
  406ad4:	07d2      	lsls	r2, r2, #31
  406ad6:	bf1c      	itt	ne
  406ad8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406adc:	f800 3b01 	strbne.w	r3, [r0], #1
  406ae0:	d301      	bcc.n	406ae6 <memcpy+0xe2>
  406ae2:	880b      	ldrh	r3, [r1, #0]
  406ae4:	8003      	strh	r3, [r0, #0]
  406ae6:	4660      	mov	r0, ip
  406ae8:	4770      	bx	lr
  406aea:	bf00      	nop
  406aec:	2a08      	cmp	r2, #8
  406aee:	d313      	bcc.n	406b18 <memcpy+0x114>
  406af0:	078b      	lsls	r3, r1, #30
  406af2:	d08d      	beq.n	406a10 <memcpy+0xc>
  406af4:	f010 0303 	ands.w	r3, r0, #3
  406af8:	d08a      	beq.n	406a10 <memcpy+0xc>
  406afa:	f1c3 0304 	rsb	r3, r3, #4
  406afe:	1ad2      	subs	r2, r2, r3
  406b00:	07db      	lsls	r3, r3, #31
  406b02:	bf1c      	itt	ne
  406b04:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b08:	f800 3b01 	strbne.w	r3, [r0], #1
  406b0c:	d380      	bcc.n	406a10 <memcpy+0xc>
  406b0e:	f831 3b02 	ldrh.w	r3, [r1], #2
  406b12:	f820 3b02 	strh.w	r3, [r0], #2
  406b16:	e77b      	b.n	406a10 <memcpy+0xc>
  406b18:	3a04      	subs	r2, #4
  406b1a:	d3d9      	bcc.n	406ad0 <memcpy+0xcc>
  406b1c:	3a01      	subs	r2, #1
  406b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
  406b22:	f800 3b01 	strb.w	r3, [r0], #1
  406b26:	d2f9      	bcs.n	406b1c <memcpy+0x118>
  406b28:	780b      	ldrb	r3, [r1, #0]
  406b2a:	7003      	strb	r3, [r0, #0]
  406b2c:	784b      	ldrb	r3, [r1, #1]
  406b2e:	7043      	strb	r3, [r0, #1]
  406b30:	788b      	ldrb	r3, [r1, #2]
  406b32:	7083      	strb	r3, [r0, #2]
  406b34:	4660      	mov	r0, ip
  406b36:	4770      	bx	lr

00406b38 <memset>:
  406b38:	b470      	push	{r4, r5, r6}
  406b3a:	0784      	lsls	r4, r0, #30
  406b3c:	d046      	beq.n	406bcc <memset+0x94>
  406b3e:	1e54      	subs	r4, r2, #1
  406b40:	2a00      	cmp	r2, #0
  406b42:	d041      	beq.n	406bc8 <memset+0x90>
  406b44:	b2cd      	uxtb	r5, r1
  406b46:	4603      	mov	r3, r0
  406b48:	e002      	b.n	406b50 <memset+0x18>
  406b4a:	1e62      	subs	r2, r4, #1
  406b4c:	b3e4      	cbz	r4, 406bc8 <memset+0x90>
  406b4e:	4614      	mov	r4, r2
  406b50:	f803 5b01 	strb.w	r5, [r3], #1
  406b54:	079a      	lsls	r2, r3, #30
  406b56:	d1f8      	bne.n	406b4a <memset+0x12>
  406b58:	2c03      	cmp	r4, #3
  406b5a:	d92e      	bls.n	406bba <memset+0x82>
  406b5c:	b2cd      	uxtb	r5, r1
  406b5e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406b62:	2c0f      	cmp	r4, #15
  406b64:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406b68:	d919      	bls.n	406b9e <memset+0x66>
  406b6a:	f103 0210 	add.w	r2, r3, #16
  406b6e:	4626      	mov	r6, r4
  406b70:	3e10      	subs	r6, #16
  406b72:	2e0f      	cmp	r6, #15
  406b74:	f842 5c10 	str.w	r5, [r2, #-16]
  406b78:	f842 5c0c 	str.w	r5, [r2, #-12]
  406b7c:	f842 5c08 	str.w	r5, [r2, #-8]
  406b80:	f842 5c04 	str.w	r5, [r2, #-4]
  406b84:	f102 0210 	add.w	r2, r2, #16
  406b88:	d8f2      	bhi.n	406b70 <memset+0x38>
  406b8a:	f1a4 0210 	sub.w	r2, r4, #16
  406b8e:	f022 020f 	bic.w	r2, r2, #15
  406b92:	f004 040f 	and.w	r4, r4, #15
  406b96:	3210      	adds	r2, #16
  406b98:	2c03      	cmp	r4, #3
  406b9a:	4413      	add	r3, r2
  406b9c:	d90d      	bls.n	406bba <memset+0x82>
  406b9e:	461e      	mov	r6, r3
  406ba0:	4622      	mov	r2, r4
  406ba2:	3a04      	subs	r2, #4
  406ba4:	2a03      	cmp	r2, #3
  406ba6:	f846 5b04 	str.w	r5, [r6], #4
  406baa:	d8fa      	bhi.n	406ba2 <memset+0x6a>
  406bac:	1f22      	subs	r2, r4, #4
  406bae:	f022 0203 	bic.w	r2, r2, #3
  406bb2:	3204      	adds	r2, #4
  406bb4:	4413      	add	r3, r2
  406bb6:	f004 0403 	and.w	r4, r4, #3
  406bba:	b12c      	cbz	r4, 406bc8 <memset+0x90>
  406bbc:	b2c9      	uxtb	r1, r1
  406bbe:	441c      	add	r4, r3
  406bc0:	f803 1b01 	strb.w	r1, [r3], #1
  406bc4:	42a3      	cmp	r3, r4
  406bc6:	d1fb      	bne.n	406bc0 <memset+0x88>
  406bc8:	bc70      	pop	{r4, r5, r6}
  406bca:	4770      	bx	lr
  406bcc:	4614      	mov	r4, r2
  406bce:	4603      	mov	r3, r0
  406bd0:	e7c2      	b.n	406b58 <memset+0x20>
  406bd2:	bf00      	nop

00406bd4 <register_fini>:
  406bd4:	4b02      	ldr	r3, [pc, #8]	; (406be0 <register_fini+0xc>)
  406bd6:	b113      	cbz	r3, 406bde <register_fini+0xa>
  406bd8:	4802      	ldr	r0, [pc, #8]	; (406be4 <register_fini+0x10>)
  406bda:	f000 b805 	b.w	406be8 <atexit>
  406bde:	4770      	bx	lr
  406be0:	00000000 	.word	0x00000000
  406be4:	00406bf5 	.word	0x00406bf5

00406be8 <atexit>:
  406be8:	2300      	movs	r3, #0
  406bea:	4601      	mov	r1, r0
  406bec:	461a      	mov	r2, r3
  406bee:	4618      	mov	r0, r3
  406bf0:	f000 b814 	b.w	406c1c <__register_exitproc>

00406bf4 <__libc_fini_array>:
  406bf4:	b538      	push	{r3, r4, r5, lr}
  406bf6:	4d07      	ldr	r5, [pc, #28]	; (406c14 <__libc_fini_array+0x20>)
  406bf8:	4c07      	ldr	r4, [pc, #28]	; (406c18 <__libc_fini_array+0x24>)
  406bfa:	1b2c      	subs	r4, r5, r4
  406bfc:	10a4      	asrs	r4, r4, #2
  406bfe:	d005      	beq.n	406c0c <__libc_fini_array+0x18>
  406c00:	3c01      	subs	r4, #1
  406c02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406c06:	4798      	blx	r3
  406c08:	2c00      	cmp	r4, #0
  406c0a:	d1f9      	bne.n	406c00 <__libc_fini_array+0xc>
  406c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406c10:	f001 b8a8 	b.w	407d64 <_fini>
  406c14:	00407d74 	.word	0x00407d74
  406c18:	00407d70 	.word	0x00407d70

00406c1c <__register_exitproc>:
  406c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406c20:	4c25      	ldr	r4, [pc, #148]	; (406cb8 <__register_exitproc+0x9c>)
  406c22:	6825      	ldr	r5, [r4, #0]
  406c24:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406c28:	4606      	mov	r6, r0
  406c2a:	4688      	mov	r8, r1
  406c2c:	4692      	mov	sl, r2
  406c2e:	4699      	mov	r9, r3
  406c30:	b3c4      	cbz	r4, 406ca4 <__register_exitproc+0x88>
  406c32:	6860      	ldr	r0, [r4, #4]
  406c34:	281f      	cmp	r0, #31
  406c36:	dc17      	bgt.n	406c68 <__register_exitproc+0x4c>
  406c38:	1c43      	adds	r3, r0, #1
  406c3a:	b176      	cbz	r6, 406c5a <__register_exitproc+0x3e>
  406c3c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  406c40:	2201      	movs	r2, #1
  406c42:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  406c46:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  406c4a:	4082      	lsls	r2, r0
  406c4c:	4311      	orrs	r1, r2
  406c4e:	2e02      	cmp	r6, #2
  406c50:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  406c54:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  406c58:	d01e      	beq.n	406c98 <__register_exitproc+0x7c>
  406c5a:	3002      	adds	r0, #2
  406c5c:	6063      	str	r3, [r4, #4]
  406c5e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  406c62:	2000      	movs	r0, #0
  406c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c68:	4b14      	ldr	r3, [pc, #80]	; (406cbc <__register_exitproc+0xa0>)
  406c6a:	b303      	cbz	r3, 406cae <__register_exitproc+0x92>
  406c6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406c70:	f3af 8000 	nop.w
  406c74:	4604      	mov	r4, r0
  406c76:	b1d0      	cbz	r0, 406cae <__register_exitproc+0x92>
  406c78:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406c7c:	2700      	movs	r7, #0
  406c7e:	e880 0088 	stmia.w	r0, {r3, r7}
  406c82:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406c86:	4638      	mov	r0, r7
  406c88:	2301      	movs	r3, #1
  406c8a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406c8e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  406c92:	2e00      	cmp	r6, #0
  406c94:	d0e1      	beq.n	406c5a <__register_exitproc+0x3e>
  406c96:	e7d1      	b.n	406c3c <__register_exitproc+0x20>
  406c98:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406c9c:	430a      	orrs	r2, r1
  406c9e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  406ca2:	e7da      	b.n	406c5a <__register_exitproc+0x3e>
  406ca4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406ca8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406cac:	e7c1      	b.n	406c32 <__register_exitproc+0x16>
  406cae:	f04f 30ff 	mov.w	r0, #4294967295
  406cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406cb6:	bf00      	nop
  406cb8:	00407d4c 	.word	0x00407d4c
  406cbc:	00000000 	.word	0x00000000

00406cc0 <reg>:
  406cc0:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
  406cd0:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
  406ce0:	2a292827 67646334 00000049              '()*4cdgI...

00406cec <hw>:
  406cec:	04000068 01410080 01000000 00001333     h.....A.....3...

00406cfc <test>:
  406cfc:	00000083 00004000 00000200 00c800c8     .....@..........
  406d0c:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
  406d1c:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....

00406d2c <mpu_6500_st_tb>:
  406d2c:	0a560a3c 0a8b0a70 0ac10aa6 0af80add     <.V.p...........
  406d3c:	0b310b15 0b6b0b4e 0ba50b88 0be10bc3     ..1.N.k.........
  406d4c:	0c1e0c00 0c5d0c3d 0c9c0c7c 0cdd0cbd     ....=.].|.......
  406d5c:	0d1f0cfe 0d630d41 0da80d85 0dee0dcb     ....A.c.........
  406d6c:	0e360e12 0e7f0e5a 0eca0ea4 0f160eef     ..6.Z...........
  406d7c:	0f630f3c 0fb30f8b 10030fdb 1056102c     <.c.........,.V.
  406d8c:	10aa1080 110010d4 1157112b 11b01183     ........+.W.....
  406d9c:	120b11de 12681239 12c71297 132712f7     ....9.h.......'.
  406dac:	138a1359 13ef13bc 14551422 14be1489     Y.......".U.....
  406dbc:	152914f3 1595155f 160415cd 1676163d     ..)._.......=.v.
  406dcc:	16e916af 175f1724 17d8179b 18521815     ....$._.......R.
  406ddc:	18cf1891 194f190f 19d11990 1a561a13     ......O.......V.
  406dec:	1ade1a9a 1b681b22 1bf51bae 1c851c3d     ....".h.....=...
  406dfc:	1d181cce 1dad1d62 1e461df9 1ee21e94     ....b.....F.....
  406e0c:	1f811f31 20231fd1 20c82075 2171211c     1.....# u . .!q!
  406e1c:	221d21c7 22cd2274 23802326 243623da     .!."t"."&#.#.#6$
  406e2c:	24f12493 25af254f 2671260f 273626d3     .$.$O%.%.&q&.&6'
  406e3c:	2800279b 28ce2867 29a02936 2a762a0b     .'.(g(.(6).).*v*
  406e4c:	2b512ae3 2c302bc0 2d132ca1 2dfb2d86     .*Q+.+0,.,.-.-.-
  406e5c:	2ee82e71 2fd92f60 30cf3053 31ca314c     q...`/./S0.0L1.1
  406e6c:	32ca324a 33d0334c 34da3454 35ea3562     J2.2L3.3T4.4b5.5
  406e7c:	37003674 381b378d 393c38aa 3a6239ce     t6.7.7.8.8<9.9b:
  406e8c:	3b8f3af8 3cc13c27 3dfa3d5d 3f383e98     .:.;'<.<]=.=.>8?
  406e9c:	407e3fda 41ca4123 431c4272 447643c8     .?~@#A.ArB.C.CvD
  406eac:	45d64525 473d4689 48ac47f4 4a224966     %E.E.F=G.G.HfI"J
  406ebc:	4b9f4adf 4d244c61 4eb14dea 50464f7b     .J.KaL$M.M.N{OFP
  406ecc:	51e35114 538952b5 5536545e 56ed5611     .Q.Q.R.S^T6U.V.V
  406edc:	58ac57cb 5a74598f 5c465b5c 5e215d32     .W.X.YtZ\[F\2]!^
  406eec:	60055f12 61f360fb 63eb62ee 65ed64eb     ._.`.`.a.b.c.d.e
  406efc:	67fa66f2 6a116904 6c336b20 6e5f6d48     .f.g.i.j k3lHm_n
  406f0c:	70976f7a 72db71b8 752a7401 77857656     zo.p.q.r.t*uVv.w
  406f1c:	79ec78b7 7c5f7b24 7edf7d9d 816c8024     .x.y${_|.}.~$.l.

00406f2c <dmp_memory>:
  406f2c:	00700000 24000000 02000000 00000300     ..p....$........
  406f3c:	54006500 0000efff 0b0080fa 01008212     .e.T............
  406f4c:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
  406f5c:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
  406f6c:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
  406f7c:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
  406f8c:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
  406f9c:	00000020 00000000 00000040 00000060      .......@...`...
  406fac:	00000c00 6e180c00 92060000 dfc0160a     .......n........
  406fbc:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
  406fcc:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
  406fdc:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
  406fec:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
  406ffc:	00000000 b5421900 a2390000 65b30000     ......B...9....e
  40700c:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
  40701c:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
  40702c:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
  40703c:	00000100 00003200 000046ff 0000d463     .....2...F..c...
  40704c:	00000010 0000d604 0000cc04 0000cc04     ................
  40705c:	72100000 40000000 00000000 00000000     ...r...@........
  40706c:	02000600 07000500 00000000 00006400     .............d..
  40707c:	00000000 05000000 64000500 00002000     ...........d. ..
	...
  407094:	00400000 00030000 32000000 000098f8     ..@........2....
  4070a4:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
  4070d8:	00100000 00000040 06000000 6ab20000     ....@..........j
  4070e8:	00000200 83fb0100 00006800 00fcd900     .........h......
  4070f8:	83fff17c 00000000 00006500 e8036400     |........e...d..
  407108:	28006400 25000000 00000000 0000a016     .d.(...%........
  407118:	00100000 00100000 00002f00 f4010000     ........./......
  407128:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
  407140:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
  407150:	00000000 00060000 14000000 4d250000     ..............%M
  407160:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
  40717c:	00001b00 00000000 00000000 00000000     ................
  40718c:	00006400 00000800 00000000 00000000     .d..............
	...
  4071ec:	00001b00 00000000 00000000 0e000e00     ................
  4071fc:	c70a0000 00000400 32000000 9cffffff     ...........2....
  40720c:	2b0b0000 02000000 01000000 64000000     ...+...........d
  40721c:	0000e5ff 00000000 00000000 00000000     ................
  40722c:	01000000 00000000 00000100 00000000     ................
  40723c:	00800100 00800100 00800100 d3262400     .............$&.
	...
  407254:	10000600 3c009600 00000000 00000000     .......<........
	...
  40726c:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
  407294:	0084d717 00000003 00000000 00000000     ................
  4072a4:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
  4072c4:	85180302 00400000 03000000 03000000     ......@.........
	...
  4072dc:	00000040 00000000 00000000 00000000     @...............
	...
  407310:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
  40732c:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
  40733c:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
  40734c:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
  40735c:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
  40736c:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
  40737c:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
  40738c:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
  40739c:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
  4073ac:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
  4073bc:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
  4073cc:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
  4073dc:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
  4073ec:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
  4073fc:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
  40740c:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
  40741c:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
  40742c:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
  40743c:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
  40744c:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
  40745c:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
  40746c:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
  40747c:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
  40748c:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
  40749c:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
  4074ac:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
  4074bc:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
  4074cc:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
  4074dc:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
  4074ec:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
  4074fc:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
  40750c:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
  40751c:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
  40752c:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
  40753c:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
  40754c:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
  40755c:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
  40756c:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
  40757c:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
  40758c:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
  40759c:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
  4075ac:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
  4075bc:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
  4075cc:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
  4075dc:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
  4075ec:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
  4075fc:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
  40760c:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
  40761c:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
  40762c:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
  40763c:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
  40764c:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
  40765c:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
  40766c:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
  40767c:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
  40768c:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
  40769c:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
  4076ac:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
  4076bc:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
  4076cc:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
  4076dc:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
  4076ec:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
  4076fc:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
  40770c:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
  40771c:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
  40772c:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
  40773c:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
  40774c:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
  40775c:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
  40776c:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
  40777c:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
  40778c:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
  40779c:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
  4077ac:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
  4077bc:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
  4077cc:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
  4077dc:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
  4077ec:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
  4077fc:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
  40780c:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
  40781c:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
  40782c:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
  40783c:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
  40784c:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
  40785c:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
  40786c:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
  40787c:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
  40788c:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
  40789c:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
  4078ac:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
  4078bc:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
  4078cc:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
  4078dc:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
  4078ec:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
  4078fc:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
  40790c:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
  40791c:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
  40792c:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
  40793c:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
  40794c:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
  40795c:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
  40796c:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
  40797c:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
  40798c:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
  40799c:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
  4079ac:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
  4079bc:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
  4079cc:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
  4079dc:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
  4079ec:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
  4079fc:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
  407a0c:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
  407a1c:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
  407a2c:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
  407a3c:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
  407a4c:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
  407a5c:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
  407a6c:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
  407a7c:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
  407a8c:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
  407a9c:	a890d8ff a899890d 21988010 89d82eda     ...........!....
  407aac:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
  407abc:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
  407acc:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
  407adc:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
  407aec:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
  407afc:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
  407b0c:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
  407b1c:	d800d9a6 0400fff1                                ......

00407b22 <sStartAddress>:
  407b22:	cd4c0400 c90c006c 5636002c 46260076     ..L.l...,.6Vv.&F
  407b32:	f2fe0066 f1aac4ab afbbdfdf aab8dfdf     f...............
  407b42:	98b48db3 005d350d aab80000 88b0aaaa     .....5].........
  407b52:	00c7c5c3 b1d80000 a38bf3b9 b409b691     ................
  407b62:	b1da00d9 a38bf3b9 b4dab691 21fb00da              ..............

00407b70 <npio2_hw>:
  407b70:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  407b80:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  407b90:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  407ba0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  407bb0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  407bc0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  407bd0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  407be0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00407bf0 <two_over_pi>:
  407bf0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  407c00:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  407c10:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  407c20:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  407c30:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  407c40:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  407c50:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  407c60:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  407c70:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  407c80:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  407c90:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  407ca0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  407cb0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  407cc0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  407cd0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  407ce0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  407cf0:	0060e27b 00c08c6b                       {.`.k...

00407cf8 <init_jk>:
  407cf8:	00000002 00000003 00000004 00000006     ................

00407d08 <PIo2>:
  407d08:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  407d18:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  407d28:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  407d38:	80000000 36e38222 00000000 3569f31d     ...."..6......i5
  407d48:	00000043                                C...

00407d4c <_global_impure_ptr>:
  407d4c:	20000050                                P.. 

00407d50 <_init>:
  407d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407d52:	bf00      	nop
  407d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407d56:	bc08      	pop	{r3}
  407d58:	469e      	mov	lr, r3
  407d5a:	4770      	bx	lr

00407d5c <__init_array_start>:
  407d5c:	00406bd5 	.word	0x00406bd5

00407d60 <__frame_dummy_init_array_entry>:
  407d60:	004000e5                                ..@.

00407d64 <_fini>:
  407d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407d66:	bf00      	nop
  407d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407d6a:	bc08      	pop	{r3}
  407d6c:	469e      	mov	lr, r3
  407d6e:	4770      	bx	lr

00407d70 <__fini_array_start>:
  407d70:	004000c1 	.word	0x004000c1
