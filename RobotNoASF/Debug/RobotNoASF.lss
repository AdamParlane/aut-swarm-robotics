
RobotNoASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ddc  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000470  20000000  00407ddc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b2c  20000470  0040824c  00020470  2**2
                  ALLOC
  3 .stack        00000404  20000f9c  00408d78  00020470  2**0
                  ALLOC
  4 .heap         00000200  200013a0  0040917c  00020470  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002049a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005338  00000000  00000000  000204f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001042  00000000  00000000  0002582b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002d7c  00000000  00000000  0002686d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005b0  00000000  00000000  000295e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000510  00000000  00000000  00029b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000f4b3  00000000  00000000  0002a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007708  00000000  00000000  0003955c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003a0b2  00000000  00000000  00040c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000019e4  00000000  00000000  0007ad18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200013a0 	.word	0x200013a0
  400004:	00404335 	.word	0x00404335
  400008:	004043b9 	.word	0x004043b9
  40000c:	004043b9 	.word	0x004043b9
  400010:	004043b9 	.word	0x004043b9
  400014:	004043b9 	.word	0x004043b9
  400018:	004043b9 	.word	0x004043b9
	...
  40002c:	004043b9 	.word	0x004043b9
  400030:	004043b9 	.word	0x004043b9
  400034:	00000000 	.word	0x00000000
  400038:	004043b9 	.word	0x004043b9
  40003c:	004043b9 	.word	0x004043b9
  400040:	004043b9 	.word	0x004043b9
  400044:	004043b9 	.word	0x004043b9
  400048:	004043b9 	.word	0x004043b9
  40004c:	004043b9 	.word	0x004043b9
  400050:	004043b9 	.word	0x004043b9
  400054:	004043b9 	.word	0x004043b9
  400058:	004043b9 	.word	0x004043b9
  40005c:	00000000 	.word	0x00000000
  400060:	004043b9 	.word	0x004043b9
  400064:	004043b9 	.word	0x004043b9
  400068:	004043b9 	.word	0x004043b9
  40006c:	004043b9 	.word	0x004043b9
  400070:	004043b9 	.word	0x004043b9
  400074:	004043b9 	.word	0x004043b9
  400078:	004043b9 	.word	0x004043b9
  40007c:	004043b9 	.word	0x004043b9
  400080:	00400391 	.word	0x00400391
  400084:	004043b9 	.word	0x004043b9
  400088:	00000000 	.word	0x00000000
  40008c:	004043b9 	.word	0x004043b9
  400090:	004043b9 	.word	0x004043b9
  400094:	004043b9 	.word	0x004043b9
  400098:	004043b9 	.word	0x004043b9
  40009c:	00403c0d 	.word	0x00403c0d
  4000a0:	004043b9 	.word	0x004043b9
  4000a4:	004043b9 	.word	0x004043b9
  4000a8:	004043b9 	.word	0x004043b9
  4000ac:	004043b9 	.word	0x004043b9
  4000b0:	004043b9 	.word	0x004043b9
  4000b4:	004043b9 	.word	0x004043b9
  4000b8:	004043b9 	.word	0x004043b9
  4000bc:	004043b9 	.word	0x004043b9

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000470 	.word	0x20000470
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00407ddc 	.word	0x00407ddc

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	20000474 	.word	0x20000474
  400110:	00407ddc 	.word	0x00407ddc
  400114:	00407ddc 	.word	0x00407ddc
  400118:	00000000 	.word	0x00000000

0040011c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40011c:	b480      	push	{r7}
  40011e:	b083      	sub	sp, #12
  400120:	af00      	add	r7, sp, #0
  400122:	4603      	mov	r3, r0
  400124:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400126:	4908      	ldr	r1, [pc, #32]	; (400148 <NVIC_EnableIRQ+0x2c>)
  400128:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40012c:	095b      	lsrs	r3, r3, #5
  40012e:	79fa      	ldrb	r2, [r7, #7]
  400130:	f002 021f 	and.w	r2, r2, #31
  400134:	2001      	movs	r0, #1
  400136:	fa00 f202 	lsl.w	r2, r0, r2
  40013a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40013e:	bf00      	nop
  400140:	370c      	adds	r7, #12
  400142:	46bd      	mov	sp, r7
  400144:	bc80      	pop	{r7}
  400146:	4770      	bx	lr
  400148:	e000e100 	.word	0xe000e100

0040014c <InterpretSwarmMessage>:
void UART3_Write(uint8_t data);								//Writes a byte to UART3
void SendXbeeAPIFrame(uint8_t * frame_data, int len);		//Sends an XBee API Frame


void InterpretSwarmMessage(struct message_info message)
{
  40014c:	b480      	push	{r7}
  40014e:	b087      	sub	sp, #28
  400150:	af00      	add	r7, sp, #0
  400152:	1d3b      	adds	r3, r7, #4
  400154:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//copy information from the message info structure to local variables
	int index = message.index;
  400158:	687b      	ldr	r3, [r7, #4]
  40015a:	617b      	str	r3, [r7, #20]
	int length = message.length;
  40015c:	68fb      	ldr	r3, [r7, #12]
  40015e:	613b      	str	r3, [r7, #16]
	
	if(message.command >= 0xE0)
  400160:	7a3b      	ldrb	r3, [r7, #8]
  400162:	2bdf      	cmp	r3, #223	; 0xdf
  400164:	d902      	bls.n	40016c <InterpretSwarmMessage+0x20>
		testCommandFlag = 1;
  400166:	4b04      	ldr	r3, [pc, #16]	; (400178 <InterpretSwarmMessage+0x2c>)
  400168:	2201      	movs	r2, #1
  40016a:	701a      	strb	r2, [r3, #0]
}
  40016c:	bf00      	nop
  40016e:	371c      	adds	r7, #28
  400170:	46bd      	mov	sp, r7
  400172:	bc80      	pop	{r7}
  400174:	4770      	bx	lr
  400176:	bf00      	nop
  400178:	20000f94 	.word	0x20000f94

0040017c <InterpretXbeeAPIFrame>:



void InterpretXbeeAPIFrame(struct frame_info frame)
{
  40017c:	b580      	push	{r7, lr}
  40017e:	b08a      	sub	sp, #40	; 0x28
  400180:	af00      	add	r7, sp, #0
  400182:	1d3b      	adds	r3, r7, #4
  400184:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//copy information from the frame info structure to local variables
	int index = frame.index;
  400188:	687b      	ldr	r3, [r7, #4]
  40018a:	623b      	str	r3, [r7, #32]
	uint8_t frame_type = frame.type;
  40018c:	7a3b      	ldrb	r3, [r7, #8]
  40018e:	77fb      	strb	r3, [r7, #31]
	int length = frame.length;
  400190:	68fb      	ldr	r3, [r7, #12]
  400192:	61bb      	str	r3, [r7, #24]

	//Temporary variable to store value from buffer
	uint8_t temp;

	//Behaviour depends on type of frame received
	switch(frame_type)
  400194:	7ffb      	ldrb	r3, [r7, #31]
  400196:	3b88      	subs	r3, #136	; 0x88
  400198:	2b1b      	cmp	r3, #27
  40019a:	f200 809a 	bhi.w	4002d2 <InterpretXbeeAPIFrame+0x156>
  40019e:	a201      	add	r2, pc, #4	; (adr r2, 4001a4 <InterpretXbeeAPIFrame+0x28>)
  4001a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001a4:	004002d3 	.word	0x004002d3
  4001a8:	004002d3 	.word	0x004002d3
  4001ac:	004002d3 	.word	0x004002d3
  4001b0:	004002d3 	.word	0x004002d3
  4001b4:	004002d3 	.word	0x004002d3
  4001b8:	004002d3 	.word	0x004002d3
  4001bc:	004002d3 	.word	0x004002d3
  4001c0:	004002d3 	.word	0x004002d3
  4001c4:	00400215 	.word	0x00400215
  4001c8:	004002d3 	.word	0x004002d3
  4001cc:	004002d3 	.word	0x004002d3
  4001d0:	004002d3 	.word	0x004002d3
  4001d4:	004002d3 	.word	0x004002d3
  4001d8:	004002d3 	.word	0x004002d3
  4001dc:	004002d3 	.word	0x004002d3
  4001e0:	004002d3 	.word	0x004002d3
  4001e4:	004002d3 	.word	0x004002d3
  4001e8:	004002d3 	.word	0x004002d3
  4001ec:	004002d3 	.word	0x004002d3
  4001f0:	004002d3 	.word	0x004002d3
  4001f4:	004002d3 	.word	0x004002d3
  4001f8:	004002d3 	.word	0x004002d3
  4001fc:	004002d3 	.word	0x004002d3
  400200:	004002d3 	.word	0x004002d3
  400204:	004002d3 	.word	0x004002d3
  400208:	004002d3 	.word	0x004002d3
  40020c:	004002d3 	.word	0x004002d3
  400210:	004002d3 	.word	0x004002d3
			//XBEE: Transmit Status Received (N/H)
			break;
		
		case ZIGBEE_RECEIVE_PACKET:
			//XBEE: Data Packet Received
			FrameBufferOut = index;	//Update the location we read from within the FrameBuffer
  400214:	4a32      	ldr	r2, [pc, #200]	; (4002e0 <InterpretXbeeAPIFrame+0x164>)
  400216:	6a3b      	ldr	r3, [r7, #32]
  400218:	6013      	str	r3, [r2, #0]

			//The source's 64-Bit address
			FrameBufferGet(&temp);		
  40021a:	f107 0317 	add.w	r3, r7, #23
  40021e:	4618      	mov	r0, r3
  400220:	4b30      	ldr	r3, [pc, #192]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  400222:	4798      	blx	r3
			FrameBufferGet(&temp);
  400224:	f107 0317 	add.w	r3, r7, #23
  400228:	4618      	mov	r0, r3
  40022a:	4b2e      	ldr	r3, [pc, #184]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  40022c:	4798      	blx	r3
			FrameBufferGet(&temp);
  40022e:	f107 0317 	add.w	r3, r7, #23
  400232:	4618      	mov	r0, r3
  400234:	4b2b      	ldr	r3, [pc, #172]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  400236:	4798      	blx	r3
			FrameBufferGet(&temp);
  400238:	f107 0317 	add.w	r3, r7, #23
  40023c:	4618      	mov	r0, r3
  40023e:	4b29      	ldr	r3, [pc, #164]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  400240:	4798      	blx	r3
			FrameBufferGet(&temp);
  400242:	f107 0317 	add.w	r3, r7, #23
  400246:	4618      	mov	r0, r3
  400248:	4b26      	ldr	r3, [pc, #152]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  40024a:	4798      	blx	r3
			FrameBufferGet(&temp);
  40024c:	f107 0317 	add.w	r3, r7, #23
  400250:	4618      	mov	r0, r3
  400252:	4b24      	ldr	r3, [pc, #144]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  400254:	4798      	blx	r3
			FrameBufferGet(&temp);
  400256:	f107 0317 	add.w	r3, r7, #23
  40025a:	4618      	mov	r0, r3
  40025c:	4b21      	ldr	r3, [pc, #132]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  40025e:	4798      	blx	r3
			FrameBufferGet(&temp);
  400260:	f107 0317 	add.w	r3, r7, #23
  400264:	4618      	mov	r0, r3
  400266:	4b1f      	ldr	r3, [pc, #124]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  400268:	4798      	blx	r3
			
			//The source's 16-Bit address
			FrameBufferGet(&temp);
  40026a:	f107 0317 	add.w	r3, r7, #23
  40026e:	4618      	mov	r0, r3
  400270:	4b1c      	ldr	r3, [pc, #112]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  400272:	4798      	blx	r3
			FrameBufferGet(&temp);
  400274:	f107 0317 	add.w	r3, r7, #23
  400278:	4618      	mov	r0, r3
  40027a:	4b1a      	ldr	r3, [pc, #104]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  40027c:	4798      	blx	r3
			
			//Receive options
			FrameBufferGet(&temp);	
  40027e:	f107 0317 	add.w	r3, r7, #23
  400282:	4618      	mov	r0, r3
  400284:	4b17      	ldr	r3, [pc, #92]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  400286:	4798      	blx	r3
			
			//Received Data
			if(FrameBufferGet(&temp) == 0)
  400288:	f107 0317 	add.w	r3, r7, #23
  40028c:	4618      	mov	r0, r3
  40028e:	4b15      	ldr	r3, [pc, #84]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  400290:	4798      	blx	r3
  400292:	4603      	mov	r3, r0
  400294:	2b00      	cmp	r3, #0
  400296:	d11e      	bne.n	4002d6 <InterpretXbeeAPIFrame+0x15a>
			{
				MessageBufferInfoPut(MessageBufferIn,temp,1); //Store information about received message
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <InterpretXbeeAPIFrame+0x16c>)
  40029a:	681b      	ldr	r3, [r3, #0]
  40029c:	7df9      	ldrb	r1, [r7, #23]
  40029e:	2201      	movs	r2, #1
  4002a0:	4618      	mov	r0, r3
  4002a2:	4b12      	ldr	r3, [pc, #72]	; (4002ec <InterpretXbeeAPIFrame+0x170>)
  4002a4:	4798      	blx	r3
				for(int i = 1; i <= length-12; i++)
  4002a6:	2301      	movs	r3, #1
  4002a8:	627b      	str	r3, [r7, #36]	; 0x24
  4002aa:	e00b      	b.n	4002c4 <InterpretXbeeAPIFrame+0x148>
				{
					//Take data from FrameBuffer and put it into the MessageBuffer 
					FrameBufferGet(&temp);
  4002ac:	f107 0317 	add.w	r3, r7, #23
  4002b0:	4618      	mov	r0, r3
  4002b2:	4b0c      	ldr	r3, [pc, #48]	; (4002e4 <InterpretXbeeAPIFrame+0x168>)
  4002b4:	4798      	blx	r3
					MessageBufferPut(temp);
  4002b6:	7dfb      	ldrb	r3, [r7, #23]
  4002b8:	4618      	mov	r0, r3
  4002ba:	4b0d      	ldr	r3, [pc, #52]	; (4002f0 <InterpretXbeeAPIFrame+0x174>)
  4002bc:	4798      	blx	r3
			
			//Received Data
			if(FrameBufferGet(&temp) == 0)
			{
				MessageBufferInfoPut(MessageBufferIn,temp,1); //Store information about received message
				for(int i = 1; i <= length-12; i++)
  4002be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4002c0:	3301      	adds	r3, #1
  4002c2:	627b      	str	r3, [r7, #36]	; 0x24
  4002c4:	69bb      	ldr	r3, [r7, #24]
  4002c6:	f1a3 020c 	sub.w	r2, r3, #12
  4002ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4002cc:	429a      	cmp	r2, r3
  4002ce:	daed      	bge.n	4002ac <InterpretXbeeAPIFrame+0x130>
					//Take data from FrameBuffer and put it into the MessageBuffer 
					FrameBufferGet(&temp);
					MessageBufferPut(temp);
				}
			}
			break;
  4002d0:	e001      	b.n	4002d6 <InterpretXbeeAPIFrame+0x15a>
			//XBEE: Many To One Route Request Indicator Received (N/H);
			break;

		default:
			//WARNING ERROR XBEE: unhandled message received;
			break;
  4002d2:	bf00      	nop
  4002d4:	e000      	b.n	4002d8 <InterpretXbeeAPIFrame+0x15c>
					//Take data from FrameBuffer and put it into the MessageBuffer 
					FrameBufferGet(&temp);
					MessageBufferPut(temp);
				}
			}
			break;
  4002d6:	bf00      	nop

		default:
			//WARNING ERROR XBEE: unhandled message received;
			break;
	}
}
  4002d8:	bf00      	nop
  4002da:	3728      	adds	r7, #40	; 0x28
  4002dc:	46bd      	mov	sp, r7
  4002de:	bd80      	pop	{r7, pc}
  4002e0:	20000f84 	.word	0x20000f84
  4002e4:	004008b9 	.word	0x004008b9
  4002e8:	200004c8 	.word	0x200004c8
  4002ec:	00400bf9 	.word	0x00400bf9
  4002f0:	00400ad1 	.word	0x00400ad1

004002f4 <CommunicationSetup>:

void CommunicationSetup(void)
{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	af00      	add	r7, sp, #0
	REG_PMC_PCER0 |= (1 << 16);				//Enable clock access to UART3
  4002f8:	4a1a      	ldr	r2, [pc, #104]	; (400364 <CommunicationSetup+0x70>)
  4002fa:	4b1a      	ldr	r3, [pc, #104]	; (400364 <CommunicationSetup+0x70>)
  4002fc:	681b      	ldr	r3, [r3, #0]
  4002fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400302:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR |= (1<<11)|(1<<10);		//Enable peripheral control of PB10 (URXD3) and PB11 (UTXD3) both connected to peripheral B
  400304:	4a18      	ldr	r2, [pc, #96]	; (400368 <CommunicationSetup+0x74>)
  400306:	4b18      	ldr	r3, [pc, #96]	; (400368 <CommunicationSetup+0x74>)
  400308:	681b      	ldr	r3, [r3, #0]
  40030a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
  40030e:	6013      	str	r3, [r2, #0]
	REG_UART3_MR |= (0<<14) | (0x4<<9);		//set as no parity, normal mode
  400310:	4a16      	ldr	r2, [pc, #88]	; (40036c <CommunicationSetup+0x78>)
  400312:	4b16      	ldr	r3, [pc, #88]	; (40036c <CommunicationSetup+0x78>)
  400314:	681b      	ldr	r3, [r3, #0]
  400316:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40031a:	6013      	str	r3, [r2, #0]
	REG_UART3_BRGR = 651;					//Set Baud rate for 9600 from a 100MHZ clock
  40031c:	4b14      	ldr	r3, [pc, #80]	; (400370 <CommunicationSetup+0x7c>)
  40031e:	f240 228b 	movw	r2, #651	; 0x28b
  400322:	601a      	str	r2, [r3, #0]
	REG_UART3_CR |= (1<<2)|(1<<3)|(1<<8);	//Reset receiver, transmitter and status bits
  400324:	4a13      	ldr	r2, [pc, #76]	; (400374 <CommunicationSetup+0x80>)
  400326:	4b13      	ldr	r3, [pc, #76]	; (400374 <CommunicationSetup+0x80>)
  400328:	681b      	ldr	r3, [r3, #0]
  40032a:	f443 7386 	orr.w	r3, r3, #268	; 0x10c
  40032e:	6013      	str	r3, [r2, #0]
	REG_UART3_CR |= (1<<4)|(1<<6);			//Enable receiver and transmitter
  400330:	4a10      	ldr	r2, [pc, #64]	; (400374 <CommunicationSetup+0x80>)
  400332:	4b10      	ldr	r3, [pc, #64]	; (400374 <CommunicationSetup+0x80>)
  400334:	681b      	ldr	r3, [r3, #0]
  400336:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  40033a:	6013      	str	r3, [r2, #0]
	REG_UART3_IER |= (1<<0);				//ENABLE UART RXRDY interrupt
  40033c:	4a0e      	ldr	r2, [pc, #56]	; (400378 <CommunicationSetup+0x84>)
  40033e:	4b0e      	ldr	r3, [pc, #56]	; (400378 <CommunicationSetup+0x84>)
  400340:	681b      	ldr	r3, [r3, #0]
  400342:	f043 0301 	orr.w	r3, r3, #1
  400346:	6013      	str	r3, [r2, #0]
	
	NVIC_EnableIRQ(16);						//ENABLE the UART3 system interrupts
  400348:	2010      	movs	r0, #16
  40034a:	4b0c      	ldr	r3, [pc, #48]	; (40037c <CommunicationSetup+0x88>)
  40034c:	4798      	blx	r3

	//Initializes buffers to beginning of arrays
	FrameBufferInit();
  40034e:	4b0c      	ldr	r3, [pc, #48]	; (400380 <CommunicationSetup+0x8c>)
  400350:	4798      	blx	r3
	FrameBufferInfoInit();
  400352:	4b0c      	ldr	r3, [pc, #48]	; (400384 <CommunicationSetup+0x90>)
  400354:	4798      	blx	r3
	MessageBufferInit();
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <CommunicationSetup+0x94>)
  400358:	4798      	blx	r3
	MessageBufferInfoInit();
  40035a:	4b0c      	ldr	r3, [pc, #48]	; (40038c <CommunicationSetup+0x98>)
  40035c:	4798      	blx	r3
}
  40035e:	bf00      	nop
  400360:	bd80      	pop	{r7, pc}
  400362:	bf00      	nop
  400364:	400e0410 	.word	0x400e0410
  400368:	400e1004 	.word	0x400e1004
  40036c:	40048004 	.word	0x40048004
  400370:	40048020 	.word	0x40048020
  400374:	40048000 	.word	0x40048000
  400378:	40048008 	.word	0x40048008
  40037c:	0040011d 	.word	0x0040011d
  400380:	00400801 	.word	0x00400801
  400384:	00400929 	.word	0x00400929
  400388:	00400aa5 	.word	0x00400aa5
  40038c:	00400bcd 	.word	0x00400bcd

00400390 <UART3_Handler>:


/******** UART3 Interrupt Handler ********/
void UART3_Handler(void)
{
  400390:	b580      	push	{r7, lr}
  400392:	b082      	sub	sp, #8
  400394:	af00      	add	r7, sp, #0
	static int check;				//Checksum calculation
	static int frame_start_index;	//The position in the FrameBuffer where the data of this XBee Frame is stored
	static int frame_type;			//The type of received XBee Frame
	

	if(REG_UART3_IMR == UART_IMR_RXRDY)	//if we receive data
  400396:	4b5a      	ldr	r3, [pc, #360]	; (400500 <UART3_Handler+0x170>)
  400398:	681b      	ldr	r3, [r3, #0]
  40039a:	2b01      	cmp	r3, #1
  40039c:	f040 80ab 	bne.w	4004f6 <UART3_Handler+0x166>
	{
		temp = REG_UART3_RHR;	//store the incoming data in a temporary variable 
  4003a0:	4b58      	ldr	r3, [pc, #352]	; (400504 <UART3_Handler+0x174>)
  4003a2:	681b      	ldr	r3, [r3, #0]
  4003a4:	71fb      	strb	r3, [r7, #7]

		if(temp == FRAME_DELIMITER && receiveState != CASE_START ) //if we receive a start byte out of sequence
  4003a6:	79fb      	ldrb	r3, [r7, #7]
  4003a8:	2b7e      	cmp	r3, #126	; 0x7e
  4003aa:	d107      	bne.n	4003bc <UART3_Handler+0x2c>
  4003ac:	4b56      	ldr	r3, [pc, #344]	; (400508 <UART3_Handler+0x178>)
  4003ae:	781b      	ldrb	r3, [r3, #0]
  4003b0:	2b00      	cmp	r3, #0
  4003b2:	d003      	beq.n	4003bc <UART3_Handler+0x2c>
		{
			receiveState = CASE_START;	//reset back to the start state	
  4003b4:	4b54      	ldr	r3, [pc, #336]	; (400508 <UART3_Handler+0x178>)
  4003b6:	2200      	movs	r2, #0
  4003b8:	701a      	strb	r2, [r3, #0]
  4003ba:	e011      	b.n	4003e0 <UART3_Handler+0x50>
		}
		else if(temp == ESCAPE_BYTE) //if the next byte needs to be escaped
  4003bc:	79fb      	ldrb	r3, [r7, #7]
  4003be:	2b7d      	cmp	r3, #125	; 0x7d
  4003c0:	d103      	bne.n	4003ca <UART3_Handler+0x3a>
		{
			escape = true;	//set the flag
  4003c2:	4b52      	ldr	r3, [pc, #328]	; (40050c <UART3_Handler+0x17c>)
  4003c4:	2201      	movs	r2, #1
  4003c6:	701a      	strb	r2, [r3, #0]
  4003c8:	e00a      	b.n	4003e0 <UART3_Handler+0x50>
		}
		else if(escape) //if the current byte needs to be escaped
  4003ca:	4b50      	ldr	r3, [pc, #320]	; (40050c <UART3_Handler+0x17c>)
  4003cc:	781b      	ldrb	r3, [r3, #0]
  4003ce:	2b00      	cmp	r3, #0
  4003d0:	d006      	beq.n	4003e0 <UART3_Handler+0x50>
		{
			temp ^= 0x20;	//reverse the escape procedure
  4003d2:	79fb      	ldrb	r3, [r7, #7]
  4003d4:	f083 0320 	eor.w	r3, r3, #32
  4003d8:	71fb      	strb	r3, [r7, #7]
			escape = false;	//reset the flag
  4003da:	4b4c      	ldr	r3, [pc, #304]	; (40050c <UART3_Handler+0x17c>)
  4003dc:	2200      	movs	r2, #0
  4003de:	701a      	strb	r2, [r3, #0]
		}

		if(escape == false)	//we only go through the receive states if the data has been escaped
  4003e0:	4b4a      	ldr	r3, [pc, #296]	; (40050c <UART3_Handler+0x17c>)
  4003e2:	781b      	ldrb	r3, [r3, #0]
  4003e4:	f083 0301 	eor.w	r3, r3, #1
  4003e8:	b2db      	uxtb	r3, r3
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	f000 8083 	beq.w	4004f6 <UART3_Handler+0x166>
		{
			switch(receiveState)
  4003f0:	4b45      	ldr	r3, [pc, #276]	; (400508 <UART3_Handler+0x178>)
  4003f2:	781b      	ldrb	r3, [r3, #0]
  4003f4:	2b05      	cmp	r3, #5
  4003f6:	d87e      	bhi.n	4004f6 <UART3_Handler+0x166>
  4003f8:	a201      	add	r2, pc, #4	; (adr r2, 400400 <UART3_Handler+0x70>)
  4003fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003fe:	bf00      	nop
  400400:	00400419 	.word	0x00400419
  400404:	00400439 	.word	0x00400439
  400408:	00400449 	.word	0x00400449
  40040c:	00400457 	.word	0x00400457
  400410:	00400483 	.word	0x00400483
  400414:	004004b5 	.word	0x004004b5
			{
				case CASE_START:
					if(temp == FRAME_DELIMITER)
  400418:	79fb      	ldrb	r3, [r7, #7]
  40041a:	2b7e      	cmp	r3, #126	; 0x7e
  40041c:	d168      	bne.n	4004f0 <UART3_Handler+0x160>
					{
						//reset our book-keeping variables and updates the receive state
						length = 0;
  40041e:	4b3c      	ldr	r3, [pc, #240]	; (400510 <UART3_Handler+0x180>)
  400420:	2200      	movs	r2, #0
  400422:	601a      	str	r2, [r3, #0]
						index = 0;
  400424:	4b3b      	ldr	r3, [pc, #236]	; (400514 <UART3_Handler+0x184>)
  400426:	2200      	movs	r2, #0
  400428:	601a      	str	r2, [r3, #0]
						check = 0;
  40042a:	4b3b      	ldr	r3, [pc, #236]	; (400518 <UART3_Handler+0x188>)
  40042c:	2200      	movs	r2, #0
  40042e:	601a      	str	r2, [r3, #0]
						receiveState = CASE_LENGTH_MSB;
  400430:	4b35      	ldr	r3, [pc, #212]	; (400508 <UART3_Handler+0x178>)
  400432:	2201      	movs	r2, #1
  400434:	701a      	strb	r2, [r3, #0]
					}
					break;
  400436:	e05b      	b.n	4004f0 <UART3_Handler+0x160>

				case CASE_LENGTH_MSB:
					//Calculates the length using the first length byte and updates the receive state
					length = temp*256;
  400438:	79fb      	ldrb	r3, [r7, #7]
  40043a:	021b      	lsls	r3, r3, #8
  40043c:	4a34      	ldr	r2, [pc, #208]	; (400510 <UART3_Handler+0x180>)
  40043e:	6013      	str	r3, [r2, #0]
					receiveState = CASE_LENGTH_LSB;
  400440:	4b31      	ldr	r3, [pc, #196]	; (400508 <UART3_Handler+0x178>)
  400442:	2202      	movs	r2, #2
  400444:	701a      	strb	r2, [r3, #0]
					break;
  400446:	e056      	b.n	4004f6 <UART3_Handler+0x166>

				case CASE_LENGTH_LSB:
					//Calculates the length using the second length byte and updates the receive state
					length =+ temp;
  400448:	79fb      	ldrb	r3, [r7, #7]
  40044a:	4a31      	ldr	r2, [pc, #196]	; (400510 <UART3_Handler+0x180>)
  40044c:	6013      	str	r3, [r2, #0]
					receiveState = CASE_FRAME_TYPE;
  40044e:	4b2e      	ldr	r3, [pc, #184]	; (400508 <UART3_Handler+0x178>)
  400450:	2203      	movs	r2, #3
  400452:	701a      	strb	r2, [r3, #0]
					break;
  400454:	e04f      	b.n	4004f6 <UART3_Handler+0x166>

				case CASE_FRAME_TYPE:
					frame_type = temp;					//Receives and stores the Frame type
  400456:	79fb      	ldrb	r3, [r7, #7]
  400458:	4a30      	ldr	r2, [pc, #192]	; (40051c <UART3_Handler+0x18c>)
  40045a:	6013      	str	r3, [r2, #0]
					check += temp;						//Calculates the checksum over the received byte
  40045c:	79fa      	ldrb	r2, [r7, #7]
  40045e:	4b2e      	ldr	r3, [pc, #184]	; (400518 <UART3_Handler+0x188>)
  400460:	681b      	ldr	r3, [r3, #0]
  400462:	4413      	add	r3, r2
  400464:	4a2c      	ldr	r2, [pc, #176]	; (400518 <UART3_Handler+0x188>)
  400466:	6013      	str	r3, [r2, #0]
					index++;							//Updates the number of received bytes that count towards the XBee frame length
  400468:	4b2a      	ldr	r3, [pc, #168]	; (400514 <UART3_Handler+0x184>)
  40046a:	681b      	ldr	r3, [r3, #0]
  40046c:	3301      	adds	r3, #1
  40046e:	4a29      	ldr	r2, [pc, #164]	; (400514 <UART3_Handler+0x184>)
  400470:	6013      	str	r3, [r2, #0]
					frame_start_index = FrameBufferIn;	//Stores the location of the Frame Data in the FrameBuffer
  400472:	4b2b      	ldr	r3, [pc, #172]	; (400520 <UART3_Handler+0x190>)
  400474:	681b      	ldr	r3, [r3, #0]
  400476:	4a2b      	ldr	r2, [pc, #172]	; (400524 <UART3_Handler+0x194>)
  400478:	6013      	str	r3, [r2, #0]
					receiveState = CASE_DATA;			//Updates the receive state
  40047a:	4b23      	ldr	r3, [pc, #140]	; (400508 <UART3_Handler+0x178>)
  40047c:	2204      	movs	r2, #4
  40047e:	701a      	strb	r2, [r3, #0]
					break;
  400480:	e039      	b.n	4004f6 <UART3_Handler+0x166>

				case CASE_DATA:	
					FrameBufferPut(temp); //Stores the Received data into the FrameBuffer
  400482:	79fb      	ldrb	r3, [r7, #7]
  400484:	4618      	mov	r0, r3
  400486:	4b28      	ldr	r3, [pc, #160]	; (400528 <UART3_Handler+0x198>)
  400488:	4798      	blx	r3
					check += temp; //Calculates the checksum over the received byte
  40048a:	79fa      	ldrb	r2, [r7, #7]
  40048c:	4b22      	ldr	r3, [pc, #136]	; (400518 <UART3_Handler+0x188>)
  40048e:	681b      	ldr	r3, [r3, #0]
  400490:	4413      	add	r3, r2
  400492:	4a21      	ldr	r2, [pc, #132]	; (400518 <UART3_Handler+0x188>)
  400494:	6013      	str	r3, [r2, #0]
					index++; //Updates the number of received bytes that count towards the XBee frame length
  400496:	4b1f      	ldr	r3, [pc, #124]	; (400514 <UART3_Handler+0x184>)
  400498:	681b      	ldr	r3, [r3, #0]
  40049a:	3301      	adds	r3, #1
  40049c:	4a1d      	ldr	r2, [pc, #116]	; (400514 <UART3_Handler+0x184>)
  40049e:	6013      	str	r3, [r2, #0]

					if(index == length) //Checks if we have received all the data and if we have updates the receive state
  4004a0:	4b1c      	ldr	r3, [pc, #112]	; (400514 <UART3_Handler+0x184>)
  4004a2:	681a      	ldr	r2, [r3, #0]
  4004a4:	4b1a      	ldr	r3, [pc, #104]	; (400510 <UART3_Handler+0x180>)
  4004a6:	681b      	ldr	r3, [r3, #0]
  4004a8:	429a      	cmp	r2, r3
  4004aa:	d123      	bne.n	4004f4 <UART3_Handler+0x164>
					{
						receiveState = CASE_CHECKSUM;
  4004ac:	4b16      	ldr	r3, [pc, #88]	; (400508 <UART3_Handler+0x178>)
  4004ae:	2205      	movs	r2, #5
  4004b0:	701a      	strb	r2, [r3, #0]
					}
					
					break;
  4004b2:	e01f      	b.n	4004f4 <UART3_Handler+0x164>
				
				case CASE_CHECKSUM:
					check += temp;		//Calculates the checksum over the received byte
  4004b4:	79fa      	ldrb	r2, [r7, #7]
  4004b6:	4b18      	ldr	r3, [pc, #96]	; (400518 <UART3_Handler+0x188>)
  4004b8:	681b      	ldr	r3, [r3, #0]
  4004ba:	4413      	add	r3, r2
  4004bc:	4a16      	ldr	r2, [pc, #88]	; (400518 <UART3_Handler+0x188>)
  4004be:	6013      	str	r3, [r2, #0]
					check &= 0xFF;		//Final Step of checksum calculation for XBee Frame
  4004c0:	4b15      	ldr	r3, [pc, #84]	; (400518 <UART3_Handler+0x188>)
  4004c2:	681b      	ldr	r3, [r3, #0]
  4004c4:	b2db      	uxtb	r3, r3
  4004c6:	4a14      	ldr	r2, [pc, #80]	; (400518 <UART3_Handler+0x188>)
  4004c8:	6013      	str	r3, [r2, #0]
					if(check == 0xFF)	//Verifies the calculated checksum value
  4004ca:	4b13      	ldr	r3, [pc, #76]	; (400518 <UART3_Handler+0x188>)
  4004cc:	681b      	ldr	r3, [r3, #0]
  4004ce:	2bff      	cmp	r3, #255	; 0xff
  4004d0:	d10a      	bne.n	4004e8 <UART3_Handler+0x158>
					{
						FrameBufferInfoPut(frame_start_index, frame_type, index -1); //Stores Frame info in buffer
  4004d2:	4b14      	ldr	r3, [pc, #80]	; (400524 <UART3_Handler+0x194>)
  4004d4:	6818      	ldr	r0, [r3, #0]
  4004d6:	4b11      	ldr	r3, [pc, #68]	; (40051c <UART3_Handler+0x18c>)
  4004d8:	681b      	ldr	r3, [r3, #0]
  4004da:	b2d9      	uxtb	r1, r3
  4004dc:	4b0d      	ldr	r3, [pc, #52]	; (400514 <UART3_Handler+0x184>)
  4004de:	681b      	ldr	r3, [r3, #0]
  4004e0:	3b01      	subs	r3, #1
  4004e2:	461a      	mov	r2, r3
  4004e4:	4b11      	ldr	r3, [pc, #68]	; (40052c <UART3_Handler+0x19c>)
  4004e6:	4798      	blx	r3
					}
					receiveState = CASE_START; //Resets receive state d
  4004e8:	4b07      	ldr	r3, [pc, #28]	; (400508 <UART3_Handler+0x178>)
  4004ea:	2200      	movs	r2, #0
  4004ec:	701a      	strb	r2, [r3, #0]
				break;
  4004ee:	e002      	b.n	4004f6 <UART3_Handler+0x166>
						length = 0;
						index = 0;
						check = 0;
						receiveState = CASE_LENGTH_MSB;
					}
					break;
  4004f0:	bf00      	nop
  4004f2:	e000      	b.n	4004f6 <UART3_Handler+0x166>
					if(index == length) //Checks if we have received all the data and if we have updates the receive state
					{
						receiveState = CASE_CHECKSUM;
					}
					
					break;
  4004f4:	bf00      	nop
					receiveState = CASE_START; //Resets receive state d
				break;
			}
		}
	}
}
  4004f6:	bf00      	nop
  4004f8:	3708      	adds	r7, #8
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd80      	pop	{r7, pc}
  4004fe:	bf00      	nop
  400500:	40048010 	.word	0x40048010
  400504:	40048018 	.word	0x40048018
  400508:	2000048c 	.word	0x2000048c
  40050c:	2000048d 	.word	0x2000048d
  400510:	20000490 	.word	0x20000490
  400514:	20000494 	.word	0x20000494
  400518:	20000498 	.word	0x20000498
  40051c:	2000049c 	.word	0x2000049c
  400520:	20000f90 	.word	0x20000f90
  400524:	200004a0 	.word	0x200004a0
  400528:	0040082d 	.word	0x0040082d
  40052c:	00400955 	.word	0x00400955

00400530 <UART3_Write>:

void UART3_Write(uint8_t data)
{
  400530:	b480      	push	{r7}
  400532:	b083      	sub	sp, #12
  400534:	af00      	add	r7, sp, #0
  400536:	4603      	mov	r3, r0
  400538:	71fb      	strb	r3, [r7, #7]
	while(!(REG_UART3_SR & (1<<1)));	//wait till TXRDY
  40053a:	bf00      	nop
  40053c:	4b06      	ldr	r3, [pc, #24]	; (400558 <UART3_Write+0x28>)
  40053e:	681b      	ldr	r3, [r3, #0]
  400540:	f003 0302 	and.w	r3, r3, #2
  400544:	2b00      	cmp	r3, #0
  400546:	d0f9      	beq.n	40053c <UART3_Write+0xc>
	REG_UART3_THR = data;				//place data in TX register
  400548:	4a04      	ldr	r2, [pc, #16]	; (40055c <UART3_Write+0x2c>)
  40054a:	79fb      	ldrb	r3, [r7, #7]
  40054c:	6013      	str	r3, [r2, #0]
}
  40054e:	bf00      	nop
  400550:	370c      	adds	r7, #12
  400552:	46bd      	mov	sp, r7
  400554:	bc80      	pop	{r7}
  400556:	4770      	bx	lr
  400558:	40048014 	.word	0x40048014
  40055c:	4004801c 	.word	0x4004801c

00400560 <SendXbeeAPIFrame>:

void SendXbeeAPIFrame(uint8_t * frame_data, int len)
{
  400560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400564:	b08b      	sub	sp, #44	; 0x2c
  400566:	af00      	add	r7, sp, #0
  400568:	6078      	str	r0, [r7, #4]
  40056a:	6039      	str	r1, [r7, #0]
  40056c:	466a      	mov	r2, sp
  40056e:	4691      	mov	r9, r2
	uint16_t length = len;		//length of API Frame Data
  400570:	683a      	ldr	r2, [r7, #0]
  400572:	837a      	strh	r2, [r7, #26]
	uint8_t data[length + 4];	//Array to store the full Frame
  400574:	8b7a      	ldrh	r2, [r7, #26]
  400576:	f102 0804 	add.w	r8, r2, #4
  40057a:	f108 32ff 	add.w	r2, r8, #4294967295
  40057e:	617a      	str	r2, [r7, #20]
  400580:	4642      	mov	r2, r8
  400582:	4611      	mov	r1, r2
  400584:	f04f 0200 	mov.w	r2, #0
  400588:	00d6      	lsls	r6, r2, #3
  40058a:	ea46 7651 	orr.w	r6, r6, r1, lsr #29
  40058e:	00cd      	lsls	r5, r1, #3
  400590:	4642      	mov	r2, r8
  400592:	4611      	mov	r1, r2
  400594:	f04f 0200 	mov.w	r2, #0
  400598:	00d4      	lsls	r4, r2, #3
  40059a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
  40059e:	00cb      	lsls	r3, r1, #3
  4005a0:	4643      	mov	r3, r8
  4005a2:	3307      	adds	r3, #7
  4005a4:	08db      	lsrs	r3, r3, #3
  4005a6:	00db      	lsls	r3, r3, #3
  4005a8:	ebad 0d03 	sub.w	sp, sp, r3
  4005ac:	466b      	mov	r3, sp
  4005ae:	3300      	adds	r3, #0
  4005b0:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;		//Variable to store checksum calculation
  4005b2:	2300      	movs	r3, #0
  4005b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t data_length;

	//Forms XBee Frame Header with start delimiter and length
	data[0] = FRAME_DELIMITER;
  4005b8:	693b      	ldr	r3, [r7, #16]
  4005ba:	227e      	movs	r2, #126	; 0x7e
  4005bc:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t) (length >> 7) & 0xFF;
  4005be:	8b7b      	ldrh	r3, [r7, #26]
  4005c0:	09db      	lsrs	r3, r3, #7
  4005c2:	b29b      	uxth	r3, r3
  4005c4:	b2da      	uxtb	r2, r3
  4005c6:	693b      	ldr	r3, [r7, #16]
  4005c8:	705a      	strb	r2, [r3, #1]
	data[2] = length & 0xFF;
  4005ca:	8b7b      	ldrh	r3, [r7, #26]
  4005cc:	b2da      	uxtb	r2, r3
  4005ce:	693b      	ldr	r3, [r7, #16]
  4005d0:	709a      	strb	r2, [r3, #2]

	//Copies frame data into the full frame array
	memcpy(data + 3, frame_data, length);
  4005d2:	693b      	ldr	r3, [r7, #16]
  4005d4:	3303      	adds	r3, #3
  4005d6:	8b7a      	ldrh	r2, [r7, #26]
  4005d8:	6879      	ldr	r1, [r7, #4]
  4005da:	4618      	mov	r0, r3
  4005dc:	4b30      	ldr	r3, [pc, #192]	; (4006a0 <SendXbeeAPIFrame+0x140>)
  4005de:	4798      	blx	r3
	
	//Calculates the checksum over the frame data array
	for(int i = 0; i < length; i++)
  4005e0:	2300      	movs	r3, #0
  4005e2:	623b      	str	r3, [r7, #32]
  4005e4:	e00b      	b.n	4005fe <SendXbeeAPIFrame+0x9e>
	{
		checksum += frame_data[i];
  4005e6:	6a3b      	ldr	r3, [r7, #32]
  4005e8:	687a      	ldr	r2, [r7, #4]
  4005ea:	4413      	add	r3, r2
  4005ec:	781a      	ldrb	r2, [r3, #0]
  4005ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4005f2:	4413      	add	r3, r2
  4005f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Copies frame data into the full frame array
	memcpy(data + 3, frame_data, length);
	
	//Calculates the checksum over the frame data array
	for(int i = 0; i < length; i++)
  4005f8:	6a3b      	ldr	r3, [r7, #32]
  4005fa:	3301      	adds	r3, #1
  4005fc:	623b      	str	r3, [r7, #32]
  4005fe:	8b7a      	ldrh	r2, [r7, #26]
  400600:	6a3b      	ldr	r3, [r7, #32]
  400602:	429a      	cmp	r2, r3
  400604:	dcef      	bgt.n	4005e6 <SendXbeeAPIFrame+0x86>
	{
		checksum += frame_data[i];
	}
	
	data[length+3] = 0xFF - checksum;	//Completes final step in checksum calculation and copies it to the full frame array
  400606:	8b7b      	ldrh	r3, [r7, #26]
  400608:	3303      	adds	r3, #3
  40060a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  40060e:	43d2      	mvns	r2, r2
  400610:	b2d1      	uxtb	r1, r2
  400612:	693a      	ldr	r2, [r7, #16]
  400614:	54d1      	strb	r1, [r2, r3]
	data_length = sizeof(data);			//Gets the length of full message
  400616:	4643      	mov	r3, r8
  400618:	73fb      	strb	r3, [r7, #15]
	UART3_Write(data[0]);				//Writes the Frame Delimiter as this shouldn't be escaped
  40061a:	693b      	ldr	r3, [r7, #16]
  40061c:	781b      	ldrb	r3, [r3, #0]
  40061e:	4618      	mov	r0, r3
  400620:	4b20      	ldr	r3, [pc, #128]	; (4006a4 <SendXbeeAPIFrame+0x144>)
  400622:	4798      	blx	r3

	//Sends the message out the UART, escaping characters on the fly as needed
	for(int i = 1; i <data_length; i++)
  400624:	2301      	movs	r3, #1
  400626:	61fb      	str	r3, [r7, #28]
  400628:	e02f      	b.n	40068a <SendXbeeAPIFrame+0x12a>
	{
		//Checks for bytes that need to be escaped
		if(data[i] == 0x7E || data[i] == 0x7D || data[i] == 0x11 || data[i] == 0x13) 
  40062a:	693a      	ldr	r2, [r7, #16]
  40062c:	69fb      	ldr	r3, [r7, #28]
  40062e:	4413      	add	r3, r2
  400630:	781b      	ldrb	r3, [r3, #0]
  400632:	2b7e      	cmp	r3, #126	; 0x7e
  400634:	d011      	beq.n	40065a <SendXbeeAPIFrame+0xfa>
  400636:	693a      	ldr	r2, [r7, #16]
  400638:	69fb      	ldr	r3, [r7, #28]
  40063a:	4413      	add	r3, r2
  40063c:	781b      	ldrb	r3, [r3, #0]
  40063e:	2b7d      	cmp	r3, #125	; 0x7d
  400640:	d00b      	beq.n	40065a <SendXbeeAPIFrame+0xfa>
  400642:	693a      	ldr	r2, [r7, #16]
  400644:	69fb      	ldr	r3, [r7, #28]
  400646:	4413      	add	r3, r2
  400648:	781b      	ldrb	r3, [r3, #0]
  40064a:	2b11      	cmp	r3, #17
  40064c:	d005      	beq.n	40065a <SendXbeeAPIFrame+0xfa>
  40064e:	693a      	ldr	r2, [r7, #16]
  400650:	69fb      	ldr	r3, [r7, #28]
  400652:	4413      	add	r3, r2
  400654:	781b      	ldrb	r3, [r3, #0]
  400656:	2b13      	cmp	r3, #19
  400658:	d10d      	bne.n	400676 <SendXbeeAPIFrame+0x116>
		{
			UART3_Write(ESCAPE_BYTE);	//Writes the escape byte
  40065a:	207d      	movs	r0, #125	; 0x7d
  40065c:	4b11      	ldr	r3, [pc, #68]	; (4006a4 <SendXbeeAPIFrame+0x144>)
  40065e:	4798      	blx	r3
			UART3_Write(data[i]^0x20);	//Writes the escaped byte
  400660:	693a      	ldr	r2, [r7, #16]
  400662:	69fb      	ldr	r3, [r7, #28]
  400664:	4413      	add	r3, r2
  400666:	781b      	ldrb	r3, [r3, #0]
  400668:	f083 0320 	eor.w	r3, r3, #32
  40066c:	b2db      	uxtb	r3, r3
  40066e:	4618      	mov	r0, r3
  400670:	4b0c      	ldr	r3, [pc, #48]	; (4006a4 <SendXbeeAPIFrame+0x144>)
  400672:	4798      	blx	r3
  400674:	e006      	b.n	400684 <SendXbeeAPIFrame+0x124>
		}
		else
		{
			UART3_Write(data[i]);	//Writes the byte
  400676:	693a      	ldr	r2, [r7, #16]
  400678:	69fb      	ldr	r3, [r7, #28]
  40067a:	4413      	add	r3, r2
  40067c:	781b      	ldrb	r3, [r3, #0]
  40067e:	4618      	mov	r0, r3
  400680:	4b08      	ldr	r3, [pc, #32]	; (4006a4 <SendXbeeAPIFrame+0x144>)
  400682:	4798      	blx	r3
	data[length+3] = 0xFF - checksum;	//Completes final step in checksum calculation and copies it to the full frame array
	data_length = sizeof(data);			//Gets the length of full message
	UART3_Write(data[0]);				//Writes the Frame Delimiter as this shouldn't be escaped

	//Sends the message out the UART, escaping characters on the fly as needed
	for(int i = 1; i <data_length; i++)
  400684:	69fb      	ldr	r3, [r7, #28]
  400686:	3301      	adds	r3, #1
  400688:	61fb      	str	r3, [r7, #28]
  40068a:	7bfa      	ldrb	r2, [r7, #15]
  40068c:	69fb      	ldr	r3, [r7, #28]
  40068e:	429a      	cmp	r2, r3
  400690:	dccb      	bgt.n	40062a <SendXbeeAPIFrame+0xca>
  400692:	46cd      	mov	sp, r9
		else
		{
			UART3_Write(data[i]);	//Writes the byte
		}
	}
}
  400694:	bf00      	nop
  400696:	372c      	adds	r7, #44	; 0x2c
  400698:	46bd      	mov	sp, r7
  40069a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40069e:	bf00      	nop
  4006a0:	00406a6d 	.word	0x00406a6d
  4006a4:	00400531 	.word	0x00400531

004006a8 <SendXbeeAPITransmitRequest>:

//Sends an XBee Transmit Request Frame
void SendXbeeAPITransmitRequest(uint64_t destination_64, uint16_t destination_16, uint8_t *data, uint8_t  bytes)
{
  4006a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006ac:	b095      	sub	sp, #84	; 0x54
  4006ae:	af00      	add	r7, sp, #0
  4006b0:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
  4006b4:	63bb      	str	r3, [r7, #56]	; 0x38
  4006b6:	4613      	mov	r3, r2
  4006b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  4006ba:	466b      	mov	r3, sp
  4006bc:	607b      	str	r3, [r7, #4]
	//array to store message
	uint8_t frame_data[bytes + 14];
  4006be:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
  4006c2:	f103 020e 	add.w	r2, r3, #14
  4006c6:	1e53      	subs	r3, r2, #1
  4006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  4006ca:	4613      	mov	r3, r2
  4006cc:	f04f 0400 	mov.w	r4, #0
  4006d0:	00e6      	lsls	r6, r4, #3
  4006d2:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  4006d6:	00dd      	lsls	r5, r3, #3
  4006d8:	4613      	mov	r3, r2
  4006da:	f04f 0400 	mov.w	r4, #0
  4006de:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  4006e2:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  4006e6:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  4006ea:	4613      	mov	r3, r2
  4006ec:	3307      	adds	r3, #7
  4006ee:	08db      	lsrs	r3, r3, #3
  4006f0:	00db      	lsls	r3, r3, #3
  4006f2:	ebad 0d03 	sub.w	sp, sp, r3
  4006f6:	466b      	mov	r3, sp
  4006f8:	3300      	adds	r3, #0
  4006fa:	64bb      	str	r3, [r7, #72]	; 0x48

	frame_data[0] = ZIGBEE_TRANSMIT_REQUEST;	//Frame type
  4006fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
  4006fe:	2310      	movs	r3, #16
  400700:	7013      	strb	r3, [r2, #0]
	frame_data[1] = 150;						//frame ID (assigned arbitrary at the moment)
  400702:	6cba      	ldr	r2, [r7, #72]	; 0x48
  400704:	2396      	movs	r3, #150	; 0x96
  400706:	7053      	strb	r3, [r2, #1]

	//Destination 64-Bit Address
	frame_data[2] = (destination_64 & (0xFF00000000000000)) >> 56;
  400708:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  40070c:	0e22      	lsrs	r2, r4, #24
  40070e:	623a      	str	r2, [r7, #32]
  400710:	2200      	movs	r2, #0
  400712:	627a      	str	r2, [r7, #36]	; 0x24
  400714:	f897 3020 	ldrb.w	r3, [r7, #32]
  400718:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40071a:	7093      	strb	r3, [r2, #2]
	frame_data[3] = (destination_64 & (0xFF000000000000)) >> 48;
  40071c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400720:	0c22      	lsrs	r2, r4, #16
  400722:	61ba      	str	r2, [r7, #24]
  400724:	2200      	movs	r2, #0
  400726:	61fa      	str	r2, [r7, #28]
  400728:	7e3a      	ldrb	r2, [r7, #24]
  40072a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40072c:	70da      	strb	r2, [r3, #3]
	frame_data[4] = (destination_64 & (0xFF0000000000)) >> 40;
  40072e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400732:	0a22      	lsrs	r2, r4, #8
  400734:	613a      	str	r2, [r7, #16]
  400736:	2200      	movs	r2, #0
  400738:	617a      	str	r2, [r7, #20]
  40073a:	7c3a      	ldrb	r2, [r7, #16]
  40073c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40073e:	711a      	strb	r2, [r3, #4]
	frame_data[5] = (destination_64 & (0xFF00000000)) >> 32;
  400740:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400744:	0022      	movs	r2, r4
  400746:	60ba      	str	r2, [r7, #8]
  400748:	2200      	movs	r2, #0
  40074a:	60fa      	str	r2, [r7, #12]
  40074c:	7a3a      	ldrb	r2, [r7, #8]
  40074e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400750:	715a      	strb	r2, [r3, #5]
	frame_data[6] = (destination_64 & (0xFF000000)) >> 24;
  400752:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400756:	0e1a      	lsrs	r2, r3, #24
  400758:	633a      	str	r2, [r7, #48]	; 0x30
  40075a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40075c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400760:	633a      	str	r2, [r7, #48]	; 0x30
  400762:	0e22      	lsrs	r2, r4, #24
  400764:	637a      	str	r2, [r7, #52]	; 0x34
  400766:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
  40076a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40076c:	719a      	strb	r2, [r3, #6]
	frame_data[7] = (destination_64 & (0xFF0000)) >> 16;
  40076e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400772:	0c1a      	lsrs	r2, r3, #16
  400774:	62ba      	str	r2, [r7, #40]	; 0x28
  400776:	6aba      	ldr	r2, [r7, #40]	; 0x28
  400778:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  40077c:	62ba      	str	r2, [r7, #40]	; 0x28
  40077e:	0c22      	lsrs	r2, r4, #16
  400780:	62fa      	str	r2, [r7, #44]	; 0x2c
  400782:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  400786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400788:	71da      	strb	r2, [r3, #7]
	frame_data[8] = (destination_64 & (0xFF00)) >> 8;
  40078a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  40078e:	ea4f 2a13 	mov.w	sl, r3, lsr #8
  400792:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
  400796:	ea4f 2b14 	mov.w	fp, r4, lsr #8
  40079a:	fa5f f28a 	uxtb.w	r2, sl
  40079e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007a0:	721a      	strb	r2, [r3, #8]
	frame_data[9] = destination_64 & (0xFF);
  4007a2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
  4007a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007a8:	725a      	strb	r2, [r3, #9]

	//Destination 16-Bit Address
	frame_data[10] = (destination_16 & (0xFF00)) >> 8;
  4007aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
  4007ac:	0a1b      	lsrs	r3, r3, #8
  4007ae:	b29b      	uxth	r3, r3
  4007b0:	b2da      	uxtb	r2, r3
  4007b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007b4:	729a      	strb	r2, [r3, #10]
	frame_data[11] = destination_16 & (0xFF);
  4007b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
  4007b8:	b2da      	uxtb	r2, r3
  4007ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007bc:	72da      	strb	r2, [r3, #11]

	//Broadcast radius
	frame_data[12] = 0x00;  
  4007be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007c0:	2200      	movs	r2, #0
  4007c2:	731a      	strb	r2, [r3, #12]

	//Options
	frame_data[13] = 0x00;  
  4007c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007c6:	2200      	movs	r2, #0
  4007c8:	735a      	strb	r2, [r3, #13]

	//Copies message data to frame array
	memcpy(frame_data + 14, data, bytes);
  4007ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007cc:	330e      	adds	r3, #14
  4007ce:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
  4007d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4007d4:	4618      	mov	r0, r3
  4007d6:	4b08      	ldr	r3, [pc, #32]	; (4007f8 <SendXbeeAPITransmitRequest+0x150>)
  4007d8:	4798      	blx	r3

	//Sends the message
	SendXbeeAPIFrame(frame_data,bytes+14);
  4007da:	6cba      	ldr	r2, [r7, #72]	; 0x48
  4007dc:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
  4007e0:	330e      	adds	r3, #14
  4007e2:	4619      	mov	r1, r3
  4007e4:	4610      	mov	r0, r2
  4007e6:	4b05      	ldr	r3, [pc, #20]	; (4007fc <SendXbeeAPITransmitRequest+0x154>)
  4007e8:	4798      	blx	r3
  4007ea:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
  4007ee:	bf00      	nop
  4007f0:	3754      	adds	r7, #84	; 0x54
  4007f2:	46bd      	mov	sp, r7
  4007f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4007f8:	00406a6d 	.word	0x00406a6d
  4007fc:	00400561 	.word	0x00400561

00400800 <FrameBufferInit>:


/****** Buffer functions *******/

void FrameBufferInit(void)
{
  400800:	b480      	push	{r7}
  400802:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	FrameBufferIn = 0;
  400804:	4b06      	ldr	r3, [pc, #24]	; (400820 <FrameBufferInit+0x20>)
  400806:	2200      	movs	r2, #0
  400808:	601a      	str	r2, [r3, #0]
	FrameBufferOut = 0;
  40080a:	4b06      	ldr	r3, [pc, #24]	; (400824 <FrameBufferInit+0x24>)
  40080c:	2200      	movs	r2, #0
  40080e:	601a      	str	r2, [r3, #0]
	FrameBufferUse = 0;
  400810:	4b05      	ldr	r3, [pc, #20]	; (400828 <FrameBufferInit+0x28>)
  400812:	2200      	movs	r2, #0
  400814:	601a      	str	r2, [r3, #0]
}
  400816:	bf00      	nop
  400818:	46bd      	mov	sp, r7
  40081a:	bc80      	pop	{r7}
  40081c:	4770      	bx	lr
  40081e:	bf00      	nop
  400820:	20000f90 	.word	0x20000f90
  400824:	20000f84 	.word	0x20000f84
  400828:	20000f98 	.word	0x20000f98

0040082c <FrameBufferPut>:

int FrameBufferPut(uint8_t new)
{
  40082c:	b480      	push	{r7}
  40082e:	b083      	sub	sp, #12
  400830:	af00      	add	r7, sp, #0
  400832:	4603      	mov	r3, r0
  400834:	71fb      	strb	r3, [r7, #7]
	//Check if the Buffer is full
	if(FrameBufferIn == (( FrameBufferOut - 1 + FRAME_BUFFER_SIZE) % FRAME_BUFFER_SIZE))
  400836:	4b1b      	ldr	r3, [pc, #108]	; (4008a4 <FrameBufferPut+0x78>)
  400838:	681b      	ldr	r3, [r3, #0]
  40083a:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
  40083e:	4b1a      	ldr	r3, [pc, #104]	; (4008a8 <FrameBufferPut+0x7c>)
  400840:	fb83 1302 	smull	r1, r3, r3, r2
  400844:	1219      	asrs	r1, r3, #8
  400846:	17d3      	asrs	r3, r2, #31
  400848:	1acb      	subs	r3, r1, r3
  40084a:	f240 31e9 	movw	r1, #1001	; 0x3e9
  40084e:	fb01 f303 	mul.w	r3, r1, r3
  400852:	1ad3      	subs	r3, r2, r3
  400854:	4a15      	ldr	r2, [pc, #84]	; (4008ac <FrameBufferPut+0x80>)
  400856:	6812      	ldr	r2, [r2, #0]
  400858:	4293      	cmp	r3, r2
  40085a:	d102      	bne.n	400862 <FrameBufferPut+0x36>
	{
		return -1; // FrameBuffer Full
  40085c:	f04f 33ff 	mov.w	r3, #4294967295
  400860:	e01a      	b.n	400898 <FrameBufferPut+0x6c>
	}

	//Put the new byte in to the buffer
	FrameBuffer[FrameBufferIn] = new;
  400862:	4b12      	ldr	r3, [pc, #72]	; (4008ac <FrameBufferPut+0x80>)
  400864:	681b      	ldr	r3, [r3, #0]
  400866:	4912      	ldr	r1, [pc, #72]	; (4008b0 <FrameBufferPut+0x84>)
  400868:	79fa      	ldrb	r2, [r7, #7]
  40086a:	54ca      	strb	r2, [r1, r3]

	//Update our buffer variables
	FrameBufferIn = (FrameBufferIn + 1) % FRAME_BUFFER_SIZE;
  40086c:	4b0f      	ldr	r3, [pc, #60]	; (4008ac <FrameBufferPut+0x80>)
  40086e:	681b      	ldr	r3, [r3, #0]
  400870:	1c5a      	adds	r2, r3, #1
  400872:	4b0d      	ldr	r3, [pc, #52]	; (4008a8 <FrameBufferPut+0x7c>)
  400874:	fb83 1302 	smull	r1, r3, r3, r2
  400878:	1219      	asrs	r1, r3, #8
  40087a:	17d3      	asrs	r3, r2, #31
  40087c:	1acb      	subs	r3, r1, r3
  40087e:	f240 31e9 	movw	r1, #1001	; 0x3e9
  400882:	fb01 f303 	mul.w	r3, r1, r3
  400886:	1ad3      	subs	r3, r2, r3
  400888:	4a08      	ldr	r2, [pc, #32]	; (4008ac <FrameBufferPut+0x80>)
  40088a:	6013      	str	r3, [r2, #0]
	FrameBufferUse++;
  40088c:	4b09      	ldr	r3, [pc, #36]	; (4008b4 <FrameBufferPut+0x88>)
  40088e:	681b      	ldr	r3, [r3, #0]
  400890:	3301      	adds	r3, #1
  400892:	4a08      	ldr	r2, [pc, #32]	; (4008b4 <FrameBufferPut+0x88>)
  400894:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400896:	2300      	movs	r3, #0
}
  400898:	4618      	mov	r0, r3
  40089a:	370c      	adds	r7, #12
  40089c:	46bd      	mov	sp, r7
  40089e:	bc80      	pop	{r7}
  4008a0:	4770      	bx	lr
  4008a2:	bf00      	nop
  4008a4:	20000f84 	.word	0x20000f84
  4008a8:	4178749f 	.word	0x4178749f
  4008ac:	20000f90 	.word	0x20000f90
  4008b0:	200004d0 	.word	0x200004d0
  4008b4:	20000f98 	.word	0x20000f98

004008b8 <FrameBufferGet>:

int FrameBufferGet(uint8_t *old)
{
  4008b8:	b480      	push	{r7}
  4008ba:	b083      	sub	sp, #12
  4008bc:	af00      	add	r7, sp, #0
  4008be:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(FrameBufferIn == FrameBufferOut)
  4008c0:	4b14      	ldr	r3, [pc, #80]	; (400914 <FrameBufferGet+0x5c>)
  4008c2:	681a      	ldr	r2, [r3, #0]
  4008c4:	4b14      	ldr	r3, [pc, #80]	; (400918 <FrameBufferGet+0x60>)
  4008c6:	681b      	ldr	r3, [r3, #0]
  4008c8:	429a      	cmp	r2, r3
  4008ca:	d102      	bne.n	4008d2 <FrameBufferGet+0x1a>
	{
		return -1; // FrameBuffer Empty - nothing to get
  4008cc:	f04f 33ff 	mov.w	r3, #4294967295
  4008d0:	e01b      	b.n	40090a <FrameBufferGet+0x52>
	}
	
	//fetch the info struct from the buffer
	*old = FrameBuffer[FrameBufferOut];
  4008d2:	4b11      	ldr	r3, [pc, #68]	; (400918 <FrameBufferGet+0x60>)
  4008d4:	681b      	ldr	r3, [r3, #0]
  4008d6:	4a11      	ldr	r2, [pc, #68]	; (40091c <FrameBufferGet+0x64>)
  4008d8:	5cd2      	ldrb	r2, [r2, r3]
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	701a      	strb	r2, [r3, #0]

	//Update our buffer variables
	FrameBufferOut = (FrameBufferOut + 1) % FRAME_BUFFER_SIZE;
  4008de:	4b0e      	ldr	r3, [pc, #56]	; (400918 <FrameBufferGet+0x60>)
  4008e0:	681b      	ldr	r3, [r3, #0]
  4008e2:	1c5a      	adds	r2, r3, #1
  4008e4:	4b0e      	ldr	r3, [pc, #56]	; (400920 <FrameBufferGet+0x68>)
  4008e6:	fb83 1302 	smull	r1, r3, r3, r2
  4008ea:	1219      	asrs	r1, r3, #8
  4008ec:	17d3      	asrs	r3, r2, #31
  4008ee:	1acb      	subs	r3, r1, r3
  4008f0:	f240 31e9 	movw	r1, #1001	; 0x3e9
  4008f4:	fb01 f303 	mul.w	r3, r1, r3
  4008f8:	1ad3      	subs	r3, r2, r3
  4008fa:	4a07      	ldr	r2, [pc, #28]	; (400918 <FrameBufferGet+0x60>)
  4008fc:	6013      	str	r3, [r2, #0]
	FrameBufferUse--;
  4008fe:	4b09      	ldr	r3, [pc, #36]	; (400924 <FrameBufferGet+0x6c>)
  400900:	681b      	ldr	r3, [r3, #0]
  400902:	3b01      	subs	r3, #1
  400904:	4a07      	ldr	r2, [pc, #28]	; (400924 <FrameBufferGet+0x6c>)
  400906:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400908:	2300      	movs	r3, #0
}
  40090a:	4618      	mov	r0, r3
  40090c:	370c      	adds	r7, #12
  40090e:	46bd      	mov	sp, r7
  400910:	bc80      	pop	{r7}
  400912:	4770      	bx	lr
  400914:	20000f90 	.word	0x20000f90
  400918:	20000f84 	.word	0x20000f84
  40091c:	200004d0 	.word	0x200004d0
  400920:	4178749f 	.word	0x4178749f
  400924:	20000f98 	.word	0x20000f98

00400928 <FrameBufferInfoInit>:

void FrameBufferInfoInit(void)
{
  400928:	b480      	push	{r7}
  40092a:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	FrameBufferInfoIn = 0;
  40092c:	4b06      	ldr	r3, [pc, #24]	; (400948 <FrameBufferInfoInit+0x20>)
  40092e:	2200      	movs	r2, #0
  400930:	601a      	str	r2, [r3, #0]
	FrameBufferInfoOut = 0;
  400932:	4b06      	ldr	r3, [pc, #24]	; (40094c <FrameBufferInfoInit+0x24>)
  400934:	2200      	movs	r2, #0
  400936:	601a      	str	r2, [r3, #0]
	FrameBufferInfoUse = 0;
  400938:	4b05      	ldr	r3, [pc, #20]	; (400950 <FrameBufferInfoInit+0x28>)
  40093a:	2200      	movs	r2, #0
  40093c:	601a      	str	r2, [r3, #0]
}
  40093e:	bf00      	nop
  400940:	46bd      	mov	sp, r7
  400942:	bc80      	pop	{r7}
  400944:	4770      	bx	lr
  400946:	bf00      	nop
  400948:	20000f88 	.word	0x20000f88
  40094c:	20000f8c 	.word	0x20000f8c
  400950:	200004c0 	.word	0x200004c0

00400954 <FrameBufferInfoPut>:

int FrameBufferInfoPut(int ind, uint8_t typ, int len)
{
  400954:	b490      	push	{r4, r7}
  400956:	b084      	sub	sp, #16
  400958:	af00      	add	r7, sp, #0
  40095a:	60f8      	str	r0, [r7, #12]
  40095c:	460b      	mov	r3, r1
  40095e:	607a      	str	r2, [r7, #4]
  400960:	72fb      	strb	r3, [r7, #11]
	//Check if the Buffer is full
	if(FrameBufferInfoIn == (( FrameBufferInfoOut -1 + FRAME_BUFFER_INFO_SIZE) % FRAME_BUFFER_INFO_SIZE))
  400962:	4b2a      	ldr	r3, [pc, #168]	; (400a0c <FrameBufferInfoPut+0xb8>)
  400964:	681b      	ldr	r3, [r3, #0]
  400966:	f103 0232 	add.w	r2, r3, #50	; 0x32
  40096a:	4b29      	ldr	r3, [pc, #164]	; (400a10 <FrameBufferInfoPut+0xbc>)
  40096c:	fb82 3403 	smull	r3, r4, r2, r3
  400970:	1913      	adds	r3, r2, r4
  400972:	1159      	asrs	r1, r3, #5
  400974:	17d3      	asrs	r3, r2, #31
  400976:	1ac9      	subs	r1, r1, r3
  400978:	460b      	mov	r3, r1
  40097a:	005b      	lsls	r3, r3, #1
  40097c:	440b      	add	r3, r1
  40097e:	0119      	lsls	r1, r3, #4
  400980:	440b      	add	r3, r1
  400982:	1ad1      	subs	r1, r2, r3
  400984:	4b23      	ldr	r3, [pc, #140]	; (400a14 <FrameBufferInfoPut+0xc0>)
  400986:	681b      	ldr	r3, [r3, #0]
  400988:	4299      	cmp	r1, r3
  40098a:	d102      	bne.n	400992 <FrameBufferInfoPut+0x3e>
	{
		return -1; // FrameBufferInfo Full
  40098c:	f04f 33ff 	mov.w	r3, #4294967295
  400990:	e037      	b.n	400a02 <FrameBufferInfoPut+0xae>
	}

	//Put the new data in to the buffer
	FrameBufferInfo[FrameBufferInfoIn].index = ind;
  400992:	4b20      	ldr	r3, [pc, #128]	; (400a14 <FrameBufferInfoPut+0xc0>)
  400994:	681a      	ldr	r2, [r3, #0]
  400996:	4920      	ldr	r1, [pc, #128]	; (400a18 <FrameBufferInfoPut+0xc4>)
  400998:	4613      	mov	r3, r2
  40099a:	005b      	lsls	r3, r3, #1
  40099c:	4413      	add	r3, r2
  40099e:	009b      	lsls	r3, r3, #2
  4009a0:	440b      	add	r3, r1
  4009a2:	68fa      	ldr	r2, [r7, #12]
  4009a4:	601a      	str	r2, [r3, #0]
	FrameBufferInfo[FrameBufferInfoIn].type = typ;
  4009a6:	4b1b      	ldr	r3, [pc, #108]	; (400a14 <FrameBufferInfoPut+0xc0>)
  4009a8:	681a      	ldr	r2, [r3, #0]
  4009aa:	491b      	ldr	r1, [pc, #108]	; (400a18 <FrameBufferInfoPut+0xc4>)
  4009ac:	4613      	mov	r3, r2
  4009ae:	005b      	lsls	r3, r3, #1
  4009b0:	4413      	add	r3, r2
  4009b2:	009b      	lsls	r3, r3, #2
  4009b4:	440b      	add	r3, r1
  4009b6:	3304      	adds	r3, #4
  4009b8:	7afa      	ldrb	r2, [r7, #11]
  4009ba:	701a      	strb	r2, [r3, #0]
	FrameBufferInfo[FrameBufferInfoIn].length = len;
  4009bc:	4b15      	ldr	r3, [pc, #84]	; (400a14 <FrameBufferInfoPut+0xc0>)
  4009be:	681a      	ldr	r2, [r3, #0]
  4009c0:	4915      	ldr	r1, [pc, #84]	; (400a18 <FrameBufferInfoPut+0xc4>)
  4009c2:	4613      	mov	r3, r2
  4009c4:	005b      	lsls	r3, r3, #1
  4009c6:	4413      	add	r3, r2
  4009c8:	009b      	lsls	r3, r3, #2
  4009ca:	440b      	add	r3, r1
  4009cc:	3308      	adds	r3, #8
  4009ce:	687a      	ldr	r2, [r7, #4]
  4009d0:	601a      	str	r2, [r3, #0]

	//Update our buffer variables
	FrameBufferInfoIn = (FrameBufferInfoIn + 1) % FRAME_BUFFER_INFO_SIZE;
  4009d2:	4b10      	ldr	r3, [pc, #64]	; (400a14 <FrameBufferInfoPut+0xc0>)
  4009d4:	681b      	ldr	r3, [r3, #0]
  4009d6:	1c5a      	adds	r2, r3, #1
  4009d8:	4b0d      	ldr	r3, [pc, #52]	; (400a10 <FrameBufferInfoPut+0xbc>)
  4009da:	fb82 3403 	smull	r3, r4, r2, r3
  4009de:	1913      	adds	r3, r2, r4
  4009e0:	1159      	asrs	r1, r3, #5
  4009e2:	17d3      	asrs	r3, r2, #31
  4009e4:	1ac9      	subs	r1, r1, r3
  4009e6:	460b      	mov	r3, r1
  4009e8:	005b      	lsls	r3, r3, #1
  4009ea:	440b      	add	r3, r1
  4009ec:	0119      	lsls	r1, r3, #4
  4009ee:	440b      	add	r3, r1
  4009f0:	1ad1      	subs	r1, r2, r3
  4009f2:	4b08      	ldr	r3, [pc, #32]	; (400a14 <FrameBufferInfoPut+0xc0>)
  4009f4:	6019      	str	r1, [r3, #0]
	FrameBufferInfoUse++;
  4009f6:	4b09      	ldr	r3, [pc, #36]	; (400a1c <FrameBufferInfoPut+0xc8>)
  4009f8:	681b      	ldr	r3, [r3, #0]
  4009fa:	3301      	adds	r3, #1
  4009fc:	4a07      	ldr	r2, [pc, #28]	; (400a1c <FrameBufferInfoPut+0xc8>)
  4009fe:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400a00:	2300      	movs	r3, #0
}
  400a02:	4618      	mov	r0, r3
  400a04:	3710      	adds	r7, #16
  400a06:	46bd      	mov	sp, r7
  400a08:	bc90      	pop	{r4, r7}
  400a0a:	4770      	bx	lr
  400a0c:	20000f8c 	.word	0x20000f8c
  400a10:	a0a0a0a1 	.word	0xa0a0a0a1
  400a14:	20000f88 	.word	0x20000f88
  400a18:	200008bc 	.word	0x200008bc
  400a1c:	200004c0 	.word	0x200004c0

00400a20 <FrameBufferInfoGetFull>:

int FrameBufferInfoGetFull(struct frame_info * info)
{
  400a20:	b490      	push	{r4, r7}
  400a22:	b082      	sub	sp, #8
  400a24:	af00      	add	r7, sp, #0
  400a26:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(FrameBufferInfoIn == FrameBufferInfoOut)
  400a28:	4b19      	ldr	r3, [pc, #100]	; (400a90 <FrameBufferInfoGetFull+0x70>)
  400a2a:	681a      	ldr	r2, [r3, #0]
  400a2c:	4b19      	ldr	r3, [pc, #100]	; (400a94 <FrameBufferInfoGetFull+0x74>)
  400a2e:	681b      	ldr	r3, [r3, #0]
  400a30:	429a      	cmp	r2, r3
  400a32:	d102      	bne.n	400a3a <FrameBufferInfoGetFull+0x1a>
	{
		return -1; // FrameBufferInfo Empty - nothing to get
  400a34:	f04f 33ff 	mov.w	r3, #4294967295
  400a38:	e024      	b.n	400a84 <FrameBufferInfoGetFull+0x64>
	}

	//fetch the info struct from the buffer
	*info = FrameBufferInfo[FrameBufferInfoOut];
  400a3a:	4b16      	ldr	r3, [pc, #88]	; (400a94 <FrameBufferInfoGetFull+0x74>)
  400a3c:	681a      	ldr	r2, [r3, #0]
  400a3e:	6878      	ldr	r0, [r7, #4]
  400a40:	4915      	ldr	r1, [pc, #84]	; (400a98 <FrameBufferInfoGetFull+0x78>)
  400a42:	4613      	mov	r3, r2
  400a44:	005b      	lsls	r3, r3, #1
  400a46:	4413      	add	r3, r2
  400a48:	009b      	lsls	r3, r3, #2
  400a4a:	18ca      	adds	r2, r1, r3
  400a4c:	4603      	mov	r3, r0
  400a4e:	ca07      	ldmia	r2, {r0, r1, r2}
  400a50:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Update our buffer variables
	FrameBufferInfoOut = (FrameBufferInfoOut + 1) % FRAME_BUFFER_INFO_SIZE;
  400a54:	4b0f      	ldr	r3, [pc, #60]	; (400a94 <FrameBufferInfoGetFull+0x74>)
  400a56:	681b      	ldr	r3, [r3, #0]
  400a58:	1c5a      	adds	r2, r3, #1
  400a5a:	4b10      	ldr	r3, [pc, #64]	; (400a9c <FrameBufferInfoGetFull+0x7c>)
  400a5c:	fb82 3403 	smull	r3, r4, r2, r3
  400a60:	1913      	adds	r3, r2, r4
  400a62:	1159      	asrs	r1, r3, #5
  400a64:	17d3      	asrs	r3, r2, #31
  400a66:	1ac9      	subs	r1, r1, r3
  400a68:	460b      	mov	r3, r1
  400a6a:	005b      	lsls	r3, r3, #1
  400a6c:	440b      	add	r3, r1
  400a6e:	0119      	lsls	r1, r3, #4
  400a70:	440b      	add	r3, r1
  400a72:	1ad1      	subs	r1, r2, r3
  400a74:	4b07      	ldr	r3, [pc, #28]	; (400a94 <FrameBufferInfoGetFull+0x74>)
  400a76:	6019      	str	r1, [r3, #0]
	FrameBufferInfoUse--;
  400a78:	4b09      	ldr	r3, [pc, #36]	; (400aa0 <FrameBufferInfoGetFull+0x80>)
  400a7a:	681b      	ldr	r3, [r3, #0]
  400a7c:	3b01      	subs	r3, #1
  400a7e:	4a08      	ldr	r2, [pc, #32]	; (400aa0 <FrameBufferInfoGetFull+0x80>)
  400a80:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400a82:	2300      	movs	r3, #0
}
  400a84:	4618      	mov	r0, r3
  400a86:	3708      	adds	r7, #8
  400a88:	46bd      	mov	sp, r7
  400a8a:	bc90      	pop	{r4, r7}
  400a8c:	4770      	bx	lr
  400a8e:	bf00      	nop
  400a90:	20000f88 	.word	0x20000f88
  400a94:	20000f8c 	.word	0x20000f8c
  400a98:	200008bc 	.word	0x200008bc
  400a9c:	a0a0a0a1 	.word	0xa0a0a0a1
  400aa0:	200004c0 	.word	0x200004c0

00400aa4 <MessageBufferInit>:

void MessageBufferInit(void)
{
  400aa4:	b480      	push	{r7}
  400aa6:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	MessageBufferIn = 0;
  400aa8:	4b06      	ldr	r3, [pc, #24]	; (400ac4 <MessageBufferInit+0x20>)
  400aaa:	2200      	movs	r2, #0
  400aac:	601a      	str	r2, [r3, #0]
	MessageBufferOut = 0;
  400aae:	4b06      	ldr	r3, [pc, #24]	; (400ac8 <MessageBufferInit+0x24>)
  400ab0:	2200      	movs	r2, #0
  400ab2:	601a      	str	r2, [r3, #0]
	MessageBufferUse = 0;
  400ab4:	4b05      	ldr	r3, [pc, #20]	; (400acc <MessageBufferInit+0x28>)
  400ab6:	2200      	movs	r2, #0
  400ab8:	601a      	str	r2, [r3, #0]
}
  400aba:	bf00      	nop
  400abc:	46bd      	mov	sp, r7
  400abe:	bc80      	pop	{r7}
  400ac0:	4770      	bx	lr
  400ac2:	bf00      	nop
  400ac4:	200004c8 	.word	0x200004c8
  400ac8:	20000b24 	.word	0x20000b24
  400acc:	200004c4 	.word	0x200004c4

00400ad0 <MessageBufferPut>:

int MessageBufferPut(uint8_t new)
{
  400ad0:	b480      	push	{r7}
  400ad2:	b083      	sub	sp, #12
  400ad4:	af00      	add	r7, sp, #0
  400ad6:	4603      	mov	r3, r0
  400ad8:	71fb      	strb	r3, [r7, #7]
	//Check if the Buffer is full
	if(MessageBufferIn == (( MessageBufferOut - 1 + MESSAGE_BUFFER_SIZE) % MESSAGE_BUFFER_SIZE))
  400ada:	4b1b      	ldr	r3, [pc, #108]	; (400b48 <MessageBufferPut+0x78>)
  400adc:	681b      	ldr	r3, [r3, #0]
  400ade:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
  400ae2:	4b1a      	ldr	r3, [pc, #104]	; (400b4c <MessageBufferPut+0x7c>)
  400ae4:	fb83 1302 	smull	r1, r3, r3, r2
  400ae8:	1199      	asrs	r1, r3, #6
  400aea:	17d3      	asrs	r3, r2, #31
  400aec:	1acb      	subs	r3, r1, r3
  400aee:	f240 11f5 	movw	r1, #501	; 0x1f5
  400af2:	fb01 f303 	mul.w	r3, r1, r3
  400af6:	1ad3      	subs	r3, r2, r3
  400af8:	4a15      	ldr	r2, [pc, #84]	; (400b50 <MessageBufferPut+0x80>)
  400afa:	6812      	ldr	r2, [r2, #0]
  400afc:	4293      	cmp	r3, r2
  400afe:	d102      	bne.n	400b06 <MessageBufferPut+0x36>
	{
		return -1; // MessageBuffer Full
  400b00:	f04f 33ff 	mov.w	r3, #4294967295
  400b04:	e01a      	b.n	400b3c <MessageBufferPut+0x6c>
	}

	//Put the new byte in to the buffer
	MessageBuffer[MessageBufferIn] = new;
  400b06:	4b12      	ldr	r3, [pc, #72]	; (400b50 <MessageBufferPut+0x80>)
  400b08:	681b      	ldr	r3, [r3, #0]
  400b0a:	4912      	ldr	r1, [pc, #72]	; (400b54 <MessageBufferPut+0x84>)
  400b0c:	79fa      	ldrb	r2, [r7, #7]
  400b0e:	54ca      	strb	r2, [r1, r3]

	//Update our buffer variables
	MessageBufferIn = (MessageBufferIn + 1) % MESSAGE_BUFFER_SIZE;
  400b10:	4b0f      	ldr	r3, [pc, #60]	; (400b50 <MessageBufferPut+0x80>)
  400b12:	681b      	ldr	r3, [r3, #0]
  400b14:	1c5a      	adds	r2, r3, #1
  400b16:	4b0d      	ldr	r3, [pc, #52]	; (400b4c <MessageBufferPut+0x7c>)
  400b18:	fb83 1302 	smull	r1, r3, r3, r2
  400b1c:	1199      	asrs	r1, r3, #6
  400b1e:	17d3      	asrs	r3, r2, #31
  400b20:	1acb      	subs	r3, r1, r3
  400b22:	f240 11f5 	movw	r1, #501	; 0x1f5
  400b26:	fb01 f303 	mul.w	r3, r1, r3
  400b2a:	1ad3      	subs	r3, r2, r3
  400b2c:	4a08      	ldr	r2, [pc, #32]	; (400b50 <MessageBufferPut+0x80>)
  400b2e:	6013      	str	r3, [r2, #0]
	MessageBufferUse++;
  400b30:	4b09      	ldr	r3, [pc, #36]	; (400b58 <MessageBufferPut+0x88>)
  400b32:	681b      	ldr	r3, [r3, #0]
  400b34:	3301      	adds	r3, #1
  400b36:	4a08      	ldr	r2, [pc, #32]	; (400b58 <MessageBufferPut+0x88>)
  400b38:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400b3a:	2300      	movs	r3, #0
}
  400b3c:	4618      	mov	r0, r3
  400b3e:	370c      	adds	r7, #12
  400b40:	46bd      	mov	sp, r7
  400b42:	bc80      	pop	{r7}
  400b44:	4770      	bx	lr
  400b46:	bf00      	nop
  400b48:	20000b24 	.word	0x20000b24
  400b4c:	20b3dd41 	.word	0x20b3dd41
  400b50:	200004c8 	.word	0x200004c8
  400b54:	20000d8c 	.word	0x20000d8c
  400b58:	200004c4 	.word	0x200004c4

00400b5c <MessageBufferGet>:

int MessageBufferGet(uint8_t *old)
{
  400b5c:	b480      	push	{r7}
  400b5e:	b083      	sub	sp, #12
  400b60:	af00      	add	r7, sp, #0
  400b62:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(MessageBufferIn == MessageBufferOut)
  400b64:	4b14      	ldr	r3, [pc, #80]	; (400bb8 <MessageBufferGet+0x5c>)
  400b66:	681a      	ldr	r2, [r3, #0]
  400b68:	4b14      	ldr	r3, [pc, #80]	; (400bbc <MessageBufferGet+0x60>)
  400b6a:	681b      	ldr	r3, [r3, #0]
  400b6c:	429a      	cmp	r2, r3
  400b6e:	d102      	bne.n	400b76 <MessageBufferGet+0x1a>
	{
		return -1; // MessageBuffer Empty - nothing to get
  400b70:	f04f 33ff 	mov.w	r3, #4294967295
  400b74:	e01b      	b.n	400bae <MessageBufferGet+0x52>
	}

	//fetch the byte from the buffer
	*old = MessageBuffer[MessageBufferOut];
  400b76:	4b11      	ldr	r3, [pc, #68]	; (400bbc <MessageBufferGet+0x60>)
  400b78:	681b      	ldr	r3, [r3, #0]
  400b7a:	4a11      	ldr	r2, [pc, #68]	; (400bc0 <MessageBufferGet+0x64>)
  400b7c:	5cd2      	ldrb	r2, [r2, r3]
  400b7e:	687b      	ldr	r3, [r7, #4]
  400b80:	701a      	strb	r2, [r3, #0]

	//Update our buffer variables
	MessageBufferOut = (MessageBufferOut + 1) % MESSAGE_BUFFER_SIZE;
  400b82:	4b0e      	ldr	r3, [pc, #56]	; (400bbc <MessageBufferGet+0x60>)
  400b84:	681b      	ldr	r3, [r3, #0]
  400b86:	1c5a      	adds	r2, r3, #1
  400b88:	4b0e      	ldr	r3, [pc, #56]	; (400bc4 <MessageBufferGet+0x68>)
  400b8a:	fb83 1302 	smull	r1, r3, r3, r2
  400b8e:	1199      	asrs	r1, r3, #6
  400b90:	17d3      	asrs	r3, r2, #31
  400b92:	1acb      	subs	r3, r1, r3
  400b94:	f240 11f5 	movw	r1, #501	; 0x1f5
  400b98:	fb01 f303 	mul.w	r3, r1, r3
  400b9c:	1ad3      	subs	r3, r2, r3
  400b9e:	4a07      	ldr	r2, [pc, #28]	; (400bbc <MessageBufferGet+0x60>)
  400ba0:	6013      	str	r3, [r2, #0]
	MessageBufferUse--;
  400ba2:	4b09      	ldr	r3, [pc, #36]	; (400bc8 <MessageBufferGet+0x6c>)
  400ba4:	681b      	ldr	r3, [r3, #0]
  400ba6:	3b01      	subs	r3, #1
  400ba8:	4a07      	ldr	r2, [pc, #28]	; (400bc8 <MessageBufferGet+0x6c>)
  400baa:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400bac:	2300      	movs	r3, #0
}
  400bae:	4618      	mov	r0, r3
  400bb0:	370c      	adds	r7, #12
  400bb2:	46bd      	mov	sp, r7
  400bb4:	bc80      	pop	{r7}
  400bb6:	4770      	bx	lr
  400bb8:	200004c8 	.word	0x200004c8
  400bbc:	20000b24 	.word	0x20000b24
  400bc0:	20000d8c 	.word	0x20000d8c
  400bc4:	20b3dd41 	.word	0x20b3dd41
  400bc8:	200004c4 	.word	0x200004c4

00400bcc <MessageBufferInfoInit>:

void MessageBufferInfoInit(void)
{
  400bcc:	b480      	push	{r7}
  400bce:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	MessageBufferInfoIn = 0;
  400bd0:	4b06      	ldr	r3, [pc, #24]	; (400bec <MessageBufferInfoInit+0x20>)
  400bd2:	2200      	movs	r2, #0
  400bd4:	601a      	str	r2, [r3, #0]
	MessageBufferInfoOut = 0;
  400bd6:	4b06      	ldr	r3, [pc, #24]	; (400bf0 <MessageBufferInfoInit+0x24>)
  400bd8:	2200      	movs	r2, #0
  400bda:	601a      	str	r2, [r3, #0]
	MessageBufferInfoUse = 0;
  400bdc:	4b05      	ldr	r3, [pc, #20]	; (400bf4 <MessageBufferInfoInit+0x28>)
  400bde:	2200      	movs	r2, #0
  400be0:	601a      	str	r2, [r3, #0]
}
  400be2:	bf00      	nop
  400be4:	46bd      	mov	sp, r7
  400be6:	bc80      	pop	{r7}
  400be8:	4770      	bx	lr
  400bea:	bf00      	nop
  400bec:	20000b20 	.word	0x20000b20
  400bf0:	200004cc 	.word	0x200004cc
  400bf4:	200004bc 	.word	0x200004bc

00400bf8 <MessageBufferInfoPut>:

int MessageBufferInfoPut(int ind, uint8_t cmd, int len)
{
  400bf8:	b490      	push	{r4, r7}
  400bfa:	b084      	sub	sp, #16
  400bfc:	af00      	add	r7, sp, #0
  400bfe:	60f8      	str	r0, [r7, #12]
  400c00:	460b      	mov	r3, r1
  400c02:	607a      	str	r2, [r7, #4]
  400c04:	72fb      	strb	r3, [r7, #11]
	//Check if the Buffer is full
	if(MessageBufferInfoIn == (( MessageBufferInfoOut - 1 + MESSAGE_BUFFER_INFO_SIZE) % MESSAGE_BUFFER_INFO_SIZE))
  400c06:	4b2a      	ldr	r3, [pc, #168]	; (400cb0 <MessageBufferInfoPut+0xb8>)
  400c08:	681b      	ldr	r3, [r3, #0]
  400c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
  400c0e:	4b29      	ldr	r3, [pc, #164]	; (400cb4 <MessageBufferInfoPut+0xbc>)
  400c10:	fb82 3403 	smull	r3, r4, r2, r3
  400c14:	1913      	adds	r3, r2, r4
  400c16:	1159      	asrs	r1, r3, #5
  400c18:	17d3      	asrs	r3, r2, #31
  400c1a:	1ac9      	subs	r1, r1, r3
  400c1c:	460b      	mov	r3, r1
  400c1e:	005b      	lsls	r3, r3, #1
  400c20:	440b      	add	r3, r1
  400c22:	0119      	lsls	r1, r3, #4
  400c24:	440b      	add	r3, r1
  400c26:	1ad1      	subs	r1, r2, r3
  400c28:	4b23      	ldr	r3, [pc, #140]	; (400cb8 <MessageBufferInfoPut+0xc0>)
  400c2a:	681b      	ldr	r3, [r3, #0]
  400c2c:	4299      	cmp	r1, r3
  400c2e:	d102      	bne.n	400c36 <MessageBufferInfoPut+0x3e>
	{
		return -1; // MessageBufferInfo Full
  400c30:	f04f 33ff 	mov.w	r3, #4294967295
  400c34:	e037      	b.n	400ca6 <MessageBufferInfoPut+0xae>
	}
	
	//Put the new data in to the buffer
	MessageBufferInfo[MessageBufferInfoIn].index = ind;
  400c36:	4b20      	ldr	r3, [pc, #128]	; (400cb8 <MessageBufferInfoPut+0xc0>)
  400c38:	681a      	ldr	r2, [r3, #0]
  400c3a:	4920      	ldr	r1, [pc, #128]	; (400cbc <MessageBufferInfoPut+0xc4>)
  400c3c:	4613      	mov	r3, r2
  400c3e:	005b      	lsls	r3, r3, #1
  400c40:	4413      	add	r3, r2
  400c42:	009b      	lsls	r3, r3, #2
  400c44:	440b      	add	r3, r1
  400c46:	68fa      	ldr	r2, [r7, #12]
  400c48:	601a      	str	r2, [r3, #0]
	MessageBufferInfo[MessageBufferInfoIn].command = cmd;
  400c4a:	4b1b      	ldr	r3, [pc, #108]	; (400cb8 <MessageBufferInfoPut+0xc0>)
  400c4c:	681a      	ldr	r2, [r3, #0]
  400c4e:	491b      	ldr	r1, [pc, #108]	; (400cbc <MessageBufferInfoPut+0xc4>)
  400c50:	4613      	mov	r3, r2
  400c52:	005b      	lsls	r3, r3, #1
  400c54:	4413      	add	r3, r2
  400c56:	009b      	lsls	r3, r3, #2
  400c58:	440b      	add	r3, r1
  400c5a:	3304      	adds	r3, #4
  400c5c:	7afa      	ldrb	r2, [r7, #11]
  400c5e:	701a      	strb	r2, [r3, #0]
	MessageBufferInfo[MessageBufferInfoIn].length = len;
  400c60:	4b15      	ldr	r3, [pc, #84]	; (400cb8 <MessageBufferInfoPut+0xc0>)
  400c62:	681a      	ldr	r2, [r3, #0]
  400c64:	4915      	ldr	r1, [pc, #84]	; (400cbc <MessageBufferInfoPut+0xc4>)
  400c66:	4613      	mov	r3, r2
  400c68:	005b      	lsls	r3, r3, #1
  400c6a:	4413      	add	r3, r2
  400c6c:	009b      	lsls	r3, r3, #2
  400c6e:	440b      	add	r3, r1
  400c70:	3308      	adds	r3, #8
  400c72:	687a      	ldr	r2, [r7, #4]
  400c74:	601a      	str	r2, [r3, #0]

	//Update our buffer variables
	MessageBufferInfoIn = (MessageBufferInfoIn + 1) % MESSAGE_BUFFER_INFO_SIZE;
  400c76:	4b10      	ldr	r3, [pc, #64]	; (400cb8 <MessageBufferInfoPut+0xc0>)
  400c78:	681b      	ldr	r3, [r3, #0]
  400c7a:	1c5a      	adds	r2, r3, #1
  400c7c:	4b0d      	ldr	r3, [pc, #52]	; (400cb4 <MessageBufferInfoPut+0xbc>)
  400c7e:	fb82 3403 	smull	r3, r4, r2, r3
  400c82:	1913      	adds	r3, r2, r4
  400c84:	1159      	asrs	r1, r3, #5
  400c86:	17d3      	asrs	r3, r2, #31
  400c88:	1ac9      	subs	r1, r1, r3
  400c8a:	460b      	mov	r3, r1
  400c8c:	005b      	lsls	r3, r3, #1
  400c8e:	440b      	add	r3, r1
  400c90:	0119      	lsls	r1, r3, #4
  400c92:	440b      	add	r3, r1
  400c94:	1ad1      	subs	r1, r2, r3
  400c96:	4b08      	ldr	r3, [pc, #32]	; (400cb8 <MessageBufferInfoPut+0xc0>)
  400c98:	6019      	str	r1, [r3, #0]
	MessageBufferInfoUse++;
  400c9a:	4b09      	ldr	r3, [pc, #36]	; (400cc0 <MessageBufferInfoPut+0xc8>)
  400c9c:	681b      	ldr	r3, [r3, #0]
  400c9e:	3301      	adds	r3, #1
  400ca0:	4a07      	ldr	r2, [pc, #28]	; (400cc0 <MessageBufferInfoPut+0xc8>)
  400ca2:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400ca4:	2300      	movs	r3, #0
}
  400ca6:	4618      	mov	r0, r3
  400ca8:	3710      	adds	r7, #16
  400caa:	46bd      	mov	sp, r7
  400cac:	bc90      	pop	{r4, r7}
  400cae:	4770      	bx	lr
  400cb0:	200004cc 	.word	0x200004cc
  400cb4:	a0a0a0a1 	.word	0xa0a0a0a1
  400cb8:	20000b20 	.word	0x20000b20
  400cbc:	20000b28 	.word	0x20000b28
  400cc0:	200004bc 	.word	0x200004bc

00400cc4 <MessageBufferInfoGetFull>:

int MessageBufferInfoGetFull(struct message_info * info)
{
  400cc4:	b490      	push	{r4, r7}
  400cc6:	b082      	sub	sp, #8
  400cc8:	af00      	add	r7, sp, #0
  400cca:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(MessageBufferInfoIn == MessageBufferInfoOut)
  400ccc:	4b19      	ldr	r3, [pc, #100]	; (400d34 <MessageBufferInfoGetFull+0x70>)
  400cce:	681a      	ldr	r2, [r3, #0]
  400cd0:	4b19      	ldr	r3, [pc, #100]	; (400d38 <MessageBufferInfoGetFull+0x74>)
  400cd2:	681b      	ldr	r3, [r3, #0]
  400cd4:	429a      	cmp	r2, r3
  400cd6:	d102      	bne.n	400cde <MessageBufferInfoGetFull+0x1a>
	{
		return -1; // MessageBufferInfo Empty - nothing to get
  400cd8:	f04f 33ff 	mov.w	r3, #4294967295
  400cdc:	e024      	b.n	400d28 <MessageBufferInfoGetFull+0x64>
	}

	//fetch the info struct from the buffer
	*info = MessageBufferInfo[MessageBufferInfoOut];
  400cde:	4b16      	ldr	r3, [pc, #88]	; (400d38 <MessageBufferInfoGetFull+0x74>)
  400ce0:	681a      	ldr	r2, [r3, #0]
  400ce2:	6878      	ldr	r0, [r7, #4]
  400ce4:	4915      	ldr	r1, [pc, #84]	; (400d3c <MessageBufferInfoGetFull+0x78>)
  400ce6:	4613      	mov	r3, r2
  400ce8:	005b      	lsls	r3, r3, #1
  400cea:	4413      	add	r3, r2
  400cec:	009b      	lsls	r3, r3, #2
  400cee:	18ca      	adds	r2, r1, r3
  400cf0:	4603      	mov	r3, r0
  400cf2:	ca07      	ldmia	r2, {r0, r1, r2}
  400cf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Update our buffer variables
	MessageBufferInfoOut = (MessageBufferInfoOut + 1) % MESSAGE_BUFFER_INFO_SIZE;
  400cf8:	4b0f      	ldr	r3, [pc, #60]	; (400d38 <MessageBufferInfoGetFull+0x74>)
  400cfa:	681b      	ldr	r3, [r3, #0]
  400cfc:	1c5a      	adds	r2, r3, #1
  400cfe:	4b10      	ldr	r3, [pc, #64]	; (400d40 <MessageBufferInfoGetFull+0x7c>)
  400d00:	fb82 3403 	smull	r3, r4, r2, r3
  400d04:	1913      	adds	r3, r2, r4
  400d06:	1159      	asrs	r1, r3, #5
  400d08:	17d3      	asrs	r3, r2, #31
  400d0a:	1ac9      	subs	r1, r1, r3
  400d0c:	460b      	mov	r3, r1
  400d0e:	005b      	lsls	r3, r3, #1
  400d10:	440b      	add	r3, r1
  400d12:	0119      	lsls	r1, r3, #4
  400d14:	440b      	add	r3, r1
  400d16:	1ad1      	subs	r1, r2, r3
  400d18:	4b07      	ldr	r3, [pc, #28]	; (400d38 <MessageBufferInfoGetFull+0x74>)
  400d1a:	6019      	str	r1, [r3, #0]
	MessageBufferInfoUse--;
  400d1c:	4b09      	ldr	r3, [pc, #36]	; (400d44 <MessageBufferInfoGetFull+0x80>)
  400d1e:	681b      	ldr	r3, [r3, #0]
  400d20:	3b01      	subs	r3, #1
  400d22:	4a08      	ldr	r2, [pc, #32]	; (400d44 <MessageBufferInfoGetFull+0x80>)
  400d24:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400d26:	2300      	movs	r3, #0
}
  400d28:	4618      	mov	r0, r3
  400d2a:	3708      	adds	r7, #8
  400d2c:	46bd      	mov	sp, r7
  400d2e:	bc90      	pop	{r4, r7}
  400d30:	4770      	bx	lr
  400d32:	bf00      	nop
  400d34:	20000b20 	.word	0x20000b20
  400d38:	200004cc 	.word	0x200004cc
  400d3c:	20000b28 	.word	0x20000b28
  400d40:	a0a0a0a1 	.word	0xa0a0a0a1
  400d44:	200004bc 	.word	0x200004bc

00400d48 <FastChargeController_Setup>:
#include "twimux_interface.h"


/******** Fast Charge Controller Registry Setup ********/
void FastChargeController_Setup(void)
{
  400d48:	b580      	push	{r7, lr}
  400d4a:	af00      	add	r7, sp, #0
	//Chip disable (CD) line on PB2 set to enable
	REG_PIOB_PER |= (1<<2);		//Give control of PB2 to PIOB controller
  400d4c:	4a11      	ldr	r2, [pc, #68]	; (400d94 <FastChargeController_Setup+0x4c>)
  400d4e:	4b11      	ldr	r3, [pc, #68]	; (400d94 <FastChargeController_Setup+0x4c>)
  400d50:	681b      	ldr	r3, [r3, #0]
  400d52:	f043 0304 	orr.w	r3, r3, #4
  400d56:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<2);		//Set PB2 as an output
  400d58:	4a0f      	ldr	r2, [pc, #60]	; (400d98 <FastChargeController_Setup+0x50>)
  400d5a:	4b0f      	ldr	r3, [pc, #60]	; (400d98 <FastChargeController_Setup+0x50>)
  400d5c:	681b      	ldr	r3, [r3, #0]
  400d5e:	f043 0304 	orr.w	r3, r3, #4
  400d62:	6013      	str	r3, [r2, #0]
	REG_PIOB_CODR |= (1<<2);	//Set PB2 to low
  400d64:	4a0d      	ldr	r2, [pc, #52]	; (400d9c <FastChargeController_Setup+0x54>)
  400d66:	4b0d      	ldr	r3, [pc, #52]	; (400d9c <FastChargeController_Setup+0x54>)
  400d68:	681b      	ldr	r3, [r3, #0]
  400d6a:	f043 0304 	orr.w	r3, r3, #4
  400d6e:	6013      	str	r3, [r2, #0]
	TWI0_Write(TWI0_FastChargeChipAddress, controlReg, initControl);	// Ensures that CE bit is clear in case safety timer has gone off in previous charge.
  400d70:	2204      	movs	r2, #4
  400d72:	2102      	movs	r1, #2
  400d74:	206b      	movs	r0, #107	; 0x6b
  400d76:	4b0a      	ldr	r3, [pc, #40]	; (400da0 <FastChargeController_Setup+0x58>)
  400d78:	4798      	blx	r3
	TWI0_Write(TWI0_FastChargeChipAddress, battVReg, initBattV);		// Vreg = 4.0v, input current = 2.5A
  400d7a:	2266      	movs	r2, #102	; 0x66
  400d7c:	2103      	movs	r1, #3
  400d7e:	206b      	movs	r0, #107	; 0x6b
  400d80:	4b07      	ldr	r3, [pc, #28]	; (400da0 <FastChargeController_Setup+0x58>)
  400d82:	4798      	blx	r3
	TWI0_Write(TWI0_FastChargeChipAddress, chargeReg, initCharge);		// charge current set to max Ic=2875mA, termination current Iterm=100mA (default)
  400d84:	22fa      	movs	r2, #250	; 0xfa
  400d86:	2105      	movs	r1, #5
  400d88:	206b      	movs	r0, #107	; 0x6b
  400d8a:	4b05      	ldr	r3, [pc, #20]	; (400da0 <FastChargeController_Setup+0x58>)
  400d8c:	4798      	blx	r3
}
  400d8e:	bf00      	nop
  400d90:	bd80      	pop	{r7, pc}
  400d92:	bf00      	nop
  400d94:	400e1000 	.word	0x400e1000
  400d98:	400e1010 	.word	0x400e1010
  400d9c:	400e1034 	.word	0x400e1034
  400da0:	004041f1 	.word	0x004041f1

00400da4 <reg_int_cb>:
//SWARM ROBOT CONFIGURATION/////////////////////////////////////////////

extern uint32_t systemTimestamp;

static inline int reg_int_cb(struct int_param_s *int_param)
{
  400da4:	b480      	push	{r7}
  400da6:	b083      	sub	sp, #12
  400da8:	af00      	add	r7, sp, #0
  400daa:	6078      	str	r0, [r7, #4]
	//I guess we aren't using interrupt callback
	return 0;
  400dac:	2300      	movs	r3, #0
}
  400dae:	4618      	mov	r0, r3
  400db0:	370c      	adds	r7, #12
  400db2:	46bd      	mov	sp, r7
  400db4:	bc80      	pop	{r7}
  400db6:	4770      	bx	lr

00400db8 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
  400db8:	b590      	push	{r4, r7, lr}
  400dba:	b085      	sub	sp, #20
  400dbc:	af00      	add	r7, sp, #0
  400dbe:	4603      	mov	r3, r0
  400dc0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
  400dc2:	4b29      	ldr	r3, [pc, #164]	; (400e68 <set_int_enable+0xb0>)
  400dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  400dc8:	2b00      	cmp	r3, #0
  400dca:	d01c      	beq.n	400e06 <set_int_enable+0x4e>
        if (enable)
  400dcc:	79fb      	ldrb	r3, [r7, #7]
  400dce:	2b00      	cmp	r3, #0
  400dd0:	d002      	beq.n	400dd8 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
  400dd2:	2302      	movs	r3, #2
  400dd4:	73fb      	strb	r3, [r7, #15]
  400dd6:	e001      	b.n	400ddc <set_int_enable+0x24>
        else
            tmp = 0x00;
  400dd8:	2300      	movs	r3, #0
  400dda:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
  400ddc:	4b22      	ldr	r3, [pc, #136]	; (400e68 <set_int_enable+0xb0>)
  400dde:	685b      	ldr	r3, [r3, #4]
  400de0:	7818      	ldrb	r0, [r3, #0]
  400de2:	4b21      	ldr	r3, [pc, #132]	; (400e68 <set_int_enable+0xb0>)
  400de4:	681b      	ldr	r3, [r3, #0]
  400de6:	7c59      	ldrb	r1, [r3, #17]
  400de8:	f107 030f 	add.w	r3, r7, #15
  400dec:	2201      	movs	r2, #1
  400dee:	4c1f      	ldr	r4, [pc, #124]	; (400e6c <set_int_enable+0xb4>)
  400df0:	47a0      	blx	r4
  400df2:	4603      	mov	r3, r0
  400df4:	2b00      	cmp	r3, #0
  400df6:	d002      	beq.n	400dfe <set_int_enable+0x46>
            return -1;
  400df8:	f04f 33ff 	mov.w	r3, #4294967295
  400dfc:	e030      	b.n	400e60 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
  400dfe:	7bfa      	ldrb	r2, [r7, #15]
  400e00:	4b19      	ldr	r3, [pc, #100]	; (400e68 <set_int_enable+0xb0>)
  400e02:	745a      	strb	r2, [r3, #17]
  400e04:	e02b      	b.n	400e5e <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
  400e06:	4b18      	ldr	r3, [pc, #96]	; (400e68 <set_int_enable+0xb0>)
  400e08:	7a9b      	ldrb	r3, [r3, #10]
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d102      	bne.n	400e14 <set_int_enable+0x5c>
            return -1;
  400e0e:	f04f 33ff 	mov.w	r3, #4294967295
  400e12:	e025      	b.n	400e60 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
  400e14:	79fb      	ldrb	r3, [r7, #7]
  400e16:	2b00      	cmp	r3, #0
  400e18:	d005      	beq.n	400e26 <set_int_enable+0x6e>
  400e1a:	4b13      	ldr	r3, [pc, #76]	; (400e68 <set_int_enable+0xb0>)
  400e1c:	7c5b      	ldrb	r3, [r3, #17]
  400e1e:	2b00      	cmp	r3, #0
  400e20:	d001      	beq.n	400e26 <set_int_enable+0x6e>
            return 0;
  400e22:	2300      	movs	r3, #0
  400e24:	e01c      	b.n	400e60 <set_int_enable+0xa8>
        if (enable)
  400e26:	79fb      	ldrb	r3, [r7, #7]
  400e28:	2b00      	cmp	r3, #0
  400e2a:	d002      	beq.n	400e32 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
  400e2c:	2301      	movs	r3, #1
  400e2e:	73fb      	strb	r3, [r7, #15]
  400e30:	e001      	b.n	400e36 <set_int_enable+0x7e>
        else
            tmp = 0x00;
  400e32:	2300      	movs	r3, #0
  400e34:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
  400e36:	4b0c      	ldr	r3, [pc, #48]	; (400e68 <set_int_enable+0xb0>)
  400e38:	685b      	ldr	r3, [r3, #4]
  400e3a:	7818      	ldrb	r0, [r3, #0]
  400e3c:	4b0a      	ldr	r3, [pc, #40]	; (400e68 <set_int_enable+0xb0>)
  400e3e:	681b      	ldr	r3, [r3, #0]
  400e40:	7c59      	ldrb	r1, [r3, #17]
  400e42:	f107 030f 	add.w	r3, r7, #15
  400e46:	2201      	movs	r2, #1
  400e48:	4c08      	ldr	r4, [pc, #32]	; (400e6c <set_int_enable+0xb4>)
  400e4a:	47a0      	blx	r4
  400e4c:	4603      	mov	r3, r0
  400e4e:	2b00      	cmp	r3, #0
  400e50:	d002      	beq.n	400e58 <set_int_enable+0xa0>
            return -1;
  400e52:	f04f 33ff 	mov.w	r3, #4294967295
  400e56:	e003      	b.n	400e60 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
  400e58:	7bfa      	ldrb	r2, [r7, #15]
  400e5a:	4b03      	ldr	r3, [pc, #12]	; (400e68 <set_int_enable+0xb0>)
  400e5c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
  400e5e:	2300      	movs	r3, #0
}
  400e60:	4618      	mov	r0, r3
  400e62:	3714      	adds	r7, #20
  400e64:	46bd      	mov	sp, r7
  400e66:	bd90      	pop	{r4, r7, pc}
  400e68:	20000000 	.word	0x20000000
  400e6c:	00403a71 	.word	0x00403a71

00400e70 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
  400e70:	b590      	push	{r4, r7, lr}
  400e72:	b085      	sub	sp, #20
  400e74:	af00      	add	r7, sp, #0
  400e76:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
  400e78:	2380      	movs	r3, #128	; 0x80
  400e7a:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
  400e7c:	4b5f      	ldr	r3, [pc, #380]	; (400ffc <mpu_init+0x18c>)
  400e7e:	685b      	ldr	r3, [r3, #4]
  400e80:	7818      	ldrb	r0, [r3, #0]
  400e82:	4b5e      	ldr	r3, [pc, #376]	; (400ffc <mpu_init+0x18c>)
  400e84:	681b      	ldr	r3, [r3, #0]
  400e86:	7d59      	ldrb	r1, [r3, #21]
  400e88:	f107 0308 	add.w	r3, r7, #8
  400e8c:	2201      	movs	r2, #1
  400e8e:	4c5c      	ldr	r4, [pc, #368]	; (401000 <mpu_init+0x190>)
  400e90:	47a0      	blx	r4
  400e92:	4603      	mov	r3, r0
  400e94:	2b00      	cmp	r3, #0
  400e96:	d002      	beq.n	400e9e <mpu_init+0x2e>
        return -1;
  400e98:	f04f 33ff 	mov.w	r3, #4294967295
  400e9c:	e0a9      	b.n	400ff2 <mpu_init+0x182>
    delay_ms(100);
  400e9e:	2064      	movs	r0, #100	; 0x64
  400ea0:	4b58      	ldr	r3, [pc, #352]	; (401004 <mpu_init+0x194>)
  400ea2:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
  400ea4:	2300      	movs	r3, #0
  400ea6:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
  400ea8:	4b54      	ldr	r3, [pc, #336]	; (400ffc <mpu_init+0x18c>)
  400eaa:	685b      	ldr	r3, [r3, #4]
  400eac:	7818      	ldrb	r0, [r3, #0]
  400eae:	4b53      	ldr	r3, [pc, #332]	; (400ffc <mpu_init+0x18c>)
  400eb0:	681b      	ldr	r3, [r3, #0]
  400eb2:	7d59      	ldrb	r1, [r3, #21]
  400eb4:	f107 0308 	add.w	r3, r7, #8
  400eb8:	2201      	movs	r2, #1
  400eba:	4c51      	ldr	r4, [pc, #324]	; (401000 <mpu_init+0x190>)
  400ebc:	47a0      	blx	r4
  400ebe:	4603      	mov	r3, r0
  400ec0:	2b00      	cmp	r3, #0
  400ec2:	d002      	beq.n	400eca <mpu_init+0x5a>
        return -1;
  400ec4:	f04f 33ff 	mov.w	r3, #4294967295
  400ec8:	e093      	b.n	400ff2 <mpu_init+0x182>

   st.chip_cfg.accel_half = 0;
  400eca:	4b4c      	ldr	r3, [pc, #304]	; (400ffc <mpu_init+0x18c>)
  400ecc:	2200      	movs	r2, #0
  400ece:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
  400ed0:	2348      	movs	r3, #72	; 0x48
  400ed2:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
  400ed4:	4b49      	ldr	r3, [pc, #292]	; (400ffc <mpu_init+0x18c>)
  400ed6:	685b      	ldr	r3, [r3, #4]
  400ed8:	7818      	ldrb	r0, [r3, #0]
  400eda:	4b48      	ldr	r3, [pc, #288]	; (400ffc <mpu_init+0x18c>)
  400edc:	681b      	ldr	r3, [r3, #0]
  400ede:	7a19      	ldrb	r1, [r3, #8]
  400ee0:	f107 0308 	add.w	r3, r7, #8
  400ee4:	2201      	movs	r2, #1
  400ee6:	4c46      	ldr	r4, [pc, #280]	; (401000 <mpu_init+0x190>)
  400ee8:	47a0      	blx	r4
  400eea:	4603      	mov	r3, r0
  400eec:	2b00      	cmp	r3, #0
  400eee:	d002      	beq.n	400ef6 <mpu_init+0x86>
        return -1;
  400ef0:	f04f 33ff 	mov.w	r3, #4294967295
  400ef4:	e07d      	b.n	400ff2 <mpu_init+0x182>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
  400ef6:	4b41      	ldr	r3, [pc, #260]	; (400ffc <mpu_init+0x18c>)
  400ef8:	22ff      	movs	r2, #255	; 0xff
  400efa:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
  400efc:	4b3f      	ldr	r3, [pc, #252]	; (400ffc <mpu_init+0x18c>)
  400efe:	22ff      	movs	r2, #255	; 0xff
  400f00:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
  400f02:	4b3e      	ldr	r3, [pc, #248]	; (400ffc <mpu_init+0x18c>)
  400f04:	22ff      	movs	r2, #255	; 0xff
  400f06:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
  400f08:	4b3c      	ldr	r3, [pc, #240]	; (400ffc <mpu_init+0x18c>)
  400f0a:	22ff      	movs	r2, #255	; 0xff
  400f0c:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
  400f0e:	4b3b      	ldr	r3, [pc, #236]	; (400ffc <mpu_init+0x18c>)
  400f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400f14:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
  400f16:	4b39      	ldr	r3, [pc, #228]	; (400ffc <mpu_init+0x18c>)
  400f18:	22ff      	movs	r2, #255	; 0xff
  400f1a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
  400f1c:	4b37      	ldr	r3, [pc, #220]	; (400ffc <mpu_init+0x18c>)
  400f1e:	22ff      	movs	r2, #255	; 0xff
  400f20:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
  400f22:	4b36      	ldr	r3, [pc, #216]	; (400ffc <mpu_init+0x18c>)
  400f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400f28:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
  400f2a:	4b34      	ldr	r3, [pc, #208]	; (400ffc <mpu_init+0x18c>)
  400f2c:	2201      	movs	r2, #1
  400f2e:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
  400f30:	4b32      	ldr	r3, [pc, #200]	; (400ffc <mpu_init+0x18c>)
  400f32:	2201      	movs	r2, #1
  400f34:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
  400f38:	4b30      	ldr	r3, [pc, #192]	; (400ffc <mpu_init+0x18c>)
  400f3a:	2200      	movs	r2, #0
  400f3c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
  400f40:	4b2e      	ldr	r3, [pc, #184]	; (400ffc <mpu_init+0x18c>)
  400f42:	2200      	movs	r2, #0
  400f44:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
  400f46:	4b2d      	ldr	r3, [pc, #180]	; (400ffc <mpu_init+0x18c>)
  400f48:	2200      	movs	r2, #0
  400f4a:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
  400f4c:	220c      	movs	r2, #12
  400f4e:	2100      	movs	r1, #0
  400f50:	482d      	ldr	r0, [pc, #180]	; (401008 <mpu_init+0x198>)
  400f52:	4b2e      	ldr	r3, [pc, #184]	; (40100c <mpu_init+0x19c>)
  400f54:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
  400f56:	4b29      	ldr	r3, [pc, #164]	; (400ffc <mpu_init+0x18c>)
  400f58:	2200      	movs	r2, #0
  400f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
  400f5e:	4b27      	ldr	r3, [pc, #156]	; (400ffc <mpu_init+0x18c>)
  400f60:	2200      	movs	r2, #0
  400f62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
  400f66:	4b25      	ldr	r3, [pc, #148]	; (400ffc <mpu_init+0x18c>)
  400f68:	2200      	movs	r2, #0
  400f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
  400f6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400f70:	4b27      	ldr	r3, [pc, #156]	; (401010 <mpu_init+0x1a0>)
  400f72:	4798      	blx	r3
  400f74:	4603      	mov	r3, r0
  400f76:	2b00      	cmp	r3, #0
  400f78:	d002      	beq.n	400f80 <mpu_init+0x110>
        return -1;
  400f7a:	f04f 33ff 	mov.w	r3, #4294967295
  400f7e:	e038      	b.n	400ff2 <mpu_init+0x182>
    if (mpu_set_accel_fsr(2))
  400f80:	2002      	movs	r0, #2
  400f82:	4b24      	ldr	r3, [pc, #144]	; (401014 <mpu_init+0x1a4>)
  400f84:	4798      	blx	r3
  400f86:	4603      	mov	r3, r0
  400f88:	2b00      	cmp	r3, #0
  400f8a:	d002      	beq.n	400f92 <mpu_init+0x122>
        return -1;
  400f8c:	f04f 33ff 	mov.w	r3, #4294967295
  400f90:	e02f      	b.n	400ff2 <mpu_init+0x182>
    if (mpu_set_lpf(42))
  400f92:	202a      	movs	r0, #42	; 0x2a
  400f94:	4b20      	ldr	r3, [pc, #128]	; (401018 <mpu_init+0x1a8>)
  400f96:	4798      	blx	r3
  400f98:	4603      	mov	r3, r0
  400f9a:	2b00      	cmp	r3, #0
  400f9c:	d002      	beq.n	400fa4 <mpu_init+0x134>
        return -1;
  400f9e:	f04f 33ff 	mov.w	r3, #4294967295
  400fa2:	e026      	b.n	400ff2 <mpu_init+0x182>
    if (mpu_set_sample_rate(50))
  400fa4:	2032      	movs	r0, #50	; 0x32
  400fa6:	4b1d      	ldr	r3, [pc, #116]	; (40101c <mpu_init+0x1ac>)
  400fa8:	4798      	blx	r3
  400faa:	4603      	mov	r3, r0
  400fac:	2b00      	cmp	r3, #0
  400fae:	d002      	beq.n	400fb6 <mpu_init+0x146>
        return -1;
  400fb0:	f04f 33ff 	mov.w	r3, #4294967295
  400fb4:	e01d      	b.n	400ff2 <mpu_init+0x182>
    if (mpu_configure_fifo(0))
  400fb6:	2000      	movs	r0, #0
  400fb8:	4b19      	ldr	r3, [pc, #100]	; (401020 <mpu_init+0x1b0>)
  400fba:	4798      	blx	r3
  400fbc:	4603      	mov	r3, r0
  400fbe:	2b00      	cmp	r3, #0
  400fc0:	d002      	beq.n	400fc8 <mpu_init+0x158>
        return -1;
  400fc2:	f04f 33ff 	mov.w	r3, #4294967295
  400fc6:	e014      	b.n	400ff2 <mpu_init+0x182>

    if (int_param)
  400fc8:	687b      	ldr	r3, [r7, #4]
  400fca:	2b00      	cmp	r3, #0
  400fcc:	d002      	beq.n	400fd4 <mpu_init+0x164>
        reg_int_cb(int_param);
  400fce:	6878      	ldr	r0, [r7, #4]
  400fd0:	4b14      	ldr	r3, [pc, #80]	; (401024 <mpu_init+0x1b4>)
  400fd2:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
    setup_compass();
  400fd4:	4b14      	ldr	r3, [pc, #80]	; (401028 <mpu_init+0x1b8>)
  400fd6:	4798      	blx	r3
    if (mpu_set_compass_sample_rate(10))
  400fd8:	200a      	movs	r0, #10
  400fda:	4b14      	ldr	r3, [pc, #80]	; (40102c <mpu_init+0x1bc>)
  400fdc:	4798      	blx	r3
  400fde:	4603      	mov	r3, r0
  400fe0:	2b00      	cmp	r3, #0
  400fe2:	d002      	beq.n	400fea <mpu_init+0x17a>
        return -1;
  400fe4:	f04f 33ff 	mov.w	r3, #4294967295
  400fe8:	e003      	b.n	400ff2 <mpu_init+0x182>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
  400fea:	2000      	movs	r0, #0
  400fec:	4b10      	ldr	r3, [pc, #64]	; (401030 <mpu_init+0x1c0>)
  400fee:	4798      	blx	r3
    return 0;
  400ff0:	2300      	movs	r3, #0
}
  400ff2:	4618      	mov	r0, r3
  400ff4:	3714      	adds	r7, #20
  400ff6:	46bd      	mov	sp, r7
  400ff8:	bd90      	pop	{r4, r7, pc}
  400ffa:	bf00      	nop
  400ffc:	20000000 	.word	0x20000000
  401000:	00403a71 	.word	0x00403a71
  401004:	00403a41 	.word	0x00403a41
  401008:	20000016 	.word	0x20000016
  40100c:	00406ba1 	.word	0x00406ba1
  401010:	004013e9 	.word	0x004013e9
  401014:	00401505 	.word	0x00401505
  401018:	004015d9 	.word	0x004015d9
  40101c:	004016a9 	.word	0x004016a9
  401020:	0040181d 	.word	0x0040181d
  401024:	00400da5 	.word	0x00400da5
  401028:	00401fd5 	.word	0x00401fd5
  40102c:	00401799 	.word	0x00401799
  401030:	004018c9 	.word	0x004018c9

00401034 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
  401034:	b590      	push	{r4, r7, lr}
  401036:	b085      	sub	sp, #20
  401038:	af00      	add	r7, sp, #0
  40103a:	4603      	mov	r3, r0
  40103c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
  40103e:	79fb      	ldrb	r3, [r7, #7]
  401040:	2b28      	cmp	r3, #40	; 0x28
  401042:	d902      	bls.n	40104a <mpu_lp_accel_mode+0x16>
        return -1;
  401044:	f04f 33ff 	mov.w	r3, #4294967295
  401048:	e085      	b.n	401156 <mpu_lp_accel_mode+0x122>

    if (!rate) {
  40104a:	79fb      	ldrb	r3, [r7, #7]
  40104c:	2b00      	cmp	r3, #0
  40104e:	d11c      	bne.n	40108a <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
  401050:	2000      	movs	r0, #0
  401052:	4b43      	ldr	r3, [pc, #268]	; (401160 <mpu_lp_accel_mode+0x12c>)
  401054:	4798      	blx	r3
        tmp[0] = 0;
  401056:	2300      	movs	r3, #0
  401058:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
  40105a:	2307      	movs	r3, #7
  40105c:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
  40105e:	4b41      	ldr	r3, [pc, #260]	; (401164 <mpu_lp_accel_mode+0x130>)
  401060:	685b      	ldr	r3, [r3, #4]
  401062:	7818      	ldrb	r0, [r3, #0]
  401064:	4b3f      	ldr	r3, [pc, #252]	; (401164 <mpu_lp_accel_mode+0x130>)
  401066:	681b      	ldr	r3, [r3, #0]
  401068:	7d59      	ldrb	r1, [r3, #21]
  40106a:	f107 030c 	add.w	r3, r7, #12
  40106e:	2202      	movs	r2, #2
  401070:	4c3d      	ldr	r4, [pc, #244]	; (401168 <mpu_lp_accel_mode+0x134>)
  401072:	47a0      	blx	r4
  401074:	4603      	mov	r3, r0
  401076:	2b00      	cmp	r3, #0
  401078:	d002      	beq.n	401080 <mpu_lp_accel_mode+0x4c>
            return -1;
  40107a:	f04f 33ff 	mov.w	r3, #4294967295
  40107e:	e06a      	b.n	401156 <mpu_lp_accel_mode+0x122>
        st.chip_cfg.lp_accel_mode = 0;
  401080:	4b38      	ldr	r3, [pc, #224]	; (401164 <mpu_lp_accel_mode+0x130>)
  401082:	2200      	movs	r2, #0
  401084:	751a      	strb	r2, [r3, #20]
        return 0;
  401086:	2300      	movs	r3, #0
  401088:	e065      	b.n	401156 <mpu_lp_accel_mode+0x122>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
  40108a:	2001      	movs	r0, #1
  40108c:	4b34      	ldr	r3, [pc, #208]	; (401160 <mpu_lp_accel_mode+0x12c>)
  40108e:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
  401090:	79fb      	ldrb	r3, [r7, #7]
  401092:	2b01      	cmp	r3, #1
  401094:	d102      	bne.n	40109c <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
  401096:	2302      	movs	r3, #2
  401098:	733b      	strb	r3, [r7, #12]
  40109a:	e02b      	b.n	4010f4 <mpu_lp_accel_mode+0xc0>
    else if (rate == 2)
  40109c:	79fb      	ldrb	r3, [r7, #7]
  40109e:	2b02      	cmp	r3, #2
  4010a0:	d102      	bne.n	4010a8 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
  4010a2:	2303      	movs	r3, #3
  4010a4:	733b      	strb	r3, [r7, #12]
  4010a6:	e025      	b.n	4010f4 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 5)
  4010a8:	79fb      	ldrb	r3, [r7, #7]
  4010aa:	2b05      	cmp	r3, #5
  4010ac:	d802      	bhi.n	4010b4 <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
  4010ae:	2304      	movs	r3, #4
  4010b0:	733b      	strb	r3, [r7, #12]
  4010b2:	e01f      	b.n	4010f4 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 10)
  4010b4:	79fb      	ldrb	r3, [r7, #7]
  4010b6:	2b0a      	cmp	r3, #10
  4010b8:	d802      	bhi.n	4010c0 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
  4010ba:	2305      	movs	r3, #5
  4010bc:	733b      	strb	r3, [r7, #12]
  4010be:	e019      	b.n	4010f4 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 20)
  4010c0:	79fb      	ldrb	r3, [r7, #7]
  4010c2:	2b14      	cmp	r3, #20
  4010c4:	d802      	bhi.n	4010cc <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
  4010c6:	2306      	movs	r3, #6
  4010c8:	733b      	strb	r3, [r7, #12]
  4010ca:	e013      	b.n	4010f4 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 40)
  4010cc:	79fb      	ldrb	r3, [r7, #7]
  4010ce:	2b28      	cmp	r3, #40	; 0x28
  4010d0:	d802      	bhi.n	4010d8 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
  4010d2:	2307      	movs	r3, #7
  4010d4:	733b      	strb	r3, [r7, #12]
  4010d6:	e00d      	b.n	4010f4 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 80)
  4010d8:	79fb      	ldrb	r3, [r7, #7]
  4010da:	2b50      	cmp	r3, #80	; 0x50
  4010dc:	d802      	bhi.n	4010e4 <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
  4010de:	2308      	movs	r3, #8
  4010e0:	733b      	strb	r3, [r7, #12]
  4010e2:	e007      	b.n	4010f4 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 160)
  4010e4:	79fb      	ldrb	r3, [r7, #7]
  4010e6:	2ba0      	cmp	r3, #160	; 0xa0
  4010e8:	d802      	bhi.n	4010f0 <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
  4010ea:	2309      	movs	r3, #9
  4010ec:	733b      	strb	r3, [r7, #12]
  4010ee:	e001      	b.n	4010f4 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
  4010f0:	230a      	movs	r3, #10
  4010f2:	733b      	strb	r3, [r7, #12]
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
  4010f4:	4b1b      	ldr	r3, [pc, #108]	; (401164 <mpu_lp_accel_mode+0x130>)
  4010f6:	685b      	ldr	r3, [r3, #4]
  4010f8:	7818      	ldrb	r0, [r3, #0]
  4010fa:	4b1a      	ldr	r3, [pc, #104]	; (401164 <mpu_lp_accel_mode+0x130>)
  4010fc:	681b      	ldr	r3, [r3, #0]
  4010fe:	7a59      	ldrb	r1, [r3, #9]
  401100:	f107 030c 	add.w	r3, r7, #12
  401104:	2201      	movs	r2, #1
  401106:	4c18      	ldr	r4, [pc, #96]	; (401168 <mpu_lp_accel_mode+0x134>)
  401108:	47a0      	blx	r4
  40110a:	4603      	mov	r3, r0
  40110c:	2b00      	cmp	r3, #0
  40110e:	d002      	beq.n	401116 <mpu_lp_accel_mode+0xe2>
        return -1;
  401110:	f04f 33ff 	mov.w	r3, #4294967295
  401114:	e01f      	b.n	401156 <mpu_lp_accel_mode+0x122>
    tmp[0] = BIT_LPA_CYCLE;
  401116:	2320      	movs	r3, #32
  401118:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
  40111a:	4b12      	ldr	r3, [pc, #72]	; (401164 <mpu_lp_accel_mode+0x130>)
  40111c:	685b      	ldr	r3, [r3, #4]
  40111e:	7818      	ldrb	r0, [r3, #0]
  401120:	4b10      	ldr	r3, [pc, #64]	; (401164 <mpu_lp_accel_mode+0x130>)
  401122:	681b      	ldr	r3, [r3, #0]
  401124:	7d59      	ldrb	r1, [r3, #21]
  401126:	f107 030c 	add.w	r3, r7, #12
  40112a:	2201      	movs	r2, #1
  40112c:	4c0e      	ldr	r4, [pc, #56]	; (401168 <mpu_lp_accel_mode+0x134>)
  40112e:	47a0      	blx	r4
  401130:	4603      	mov	r3, r0
  401132:	2b00      	cmp	r3, #0
  401134:	d002      	beq.n	40113c <mpu_lp_accel_mode+0x108>
        return -1;
  401136:	f04f 33ff 	mov.w	r3, #4294967295
  40113a:	e00c      	b.n	401156 <mpu_lp_accel_mode+0x122>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
  40113c:	4b09      	ldr	r3, [pc, #36]	; (401164 <mpu_lp_accel_mode+0x130>)
  40113e:	2208      	movs	r2, #8
  401140:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
  401142:	4b08      	ldr	r3, [pc, #32]	; (401164 <mpu_lp_accel_mode+0x130>)
  401144:	2200      	movs	r2, #0
  401146:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
  401148:	4b06      	ldr	r3, [pc, #24]	; (401164 <mpu_lp_accel_mode+0x130>)
  40114a:	2201      	movs	r2, #1
  40114c:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
  40114e:	2000      	movs	r0, #0
  401150:	4b06      	ldr	r3, [pc, #24]	; (40116c <mpu_lp_accel_mode+0x138>)
  401152:	4798      	blx	r3

    return 0;
  401154:	2300      	movs	r3, #0
}
  401156:	4618      	mov	r0, r3
  401158:	3714      	adds	r7, #20
  40115a:	46bd      	mov	sp, r7
  40115c:	bd90      	pop	{r4, r7, pc}
  40115e:	bf00      	nop
  401160:	00401c2d 	.word	0x00401c2d
  401164:	20000000 	.word	0x20000000
  401168:	00403a71 	.word	0x00403a71
  40116c:	0040181d 	.word	0x0040181d

00401170 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
  401170:	b590      	push	{r4, r7, lr}
  401172:	b083      	sub	sp, #12
  401174:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  401176:	4b7e      	ldr	r3, [pc, #504]	; (401370 <mpu_reset_fifo+0x200>)
  401178:	7a9b      	ldrb	r3, [r3, #10]
  40117a:	2b00      	cmp	r3, #0
  40117c:	d102      	bne.n	401184 <mpu_reset_fifo+0x14>
        return -1;
  40117e:	f04f 33ff 	mov.w	r3, #4294967295
  401182:	e0f1      	b.n	401368 <mpu_reset_fifo+0x1f8>

    data = 0;
  401184:	2300      	movs	r3, #0
  401186:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401188:	4b79      	ldr	r3, [pc, #484]	; (401370 <mpu_reset_fifo+0x200>)
  40118a:	685b      	ldr	r3, [r3, #4]
  40118c:	7818      	ldrb	r0, [r3, #0]
  40118e:	4b78      	ldr	r3, [pc, #480]	; (401370 <mpu_reset_fifo+0x200>)
  401190:	681b      	ldr	r3, [r3, #0]
  401192:	7c59      	ldrb	r1, [r3, #17]
  401194:	1dfb      	adds	r3, r7, #7
  401196:	2201      	movs	r2, #1
  401198:	4c76      	ldr	r4, [pc, #472]	; (401374 <mpu_reset_fifo+0x204>)
  40119a:	47a0      	blx	r4
  40119c:	4603      	mov	r3, r0
  40119e:	2b00      	cmp	r3, #0
  4011a0:	d002      	beq.n	4011a8 <mpu_reset_fifo+0x38>
        return -1;
  4011a2:	f04f 33ff 	mov.w	r3, #4294967295
  4011a6:	e0df      	b.n	401368 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
  4011a8:	4b71      	ldr	r3, [pc, #452]	; (401370 <mpu_reset_fifo+0x200>)
  4011aa:	685b      	ldr	r3, [r3, #4]
  4011ac:	7818      	ldrb	r0, [r3, #0]
  4011ae:	4b70      	ldr	r3, [pc, #448]	; (401370 <mpu_reset_fifo+0x200>)
  4011b0:	681b      	ldr	r3, [r3, #0]
  4011b2:	7959      	ldrb	r1, [r3, #5]
  4011b4:	1dfb      	adds	r3, r7, #7
  4011b6:	2201      	movs	r2, #1
  4011b8:	4c6e      	ldr	r4, [pc, #440]	; (401374 <mpu_reset_fifo+0x204>)
  4011ba:	47a0      	blx	r4
  4011bc:	4603      	mov	r3, r0
  4011be:	2b00      	cmp	r3, #0
  4011c0:	d002      	beq.n	4011c8 <mpu_reset_fifo+0x58>
        return -1;
  4011c2:	f04f 33ff 	mov.w	r3, #4294967295
  4011c6:	e0cf      	b.n	401368 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4011c8:	4b69      	ldr	r3, [pc, #420]	; (401370 <mpu_reset_fifo+0x200>)
  4011ca:	685b      	ldr	r3, [r3, #4]
  4011cc:	7818      	ldrb	r0, [r3, #0]
  4011ce:	4b68      	ldr	r3, [pc, #416]	; (401370 <mpu_reset_fifo+0x200>)
  4011d0:	681b      	ldr	r3, [r3, #0]
  4011d2:	7919      	ldrb	r1, [r3, #4]
  4011d4:	1dfb      	adds	r3, r7, #7
  4011d6:	2201      	movs	r2, #1
  4011d8:	4c66      	ldr	r4, [pc, #408]	; (401374 <mpu_reset_fifo+0x204>)
  4011da:	47a0      	blx	r4
  4011dc:	4603      	mov	r3, r0
  4011de:	2b00      	cmp	r3, #0
  4011e0:	d002      	beq.n	4011e8 <mpu_reset_fifo+0x78>
        return -1;
  4011e2:	f04f 33ff 	mov.w	r3, #4294967295
  4011e6:	e0bf      	b.n	401368 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
  4011e8:	4b61      	ldr	r3, [pc, #388]	; (401370 <mpu_reset_fifo+0x200>)
  4011ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4011ee:	2b00      	cmp	r3, #0
  4011f0:	d05c      	beq.n	4012ac <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
  4011f2:	230c      	movs	r3, #12
  4011f4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4011f6:	4b5e      	ldr	r3, [pc, #376]	; (401370 <mpu_reset_fifo+0x200>)
  4011f8:	685b      	ldr	r3, [r3, #4]
  4011fa:	7818      	ldrb	r0, [r3, #0]
  4011fc:	4b5c      	ldr	r3, [pc, #368]	; (401370 <mpu_reset_fifo+0x200>)
  4011fe:	681b      	ldr	r3, [r3, #0]
  401200:	7919      	ldrb	r1, [r3, #4]
  401202:	1dfb      	adds	r3, r7, #7
  401204:	2201      	movs	r2, #1
  401206:	4c5b      	ldr	r4, [pc, #364]	; (401374 <mpu_reset_fifo+0x204>)
  401208:	47a0      	blx	r4
  40120a:	4603      	mov	r3, r0
  40120c:	2b00      	cmp	r3, #0
  40120e:	d002      	beq.n	401216 <mpu_reset_fifo+0xa6>
            return -1;
  401210:	f04f 33ff 	mov.w	r3, #4294967295
  401214:	e0a8      	b.n	401368 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
  401216:	2032      	movs	r0, #50	; 0x32
  401218:	4b57      	ldr	r3, [pc, #348]	; (401378 <mpu_reset_fifo+0x208>)
  40121a:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
  40121c:	23c0      	movs	r3, #192	; 0xc0
  40121e:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
  401220:	4b53      	ldr	r3, [pc, #332]	; (401370 <mpu_reset_fifo+0x200>)
  401222:	7a9b      	ldrb	r3, [r3, #10]
  401224:	f003 0301 	and.w	r3, r3, #1
  401228:	2b00      	cmp	r3, #0
  40122a:	d004      	beq.n	401236 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
  40122c:	79fb      	ldrb	r3, [r7, #7]
  40122e:	f043 0320 	orr.w	r3, r3, #32
  401232:	b2db      	uxtb	r3, r3
  401234:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  401236:	4b4e      	ldr	r3, [pc, #312]	; (401370 <mpu_reset_fifo+0x200>)
  401238:	685b      	ldr	r3, [r3, #4]
  40123a:	7818      	ldrb	r0, [r3, #0]
  40123c:	4b4c      	ldr	r3, [pc, #304]	; (401370 <mpu_reset_fifo+0x200>)
  40123e:	681b      	ldr	r3, [r3, #0]
  401240:	7919      	ldrb	r1, [r3, #4]
  401242:	1dfb      	adds	r3, r7, #7
  401244:	2201      	movs	r2, #1
  401246:	4c4b      	ldr	r4, [pc, #300]	; (401374 <mpu_reset_fifo+0x204>)
  401248:	47a0      	blx	r4
  40124a:	4603      	mov	r3, r0
  40124c:	2b00      	cmp	r3, #0
  40124e:	d002      	beq.n	401256 <mpu_reset_fifo+0xe6>
            return -1;
  401250:	f04f 33ff 	mov.w	r3, #4294967295
  401254:	e088      	b.n	401368 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
  401256:	4b46      	ldr	r3, [pc, #280]	; (401370 <mpu_reset_fifo+0x200>)
  401258:	7c5b      	ldrb	r3, [r3, #17]
  40125a:	2b00      	cmp	r3, #0
  40125c:	d002      	beq.n	401264 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
  40125e:	2302      	movs	r3, #2
  401260:	71fb      	strb	r3, [r7, #7]
  401262:	e001      	b.n	401268 <mpu_reset_fifo+0xf8>
        else
            data = 0;
  401264:	2300      	movs	r3, #0
  401266:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401268:	4b41      	ldr	r3, [pc, #260]	; (401370 <mpu_reset_fifo+0x200>)
  40126a:	685b      	ldr	r3, [r3, #4]
  40126c:	7818      	ldrb	r0, [r3, #0]
  40126e:	4b40      	ldr	r3, [pc, #256]	; (401370 <mpu_reset_fifo+0x200>)
  401270:	681b      	ldr	r3, [r3, #0]
  401272:	7c59      	ldrb	r1, [r3, #17]
  401274:	1dfb      	adds	r3, r7, #7
  401276:	2201      	movs	r2, #1
  401278:	4c3e      	ldr	r4, [pc, #248]	; (401374 <mpu_reset_fifo+0x204>)
  40127a:	47a0      	blx	r4
  40127c:	4603      	mov	r3, r0
  40127e:	2b00      	cmp	r3, #0
  401280:	d002      	beq.n	401288 <mpu_reset_fifo+0x118>
            return -1;
  401282:	f04f 33ff 	mov.w	r3, #4294967295
  401286:	e06f      	b.n	401368 <mpu_reset_fifo+0x1f8>
        data = 0;
  401288:	2300      	movs	r3, #0
  40128a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
  40128c:	4b38      	ldr	r3, [pc, #224]	; (401370 <mpu_reset_fifo+0x200>)
  40128e:	685b      	ldr	r3, [r3, #4]
  401290:	7818      	ldrb	r0, [r3, #0]
  401292:	4b37      	ldr	r3, [pc, #220]	; (401370 <mpu_reset_fifo+0x200>)
  401294:	681b      	ldr	r3, [r3, #0]
  401296:	7959      	ldrb	r1, [r3, #5]
  401298:	1dfb      	adds	r3, r7, #7
  40129a:	2201      	movs	r2, #1
  40129c:	4c35      	ldr	r4, [pc, #212]	; (401374 <mpu_reset_fifo+0x204>)
  40129e:	47a0      	blx	r4
  4012a0:	4603      	mov	r3, r0
  4012a2:	2b00      	cmp	r3, #0
  4012a4:	d05f      	beq.n	401366 <mpu_reset_fifo+0x1f6>
            return -1;
  4012a6:	f04f 33ff 	mov.w	r3, #4294967295
  4012aa:	e05d      	b.n	401368 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
  4012ac:	2304      	movs	r3, #4
  4012ae:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4012b0:	4b2f      	ldr	r3, [pc, #188]	; (401370 <mpu_reset_fifo+0x200>)
  4012b2:	685b      	ldr	r3, [r3, #4]
  4012b4:	7818      	ldrb	r0, [r3, #0]
  4012b6:	4b2e      	ldr	r3, [pc, #184]	; (401370 <mpu_reset_fifo+0x200>)
  4012b8:	681b      	ldr	r3, [r3, #0]
  4012ba:	7919      	ldrb	r1, [r3, #4]
  4012bc:	1dfb      	adds	r3, r7, #7
  4012be:	2201      	movs	r2, #1
  4012c0:	4c2c      	ldr	r4, [pc, #176]	; (401374 <mpu_reset_fifo+0x204>)
  4012c2:	47a0      	blx	r4
  4012c4:	4603      	mov	r3, r0
  4012c6:	2b00      	cmp	r3, #0
  4012c8:	d002      	beq.n	4012d0 <mpu_reset_fifo+0x160>
            return -1;
  4012ca:	f04f 33ff 	mov.w	r3, #4294967295
  4012ce:	e04b      	b.n	401368 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
  4012d0:	4b27      	ldr	r3, [pc, #156]	; (401370 <mpu_reset_fifo+0x200>)
  4012d2:	7c9b      	ldrb	r3, [r3, #18]
  4012d4:	2b00      	cmp	r3, #0
  4012d6:	d105      	bne.n	4012e4 <mpu_reset_fifo+0x174>
  4012d8:	4b25      	ldr	r3, [pc, #148]	; (401370 <mpu_reset_fifo+0x200>)
  4012da:	7a9b      	ldrb	r3, [r3, #10]
  4012dc:	f003 0301 	and.w	r3, r3, #1
  4012e0:	2b00      	cmp	r3, #0
  4012e2:	d102      	bne.n	4012ea <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
  4012e4:	2340      	movs	r3, #64	; 0x40
  4012e6:	71fb      	strb	r3, [r7, #7]
  4012e8:	e001      	b.n	4012ee <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
  4012ea:	2360      	movs	r3, #96	; 0x60
  4012ec:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4012ee:	4b20      	ldr	r3, [pc, #128]	; (401370 <mpu_reset_fifo+0x200>)
  4012f0:	685b      	ldr	r3, [r3, #4]
  4012f2:	7818      	ldrb	r0, [r3, #0]
  4012f4:	4b1e      	ldr	r3, [pc, #120]	; (401370 <mpu_reset_fifo+0x200>)
  4012f6:	681b      	ldr	r3, [r3, #0]
  4012f8:	7919      	ldrb	r1, [r3, #4]
  4012fa:	1dfb      	adds	r3, r7, #7
  4012fc:	2201      	movs	r2, #1
  4012fe:	4c1d      	ldr	r4, [pc, #116]	; (401374 <mpu_reset_fifo+0x204>)
  401300:	47a0      	blx	r4
  401302:	4603      	mov	r3, r0
  401304:	2b00      	cmp	r3, #0
  401306:	d002      	beq.n	40130e <mpu_reset_fifo+0x19e>
            return -1;
  401308:	f04f 33ff 	mov.w	r3, #4294967295
  40130c:	e02c      	b.n	401368 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
  40130e:	2032      	movs	r0, #50	; 0x32
  401310:	4b19      	ldr	r3, [pc, #100]	; (401378 <mpu_reset_fifo+0x208>)
  401312:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
  401314:	4b16      	ldr	r3, [pc, #88]	; (401370 <mpu_reset_fifo+0x200>)
  401316:	7c5b      	ldrb	r3, [r3, #17]
  401318:	2b00      	cmp	r3, #0
  40131a:	d002      	beq.n	401322 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
  40131c:	2301      	movs	r3, #1
  40131e:	71fb      	strb	r3, [r7, #7]
  401320:	e001      	b.n	401326 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
  401322:	2300      	movs	r3, #0
  401324:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401326:	4b12      	ldr	r3, [pc, #72]	; (401370 <mpu_reset_fifo+0x200>)
  401328:	685b      	ldr	r3, [r3, #4]
  40132a:	7818      	ldrb	r0, [r3, #0]
  40132c:	4b10      	ldr	r3, [pc, #64]	; (401370 <mpu_reset_fifo+0x200>)
  40132e:	681b      	ldr	r3, [r3, #0]
  401330:	7c59      	ldrb	r1, [r3, #17]
  401332:	1dfb      	adds	r3, r7, #7
  401334:	2201      	movs	r2, #1
  401336:	4c0f      	ldr	r4, [pc, #60]	; (401374 <mpu_reset_fifo+0x204>)
  401338:	47a0      	blx	r4
  40133a:	4603      	mov	r3, r0
  40133c:	2b00      	cmp	r3, #0
  40133e:	d002      	beq.n	401346 <mpu_reset_fifo+0x1d6>
            return -1;
  401340:	f04f 33ff 	mov.w	r3, #4294967295
  401344:	e010      	b.n	401368 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
  401346:	4b0a      	ldr	r3, [pc, #40]	; (401370 <mpu_reset_fifo+0x200>)
  401348:	685b      	ldr	r3, [r3, #4]
  40134a:	7818      	ldrb	r0, [r3, #0]
  40134c:	4b08      	ldr	r3, [pc, #32]	; (401370 <mpu_reset_fifo+0x200>)
  40134e:	681b      	ldr	r3, [r3, #0]
  401350:	7959      	ldrb	r1, [r3, #5]
  401352:	4b0a      	ldr	r3, [pc, #40]	; (40137c <mpu_reset_fifo+0x20c>)
  401354:	2201      	movs	r2, #1
  401356:	4c07      	ldr	r4, [pc, #28]	; (401374 <mpu_reset_fifo+0x204>)
  401358:	47a0      	blx	r4
  40135a:	4603      	mov	r3, r0
  40135c:	2b00      	cmp	r3, #0
  40135e:	d002      	beq.n	401366 <mpu_reset_fifo+0x1f6>
            return -1;
  401360:	f04f 33ff 	mov.w	r3, #4294967295
  401364:	e000      	b.n	401368 <mpu_reset_fifo+0x1f8>
    }
    return 0;
  401366:	2300      	movs	r3, #0
}
  401368:	4618      	mov	r0, r3
  40136a:	370c      	adds	r7, #12
  40136c:	46bd      	mov	sp, r7
  40136e:	bd90      	pop	{r4, r7, pc}
  401370:	20000000 	.word	0x20000000
  401374:	00403a71 	.word	0x00403a71
  401378:	00403a41 	.word	0x00403a41
  40137c:	20000010 	.word	0x20000010

00401380 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
  401380:	b480      	push	{r7}
  401382:	b083      	sub	sp, #12
  401384:	af00      	add	r7, sp, #0
  401386:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
  401388:	4b16      	ldr	r3, [pc, #88]	; (4013e4 <mpu_get_gyro_fsr+0x64>)
  40138a:	7a1b      	ldrb	r3, [r3, #8]
  40138c:	2b03      	cmp	r3, #3
  40138e:	d81e      	bhi.n	4013ce <mpu_get_gyro_fsr+0x4e>
  401390:	a201      	add	r2, pc, #4	; (adr r2, 401398 <mpu_get_gyro_fsr+0x18>)
  401392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401396:	bf00      	nop
  401398:	004013a9 	.word	0x004013a9
  40139c:	004013b1 	.word	0x004013b1
  4013a0:	004013bb 	.word	0x004013bb
  4013a4:	004013c5 	.word	0x004013c5
    case INV_FSR_250DPS:
        fsr[0] = 250;
  4013a8:	687b      	ldr	r3, [r7, #4]
  4013aa:	22fa      	movs	r2, #250	; 0xfa
  4013ac:	801a      	strh	r2, [r3, #0]
        break;
  4013ae:	e012      	b.n	4013d6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
  4013b0:	687b      	ldr	r3, [r7, #4]
  4013b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4013b6:	801a      	strh	r2, [r3, #0]
        break;
  4013b8:	e00d      	b.n	4013d6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
  4013ba:	687b      	ldr	r3, [r7, #4]
  4013bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4013c0:	801a      	strh	r2, [r3, #0]
        break;
  4013c2:	e008      	b.n	4013d6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
  4013c4:	687b      	ldr	r3, [r7, #4]
  4013c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  4013ca:	801a      	strh	r2, [r3, #0]
        break;
  4013cc:	e003      	b.n	4013d6 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
  4013ce:	687b      	ldr	r3, [r7, #4]
  4013d0:	2200      	movs	r2, #0
  4013d2:	801a      	strh	r2, [r3, #0]
        break;
  4013d4:	bf00      	nop
    }
    return 0;
  4013d6:	2300      	movs	r3, #0
}
  4013d8:	4618      	mov	r0, r3
  4013da:	370c      	adds	r7, #12
  4013dc:	46bd      	mov	sp, r7
  4013de:	bc80      	pop	{r7}
  4013e0:	4770      	bx	lr
  4013e2:	bf00      	nop
  4013e4:	20000000 	.word	0x20000000

004013e8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
  4013e8:	b590      	push	{r4, r7, lr}
  4013ea:	b085      	sub	sp, #20
  4013ec:	af00      	add	r7, sp, #0
  4013ee:	4603      	mov	r3, r0
  4013f0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  4013f2:	4b25      	ldr	r3, [pc, #148]	; (401488 <mpu_set_gyro_fsr+0xa0>)
  4013f4:	7a9b      	ldrb	r3, [r3, #10]
  4013f6:	2b00      	cmp	r3, #0
  4013f8:	d102      	bne.n	401400 <mpu_set_gyro_fsr+0x18>
        return -1;
  4013fa:	f04f 33ff 	mov.w	r3, #4294967295
  4013fe:	e03f      	b.n	401480 <mpu_set_gyro_fsr+0x98>

    switch (fsr) {
  401400:	88fb      	ldrh	r3, [r7, #6]
  401402:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  401406:	d00f      	beq.n	401428 <mpu_set_gyro_fsr+0x40>
  401408:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40140c:	dc02      	bgt.n	401414 <mpu_set_gyro_fsr+0x2c>
  40140e:	2bfa      	cmp	r3, #250	; 0xfa
  401410:	d007      	beq.n	401422 <mpu_set_gyro_fsr+0x3a>
  401412:	e012      	b.n	40143a <mpu_set_gyro_fsr+0x52>
  401414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401418:	d009      	beq.n	40142e <mpu_set_gyro_fsr+0x46>
  40141a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40141e:	d009      	beq.n	401434 <mpu_set_gyro_fsr+0x4c>
  401420:	e00b      	b.n	40143a <mpu_set_gyro_fsr+0x52>
    case 250:
        data = INV_FSR_250DPS << 3;
  401422:	2300      	movs	r3, #0
  401424:	73fb      	strb	r3, [r7, #15]
        break;
  401426:	e00b      	b.n	401440 <mpu_set_gyro_fsr+0x58>
    case 500:
        data = INV_FSR_500DPS << 3;
  401428:	2308      	movs	r3, #8
  40142a:	73fb      	strb	r3, [r7, #15]
        break;
  40142c:	e008      	b.n	401440 <mpu_set_gyro_fsr+0x58>
    case 1000:
        data = INV_FSR_1000DPS << 3;
  40142e:	2310      	movs	r3, #16
  401430:	73fb      	strb	r3, [r7, #15]
        break;
  401432:	e005      	b.n	401440 <mpu_set_gyro_fsr+0x58>
    case 2000:
        data = INV_FSR_2000DPS << 3;
  401434:	2318      	movs	r3, #24
  401436:	73fb      	strb	r3, [r7, #15]
        break;
  401438:	e002      	b.n	401440 <mpu_set_gyro_fsr+0x58>
    default:
        return -1;
  40143a:	f04f 33ff 	mov.w	r3, #4294967295
  40143e:	e01f      	b.n	401480 <mpu_set_gyro_fsr+0x98>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
  401440:	4b11      	ldr	r3, [pc, #68]	; (401488 <mpu_set_gyro_fsr+0xa0>)
  401442:	7a1a      	ldrb	r2, [r3, #8]
  401444:	7bfb      	ldrb	r3, [r7, #15]
  401446:	08db      	lsrs	r3, r3, #3
  401448:	b2db      	uxtb	r3, r3
  40144a:	429a      	cmp	r2, r3
  40144c:	d101      	bne.n	401452 <mpu_set_gyro_fsr+0x6a>
        return 0;
  40144e:	2300      	movs	r3, #0
  401450:	e016      	b.n	401480 <mpu_set_gyro_fsr+0x98>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
  401452:	4b0d      	ldr	r3, [pc, #52]	; (401488 <mpu_set_gyro_fsr+0xa0>)
  401454:	685b      	ldr	r3, [r3, #4]
  401456:	7818      	ldrb	r0, [r3, #0]
  401458:	4b0b      	ldr	r3, [pc, #44]	; (401488 <mpu_set_gyro_fsr+0xa0>)
  40145a:	681b      	ldr	r3, [r3, #0]
  40145c:	7999      	ldrb	r1, [r3, #6]
  40145e:	f107 030f 	add.w	r3, r7, #15
  401462:	2201      	movs	r2, #1
  401464:	4c09      	ldr	r4, [pc, #36]	; (40148c <mpu_set_gyro_fsr+0xa4>)
  401466:	47a0      	blx	r4
  401468:	4603      	mov	r3, r0
  40146a:	2b00      	cmp	r3, #0
  40146c:	d002      	beq.n	401474 <mpu_set_gyro_fsr+0x8c>
        return -1;
  40146e:	f04f 33ff 	mov.w	r3, #4294967295
  401472:	e005      	b.n	401480 <mpu_set_gyro_fsr+0x98>
    st.chip_cfg.gyro_fsr = data >> 3;
  401474:	7bfb      	ldrb	r3, [r7, #15]
  401476:	08db      	lsrs	r3, r3, #3
  401478:	b2da      	uxtb	r2, r3
  40147a:	4b03      	ldr	r3, [pc, #12]	; (401488 <mpu_set_gyro_fsr+0xa0>)
  40147c:	721a      	strb	r2, [r3, #8]
    return 0;
  40147e:	2300      	movs	r3, #0
}
  401480:	4618      	mov	r0, r3
  401482:	3714      	adds	r7, #20
  401484:	46bd      	mov	sp, r7
  401486:	bd90      	pop	{r4, r7, pc}
  401488:	20000000 	.word	0x20000000
  40148c:	00403a71 	.word	0x00403a71

00401490 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
  401490:	b480      	push	{r7}
  401492:	b083      	sub	sp, #12
  401494:	af00      	add	r7, sp, #0
  401496:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
  401498:	4b19      	ldr	r3, [pc, #100]	; (401500 <mpu_get_accel_fsr+0x70>)
  40149a:	7a5b      	ldrb	r3, [r3, #9]
  40149c:	2b03      	cmp	r3, #3
  40149e:	d81b      	bhi.n	4014d8 <mpu_get_accel_fsr+0x48>
  4014a0:	a201      	add	r2, pc, #4	; (adr r2, 4014a8 <mpu_get_accel_fsr+0x18>)
  4014a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014a6:	bf00      	nop
  4014a8:	004014b9 	.word	0x004014b9
  4014ac:	004014c1 	.word	0x004014c1
  4014b0:	004014c9 	.word	0x004014c9
  4014b4:	004014d1 	.word	0x004014d1
    case INV_FSR_2G:
        fsr[0] = 2;
  4014b8:	687b      	ldr	r3, [r7, #4]
  4014ba:	2202      	movs	r2, #2
  4014bc:	701a      	strb	r2, [r3, #0]
        break;
  4014be:	e00e      	b.n	4014de <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	2204      	movs	r2, #4
  4014c4:	701a      	strb	r2, [r3, #0]
        break;
  4014c6:	e00a      	b.n	4014de <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
  4014c8:	687b      	ldr	r3, [r7, #4]
  4014ca:	2208      	movs	r2, #8
  4014cc:	701a      	strb	r2, [r3, #0]
        break;
  4014ce:	e006      	b.n	4014de <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
  4014d0:	687b      	ldr	r3, [r7, #4]
  4014d2:	2210      	movs	r2, #16
  4014d4:	701a      	strb	r2, [r3, #0]
        break;
  4014d6:	e002      	b.n	4014de <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
  4014d8:	f04f 33ff 	mov.w	r3, #4294967295
  4014dc:	e00a      	b.n	4014f4 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
  4014de:	4b08      	ldr	r3, [pc, #32]	; (401500 <mpu_get_accel_fsr+0x70>)
  4014e0:	7cdb      	ldrb	r3, [r3, #19]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d005      	beq.n	4014f2 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
  4014e6:	687b      	ldr	r3, [r7, #4]
  4014e8:	781b      	ldrb	r3, [r3, #0]
  4014ea:	005b      	lsls	r3, r3, #1
  4014ec:	b2da      	uxtb	r2, r3
  4014ee:	687b      	ldr	r3, [r7, #4]
  4014f0:	701a      	strb	r2, [r3, #0]
    return 0;
  4014f2:	2300      	movs	r3, #0
}
  4014f4:	4618      	mov	r0, r3
  4014f6:	370c      	adds	r7, #12
  4014f8:	46bd      	mov	sp, r7
  4014fa:	bc80      	pop	{r7}
  4014fc:	4770      	bx	lr
  4014fe:	bf00      	nop
  401500:	20000000 	.word	0x20000000

00401504 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
  401504:	b590      	push	{r4, r7, lr}
  401506:	b085      	sub	sp, #20
  401508:	af00      	add	r7, sp, #0
  40150a:	4603      	mov	r3, r0
  40150c:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  40150e:	4b30      	ldr	r3, [pc, #192]	; (4015d0 <mpu_set_accel_fsr+0xcc>)
  401510:	7a9b      	ldrb	r3, [r3, #10]
  401512:	2b00      	cmp	r3, #0
  401514:	d102      	bne.n	40151c <mpu_set_accel_fsr+0x18>
        return -1;
  401516:	f04f 33ff 	mov.w	r3, #4294967295
  40151a:	e054      	b.n	4015c6 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
  40151c:	79fb      	ldrb	r3, [r7, #7]
  40151e:	3b02      	subs	r3, #2
  401520:	2b0e      	cmp	r3, #14
  401522:	d82d      	bhi.n	401580 <mpu_set_accel_fsr+0x7c>
  401524:	a201      	add	r2, pc, #4	; (adr r2, 40152c <mpu_set_accel_fsr+0x28>)
  401526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40152a:	bf00      	nop
  40152c:	00401569 	.word	0x00401569
  401530:	00401581 	.word	0x00401581
  401534:	0040156f 	.word	0x0040156f
  401538:	00401581 	.word	0x00401581
  40153c:	00401581 	.word	0x00401581
  401540:	00401581 	.word	0x00401581
  401544:	00401575 	.word	0x00401575
  401548:	00401581 	.word	0x00401581
  40154c:	00401581 	.word	0x00401581
  401550:	00401581 	.word	0x00401581
  401554:	00401581 	.word	0x00401581
  401558:	00401581 	.word	0x00401581
  40155c:	00401581 	.word	0x00401581
  401560:	00401581 	.word	0x00401581
  401564:	0040157b 	.word	0x0040157b
    case 2:
        data = INV_FSR_2G << 3;
  401568:	2300      	movs	r3, #0
  40156a:	73fb      	strb	r3, [r7, #15]
        break;
  40156c:	e00b      	b.n	401586 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
  40156e:	2308      	movs	r3, #8
  401570:	73fb      	strb	r3, [r7, #15]
        break;
  401572:	e008      	b.n	401586 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
  401574:	2310      	movs	r3, #16
  401576:	73fb      	strb	r3, [r7, #15]
        break;
  401578:	e005      	b.n	401586 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
  40157a:	2318      	movs	r3, #24
  40157c:	73fb      	strb	r3, [r7, #15]
        break;
  40157e:	e002      	b.n	401586 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
  401580:	f04f 33ff 	mov.w	r3, #4294967295
  401584:	e01f      	b.n	4015c6 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
  401586:	4b12      	ldr	r3, [pc, #72]	; (4015d0 <mpu_set_accel_fsr+0xcc>)
  401588:	7a5a      	ldrb	r2, [r3, #9]
  40158a:	7bfb      	ldrb	r3, [r7, #15]
  40158c:	08db      	lsrs	r3, r3, #3
  40158e:	b2db      	uxtb	r3, r3
  401590:	429a      	cmp	r2, r3
  401592:	d101      	bne.n	401598 <mpu_set_accel_fsr+0x94>
        return 0;
  401594:	2300      	movs	r3, #0
  401596:	e016      	b.n	4015c6 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
  401598:	4b0d      	ldr	r3, [pc, #52]	; (4015d0 <mpu_set_accel_fsr+0xcc>)
  40159a:	685b      	ldr	r3, [r3, #4]
  40159c:	7818      	ldrb	r0, [r3, #0]
  40159e:	4b0c      	ldr	r3, [pc, #48]	; (4015d0 <mpu_set_accel_fsr+0xcc>)
  4015a0:	681b      	ldr	r3, [r3, #0]
  4015a2:	79d9      	ldrb	r1, [r3, #7]
  4015a4:	f107 030f 	add.w	r3, r7, #15
  4015a8:	2201      	movs	r2, #1
  4015aa:	4c0a      	ldr	r4, [pc, #40]	; (4015d4 <mpu_set_accel_fsr+0xd0>)
  4015ac:	47a0      	blx	r4
  4015ae:	4603      	mov	r3, r0
  4015b0:	2b00      	cmp	r3, #0
  4015b2:	d002      	beq.n	4015ba <mpu_set_accel_fsr+0xb6>
        return -1;
  4015b4:	f04f 33ff 	mov.w	r3, #4294967295
  4015b8:	e005      	b.n	4015c6 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
  4015ba:	7bfb      	ldrb	r3, [r7, #15]
  4015bc:	08db      	lsrs	r3, r3, #3
  4015be:	b2da      	uxtb	r2, r3
  4015c0:	4b03      	ldr	r3, [pc, #12]	; (4015d0 <mpu_set_accel_fsr+0xcc>)
  4015c2:	725a      	strb	r2, [r3, #9]
    return 0;
  4015c4:	2300      	movs	r3, #0
}
  4015c6:	4618      	mov	r0, r3
  4015c8:	3714      	adds	r7, #20
  4015ca:	46bd      	mov	sp, r7
  4015cc:	bd90      	pop	{r4, r7, pc}
  4015ce:	bf00      	nop
  4015d0:	20000000 	.word	0x20000000
  4015d4:	00403a71 	.word	0x00403a71

004015d8 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
  4015d8:	b590      	push	{r4, r7, lr}
  4015da:	b085      	sub	sp, #20
  4015dc:	af00      	add	r7, sp, #0
  4015de:	4603      	mov	r3, r0
  4015e0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  4015e2:	4b23      	ldr	r3, [pc, #140]	; (401670 <mpu_set_lpf+0x98>)
  4015e4:	7a9b      	ldrb	r3, [r3, #10]
  4015e6:	2b00      	cmp	r3, #0
  4015e8:	d102      	bne.n	4015f0 <mpu_set_lpf+0x18>
        return -1;
  4015ea:	f04f 33ff 	mov.w	r3, #4294967295
  4015ee:	e03b      	b.n	401668 <mpu_set_lpf+0x90>

    if (lpf >= 188)
  4015f0:	88fb      	ldrh	r3, [r7, #6]
  4015f2:	2bbb      	cmp	r3, #187	; 0xbb
  4015f4:	d902      	bls.n	4015fc <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
  4015f6:	2301      	movs	r3, #1
  4015f8:	73fb      	strb	r3, [r7, #15]
  4015fa:	e019      	b.n	401630 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
  4015fc:	88fb      	ldrh	r3, [r7, #6]
  4015fe:	2b61      	cmp	r3, #97	; 0x61
  401600:	d902      	bls.n	401608 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
  401602:	2302      	movs	r3, #2
  401604:	73fb      	strb	r3, [r7, #15]
  401606:	e013      	b.n	401630 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
  401608:	88fb      	ldrh	r3, [r7, #6]
  40160a:	2b29      	cmp	r3, #41	; 0x29
  40160c:	d902      	bls.n	401614 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
  40160e:	2303      	movs	r3, #3
  401610:	73fb      	strb	r3, [r7, #15]
  401612:	e00d      	b.n	401630 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
  401614:	88fb      	ldrh	r3, [r7, #6]
  401616:	2b13      	cmp	r3, #19
  401618:	d902      	bls.n	401620 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
  40161a:	2304      	movs	r3, #4
  40161c:	73fb      	strb	r3, [r7, #15]
  40161e:	e007      	b.n	401630 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
  401620:	88fb      	ldrh	r3, [r7, #6]
  401622:	2b09      	cmp	r3, #9
  401624:	d902      	bls.n	40162c <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
  401626:	2305      	movs	r3, #5
  401628:	73fb      	strb	r3, [r7, #15]
  40162a:	e001      	b.n	401630 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
  40162c:	2306      	movs	r3, #6
  40162e:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
  401630:	4b0f      	ldr	r3, [pc, #60]	; (401670 <mpu_set_lpf+0x98>)
  401632:	7ada      	ldrb	r2, [r3, #11]
  401634:	7bfb      	ldrb	r3, [r7, #15]
  401636:	429a      	cmp	r2, r3
  401638:	d101      	bne.n	40163e <mpu_set_lpf+0x66>
        return 0;
  40163a:	2300      	movs	r3, #0
  40163c:	e014      	b.n	401668 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
  40163e:	4b0c      	ldr	r3, [pc, #48]	; (401670 <mpu_set_lpf+0x98>)
  401640:	685b      	ldr	r3, [r3, #4]
  401642:	7818      	ldrb	r0, [r3, #0]
  401644:	4b0a      	ldr	r3, [pc, #40]	; (401670 <mpu_set_lpf+0x98>)
  401646:	681b      	ldr	r3, [r3, #0]
  401648:	7899      	ldrb	r1, [r3, #2]
  40164a:	f107 030f 	add.w	r3, r7, #15
  40164e:	2201      	movs	r2, #1
  401650:	4c08      	ldr	r4, [pc, #32]	; (401674 <mpu_set_lpf+0x9c>)
  401652:	47a0      	blx	r4
  401654:	4603      	mov	r3, r0
  401656:	2b00      	cmp	r3, #0
  401658:	d002      	beq.n	401660 <mpu_set_lpf+0x88>
        return -1;
  40165a:	f04f 33ff 	mov.w	r3, #4294967295
  40165e:	e003      	b.n	401668 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
  401660:	7bfa      	ldrb	r2, [r7, #15]
  401662:	4b03      	ldr	r3, [pc, #12]	; (401670 <mpu_set_lpf+0x98>)
  401664:	72da      	strb	r2, [r3, #11]
    return 0;
  401666:	2300      	movs	r3, #0
}
  401668:	4618      	mov	r0, r3
  40166a:	3714      	adds	r7, #20
  40166c:	46bd      	mov	sp, r7
  40166e:	bd90      	pop	{r4, r7, pc}
  401670:	20000000 	.word	0x20000000
  401674:	00403a71 	.word	0x00403a71

00401678 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
  401678:	b480      	push	{r7}
  40167a:	b083      	sub	sp, #12
  40167c:	af00      	add	r7, sp, #0
  40167e:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
  401680:	4b08      	ldr	r3, [pc, #32]	; (4016a4 <mpu_get_sample_rate+0x2c>)
  401682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401686:	2b00      	cmp	r3, #0
  401688:	d002      	beq.n	401690 <mpu_get_sample_rate+0x18>
        return -1;
  40168a:	f04f 33ff 	mov.w	r3, #4294967295
  40168e:	e004      	b.n	40169a <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
  401690:	4b04      	ldr	r3, [pc, #16]	; (4016a4 <mpu_get_sample_rate+0x2c>)
  401692:	89da      	ldrh	r2, [r3, #14]
  401694:	687b      	ldr	r3, [r7, #4]
  401696:	801a      	strh	r2, [r3, #0]
    return 0;
  401698:	2300      	movs	r3, #0
}
  40169a:	4618      	mov	r0, r3
  40169c:	370c      	adds	r7, #12
  40169e:	46bd      	mov	sp, r7
  4016a0:	bc80      	pop	{r7}
  4016a2:	4770      	bx	lr
  4016a4:	20000000 	.word	0x20000000

004016a8 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
  4016a8:	b590      	push	{r4, r7, lr}
  4016aa:	b085      	sub	sp, #20
  4016ac:	af00      	add	r7, sp, #0
  4016ae:	4603      	mov	r3, r0
  4016b0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  4016b2:	4b34      	ldr	r3, [pc, #208]	; (401784 <mpu_set_sample_rate+0xdc>)
  4016b4:	7a9b      	ldrb	r3, [r3, #10]
  4016b6:	2b00      	cmp	r3, #0
  4016b8:	d102      	bne.n	4016c0 <mpu_set_sample_rate+0x18>
        return -1;
  4016ba:	f04f 33ff 	mov.w	r3, #4294967295
  4016be:	e05c      	b.n	40177a <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
  4016c0:	4b30      	ldr	r3, [pc, #192]	; (401784 <mpu_set_sample_rate+0xdc>)
  4016c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4016c6:	2b00      	cmp	r3, #0
  4016c8:	d002      	beq.n	4016d0 <mpu_set_sample_rate+0x28>
        return -1;
  4016ca:	f04f 33ff 	mov.w	r3, #4294967295
  4016ce:	e054      	b.n	40177a <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
  4016d0:	4b2c      	ldr	r3, [pc, #176]	; (401784 <mpu_set_sample_rate+0xdc>)
  4016d2:	7d1b      	ldrb	r3, [r3, #20]
  4016d4:	2b00      	cmp	r3, #0
  4016d6:	d00f      	beq.n	4016f8 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
  4016d8:	88fb      	ldrh	r3, [r7, #6]
  4016da:	2b00      	cmp	r3, #0
  4016dc:	d009      	beq.n	4016f2 <mpu_set_sample_rate+0x4a>
  4016de:	88fb      	ldrh	r3, [r7, #6]
  4016e0:	2b28      	cmp	r3, #40	; 0x28
  4016e2:	d806      	bhi.n	4016f2 <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
  4016e4:	88fb      	ldrh	r3, [r7, #6]
  4016e6:	b2db      	uxtb	r3, r3
  4016e8:	4618      	mov	r0, r3
  4016ea:	4b27      	ldr	r3, [pc, #156]	; (401788 <mpu_set_sample_rate+0xe0>)
  4016ec:	4798      	blx	r3
                return 0;
  4016ee:	2300      	movs	r3, #0
  4016f0:	e043      	b.n	40177a <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
  4016f2:	2000      	movs	r0, #0
  4016f4:	4b24      	ldr	r3, [pc, #144]	; (401788 <mpu_set_sample_rate+0xe0>)
  4016f6:	4798      	blx	r3
        }
        if (rate < 4)
  4016f8:	88fb      	ldrh	r3, [r7, #6]
  4016fa:	2b03      	cmp	r3, #3
  4016fc:	d802      	bhi.n	401704 <mpu_set_sample_rate+0x5c>
            rate = 4;
  4016fe:	2304      	movs	r3, #4
  401700:	80fb      	strh	r3, [r7, #6]
  401702:	e006      	b.n	401712 <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
  401704:	88fb      	ldrh	r3, [r7, #6]
  401706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40170a:	d902      	bls.n	401712 <mpu_set_sample_rate+0x6a>
            rate = 1000;
  40170c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401710:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
  401712:	88fb      	ldrh	r3, [r7, #6]
  401714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401718:	fb92 f3f3 	sdiv	r3, r2, r3
  40171c:	b2db      	uxtb	r3, r3
  40171e:	3b01      	subs	r3, #1
  401720:	b2db      	uxtb	r3, r3
  401722:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
  401724:	4b17      	ldr	r3, [pc, #92]	; (401784 <mpu_set_sample_rate+0xdc>)
  401726:	685b      	ldr	r3, [r3, #4]
  401728:	7818      	ldrb	r0, [r3, #0]
  40172a:	4b16      	ldr	r3, [pc, #88]	; (401784 <mpu_set_sample_rate+0xdc>)
  40172c:	681b      	ldr	r3, [r3, #0]
  40172e:	7859      	ldrb	r1, [r3, #1]
  401730:	f107 030f 	add.w	r3, r7, #15
  401734:	2201      	movs	r2, #1
  401736:	4c15      	ldr	r4, [pc, #84]	; (40178c <mpu_set_sample_rate+0xe4>)
  401738:	47a0      	blx	r4
  40173a:	4603      	mov	r3, r0
  40173c:	2b00      	cmp	r3, #0
  40173e:	d002      	beq.n	401746 <mpu_set_sample_rate+0x9e>
            return -1;
  401740:	f04f 33ff 	mov.w	r3, #4294967295
  401744:	e019      	b.n	40177a <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
  401746:	7bfb      	ldrb	r3, [r7, #15]
  401748:	3301      	adds	r3, #1
  40174a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40174e:	fb92 f3f3 	sdiv	r3, r2, r3
  401752:	b29a      	uxth	r2, r3
  401754:	4b0b      	ldr	r3, [pc, #44]	; (401784 <mpu_set_sample_rate+0xdc>)
  401756:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
  401758:	4b0a      	ldr	r3, [pc, #40]	; (401784 <mpu_set_sample_rate+0xdc>)
  40175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  40175c:	2b64      	cmp	r3, #100	; 0x64
  40175e:	bf28      	it	cs
  401760:	2364      	movcs	r3, #100	; 0x64
  401762:	b29b      	uxth	r3, r3
  401764:	4618      	mov	r0, r3
  401766:	4b0a      	ldr	r3, [pc, #40]	; (401790 <mpu_set_sample_rate+0xe8>)
  401768:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
  40176a:	4b06      	ldr	r3, [pc, #24]	; (401784 <mpu_set_sample_rate+0xdc>)
  40176c:	89db      	ldrh	r3, [r3, #14]
  40176e:	085b      	lsrs	r3, r3, #1
  401770:	b29b      	uxth	r3, r3
  401772:	4618      	mov	r0, r3
  401774:	4b07      	ldr	r3, [pc, #28]	; (401794 <mpu_set_sample_rate+0xec>)
  401776:	4798      	blx	r3
        return 0;
  401778:	2300      	movs	r3, #0
    }
}
  40177a:	4618      	mov	r0, r3
  40177c:	3714      	adds	r7, #20
  40177e:	46bd      	mov	sp, r7
  401780:	bd90      	pop	{r4, r7, pc}
  401782:	bf00      	nop
  401784:	20000000 	.word	0x20000000
  401788:	00401035 	.word	0x00401035
  40178c:	00403a71 	.word	0x00403a71
  401790:	00401799 	.word	0x00401799
  401794:	004015d9 	.word	0x004015d9

00401798 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
  401798:	b590      	push	{r4, r7, lr}
  40179a:	b085      	sub	sp, #20
  40179c:	af00      	add	r7, sp, #0
  40179e:	4603      	mov	r3, r0
  4017a0:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
  4017a2:	88fb      	ldrh	r3, [r7, #6]
  4017a4:	2b00      	cmp	r3, #0
  4017a6:	d007      	beq.n	4017b8 <mpu_set_compass_sample_rate+0x20>
  4017a8:	4b1a      	ldr	r3, [pc, #104]	; (401814 <mpu_set_compass_sample_rate+0x7c>)
  4017aa:	89db      	ldrh	r3, [r3, #14]
  4017ac:	88fa      	ldrh	r2, [r7, #6]
  4017ae:	429a      	cmp	r2, r3
  4017b0:	d802      	bhi.n	4017b8 <mpu_set_compass_sample_rate+0x20>
  4017b2:	88fb      	ldrh	r3, [r7, #6]
  4017b4:	2b64      	cmp	r3, #100	; 0x64
  4017b6:	d902      	bls.n	4017be <mpu_set_compass_sample_rate+0x26>
        return -1;
  4017b8:	f04f 33ff 	mov.w	r3, #4294967295
  4017bc:	e026      	b.n	40180c <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
  4017be:	4b15      	ldr	r3, [pc, #84]	; (401814 <mpu_set_compass_sample_rate+0x7c>)
  4017c0:	89da      	ldrh	r2, [r3, #14]
  4017c2:	88fb      	ldrh	r3, [r7, #6]
  4017c4:	fbb2 f3f3 	udiv	r3, r2, r3
  4017c8:	b29b      	uxth	r3, r3
  4017ca:	b2db      	uxtb	r3, r3
  4017cc:	3b01      	subs	r3, #1
  4017ce:	b2db      	uxtb	r3, r3
  4017d0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
  4017d2:	4b10      	ldr	r3, [pc, #64]	; (401814 <mpu_set_compass_sample_rate+0x7c>)
  4017d4:	685b      	ldr	r3, [r3, #4]
  4017d6:	7818      	ldrb	r0, [r3, #0]
  4017d8:	4b0e      	ldr	r3, [pc, #56]	; (401814 <mpu_set_compass_sample_rate+0x7c>)
  4017da:	681b      	ldr	r3, [r3, #0]
  4017dc:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
  4017e0:	f107 030f 	add.w	r3, r7, #15
  4017e4:	2201      	movs	r2, #1
  4017e6:	4c0c      	ldr	r4, [pc, #48]	; (401818 <mpu_set_compass_sample_rate+0x80>)
  4017e8:	47a0      	blx	r4
  4017ea:	4603      	mov	r3, r0
  4017ec:	2b00      	cmp	r3, #0
  4017ee:	d002      	beq.n	4017f6 <mpu_set_compass_sample_rate+0x5e>
        return -1;
  4017f0:	f04f 33ff 	mov.w	r3, #4294967295
  4017f4:	e00a      	b.n	40180c <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
  4017f6:	4b07      	ldr	r3, [pc, #28]	; (401814 <mpu_set_compass_sample_rate+0x7c>)
  4017f8:	89db      	ldrh	r3, [r3, #14]
  4017fa:	461a      	mov	r2, r3
  4017fc:	7bfb      	ldrb	r3, [r7, #15]
  4017fe:	3301      	adds	r3, #1
  401800:	fb92 f3f3 	sdiv	r3, r2, r3
  401804:	b29a      	uxth	r2, r3
  401806:	4b03      	ldr	r3, [pc, #12]	; (401814 <mpu_set_compass_sample_rate+0x7c>)
  401808:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
  40180a:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
  40180c:	4618      	mov	r0, r3
  40180e:	3714      	adds	r7, #20
  401810:	46bd      	mov	sp, r7
  401812:	bd90      	pop	{r4, r7, pc}
  401814:	20000000 	.word	0x20000000
  401818:	00403a71 	.word	0x00403a71

0040181c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
  40181c:	b580      	push	{r7, lr}
  40181e:	b084      	sub	sp, #16
  401820:	af00      	add	r7, sp, #0
  401822:	4603      	mov	r3, r0
  401824:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
  401826:	2300      	movs	r3, #0
  401828:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
  40182a:	79fb      	ldrb	r3, [r7, #7]
  40182c:	f023 0301 	bic.w	r3, r3, #1
  401830:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
  401832:	4b22      	ldr	r3, [pc, #136]	; (4018bc <mpu_configure_fifo+0xa0>)
  401834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401838:	2b00      	cmp	r3, #0
  40183a:	d001      	beq.n	401840 <mpu_configure_fifo+0x24>
        return 0;
  40183c:	2300      	movs	r3, #0
  40183e:	e038      	b.n	4018b2 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
  401840:	4b1e      	ldr	r3, [pc, #120]	; (4018bc <mpu_configure_fifo+0xa0>)
  401842:	7a9b      	ldrb	r3, [r3, #10]
  401844:	2b00      	cmp	r3, #0
  401846:	d102      	bne.n	40184e <mpu_configure_fifo+0x32>
            return -1;
  401848:	f04f 33ff 	mov.w	r3, #4294967295
  40184c:	e031      	b.n	4018b2 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
  40184e:	4b1b      	ldr	r3, [pc, #108]	; (4018bc <mpu_configure_fifo+0xa0>)
  401850:	7c1b      	ldrb	r3, [r3, #16]
  401852:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
  401854:	4b19      	ldr	r3, [pc, #100]	; (4018bc <mpu_configure_fifo+0xa0>)
  401856:	7a9a      	ldrb	r2, [r3, #10]
  401858:	79fb      	ldrb	r3, [r7, #7]
  40185a:	4013      	ands	r3, r2
  40185c:	b2da      	uxtb	r2, r3
  40185e:	4b17      	ldr	r3, [pc, #92]	; (4018bc <mpu_configure_fifo+0xa0>)
  401860:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
  401862:	4b16      	ldr	r3, [pc, #88]	; (4018bc <mpu_configure_fifo+0xa0>)
  401864:	7c1b      	ldrb	r3, [r3, #16]
  401866:	79fa      	ldrb	r2, [r7, #7]
  401868:	429a      	cmp	r2, r3
  40186a:	d003      	beq.n	401874 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
  40186c:	f04f 33ff 	mov.w	r3, #4294967295
  401870:	60fb      	str	r3, [r7, #12]
  401872:	e001      	b.n	401878 <mpu_configure_fifo+0x5c>
        else
            result = 0;
  401874:	2300      	movs	r3, #0
  401876:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
  401878:	79fb      	ldrb	r3, [r7, #7]
  40187a:	2b00      	cmp	r3, #0
  40187c:	d103      	bne.n	401886 <mpu_configure_fifo+0x6a>
  40187e:	4b0f      	ldr	r3, [pc, #60]	; (4018bc <mpu_configure_fifo+0xa0>)
  401880:	7d1b      	ldrb	r3, [r3, #20]
  401882:	2b00      	cmp	r3, #0
  401884:	d003      	beq.n	40188e <mpu_configure_fifo+0x72>
            set_int_enable(1);
  401886:	2001      	movs	r0, #1
  401888:	4b0d      	ldr	r3, [pc, #52]	; (4018c0 <mpu_configure_fifo+0xa4>)
  40188a:	4798      	blx	r3
  40188c:	e002      	b.n	401894 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
  40188e:	2000      	movs	r0, #0
  401890:	4b0b      	ldr	r3, [pc, #44]	; (4018c0 <mpu_configure_fifo+0xa4>)
  401892:	4798      	blx	r3
        if (sensors) {
  401894:	79fb      	ldrb	r3, [r7, #7]
  401896:	2b00      	cmp	r3, #0
  401898:	d00a      	beq.n	4018b0 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
  40189a:	4b0a      	ldr	r3, [pc, #40]	; (4018c4 <mpu_configure_fifo+0xa8>)
  40189c:	4798      	blx	r3
  40189e:	4603      	mov	r3, r0
  4018a0:	2b00      	cmp	r3, #0
  4018a2:	d005      	beq.n	4018b0 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
  4018a4:	4a05      	ldr	r2, [pc, #20]	; (4018bc <mpu_configure_fifo+0xa0>)
  4018a6:	7afb      	ldrb	r3, [r7, #11]
  4018a8:	7413      	strb	r3, [r2, #16]
                return -1;
  4018aa:	f04f 33ff 	mov.w	r3, #4294967295
  4018ae:	e000      	b.n	4018b2 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
  4018b0:	68fb      	ldr	r3, [r7, #12]
}
  4018b2:	4618      	mov	r0, r3
  4018b4:	3710      	adds	r7, #16
  4018b6:	46bd      	mov	sp, r7
  4018b8:	bd80      	pop	{r7, pc}
  4018ba:	bf00      	nop
  4018bc:	20000000 	.word	0x20000000
  4018c0:	00400db9 	.word	0x00400db9
  4018c4:	00401171 	.word	0x00401171

004018c8 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
  4018c8:	b590      	push	{r4, r7, lr}
  4018ca:	b085      	sub	sp, #20
  4018cc:	af00      	add	r7, sp, #0
  4018ce:	4603      	mov	r3, r0
  4018d0:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
  4018d2:	79fb      	ldrb	r3, [r7, #7]
  4018d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018d8:	2b00      	cmp	r3, #0
  4018da:	d002      	beq.n	4018e2 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
  4018dc:	2301      	movs	r3, #1
  4018de:	73fb      	strb	r3, [r7, #15]
  4018e0:	e007      	b.n	4018f2 <mpu_set_sensors+0x2a>
    else if (sensors)
  4018e2:	79fb      	ldrb	r3, [r7, #7]
  4018e4:	2b00      	cmp	r3, #0
  4018e6:	d002      	beq.n	4018ee <mpu_set_sensors+0x26>
        data = 0;
  4018e8:	2300      	movs	r3, #0
  4018ea:	73fb      	strb	r3, [r7, #15]
  4018ec:	e001      	b.n	4018f2 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
  4018ee:	2340      	movs	r3, #64	; 0x40
  4018f0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
  4018f2:	4b63      	ldr	r3, [pc, #396]	; (401a80 <mpu_set_sensors+0x1b8>)
  4018f4:	685b      	ldr	r3, [r3, #4]
  4018f6:	7818      	ldrb	r0, [r3, #0]
  4018f8:	4b61      	ldr	r3, [pc, #388]	; (401a80 <mpu_set_sensors+0x1b8>)
  4018fa:	681b      	ldr	r3, [r3, #0]
  4018fc:	7d59      	ldrb	r1, [r3, #21]
  4018fe:	f107 030f 	add.w	r3, r7, #15
  401902:	2201      	movs	r2, #1
  401904:	4c5f      	ldr	r4, [pc, #380]	; (401a84 <mpu_set_sensors+0x1bc>)
  401906:	47a0      	blx	r4
  401908:	4603      	mov	r3, r0
  40190a:	2b00      	cmp	r3, #0
  40190c:	d005      	beq.n	40191a <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
  40190e:	4b5c      	ldr	r3, [pc, #368]	; (401a80 <mpu_set_sensors+0x1b8>)
  401910:	2200      	movs	r2, #0
  401912:	729a      	strb	r2, [r3, #10]
        return -1;
  401914:	f04f 33ff 	mov.w	r3, #4294967295
  401918:	e0ae      	b.n	401a78 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
  40191a:	7bfb      	ldrb	r3, [r7, #15]
  40191c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  401920:	b2da      	uxtb	r2, r3
  401922:	4b57      	ldr	r3, [pc, #348]	; (401a80 <mpu_set_sensors+0x1b8>)
  401924:	731a      	strb	r2, [r3, #12]

    data = 0;
  401926:	2300      	movs	r3, #0
  401928:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
  40192a:	79fb      	ldrb	r3, [r7, #7]
  40192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401930:	2b00      	cmp	r3, #0
  401932:	d104      	bne.n	40193e <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
  401934:	7bfb      	ldrb	r3, [r7, #15]
  401936:	f043 0304 	orr.w	r3, r3, #4
  40193a:	b2db      	uxtb	r3, r3
  40193c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
  40193e:	79fb      	ldrb	r3, [r7, #7]
  401940:	f003 0320 	and.w	r3, r3, #32
  401944:	2b00      	cmp	r3, #0
  401946:	d104      	bne.n	401952 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
  401948:	7bfb      	ldrb	r3, [r7, #15]
  40194a:	f043 0302 	orr.w	r3, r3, #2
  40194e:	b2db      	uxtb	r3, r3
  401950:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
  401952:	79fb      	ldrb	r3, [r7, #7]
  401954:	f003 0310 	and.w	r3, r3, #16
  401958:	2b00      	cmp	r3, #0
  40195a:	d104      	bne.n	401966 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
  40195c:	7bfb      	ldrb	r3, [r7, #15]
  40195e:	f043 0301 	orr.w	r3, r3, #1
  401962:	b2db      	uxtb	r3, r3
  401964:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
  401966:	79fb      	ldrb	r3, [r7, #7]
  401968:	f003 0308 	and.w	r3, r3, #8
  40196c:	2b00      	cmp	r3, #0
  40196e:	d104      	bne.n	40197a <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
  401970:	7bfb      	ldrb	r3, [r7, #15]
  401972:	f043 0338 	orr.w	r3, r3, #56	; 0x38
  401976:	b2db      	uxtb	r3, r3
  401978:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
  40197a:	4b41      	ldr	r3, [pc, #260]	; (401a80 <mpu_set_sensors+0x1b8>)
  40197c:	685b      	ldr	r3, [r3, #4]
  40197e:	7818      	ldrb	r0, [r3, #0]
  401980:	4b3f      	ldr	r3, [pc, #252]	; (401a80 <mpu_set_sensors+0x1b8>)
  401982:	681b      	ldr	r3, [r3, #0]
  401984:	7d99      	ldrb	r1, [r3, #22]
  401986:	f107 030f 	add.w	r3, r7, #15
  40198a:	2201      	movs	r2, #1
  40198c:	4c3d      	ldr	r4, [pc, #244]	; (401a84 <mpu_set_sensors+0x1bc>)
  40198e:	47a0      	blx	r4
  401990:	4603      	mov	r3, r0
  401992:	2b00      	cmp	r3, #0
  401994:	d005      	beq.n	4019a2 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
  401996:	4b3a      	ldr	r3, [pc, #232]	; (401a80 <mpu_set_sensors+0x1b8>)
  401998:	2200      	movs	r2, #0
  40199a:	729a      	strb	r2, [r3, #10]
        return -1;
  40199c:	f04f 33ff 	mov.w	r3, #4294967295
  4019a0:	e06a      	b.n	401a78 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
  4019a2:	79fb      	ldrb	r3, [r7, #7]
  4019a4:	2b00      	cmp	r3, #0
  4019a6:	d005      	beq.n	4019b4 <mpu_set_sensors+0xec>
  4019a8:	79fb      	ldrb	r3, [r7, #7]
  4019aa:	2b08      	cmp	r3, #8
  4019ac:	d002      	beq.n	4019b4 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
  4019ae:	2000      	movs	r0, #0
  4019b0:	4b35      	ldr	r3, [pc, #212]	; (401a88 <mpu_set_sensors+0x1c0>)
  4019b2:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
  4019b4:	4b32      	ldr	r3, [pc, #200]	; (401a80 <mpu_set_sensors+0x1b8>)
  4019b6:	685b      	ldr	r3, [r3, #4]
  4019b8:	7818      	ldrb	r0, [r3, #0]
  4019ba:	4b31      	ldr	r3, [pc, #196]	; (401a80 <mpu_set_sensors+0x1b8>)
  4019bc:	681b      	ldr	r3, [r3, #0]
  4019be:	7919      	ldrb	r1, [r3, #4]
  4019c0:	f107 030e 	add.w	r3, r7, #14
  4019c4:	2201      	movs	r2, #1
  4019c6:	4c31      	ldr	r4, [pc, #196]	; (401a8c <mpu_set_sensors+0x1c4>)
  4019c8:	47a0      	blx	r4
  4019ca:	4603      	mov	r3, r0
  4019cc:	2b00      	cmp	r3, #0
  4019ce:	d002      	beq.n	4019d6 <mpu_set_sensors+0x10e>
        return -1;
  4019d0:	f04f 33ff 	mov.w	r3, #4294967295
  4019d4:	e050      	b.n	401a78 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
  4019d6:	79fb      	ldrb	r3, [r7, #7]
  4019d8:	f003 0301 	and.w	r3, r3, #1
  4019dc:	2b00      	cmp	r3, #0
  4019de:	d007      	beq.n	4019f0 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
  4019e0:	2311      	movs	r3, #17
  4019e2:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
  4019e4:	7bbb      	ldrb	r3, [r7, #14]
  4019e6:	f043 0320 	orr.w	r3, r3, #32
  4019ea:	b2db      	uxtb	r3, r3
  4019ec:	73bb      	strb	r3, [r7, #14]
  4019ee:	e006      	b.n	4019fe <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
  4019f0:	2310      	movs	r3, #16
  4019f2:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
  4019f4:	7bbb      	ldrb	r3, [r7, #14]
  4019f6:	f023 0320 	bic.w	r3, r3, #32
  4019fa:	b2db      	uxtb	r3, r3
  4019fc:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
  4019fe:	4b20      	ldr	r3, [pc, #128]	; (401a80 <mpu_set_sensors+0x1b8>)
  401a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401a04:	2b00      	cmp	r3, #0
  401a06:	d005      	beq.n	401a14 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
  401a08:	7bbb      	ldrb	r3, [r7, #14]
  401a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401a0e:	b2db      	uxtb	r3, r3
  401a10:	73bb      	strb	r3, [r7, #14]
  401a12:	e004      	b.n	401a1e <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
  401a14:	7bbb      	ldrb	r3, [r7, #14]
  401a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401a1a:	b2db      	uxtb	r3, r3
  401a1c:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
  401a1e:	4b18      	ldr	r3, [pc, #96]	; (401a80 <mpu_set_sensors+0x1b8>)
  401a20:	685b      	ldr	r3, [r3, #4]
  401a22:	7818      	ldrb	r0, [r3, #0]
  401a24:	4b16      	ldr	r3, [pc, #88]	; (401a80 <mpu_set_sensors+0x1b8>)
  401a26:	681b      	ldr	r3, [r3, #0]
  401a28:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
  401a2c:	f107 030f 	add.w	r3, r7, #15
  401a30:	2201      	movs	r2, #1
  401a32:	4c14      	ldr	r4, [pc, #80]	; (401a84 <mpu_set_sensors+0x1bc>)
  401a34:	47a0      	blx	r4
  401a36:	4603      	mov	r3, r0
  401a38:	2b00      	cmp	r3, #0
  401a3a:	d002      	beq.n	401a42 <mpu_set_sensors+0x17a>
        return -1;
  401a3c:	f04f 33ff 	mov.w	r3, #4294967295
  401a40:	e01a      	b.n	401a78 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
  401a42:	4b0f      	ldr	r3, [pc, #60]	; (401a80 <mpu_set_sensors+0x1b8>)
  401a44:	685b      	ldr	r3, [r3, #4]
  401a46:	7818      	ldrb	r0, [r3, #0]
  401a48:	4b0d      	ldr	r3, [pc, #52]	; (401a80 <mpu_set_sensors+0x1b8>)
  401a4a:	681b      	ldr	r3, [r3, #0]
  401a4c:	7919      	ldrb	r1, [r3, #4]
  401a4e:	f107 030e 	add.w	r3, r7, #14
  401a52:	2201      	movs	r2, #1
  401a54:	4c0b      	ldr	r4, [pc, #44]	; (401a84 <mpu_set_sensors+0x1bc>)
  401a56:	47a0      	blx	r4
  401a58:	4603      	mov	r3, r0
  401a5a:	2b00      	cmp	r3, #0
  401a5c:	d002      	beq.n	401a64 <mpu_set_sensors+0x19c>
        return -1;
  401a5e:	f04f 33ff 	mov.w	r3, #4294967295
  401a62:	e009      	b.n	401a78 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
  401a64:	4a06      	ldr	r2, [pc, #24]	; (401a80 <mpu_set_sensors+0x1b8>)
  401a66:	79fb      	ldrb	r3, [r7, #7]
  401a68:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
  401a6a:	4b05      	ldr	r3, [pc, #20]	; (401a80 <mpu_set_sensors+0x1b8>)
  401a6c:	2200      	movs	r2, #0
  401a6e:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
  401a70:	2032      	movs	r0, #50	; 0x32
  401a72:	4b07      	ldr	r3, [pc, #28]	; (401a90 <mpu_set_sensors+0x1c8>)
  401a74:	4798      	blx	r3
    return 0;
  401a76:	2300      	movs	r3, #0
}
  401a78:	4618      	mov	r0, r3
  401a7a:	3714      	adds	r7, #20
  401a7c:	46bd      	mov	sp, r7
  401a7e:	bd90      	pop	{r4, r7, pc}
  401a80:	20000000 	.word	0x20000000
  401a84:	00403a71 	.word	0x00403a71
  401a88:	00401c2d 	.word	0x00401c2d
  401a8c:	00403b2d 	.word	0x00403b2d
  401a90:	00403a41 	.word	0x00403a41

00401a94 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
  401a94:	b590      	push	{r4, r7, lr}
  401a96:	b085      	sub	sp, #20
  401a98:	af00      	add	r7, sp, #0
  401a9a:	4603      	mov	r3, r0
  401a9c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
  401a9e:	4b5f      	ldr	r3, [pc, #380]	; (401c1c <mpu_set_bypass+0x188>)
  401aa0:	7c9b      	ldrb	r3, [r3, #18]
  401aa2:	79fa      	ldrb	r2, [r7, #7]
  401aa4:	429a      	cmp	r2, r3
  401aa6:	d101      	bne.n	401aac <mpu_set_bypass+0x18>
        return 0;
  401aa8:	2300      	movs	r3, #0
  401aaa:	e0b2      	b.n	401c12 <mpu_set_bypass+0x17e>

    if (bypass_on) {
  401aac:	79fb      	ldrb	r3, [r7, #7]
  401aae:	2b00      	cmp	r3, #0
  401ab0:	d050      	beq.n	401b54 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401ab2:	4b5a      	ldr	r3, [pc, #360]	; (401c1c <mpu_set_bypass+0x188>)
  401ab4:	685b      	ldr	r3, [r3, #4]
  401ab6:	7818      	ldrb	r0, [r3, #0]
  401ab8:	4b58      	ldr	r3, [pc, #352]	; (401c1c <mpu_set_bypass+0x188>)
  401aba:	681b      	ldr	r3, [r3, #0]
  401abc:	7919      	ldrb	r1, [r3, #4]
  401abe:	f107 030f 	add.w	r3, r7, #15
  401ac2:	2201      	movs	r2, #1
  401ac4:	4c56      	ldr	r4, [pc, #344]	; (401c20 <mpu_set_bypass+0x18c>)
  401ac6:	47a0      	blx	r4
  401ac8:	4603      	mov	r3, r0
  401aca:	2b00      	cmp	r3, #0
  401acc:	d002      	beq.n	401ad4 <mpu_set_bypass+0x40>
            return -1;
  401ace:	f04f 33ff 	mov.w	r3, #4294967295
  401ad2:	e09e      	b.n	401c12 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
  401ad4:	7bfb      	ldrb	r3, [r7, #15]
  401ad6:	f023 0320 	bic.w	r3, r3, #32
  401ada:	b2db      	uxtb	r3, r3
  401adc:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401ade:	4b4f      	ldr	r3, [pc, #316]	; (401c1c <mpu_set_bypass+0x188>)
  401ae0:	685b      	ldr	r3, [r3, #4]
  401ae2:	7818      	ldrb	r0, [r3, #0]
  401ae4:	4b4d      	ldr	r3, [pc, #308]	; (401c1c <mpu_set_bypass+0x188>)
  401ae6:	681b      	ldr	r3, [r3, #0]
  401ae8:	7919      	ldrb	r1, [r3, #4]
  401aea:	f107 030f 	add.w	r3, r7, #15
  401aee:	2201      	movs	r2, #1
  401af0:	4c4c      	ldr	r4, [pc, #304]	; (401c24 <mpu_set_bypass+0x190>)
  401af2:	47a0      	blx	r4
  401af4:	4603      	mov	r3, r0
  401af6:	2b00      	cmp	r3, #0
  401af8:	d002      	beq.n	401b00 <mpu_set_bypass+0x6c>
            return -1;
  401afa:	f04f 33ff 	mov.w	r3, #4294967295
  401afe:	e088      	b.n	401c12 <mpu_set_bypass+0x17e>
        delay_ms(3);
  401b00:	2003      	movs	r0, #3
  401b02:	4b49      	ldr	r3, [pc, #292]	; (401c28 <mpu_set_bypass+0x194>)
  401b04:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
  401b06:	2302      	movs	r3, #2
  401b08:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
  401b0a:	4b44      	ldr	r3, [pc, #272]	; (401c1c <mpu_set_bypass+0x188>)
  401b0c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401b10:	2b00      	cmp	r3, #0
  401b12:	d004      	beq.n	401b1e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
  401b14:	7bfb      	ldrb	r3, [r7, #15]
  401b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401b1a:	b2db      	uxtb	r3, r3
  401b1c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
  401b1e:	4b3f      	ldr	r3, [pc, #252]	; (401c1c <mpu_set_bypass+0x188>)
  401b20:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401b24:	2b00      	cmp	r3, #0
  401b26:	d004      	beq.n	401b32 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401b28:	7bfb      	ldrb	r3, [r7, #15]
  401b2a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401b2e:	b2db      	uxtb	r3, r3
  401b30:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401b32:	4b3a      	ldr	r3, [pc, #232]	; (401c1c <mpu_set_bypass+0x188>)
  401b34:	685b      	ldr	r3, [r3, #4]
  401b36:	7818      	ldrb	r0, [r3, #0]
  401b38:	4b38      	ldr	r3, [pc, #224]	; (401c1c <mpu_set_bypass+0x188>)
  401b3a:	681b      	ldr	r3, [r3, #0]
  401b3c:	7dd9      	ldrb	r1, [r3, #23]
  401b3e:	f107 030f 	add.w	r3, r7, #15
  401b42:	2201      	movs	r2, #1
  401b44:	4c37      	ldr	r4, [pc, #220]	; (401c24 <mpu_set_bypass+0x190>)
  401b46:	47a0      	blx	r4
  401b48:	4603      	mov	r3, r0
  401b4a:	2b00      	cmp	r3, #0
  401b4c:	d05d      	beq.n	401c0a <mpu_set_bypass+0x176>
            return -1;
  401b4e:	f04f 33ff 	mov.w	r3, #4294967295
  401b52:	e05e      	b.n	401c12 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401b54:	4b31      	ldr	r3, [pc, #196]	; (401c1c <mpu_set_bypass+0x188>)
  401b56:	685b      	ldr	r3, [r3, #4]
  401b58:	7818      	ldrb	r0, [r3, #0]
  401b5a:	4b30      	ldr	r3, [pc, #192]	; (401c1c <mpu_set_bypass+0x188>)
  401b5c:	681b      	ldr	r3, [r3, #0]
  401b5e:	7919      	ldrb	r1, [r3, #4]
  401b60:	f107 030f 	add.w	r3, r7, #15
  401b64:	2201      	movs	r2, #1
  401b66:	4c2e      	ldr	r4, [pc, #184]	; (401c20 <mpu_set_bypass+0x18c>)
  401b68:	47a0      	blx	r4
  401b6a:	4603      	mov	r3, r0
  401b6c:	2b00      	cmp	r3, #0
  401b6e:	d002      	beq.n	401b76 <mpu_set_bypass+0xe2>
            return -1;
  401b70:	f04f 33ff 	mov.w	r3, #4294967295
  401b74:	e04d      	b.n	401c12 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
  401b76:	4b29      	ldr	r3, [pc, #164]	; (401c1c <mpu_set_bypass+0x188>)
  401b78:	7a9b      	ldrb	r3, [r3, #10]
  401b7a:	f003 0301 	and.w	r3, r3, #1
  401b7e:	2b00      	cmp	r3, #0
  401b80:	d005      	beq.n	401b8e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
  401b82:	7bfb      	ldrb	r3, [r7, #15]
  401b84:	f043 0320 	orr.w	r3, r3, #32
  401b88:	b2db      	uxtb	r3, r3
  401b8a:	73fb      	strb	r3, [r7, #15]
  401b8c:	e004      	b.n	401b98 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
  401b8e:	7bfb      	ldrb	r3, [r7, #15]
  401b90:	f023 0320 	bic.w	r3, r3, #32
  401b94:	b2db      	uxtb	r3, r3
  401b96:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401b98:	4b20      	ldr	r3, [pc, #128]	; (401c1c <mpu_set_bypass+0x188>)
  401b9a:	685b      	ldr	r3, [r3, #4]
  401b9c:	7818      	ldrb	r0, [r3, #0]
  401b9e:	4b1f      	ldr	r3, [pc, #124]	; (401c1c <mpu_set_bypass+0x188>)
  401ba0:	681b      	ldr	r3, [r3, #0]
  401ba2:	7919      	ldrb	r1, [r3, #4]
  401ba4:	f107 030f 	add.w	r3, r7, #15
  401ba8:	2201      	movs	r2, #1
  401baa:	4c1e      	ldr	r4, [pc, #120]	; (401c24 <mpu_set_bypass+0x190>)
  401bac:	47a0      	blx	r4
  401bae:	4603      	mov	r3, r0
  401bb0:	2b00      	cmp	r3, #0
  401bb2:	d002      	beq.n	401bba <mpu_set_bypass+0x126>
            return -1;
  401bb4:	f04f 33ff 	mov.w	r3, #4294967295
  401bb8:	e02b      	b.n	401c12 <mpu_set_bypass+0x17e>
        delay_ms(3);
  401bba:	2003      	movs	r0, #3
  401bbc:	4b1a      	ldr	r3, [pc, #104]	; (401c28 <mpu_set_bypass+0x194>)
  401bbe:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
  401bc0:	4b16      	ldr	r3, [pc, #88]	; (401c1c <mpu_set_bypass+0x188>)
  401bc2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401bc6:	2b00      	cmp	r3, #0
  401bc8:	d002      	beq.n	401bd0 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
  401bca:	2380      	movs	r3, #128	; 0x80
  401bcc:	73fb      	strb	r3, [r7, #15]
  401bce:	e001      	b.n	401bd4 <mpu_set_bypass+0x140>
        else
            tmp = 0;
  401bd0:	2300      	movs	r3, #0
  401bd2:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
  401bd4:	4b11      	ldr	r3, [pc, #68]	; (401c1c <mpu_set_bypass+0x188>)
  401bd6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401bda:	2b00      	cmp	r3, #0
  401bdc:	d004      	beq.n	401be8 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401bde:	7bfb      	ldrb	r3, [r7, #15]
  401be0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401be4:	b2db      	uxtb	r3, r3
  401be6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401be8:	4b0c      	ldr	r3, [pc, #48]	; (401c1c <mpu_set_bypass+0x188>)
  401bea:	685b      	ldr	r3, [r3, #4]
  401bec:	7818      	ldrb	r0, [r3, #0]
  401bee:	4b0b      	ldr	r3, [pc, #44]	; (401c1c <mpu_set_bypass+0x188>)
  401bf0:	681b      	ldr	r3, [r3, #0]
  401bf2:	7dd9      	ldrb	r1, [r3, #23]
  401bf4:	f107 030f 	add.w	r3, r7, #15
  401bf8:	2201      	movs	r2, #1
  401bfa:	4c0a      	ldr	r4, [pc, #40]	; (401c24 <mpu_set_bypass+0x190>)
  401bfc:	47a0      	blx	r4
  401bfe:	4603      	mov	r3, r0
  401c00:	2b00      	cmp	r3, #0
  401c02:	d002      	beq.n	401c0a <mpu_set_bypass+0x176>
            return -1;
  401c04:	f04f 33ff 	mov.w	r3, #4294967295
  401c08:	e003      	b.n	401c12 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
  401c0a:	4a04      	ldr	r2, [pc, #16]	; (401c1c <mpu_set_bypass+0x188>)
  401c0c:	79fb      	ldrb	r3, [r7, #7]
  401c0e:	7493      	strb	r3, [r2, #18]
    return 0;
  401c10:	2300      	movs	r3, #0
}
  401c12:	4618      	mov	r0, r3
  401c14:	3714      	adds	r7, #20
  401c16:	46bd      	mov	sp, r7
  401c18:	bd90      	pop	{r4, r7, pc}
  401c1a:	bf00      	nop
  401c1c:	20000000 	.word	0x20000000
  401c20:	00403b2d 	.word	0x00403b2d
  401c24:	00403a71 	.word	0x00403a71
  401c28:	00403a41 	.word	0x00403a41

00401c2c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
  401c2c:	b590      	push	{r4, r7, lr}
  401c2e:	b085      	sub	sp, #20
  401c30:	af00      	add	r7, sp, #0
  401c32:	4603      	mov	r3, r0
  401c34:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
  401c36:	4b1e      	ldr	r3, [pc, #120]	; (401cb0 <mpu_set_int_latched+0x84>)
  401c38:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401c3c:	79fa      	ldrb	r2, [r7, #7]
  401c3e:	429a      	cmp	r2, r3
  401c40:	d101      	bne.n	401c46 <mpu_set_int_latched+0x1a>
        return 0;
  401c42:	2300      	movs	r3, #0
  401c44:	e030      	b.n	401ca8 <mpu_set_int_latched+0x7c>

    if (enable)
  401c46:	79fb      	ldrb	r3, [r7, #7]
  401c48:	2b00      	cmp	r3, #0
  401c4a:	d002      	beq.n	401c52 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401c4c:	2330      	movs	r3, #48	; 0x30
  401c4e:	73fb      	strb	r3, [r7, #15]
  401c50:	e001      	b.n	401c56 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
  401c52:	2300      	movs	r3, #0
  401c54:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
  401c56:	4b16      	ldr	r3, [pc, #88]	; (401cb0 <mpu_set_int_latched+0x84>)
  401c58:	7c9b      	ldrb	r3, [r3, #18]
  401c5a:	2b00      	cmp	r3, #0
  401c5c:	d004      	beq.n	401c68 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
  401c5e:	7bfb      	ldrb	r3, [r7, #15]
  401c60:	f043 0302 	orr.w	r3, r3, #2
  401c64:	b2db      	uxtb	r3, r3
  401c66:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
  401c68:	4b11      	ldr	r3, [pc, #68]	; (401cb0 <mpu_set_int_latched+0x84>)
  401c6a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401c6e:	2b00      	cmp	r3, #0
  401c70:	d004      	beq.n	401c7c <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
  401c72:	7bfb      	ldrb	r3, [r7, #15]
  401c74:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401c78:	b2db      	uxtb	r3, r3
  401c7a:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401c7c:	4b0c      	ldr	r3, [pc, #48]	; (401cb0 <mpu_set_int_latched+0x84>)
  401c7e:	685b      	ldr	r3, [r3, #4]
  401c80:	7818      	ldrb	r0, [r3, #0]
  401c82:	4b0b      	ldr	r3, [pc, #44]	; (401cb0 <mpu_set_int_latched+0x84>)
  401c84:	681b      	ldr	r3, [r3, #0]
  401c86:	7dd9      	ldrb	r1, [r3, #23]
  401c88:	f107 030f 	add.w	r3, r7, #15
  401c8c:	2201      	movs	r2, #1
  401c8e:	4c09      	ldr	r4, [pc, #36]	; (401cb4 <mpu_set_int_latched+0x88>)
  401c90:	47a0      	blx	r4
  401c92:	4603      	mov	r3, r0
  401c94:	2b00      	cmp	r3, #0
  401c96:	d002      	beq.n	401c9e <mpu_set_int_latched+0x72>
        return -1;
  401c98:	f04f 33ff 	mov.w	r3, #4294967295
  401c9c:	e004      	b.n	401ca8 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
  401c9e:	4a04      	ldr	r2, [pc, #16]	; (401cb0 <mpu_set_int_latched+0x84>)
  401ca0:	79fb      	ldrb	r3, [r7, #7]
  401ca2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
  401ca6:	2300      	movs	r3, #0
}
  401ca8:	4618      	mov	r0, r3
  401caa:	3714      	adds	r7, #20
  401cac:	46bd      	mov	sp, r7
  401cae:	bd90      	pop	{r4, r7, pc}
  401cb0:	20000000 	.word	0x20000000
  401cb4:	00403a71 	.word	0x00403a71

00401cb8 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
  401cb8:	b590      	push	{r4, r7, lr}
  401cba:	b085      	sub	sp, #20
  401cbc:	af00      	add	r7, sp, #0
  401cbe:	4603      	mov	r3, r0
  401cc0:	603a      	str	r2, [r7, #0]
  401cc2:	80fb      	strh	r3, [r7, #6]
  401cc4:	460b      	mov	r3, r1
  401cc6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
  401cc8:	683b      	ldr	r3, [r7, #0]
  401cca:	2b00      	cmp	r3, #0
  401ccc:	d102      	bne.n	401cd4 <mpu_write_mem+0x1c>
        return -1;
  401cce:	f04f 33ff 	mov.w	r3, #4294967295
  401cd2:	e03d      	b.n	401d50 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
  401cd4:	4b20      	ldr	r3, [pc, #128]	; (401d58 <mpu_write_mem+0xa0>)
  401cd6:	7a9b      	ldrb	r3, [r3, #10]
  401cd8:	2b00      	cmp	r3, #0
  401cda:	d102      	bne.n	401ce2 <mpu_write_mem+0x2a>
        return -1;
  401cdc:	f04f 33ff 	mov.w	r3, #4294967295
  401ce0:	e036      	b.n	401d50 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
  401ce2:	88fb      	ldrh	r3, [r7, #6]
  401ce4:	0a1b      	lsrs	r3, r3, #8
  401ce6:	b29b      	uxth	r3, r3
  401ce8:	b2db      	uxtb	r3, r3
  401cea:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
  401cec:	88fb      	ldrh	r3, [r7, #6]
  401cee:	b2db      	uxtb	r3, r3
  401cf0:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
  401cf2:	7b7b      	ldrb	r3, [r7, #13]
  401cf4:	461a      	mov	r2, r3
  401cf6:	88bb      	ldrh	r3, [r7, #4]
  401cf8:	4413      	add	r3, r2
  401cfa:	4a17      	ldr	r2, [pc, #92]	; (401d58 <mpu_write_mem+0xa0>)
  401cfc:	6852      	ldr	r2, [r2, #4]
  401cfe:	8952      	ldrh	r2, [r2, #10]
  401d00:	4293      	cmp	r3, r2
  401d02:	dd02      	ble.n	401d0a <mpu_write_mem+0x52>
        return -1;
  401d04:	f04f 33ff 	mov.w	r3, #4294967295
  401d08:	e022      	b.n	401d50 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
  401d0a:	4b13      	ldr	r3, [pc, #76]	; (401d58 <mpu_write_mem+0xa0>)
  401d0c:	685b      	ldr	r3, [r3, #4]
  401d0e:	7818      	ldrb	r0, [r3, #0]
  401d10:	4b11      	ldr	r3, [pc, #68]	; (401d58 <mpu_write_mem+0xa0>)
  401d12:	681b      	ldr	r3, [r3, #0]
  401d14:	7ed9      	ldrb	r1, [r3, #27]
  401d16:	f107 030c 	add.w	r3, r7, #12
  401d1a:	2202      	movs	r2, #2
  401d1c:	4c0f      	ldr	r4, [pc, #60]	; (401d5c <mpu_write_mem+0xa4>)
  401d1e:	47a0      	blx	r4
  401d20:	4603      	mov	r3, r0
  401d22:	2b00      	cmp	r3, #0
  401d24:	d002      	beq.n	401d2c <mpu_write_mem+0x74>
        return -1;
  401d26:	f04f 33ff 	mov.w	r3, #4294967295
  401d2a:	e011      	b.n	401d50 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
  401d2c:	4b0a      	ldr	r3, [pc, #40]	; (401d58 <mpu_write_mem+0xa0>)
  401d2e:	685b      	ldr	r3, [r3, #4]
  401d30:	7818      	ldrb	r0, [r3, #0]
  401d32:	4b09      	ldr	r3, [pc, #36]	; (401d58 <mpu_write_mem+0xa0>)
  401d34:	681b      	ldr	r3, [r3, #0]
  401d36:	7e19      	ldrb	r1, [r3, #24]
  401d38:	88bb      	ldrh	r3, [r7, #4]
  401d3a:	b2da      	uxtb	r2, r3
  401d3c:	683b      	ldr	r3, [r7, #0]
  401d3e:	4c07      	ldr	r4, [pc, #28]	; (401d5c <mpu_write_mem+0xa4>)
  401d40:	47a0      	blx	r4
  401d42:	4603      	mov	r3, r0
  401d44:	2b00      	cmp	r3, #0
  401d46:	d002      	beq.n	401d4e <mpu_write_mem+0x96>
        return -1;
  401d48:	f04f 33ff 	mov.w	r3, #4294967295
  401d4c:	e000      	b.n	401d50 <mpu_write_mem+0x98>
    return 0;
  401d4e:	2300      	movs	r3, #0
}
  401d50:	4618      	mov	r0, r3
  401d52:	3714      	adds	r7, #20
  401d54:	46bd      	mov	sp, r7
  401d56:	bd90      	pop	{r4, r7, pc}
  401d58:	20000000 	.word	0x20000000
  401d5c:	00403a71 	.word	0x00403a71

00401d60 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
  401d60:	b590      	push	{r4, r7, lr}
  401d62:	b085      	sub	sp, #20
  401d64:	af00      	add	r7, sp, #0
  401d66:	4603      	mov	r3, r0
  401d68:	603a      	str	r2, [r7, #0]
  401d6a:	80fb      	strh	r3, [r7, #6]
  401d6c:	460b      	mov	r3, r1
  401d6e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
  401d70:	683b      	ldr	r3, [r7, #0]
  401d72:	2b00      	cmp	r3, #0
  401d74:	d102      	bne.n	401d7c <mpu_read_mem+0x1c>
        return -1;
  401d76:	f04f 33ff 	mov.w	r3, #4294967295
  401d7a:	e03d      	b.n	401df8 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
  401d7c:	4b20      	ldr	r3, [pc, #128]	; (401e00 <mpu_read_mem+0xa0>)
  401d7e:	7a9b      	ldrb	r3, [r3, #10]
  401d80:	2b00      	cmp	r3, #0
  401d82:	d102      	bne.n	401d8a <mpu_read_mem+0x2a>
        return -1;
  401d84:	f04f 33ff 	mov.w	r3, #4294967295
  401d88:	e036      	b.n	401df8 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
  401d8a:	88fb      	ldrh	r3, [r7, #6]
  401d8c:	0a1b      	lsrs	r3, r3, #8
  401d8e:	b29b      	uxth	r3, r3
  401d90:	b2db      	uxtb	r3, r3
  401d92:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
  401d94:	88fb      	ldrh	r3, [r7, #6]
  401d96:	b2db      	uxtb	r3, r3
  401d98:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
  401d9a:	7b7b      	ldrb	r3, [r7, #13]
  401d9c:	461a      	mov	r2, r3
  401d9e:	88bb      	ldrh	r3, [r7, #4]
  401da0:	4413      	add	r3, r2
  401da2:	4a17      	ldr	r2, [pc, #92]	; (401e00 <mpu_read_mem+0xa0>)
  401da4:	6852      	ldr	r2, [r2, #4]
  401da6:	8952      	ldrh	r2, [r2, #10]
  401da8:	4293      	cmp	r3, r2
  401daa:	dd02      	ble.n	401db2 <mpu_read_mem+0x52>
        return -1;
  401dac:	f04f 33ff 	mov.w	r3, #4294967295
  401db0:	e022      	b.n	401df8 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
  401db2:	4b13      	ldr	r3, [pc, #76]	; (401e00 <mpu_read_mem+0xa0>)
  401db4:	685b      	ldr	r3, [r3, #4]
  401db6:	7818      	ldrb	r0, [r3, #0]
  401db8:	4b11      	ldr	r3, [pc, #68]	; (401e00 <mpu_read_mem+0xa0>)
  401dba:	681b      	ldr	r3, [r3, #0]
  401dbc:	7ed9      	ldrb	r1, [r3, #27]
  401dbe:	f107 030c 	add.w	r3, r7, #12
  401dc2:	2202      	movs	r2, #2
  401dc4:	4c0f      	ldr	r4, [pc, #60]	; (401e04 <mpu_read_mem+0xa4>)
  401dc6:	47a0      	blx	r4
  401dc8:	4603      	mov	r3, r0
  401dca:	2b00      	cmp	r3, #0
  401dcc:	d002      	beq.n	401dd4 <mpu_read_mem+0x74>
        return -1;
  401dce:	f04f 33ff 	mov.w	r3, #4294967295
  401dd2:	e011      	b.n	401df8 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
  401dd4:	4b0a      	ldr	r3, [pc, #40]	; (401e00 <mpu_read_mem+0xa0>)
  401dd6:	685b      	ldr	r3, [r3, #4]
  401dd8:	7818      	ldrb	r0, [r3, #0]
  401dda:	4b09      	ldr	r3, [pc, #36]	; (401e00 <mpu_read_mem+0xa0>)
  401ddc:	681b      	ldr	r3, [r3, #0]
  401dde:	7e19      	ldrb	r1, [r3, #24]
  401de0:	88bb      	ldrh	r3, [r7, #4]
  401de2:	b2da      	uxtb	r2, r3
  401de4:	683b      	ldr	r3, [r7, #0]
  401de6:	4c08      	ldr	r4, [pc, #32]	; (401e08 <mpu_read_mem+0xa8>)
  401de8:	47a0      	blx	r4
  401dea:	4603      	mov	r3, r0
  401dec:	2b00      	cmp	r3, #0
  401dee:	d002      	beq.n	401df6 <mpu_read_mem+0x96>
        return -1;
  401df0:	f04f 33ff 	mov.w	r3, #4294967295
  401df4:	e000      	b.n	401df8 <mpu_read_mem+0x98>
    return 0;
  401df6:	2300      	movs	r3, #0
}
  401df8:	4618      	mov	r0, r3
  401dfa:	3714      	adds	r7, #20
  401dfc:	46bd      	mov	sp, r7
  401dfe:	bd90      	pop	{r4, r7, pc}
  401e00:	20000000 	.word	0x20000000
  401e04:	00403a71 	.word	0x00403a71
  401e08:	00403b2d 	.word	0x00403b2d

00401e0c <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
  401e0c:	b590      	push	{r4, r7, lr}
  401e0e:	b08b      	sub	sp, #44	; 0x2c
  401e10:	af00      	add	r7, sp, #0
  401e12:	60b9      	str	r1, [r7, #8]
  401e14:	4611      	mov	r1, r2
  401e16:	461a      	mov	r2, r3
  401e18:	4603      	mov	r3, r0
  401e1a:	81fb      	strh	r3, [r7, #14]
  401e1c:	460b      	mov	r3, r1
  401e1e:	81bb      	strh	r3, [r7, #12]
  401e20:	4613      	mov	r3, r2
  401e22:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
  401e24:	4b37      	ldr	r3, [pc, #220]	; (401f04 <mpu_load_firmware+0xf8>)
  401e26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401e2a:	2b00      	cmp	r3, #0
  401e2c:	d002      	beq.n	401e34 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
  401e2e:	f04f 33ff 	mov.w	r3, #4294967295
  401e32:	e062      	b.n	401efa <mpu_load_firmware+0xee>

    if (!firmware)
  401e34:	68bb      	ldr	r3, [r7, #8]
  401e36:	2b00      	cmp	r3, #0
  401e38:	d102      	bne.n	401e40 <mpu_load_firmware+0x34>
        return -1;
  401e3a:	f04f 33ff 	mov.w	r3, #4294967295
  401e3e:	e05c      	b.n	401efa <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
  401e40:	2300      	movs	r3, #0
  401e42:	84fb      	strh	r3, [r7, #38]	; 0x26
  401e44:	e034      	b.n	401eb0 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
  401e46:	89fa      	ldrh	r2, [r7, #14]
  401e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e4a:	1ad3      	subs	r3, r2, r3
  401e4c:	2b10      	cmp	r3, #16
  401e4e:	bfa8      	it	ge
  401e50:	2310      	movge	r3, #16
  401e52:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
  401e54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e56:	68ba      	ldr	r2, [r7, #8]
  401e58:	441a      	add	r2, r3
  401e5a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  401e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e5e:	4618      	mov	r0, r3
  401e60:	4b29      	ldr	r3, [pc, #164]	; (401f08 <mpu_load_firmware+0xfc>)
  401e62:	4798      	blx	r3
  401e64:	4603      	mov	r3, r0
  401e66:	2b00      	cmp	r3, #0
  401e68:	d002      	beq.n	401e70 <mpu_load_firmware+0x64>
            return -1;
  401e6a:	f04f 33ff 	mov.w	r3, #4294967295
  401e6e:	e044      	b.n	401efa <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
  401e70:	f107 0214 	add.w	r2, r7, #20
  401e74:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  401e76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e78:	4618      	mov	r0, r3
  401e7a:	4b24      	ldr	r3, [pc, #144]	; (401f0c <mpu_load_firmware+0x100>)
  401e7c:	4798      	blx	r3
  401e7e:	4603      	mov	r3, r0
  401e80:	2b00      	cmp	r3, #0
  401e82:	d002      	beq.n	401e8a <mpu_load_firmware+0x7e>
            return -1;
  401e84:	f04f 33ff 	mov.w	r3, #4294967295
  401e88:	e037      	b.n	401efa <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
  401e8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e8c:	68ba      	ldr	r2, [r7, #8]
  401e8e:	4413      	add	r3, r2
  401e90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  401e92:	f107 0114 	add.w	r1, r7, #20
  401e96:	4618      	mov	r0, r3
  401e98:	4b1d      	ldr	r3, [pc, #116]	; (401f10 <mpu_load_firmware+0x104>)
  401e9a:	4798      	blx	r3
  401e9c:	4603      	mov	r3, r0
  401e9e:	2b00      	cmp	r3, #0
  401ea0:	d002      	beq.n	401ea8 <mpu_load_firmware+0x9c>
            return -2;
  401ea2:	f06f 0301 	mvn.w	r3, #1
  401ea6:	e028      	b.n	401efa <mpu_load_firmware+0xee>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
  401ea8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  401eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  401eac:	4413      	add	r3, r2
  401eae:	84fb      	strh	r3, [r7, #38]	; 0x26
  401eb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  401eb2:	89fb      	ldrh	r3, [r7, #14]
  401eb4:	429a      	cmp	r2, r3
  401eb6:	d3c6      	bcc.n	401e46 <mpu_load_firmware+0x3a>
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
  401eb8:	89bb      	ldrh	r3, [r7, #12]
  401eba:	0a1b      	lsrs	r3, r3, #8
  401ebc:	b29b      	uxth	r3, r3
  401ebe:	b2db      	uxtb	r3, r3
  401ec0:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
  401ec2:	89bb      	ldrh	r3, [r7, #12]
  401ec4:	b2db      	uxtb	r3, r3
  401ec6:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
  401ec8:	4b0e      	ldr	r3, [pc, #56]	; (401f04 <mpu_load_firmware+0xf8>)
  401eca:	685b      	ldr	r3, [r3, #4]
  401ecc:	7818      	ldrb	r0, [r3, #0]
  401ece:	4b0d      	ldr	r3, [pc, #52]	; (401f04 <mpu_load_firmware+0xf8>)
  401ed0:	681b      	ldr	r3, [r3, #0]
  401ed2:	7f59      	ldrb	r1, [r3, #29]
  401ed4:	f107 0310 	add.w	r3, r7, #16
  401ed8:	2202      	movs	r2, #2
  401eda:	4c0e      	ldr	r4, [pc, #56]	; (401f14 <mpu_load_firmware+0x108>)
  401edc:	47a0      	blx	r4
  401ede:	4603      	mov	r3, r0
  401ee0:	2b00      	cmp	r3, #0
  401ee2:	d002      	beq.n	401eea <mpu_load_firmware+0xde>
        return -1;
  401ee4:	f04f 33ff 	mov.w	r3, #4294967295
  401ee8:	e007      	b.n	401efa <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
  401eea:	4b06      	ldr	r3, [pc, #24]	; (401f04 <mpu_load_firmware+0xf8>)
  401eec:	2201      	movs	r2, #1
  401eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
  401ef2:	4a04      	ldr	r2, [pc, #16]	; (401f04 <mpu_load_firmware+0xf8>)
  401ef4:	88fb      	ldrh	r3, [r7, #6]
  401ef6:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
  401ef8:	2300      	movs	r3, #0
}
  401efa:	4618      	mov	r0, r3
  401efc:	372c      	adds	r7, #44	; 0x2c
  401efe:	46bd      	mov	sp, r7
  401f00:	bd90      	pop	{r4, r7, pc}
  401f02:	bf00      	nop
  401f04:	20000000 	.word	0x20000000
  401f08:	00401cb9 	.word	0x00401cb9
  401f0c:	00401d61 	.word	0x00401d61
  401f10:	00406a09 	.word	0x00406a09
  401f14:	00403a71 	.word	0x00403a71

00401f18 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
  401f18:	b590      	push	{r4, r7, lr}
  401f1a:	b085      	sub	sp, #20
  401f1c:	af00      	add	r7, sp, #0
  401f1e:	4603      	mov	r3, r0
  401f20:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
  401f22:	4b26      	ldr	r3, [pc, #152]	; (401fbc <mpu_set_dmp_state+0xa4>)
  401f24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401f28:	79fa      	ldrb	r2, [r7, #7]
  401f2a:	429a      	cmp	r2, r3
  401f2c:	d101      	bne.n	401f32 <mpu_set_dmp_state+0x1a>
        return 0;
  401f2e:	2300      	movs	r3, #0
  401f30:	e040      	b.n	401fb4 <mpu_set_dmp_state+0x9c>

    if (enable) {
  401f32:	79fb      	ldrb	r3, [r7, #7]
  401f34:	2b00      	cmp	r3, #0
  401f36:	d027      	beq.n	401f88 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
  401f38:	4b20      	ldr	r3, [pc, #128]	; (401fbc <mpu_set_dmp_state+0xa4>)
  401f3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d102      	bne.n	401f48 <mpu_set_dmp_state+0x30>
            return -1;
  401f42:	f04f 33ff 	mov.w	r3, #4294967295
  401f46:	e035      	b.n	401fb4 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
  401f48:	2000      	movs	r0, #0
  401f4a:	4b1d      	ldr	r3, [pc, #116]	; (401fc0 <mpu_set_dmp_state+0xa8>)
  401f4c:	4798      	blx	r3
        /* Disable bypass mode. */
        mpu_set_bypass(0);
  401f4e:	2000      	movs	r0, #0
  401f50:	4b1c      	ldr	r3, [pc, #112]	; (401fc4 <mpu_set_dmp_state+0xac>)
  401f52:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
  401f54:	4b19      	ldr	r3, [pc, #100]	; (401fbc <mpu_set_dmp_state+0xa4>)
  401f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  401f58:	4618      	mov	r0, r3
  401f5a:	4b1b      	ldr	r3, [pc, #108]	; (401fc8 <mpu_set_dmp_state+0xb0>)
  401f5c:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
  401f5e:	2300      	movs	r3, #0
  401f60:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
  401f62:	4b16      	ldr	r3, [pc, #88]	; (401fbc <mpu_set_dmp_state+0xa4>)
  401f64:	685b      	ldr	r3, [r3, #4]
  401f66:	7818      	ldrb	r0, [r3, #0]
  401f68:	f107 030f 	add.w	r3, r7, #15
  401f6c:	2201      	movs	r2, #1
  401f6e:	2123      	movs	r1, #35	; 0x23
  401f70:	4c16      	ldr	r4, [pc, #88]	; (401fcc <mpu_set_dmp_state+0xb4>)
  401f72:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 1;
  401f74:	4b11      	ldr	r3, [pc, #68]	; (401fbc <mpu_set_dmp_state+0xa4>)
  401f76:	2201      	movs	r2, #1
  401f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
  401f7c:	2001      	movs	r0, #1
  401f7e:	4b10      	ldr	r3, [pc, #64]	; (401fc0 <mpu_set_dmp_state+0xa8>)
  401f80:	4798      	blx	r3
        mpu_reset_fifo();
  401f82:	4b13      	ldr	r3, [pc, #76]	; (401fd0 <mpu_set_dmp_state+0xb8>)
  401f84:	4798      	blx	r3
  401f86:	e014      	b.n	401fb2 <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
  401f88:	2000      	movs	r0, #0
  401f8a:	4b0d      	ldr	r3, [pc, #52]	; (401fc0 <mpu_set_dmp_state+0xa8>)
  401f8c:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
  401f8e:	4b0b      	ldr	r3, [pc, #44]	; (401fbc <mpu_set_dmp_state+0xa4>)
  401f90:	7c1b      	ldrb	r3, [r3, #16]
  401f92:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
  401f94:	4b09      	ldr	r3, [pc, #36]	; (401fbc <mpu_set_dmp_state+0xa4>)
  401f96:	685b      	ldr	r3, [r3, #4]
  401f98:	7818      	ldrb	r0, [r3, #0]
  401f9a:	f107 030f 	add.w	r3, r7, #15
  401f9e:	2201      	movs	r2, #1
  401fa0:	2123      	movs	r1, #35	; 0x23
  401fa2:	4c0a      	ldr	r4, [pc, #40]	; (401fcc <mpu_set_dmp_state+0xb4>)
  401fa4:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 0;
  401fa6:	4b05      	ldr	r3, [pc, #20]	; (401fbc <mpu_set_dmp_state+0xa4>)
  401fa8:	2200      	movs	r2, #0
  401faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
  401fae:	4b08      	ldr	r3, [pc, #32]	; (401fd0 <mpu_set_dmp_state+0xb8>)
  401fb0:	4798      	blx	r3
    }
    return 0;
  401fb2:	2300      	movs	r3, #0
}
  401fb4:	4618      	mov	r0, r3
  401fb6:	3714      	adds	r7, #20
  401fb8:	46bd      	mov	sp, r7
  401fba:	bd90      	pop	{r4, r7, pc}
  401fbc:	20000000 	.word	0x20000000
  401fc0:	00400db9 	.word	0x00400db9
  401fc4:	00401a95 	.word	0x00401a95
  401fc8:	004016a9 	.word	0x004016a9
  401fcc:	00403a71 	.word	0x00403a71
  401fd0:	00401171 	.word	0x00401171

00401fd4 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
  401fd4:	b590      	push	{r4, r7, lr}
  401fd6:	b085      	sub	sp, #20
  401fd8:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
  401fda:	2001      	movs	r0, #1
  401fdc:	4b9b      	ldr	r3, [pc, #620]	; (40224c <setup_compass+0x278>)
  401fde:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
  401fe0:	230c      	movs	r3, #12
  401fe2:	73fb      	strb	r3, [r7, #15]
  401fe4:	e010      	b.n	402008 <setup_compass+0x34>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
  401fe6:	1d3b      	adds	r3, r7, #4
  401fe8:	7bf8      	ldrb	r0, [r7, #15]
  401fea:	2201      	movs	r2, #1
  401fec:	2100      	movs	r1, #0
  401fee:	4c98      	ldr	r4, [pc, #608]	; (402250 <setup_compass+0x27c>)
  401ff0:	47a0      	blx	r4
  401ff2:	4603      	mov	r3, r0
  401ff4:	60bb      	str	r3, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
  401ff6:	68bb      	ldr	r3, [r7, #8]
  401ff8:	2b00      	cmp	r3, #0
  401ffa:	d102      	bne.n	402002 <setup_compass+0x2e>
  401ffc:	793b      	ldrb	r3, [r7, #4]
  401ffe:	2b48      	cmp	r3, #72	; 0x48
  402000:	d006      	beq.n	402010 <setup_compass+0x3c>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
  402002:	7bfb      	ldrb	r3, [r7, #15]
  402004:	3301      	adds	r3, #1
  402006:	73fb      	strb	r3, [r7, #15]
  402008:	7bfb      	ldrb	r3, [r7, #15]
  40200a:	2b0f      	cmp	r3, #15
  40200c:	d9eb      	bls.n	401fe6 <setup_compass+0x12>
  40200e:	e000      	b.n	402012 <setup_compass+0x3e>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
  402010:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
  402012:	7bfb      	ldrb	r3, [r7, #15]
  402014:	2b0f      	cmp	r3, #15
  402016:	d902      	bls.n	40201e <setup_compass+0x4a>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
  402018:	f04f 33ff 	mov.w	r3, #4294967295
  40201c:	e112      	b.n	402244 <setup_compass+0x270>
    }

    st.chip_cfg.compass_addr = akm_addr;
  40201e:	4a8d      	ldr	r2, [pc, #564]	; (402254 <setup_compass+0x280>)
  402020:	7bfb      	ldrb	r3, [r7, #15]
  402022:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
  402026:	2310      	movs	r3, #16
  402028:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  40202a:	4b8a      	ldr	r3, [pc, #552]	; (402254 <setup_compass+0x280>)
  40202c:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402030:	1d3b      	adds	r3, r7, #4
  402032:	2201      	movs	r2, #1
  402034:	210a      	movs	r1, #10
  402036:	4c88      	ldr	r4, [pc, #544]	; (402258 <setup_compass+0x284>)
  402038:	47a0      	blx	r4
  40203a:	4603      	mov	r3, r0
  40203c:	2b00      	cmp	r3, #0
  40203e:	d002      	beq.n	402046 <setup_compass+0x72>
        return -1;
  402040:	f04f 33ff 	mov.w	r3, #4294967295
  402044:	e0fe      	b.n	402244 <setup_compass+0x270>
    delay_ms(1);
  402046:	2001      	movs	r0, #1
  402048:	4b84      	ldr	r3, [pc, #528]	; (40225c <setup_compass+0x288>)
  40204a:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
  40204c:	231f      	movs	r3, #31
  40204e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  402050:	4b80      	ldr	r3, [pc, #512]	; (402254 <setup_compass+0x280>)
  402052:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402056:	1d3b      	adds	r3, r7, #4
  402058:	2201      	movs	r2, #1
  40205a:	210a      	movs	r1, #10
  40205c:	4c7e      	ldr	r4, [pc, #504]	; (402258 <setup_compass+0x284>)
  40205e:	47a0      	blx	r4
  402060:	4603      	mov	r3, r0
  402062:	2b00      	cmp	r3, #0
  402064:	d002      	beq.n	40206c <setup_compass+0x98>
        return -1;
  402066:	f04f 33ff 	mov.w	r3, #4294967295
  40206a:	e0eb      	b.n	402244 <setup_compass+0x270>
    delay_ms(1);
  40206c:	2001      	movs	r0, #1
  40206e:	4b7b      	ldr	r3, [pc, #492]	; (40225c <setup_compass+0x288>)
  402070:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
  402072:	4b78      	ldr	r3, [pc, #480]	; (402254 <setup_compass+0x280>)
  402074:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402078:	1d3b      	adds	r3, r7, #4
  40207a:	2203      	movs	r2, #3
  40207c:	2110      	movs	r1, #16
  40207e:	4c74      	ldr	r4, [pc, #464]	; (402250 <setup_compass+0x27c>)
  402080:	47a0      	blx	r4
  402082:	4603      	mov	r3, r0
  402084:	2b00      	cmp	r3, #0
  402086:	d002      	beq.n	40208e <setup_compass+0xba>
        return -1;
  402088:	f04f 33ff 	mov.w	r3, #4294967295
  40208c:	e0da      	b.n	402244 <setup_compass+0x270>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
  40208e:	793b      	ldrb	r3, [r7, #4]
  402090:	b29b      	uxth	r3, r3
  402092:	3380      	adds	r3, #128	; 0x80
  402094:	b29b      	uxth	r3, r3
  402096:	b21a      	sxth	r2, r3
  402098:	4b6e      	ldr	r3, [pc, #440]	; (402254 <setup_compass+0x280>)
  40209a:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
  40209c:	797b      	ldrb	r3, [r7, #5]
  40209e:	b29b      	uxth	r3, r3
  4020a0:	3380      	adds	r3, #128	; 0x80
  4020a2:	b29b      	uxth	r3, r3
  4020a4:	b21a      	sxth	r2, r3
  4020a6:	4b6b      	ldr	r3, [pc, #428]	; (402254 <setup_compass+0x280>)
  4020a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
  4020aa:	79bb      	ldrb	r3, [r7, #6]
  4020ac:	b29b      	uxth	r3, r3
  4020ae:	3380      	adds	r3, #128	; 0x80
  4020b0:	b29b      	uxth	r3, r3
  4020b2:	b21a      	sxth	r2, r3
  4020b4:	4b67      	ldr	r3, [pc, #412]	; (402254 <setup_compass+0x280>)
  4020b6:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
  4020b8:	2310      	movs	r3, #16
  4020ba:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  4020bc:	4b65      	ldr	r3, [pc, #404]	; (402254 <setup_compass+0x280>)
  4020be:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  4020c2:	1d3b      	adds	r3, r7, #4
  4020c4:	2201      	movs	r2, #1
  4020c6:	210a      	movs	r1, #10
  4020c8:	4c63      	ldr	r4, [pc, #396]	; (402258 <setup_compass+0x284>)
  4020ca:	47a0      	blx	r4
  4020cc:	4603      	mov	r3, r0
  4020ce:	2b00      	cmp	r3, #0
  4020d0:	d002      	beq.n	4020d8 <setup_compass+0x104>
        return -1;
  4020d2:	f04f 33ff 	mov.w	r3, #4294967295
  4020d6:	e0b5      	b.n	402244 <setup_compass+0x270>
    delay_ms(1);
  4020d8:	2001      	movs	r0, #1
  4020da:	4b60      	ldr	r3, [pc, #384]	; (40225c <setup_compass+0x288>)
  4020dc:	4798      	blx	r3

    mpu_set_bypass(0);
  4020de:	2000      	movs	r0, #0
  4020e0:	4b5a      	ldr	r3, [pc, #360]	; (40224c <setup_compass+0x278>)
  4020e2:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
  4020e4:	2340      	movs	r3, #64	; 0x40
  4020e6:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
  4020e8:	4b5a      	ldr	r3, [pc, #360]	; (402254 <setup_compass+0x280>)
  4020ea:	685b      	ldr	r3, [r3, #4]
  4020ec:	7818      	ldrb	r0, [r3, #0]
  4020ee:	4b59      	ldr	r3, [pc, #356]	; (402254 <setup_compass+0x280>)
  4020f0:	681b      	ldr	r3, [r3, #0]
  4020f2:	7e99      	ldrb	r1, [r3, #26]
  4020f4:	1d3b      	adds	r3, r7, #4
  4020f6:	2201      	movs	r2, #1
  4020f8:	4c57      	ldr	r4, [pc, #348]	; (402258 <setup_compass+0x284>)
  4020fa:	47a0      	blx	r4
  4020fc:	4603      	mov	r3, r0
  4020fe:	2b00      	cmp	r3, #0
  402100:	d002      	beq.n	402108 <setup_compass+0x134>
        return -1;
  402102:	f04f 33ff 	mov.w	r3, #4294967295
  402106:	e09d      	b.n	402244 <setup_compass+0x270>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
  402108:	4b52      	ldr	r3, [pc, #328]	; (402254 <setup_compass+0x280>)
  40210a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  40210e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402112:	b2db      	uxtb	r3, r3
  402114:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
  402116:	4b4f      	ldr	r3, [pc, #316]	; (402254 <setup_compass+0x280>)
  402118:	685b      	ldr	r3, [r3, #4]
  40211a:	7818      	ldrb	r0, [r3, #0]
  40211c:	4b4d      	ldr	r3, [pc, #308]	; (402254 <setup_compass+0x280>)
  40211e:	681b      	ldr	r3, [r3, #0]
  402120:	7f99      	ldrb	r1, [r3, #30]
  402122:	1d3b      	adds	r3, r7, #4
  402124:	2201      	movs	r2, #1
  402126:	4c4c      	ldr	r4, [pc, #304]	; (402258 <setup_compass+0x284>)
  402128:	47a0      	blx	r4
  40212a:	4603      	mov	r3, r0
  40212c:	2b00      	cmp	r3, #0
  40212e:	d002      	beq.n	402136 <setup_compass+0x162>
        return -1;
  402130:	f04f 33ff 	mov.w	r3, #4294967295
  402134:	e086      	b.n	402244 <setup_compass+0x270>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
  402136:	2302      	movs	r3, #2
  402138:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
  40213a:	4b46      	ldr	r3, [pc, #280]	; (402254 <setup_compass+0x280>)
  40213c:	685b      	ldr	r3, [r3, #4]
  40213e:	7818      	ldrb	r0, [r3, #0]
  402140:	4b44      	ldr	r3, [pc, #272]	; (402254 <setup_compass+0x280>)
  402142:	681b      	ldr	r3, [r3, #0]
  402144:	7fd9      	ldrb	r1, [r3, #31]
  402146:	1d3b      	adds	r3, r7, #4
  402148:	2201      	movs	r2, #1
  40214a:	4c43      	ldr	r4, [pc, #268]	; (402258 <setup_compass+0x284>)
  40214c:	47a0      	blx	r4
  40214e:	4603      	mov	r3, r0
  402150:	2b00      	cmp	r3, #0
  402152:	d002      	beq.n	40215a <setup_compass+0x186>
        return -1;
  402154:	f04f 33ff 	mov.w	r3, #4294967295
  402158:	e074      	b.n	402244 <setup_compass+0x270>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
  40215a:	2388      	movs	r3, #136	; 0x88
  40215c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
  40215e:	4b3d      	ldr	r3, [pc, #244]	; (402254 <setup_compass+0x280>)
  402160:	685b      	ldr	r3, [r3, #4]
  402162:	7818      	ldrb	r0, [r3, #0]
  402164:	4b3b      	ldr	r3, [pc, #236]	; (402254 <setup_compass+0x280>)
  402166:	681b      	ldr	r3, [r3, #0]
  402168:	f893 1020 	ldrb.w	r1, [r3, #32]
  40216c:	1d3b      	adds	r3, r7, #4
  40216e:	2201      	movs	r2, #1
  402170:	4c39      	ldr	r4, [pc, #228]	; (402258 <setup_compass+0x284>)
  402172:	47a0      	blx	r4
  402174:	4603      	mov	r3, r0
  402176:	2b00      	cmp	r3, #0
  402178:	d002      	beq.n	402180 <setup_compass+0x1ac>
        return -1;
  40217a:	f04f 33ff 	mov.w	r3, #4294967295
  40217e:	e061      	b.n	402244 <setup_compass+0x270>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
  402180:	4b34      	ldr	r3, [pc, #208]	; (402254 <setup_compass+0x280>)
  402182:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  402186:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
  402188:	4b32      	ldr	r3, [pc, #200]	; (402254 <setup_compass+0x280>)
  40218a:	685b      	ldr	r3, [r3, #4]
  40218c:	7818      	ldrb	r0, [r3, #0]
  40218e:	4b31      	ldr	r3, [pc, #196]	; (402254 <setup_compass+0x280>)
  402190:	681b      	ldr	r3, [r3, #0]
  402192:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
  402196:	1d3b      	adds	r3, r7, #4
  402198:	2201      	movs	r2, #1
  40219a:	4c2f      	ldr	r4, [pc, #188]	; (402258 <setup_compass+0x284>)
  40219c:	47a0      	blx	r4
  40219e:	4603      	mov	r3, r0
  4021a0:	2b00      	cmp	r3, #0
  4021a2:	d002      	beq.n	4021aa <setup_compass+0x1d6>
        return -1;
  4021a4:	f04f 33ff 	mov.w	r3, #4294967295
  4021a8:	e04c      	b.n	402244 <setup_compass+0x270>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
  4021aa:	230a      	movs	r3, #10
  4021ac:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
  4021ae:	4b29      	ldr	r3, [pc, #164]	; (402254 <setup_compass+0x280>)
  4021b0:	685b      	ldr	r3, [r3, #4]
  4021b2:	7818      	ldrb	r0, [r3, #0]
  4021b4:	4b27      	ldr	r3, [pc, #156]	; (402254 <setup_compass+0x280>)
  4021b6:	681b      	ldr	r3, [r3, #0]
  4021b8:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
  4021bc:	1d3b      	adds	r3, r7, #4
  4021be:	2201      	movs	r2, #1
  4021c0:	4c25      	ldr	r4, [pc, #148]	; (402258 <setup_compass+0x284>)
  4021c2:	47a0      	blx	r4
  4021c4:	4603      	mov	r3, r0
  4021c6:	2b00      	cmp	r3, #0
  4021c8:	d002      	beq.n	4021d0 <setup_compass+0x1fc>
        return -1;
  4021ca:	f04f 33ff 	mov.w	r3, #4294967295
  4021ce:	e039      	b.n	402244 <setup_compass+0x270>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
  4021d0:	2381      	movs	r3, #129	; 0x81
  4021d2:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
  4021d4:	4b1f      	ldr	r3, [pc, #124]	; (402254 <setup_compass+0x280>)
  4021d6:	685b      	ldr	r3, [r3, #4]
  4021d8:	7818      	ldrb	r0, [r3, #0]
  4021da:	4b1e      	ldr	r3, [pc, #120]	; (402254 <setup_compass+0x280>)
  4021dc:	681b      	ldr	r3, [r3, #0]
  4021de:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
  4021e2:	1d3b      	adds	r3, r7, #4
  4021e4:	2201      	movs	r2, #1
  4021e6:	4c1c      	ldr	r4, [pc, #112]	; (402258 <setup_compass+0x284>)
  4021e8:	47a0      	blx	r4
  4021ea:	4603      	mov	r3, r0
  4021ec:	2b00      	cmp	r3, #0
  4021ee:	d002      	beq.n	4021f6 <setup_compass+0x222>
        return -1;
  4021f0:	f04f 33ff 	mov.w	r3, #4294967295
  4021f4:	e026      	b.n	402244 <setup_compass+0x270>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
  4021f6:	2311      	movs	r3, #17
  4021f8:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
  4021fa:	4b16      	ldr	r3, [pc, #88]	; (402254 <setup_compass+0x280>)
  4021fc:	685b      	ldr	r3, [r3, #4]
  4021fe:	7818      	ldrb	r0, [r3, #0]
  402200:	4b14      	ldr	r3, [pc, #80]	; (402254 <setup_compass+0x280>)
  402202:	681b      	ldr	r3, [r3, #0]
  402204:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
  402208:	1d3b      	adds	r3, r7, #4
  40220a:	2201      	movs	r2, #1
  40220c:	4c12      	ldr	r4, [pc, #72]	; (402258 <setup_compass+0x284>)
  40220e:	47a0      	blx	r4
  402210:	4603      	mov	r3, r0
  402212:	2b00      	cmp	r3, #0
  402214:	d002      	beq.n	40221c <setup_compass+0x248>
        return -1;
  402216:	f04f 33ff 	mov.w	r3, #4294967295
  40221a:	e013      	b.n	402244 <setup_compass+0x270>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
  40221c:	2303      	movs	r3, #3
  40221e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
  402220:	4b0c      	ldr	r3, [pc, #48]	; (402254 <setup_compass+0x280>)
  402222:	685b      	ldr	r3, [r3, #4]
  402224:	7818      	ldrb	r0, [r3, #0]
  402226:	4b0b      	ldr	r3, [pc, #44]	; (402254 <setup_compass+0x280>)
  402228:	681b      	ldr	r3, [r3, #0]
  40222a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
  40222e:	1d3b      	adds	r3, r7, #4
  402230:	2201      	movs	r2, #1
  402232:	4c09      	ldr	r4, [pc, #36]	; (402258 <setup_compass+0x284>)
  402234:	47a0      	blx	r4
  402236:	4603      	mov	r3, r0
  402238:	2b00      	cmp	r3, #0
  40223a:	d002      	beq.n	402242 <setup_compass+0x26e>
        return -1;
  40223c:	f04f 33ff 	mov.w	r3, #4294967295
  402240:	e000      	b.n	402244 <setup_compass+0x270>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
  402242:	2300      	movs	r3, #0
}
  402244:	4618      	mov	r0, r3
  402246:	3714      	adds	r7, #20
  402248:	46bd      	mov	sp, r7
  40224a:	bd90      	pop	{r4, r7, pc}
  40224c:	00401a95 	.word	0x00401a95
  402250:	00403b2d 	.word	0x00403b2d
  402254:	20000000 	.word	0x20000000
  402258:	00403a71 	.word	0x00403a71
  40225c:	00403a41 	.word	0x00403a41

00402260 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
  402260:	b598      	push	{r3, r4, r7, lr}
  402262:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
  402264:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402268:	23c8      	movs	r3, #200	; 0xc8
  40226a:	4904      	ldr	r1, [pc, #16]	; (40227c <dmp_load_motion_driver_firmware+0x1c>)
  40226c:	f640 30f6 	movw	r0, #3062	; 0xbf6
  402270:	4c03      	ldr	r4, [pc, #12]	; (402280 <dmp_load_motion_driver_firmware+0x20>)
  402272:	47a0      	blx	r4
  402274:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
  402276:	4618      	mov	r0, r3
  402278:	bd98      	pop	{r3, r4, r7, pc}
  40227a:	bf00      	nop
  40227c:	00406f94 	.word	0x00406f94
  402280:	00401e0d 	.word	0x00401e0d

00402284 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
  402284:	b580      	push	{r7, lr}
  402286:	b088      	sub	sp, #32
  402288:	af00      	add	r7, sp, #0
  40228a:	4603      	mov	r3, r0
  40228c:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
  40228e:	4a6d      	ldr	r2, [pc, #436]	; (402444 <dmp_set_orientation+0x1c0>)
  402290:	f107 0314 	add.w	r3, r7, #20
  402294:	8811      	ldrh	r1, [r2, #0]
  402296:	7892      	ldrb	r2, [r2, #2]
  402298:	8019      	strh	r1, [r3, #0]
  40229a:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
  40229c:	4a6a      	ldr	r2, [pc, #424]	; (402448 <dmp_set_orientation+0x1c4>)
  40229e:	f107 0310 	add.w	r3, r7, #16
  4022a2:	8811      	ldrh	r1, [r2, #0]
  4022a4:	7892      	ldrb	r2, [r2, #2]
  4022a6:	8019      	strh	r1, [r3, #0]
  4022a8:	709a      	strb	r2, [r3, #2]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
  4022aa:	4a68      	ldr	r2, [pc, #416]	; (40244c <dmp_set_orientation+0x1c8>)
  4022ac:	f107 030c 	add.w	r3, r7, #12
  4022b0:	8811      	ldrh	r1, [r2, #0]
  4022b2:	7892      	ldrb	r2, [r2, #2]
  4022b4:	8019      	strh	r1, [r3, #0]
  4022b6:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
  4022b8:	4a65      	ldr	r2, [pc, #404]	; (402450 <dmp_set_orientation+0x1cc>)
  4022ba:	f107 0308 	add.w	r3, r7, #8
  4022be:	8811      	ldrh	r1, [r2, #0]
  4022c0:	7892      	ldrb	r2, [r2, #2]
  4022c2:	8019      	strh	r1, [r3, #0]
  4022c4:	709a      	strb	r2, [r3, #2]

    gyro_regs[0] = gyro_axes[orient & 3];
  4022c6:	88fb      	ldrh	r3, [r7, #6]
  4022c8:	f003 0303 	and.w	r3, r3, #3
  4022cc:	f107 0220 	add.w	r2, r7, #32
  4022d0:	4413      	add	r3, r2
  4022d2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4022d6:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
  4022d8:	88fb      	ldrh	r3, [r7, #6]
  4022da:	08db      	lsrs	r3, r3, #3
  4022dc:	b29b      	uxth	r3, r3
  4022de:	f003 0303 	and.w	r3, r3, #3
  4022e2:	f107 0220 	add.w	r2, r7, #32
  4022e6:	4413      	add	r3, r2
  4022e8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4022ec:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
  4022ee:	88fb      	ldrh	r3, [r7, #6]
  4022f0:	099b      	lsrs	r3, r3, #6
  4022f2:	b29b      	uxth	r3, r3
  4022f4:	f003 0303 	and.w	r3, r3, #3
  4022f8:	f107 0220 	add.w	r2, r7, #32
  4022fc:	4413      	add	r3, r2
  4022fe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  402302:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
  402304:	88fb      	ldrh	r3, [r7, #6]
  402306:	f003 0303 	and.w	r3, r3, #3
  40230a:	f107 0220 	add.w	r2, r7, #32
  40230e:	4413      	add	r3, r2
  402310:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  402314:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
  402316:	88fb      	ldrh	r3, [r7, #6]
  402318:	08db      	lsrs	r3, r3, #3
  40231a:	b29b      	uxth	r3, r3
  40231c:	f003 0303 	and.w	r3, r3, #3
  402320:	f107 0220 	add.w	r2, r7, #32
  402324:	4413      	add	r3, r2
  402326:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  40232a:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
  40232c:	88fb      	ldrh	r3, [r7, #6]
  40232e:	099b      	lsrs	r3, r3, #6
  402330:	b29b      	uxth	r3, r3
  402332:	f003 0303 	and.w	r3, r3, #3
  402336:	f107 0220 	add.w	r2, r7, #32
  40233a:	4413      	add	r3, r2
  40233c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  402340:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
  402342:	f107 031c 	add.w	r3, r7, #28
  402346:	461a      	mov	r2, r3
  402348:	2103      	movs	r1, #3
  40234a:	f240 4026 	movw	r0, #1062	; 0x426
  40234e:	4b41      	ldr	r3, [pc, #260]	; (402454 <dmp_set_orientation+0x1d0>)
  402350:	4798      	blx	r3
  402352:	4603      	mov	r3, r0
  402354:	2b00      	cmp	r3, #0
  402356:	d002      	beq.n	40235e <dmp_set_orientation+0xda>
        return -1;
  402358:	f04f 33ff 	mov.w	r3, #4294967295
  40235c:	e06e      	b.n	40243c <dmp_set_orientation+0x1b8>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
  40235e:	f107 0318 	add.w	r3, r7, #24
  402362:	461a      	mov	r2, r3
  402364:	2103      	movs	r1, #3
  402366:	f240 402a 	movw	r0, #1066	; 0x42a
  40236a:	4b3a      	ldr	r3, [pc, #232]	; (402454 <dmp_set_orientation+0x1d0>)
  40236c:	4798      	blx	r3
  40236e:	4603      	mov	r3, r0
  402370:	2b00      	cmp	r3, #0
  402372:	d002      	beq.n	40237a <dmp_set_orientation+0xf6>
        return -1;
  402374:	f04f 33ff 	mov.w	r3, #4294967295
  402378:	e060      	b.n	40243c <dmp_set_orientation+0x1b8>

    memcpy(gyro_regs, gyro_sign, 3);
  40237a:	f107 031c 	add.w	r3, r7, #28
  40237e:	f107 020c 	add.w	r2, r7, #12
  402382:	6812      	ldr	r2, [r2, #0]
  402384:	4611      	mov	r1, r2
  402386:	8019      	strh	r1, [r3, #0]
  402388:	3302      	adds	r3, #2
  40238a:	0c12      	lsrs	r2, r2, #16
  40238c:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
  40238e:	f107 0318 	add.w	r3, r7, #24
  402392:	f107 0208 	add.w	r2, r7, #8
  402396:	6812      	ldr	r2, [r2, #0]
  402398:	4611      	mov	r1, r2
  40239a:	8019      	strh	r1, [r3, #0]
  40239c:	3302      	adds	r3, #2
  40239e:	0c12      	lsrs	r2, r2, #16
  4023a0:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
  4023a2:	88fb      	ldrh	r3, [r7, #6]
  4023a4:	f003 0304 	and.w	r3, r3, #4
  4023a8:	2b00      	cmp	r3, #0
  4023aa:	d009      	beq.n	4023c0 <dmp_set_orientation+0x13c>
        gyro_regs[0] |= 1;
  4023ac:	7f3b      	ldrb	r3, [r7, #28]
  4023ae:	f043 0301 	orr.w	r3, r3, #1
  4023b2:	b2db      	uxtb	r3, r3
  4023b4:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
  4023b6:	7e3b      	ldrb	r3, [r7, #24]
  4023b8:	f043 0301 	orr.w	r3, r3, #1
  4023bc:	b2db      	uxtb	r3, r3
  4023be:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
  4023c0:	88fb      	ldrh	r3, [r7, #6]
  4023c2:	f003 0320 	and.w	r3, r3, #32
  4023c6:	2b00      	cmp	r3, #0
  4023c8:	d009      	beq.n	4023de <dmp_set_orientation+0x15a>
        gyro_regs[1] |= 1;
  4023ca:	7f7b      	ldrb	r3, [r7, #29]
  4023cc:	f043 0301 	orr.w	r3, r3, #1
  4023d0:	b2db      	uxtb	r3, r3
  4023d2:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
  4023d4:	7e7b      	ldrb	r3, [r7, #25]
  4023d6:	f043 0301 	orr.w	r3, r3, #1
  4023da:	b2db      	uxtb	r3, r3
  4023dc:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
  4023de:	88fb      	ldrh	r3, [r7, #6]
  4023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	d009      	beq.n	4023fc <dmp_set_orientation+0x178>
        gyro_regs[2] |= 1;
  4023e8:	7fbb      	ldrb	r3, [r7, #30]
  4023ea:	f043 0301 	orr.w	r3, r3, #1
  4023ee:	b2db      	uxtb	r3, r3
  4023f0:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
  4023f2:	7ebb      	ldrb	r3, [r7, #26]
  4023f4:	f043 0301 	orr.w	r3, r3, #1
  4023f8:	b2db      	uxtb	r3, r3
  4023fa:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
  4023fc:	f107 031c 	add.w	r3, r7, #28
  402400:	461a      	mov	r2, r3
  402402:	2103      	movs	r1, #3
  402404:	f44f 6088 	mov.w	r0, #1088	; 0x440
  402408:	4b12      	ldr	r3, [pc, #72]	; (402454 <dmp_set_orientation+0x1d0>)
  40240a:	4798      	blx	r3
  40240c:	4603      	mov	r3, r0
  40240e:	2b00      	cmp	r3, #0
  402410:	d002      	beq.n	402418 <dmp_set_orientation+0x194>
        return -1;
  402412:	f04f 33ff 	mov.w	r3, #4294967295
  402416:	e011      	b.n	40243c <dmp_set_orientation+0x1b8>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
  402418:	f107 0318 	add.w	r3, r7, #24
  40241c:	461a      	mov	r2, r3
  40241e:	2103      	movs	r1, #3
  402420:	f240 4031 	movw	r0, #1073	; 0x431
  402424:	4b0b      	ldr	r3, [pc, #44]	; (402454 <dmp_set_orientation+0x1d0>)
  402426:	4798      	blx	r3
  402428:	4603      	mov	r3, r0
  40242a:	2b00      	cmp	r3, #0
  40242c:	d002      	beq.n	402434 <dmp_set_orientation+0x1b0>
        return -1;
  40242e:	f04f 33ff 	mov.w	r3, #4294967295
  402432:	e003      	b.n	40243c <dmp_set_orientation+0x1b8>
    dmp.orient = orient;
  402434:	4a08      	ldr	r2, [pc, #32]	; (402458 <dmp_set_orientation+0x1d4>)
  402436:	88fb      	ldrh	r3, [r7, #6]
  402438:	8113      	strh	r3, [r2, #8]
    return 0;
  40243a:	2300      	movs	r3, #0
}
  40243c:	4618      	mov	r0, r3
  40243e:	3720      	adds	r7, #32
  402440:	46bd      	mov	sp, r7
  402442:	bd80      	pop	{r7, pc}
  402444:	00407b8c 	.word	0x00407b8c
  402448:	00407b90 	.word	0x00407b90
  40244c:	00407b94 	.word	0x00407b94
  402450:	00407b98 	.word	0x00407b98
  402454:	00401cb9 	.word	0x00401cb9
  402458:	200004a4 	.word	0x200004a4

0040245c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
  40245c:	b580      	push	{r7, lr}
  40245e:	b088      	sub	sp, #32
  402460:	af00      	add	r7, sp, #0
  402462:	4603      	mov	r3, r0
  402464:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
  402466:	4a20      	ldr	r2, [pc, #128]	; (4024e8 <dmp_set_fifo_rate+0x8c>)
  402468:	f107 0310 	add.w	r3, r7, #16
  40246c:	6810      	ldr	r0, [r2, #0]
  40246e:	6851      	ldr	r1, [r2, #4]
  402470:	6892      	ldr	r2, [r2, #8]
  402472:	c307      	stmia	r3!, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
  402474:	88fb      	ldrh	r3, [r7, #6]
  402476:	2bc8      	cmp	r3, #200	; 0xc8
  402478:	d902      	bls.n	402480 <dmp_set_fifo_rate+0x24>
        return -1;
  40247a:	f04f 33ff 	mov.w	r3, #4294967295
  40247e:	e02e      	b.n	4024de <dmp_set_fifo_rate+0x82>
    div = DMP_SAMPLE_RATE / rate - 1;
  402480:	88fb      	ldrh	r3, [r7, #6]
  402482:	22c8      	movs	r2, #200	; 0xc8
  402484:	fb92 f3f3 	sdiv	r3, r2, r3
  402488:	b29b      	uxth	r3, r3
  40248a:	3b01      	subs	r3, #1
  40248c:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
  40248e:	8bfb      	ldrh	r3, [r7, #30]
  402490:	0a1b      	lsrs	r3, r3, #8
  402492:	b29b      	uxth	r3, r3
  402494:	b2db      	uxtb	r3, r3
  402496:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
  402498:	8bfb      	ldrh	r3, [r7, #30]
  40249a:	b2db      	uxtb	r3, r3
  40249c:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
  40249e:	f107 0308 	add.w	r3, r7, #8
  4024a2:	461a      	mov	r2, r3
  4024a4:	2102      	movs	r1, #2
  4024a6:	f240 2016 	movw	r0, #534	; 0x216
  4024aa:	4b10      	ldr	r3, [pc, #64]	; (4024ec <dmp_set_fifo_rate+0x90>)
  4024ac:	4798      	blx	r3
  4024ae:	4603      	mov	r3, r0
  4024b0:	2b00      	cmp	r3, #0
  4024b2:	d002      	beq.n	4024ba <dmp_set_fifo_rate+0x5e>
        return -1;
  4024b4:	f04f 33ff 	mov.w	r3, #4294967295
  4024b8:	e011      	b.n	4024de <dmp_set_fifo_rate+0x82>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
  4024ba:	f107 0310 	add.w	r3, r7, #16
  4024be:	461a      	mov	r2, r3
  4024c0:	210c      	movs	r1, #12
  4024c2:	f640 20c1 	movw	r0, #2753	; 0xac1
  4024c6:	4b09      	ldr	r3, [pc, #36]	; (4024ec <dmp_set_fifo_rate+0x90>)
  4024c8:	4798      	blx	r3
  4024ca:	4603      	mov	r3, r0
  4024cc:	2b00      	cmp	r3, #0
  4024ce:	d002      	beq.n	4024d6 <dmp_set_fifo_rate+0x7a>
        return -1;
  4024d0:	f04f 33ff 	mov.w	r3, #4294967295
  4024d4:	e003      	b.n	4024de <dmp_set_fifo_rate+0x82>

    dmp.fifo_rate = rate;
  4024d6:	4a06      	ldr	r2, [pc, #24]	; (4024f0 <dmp_set_fifo_rate+0x94>)
  4024d8:	88fb      	ldrh	r3, [r7, #6]
  4024da:	8193      	strh	r3, [r2, #12]
    return 0;
  4024dc:	2300      	movs	r3, #0
}
  4024de:	4618      	mov	r0, r3
  4024e0:	3720      	adds	r7, #32
  4024e2:	46bd      	mov	sp, r7
  4024e4:	bd80      	pop	{r7, pc}
  4024e6:	bf00      	nop
  4024e8:	00407b9c 	.word	0x00407b9c
  4024ec:	00401cb9 	.word	0x00401cb9
  4024f0:	200004a4 	.word	0x200004a4

004024f4 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
  4024f4:	b580      	push	{r7, lr}
  4024f6:	b086      	sub	sp, #24
  4024f8:	af00      	add	r7, sp, #0
  4024fa:	4603      	mov	r3, r0
  4024fc:	460a      	mov	r2, r1
  4024fe:	71fb      	strb	r3, [r7, #7]
  402500:	4613      	mov	r3, r2
  402502:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
  402504:	79fb      	ldrb	r3, [r7, #7]
  402506:	f003 0307 	and.w	r3, r3, #7
  40250a:	2b00      	cmp	r3, #0
  40250c:	d003      	beq.n	402516 <dmp_set_tap_thresh+0x22>
  40250e:	88bb      	ldrh	r3, [r7, #4]
  402510:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
  402514:	d902      	bls.n	40251c <dmp_set_tap_thresh+0x28>
        return -1;
  402516:	f04f 33ff 	mov.w	r3, #4294967295
  40251a:	e10f      	b.n	40273c <dmp_set_tap_thresh+0x248>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
  40251c:	88ba      	ldrh	r2, [r7, #4]
  40251e:	4b89      	ldr	r3, [pc, #548]	; (402744 <dmp_set_tap_thresh+0x250>)
  402520:	4610      	mov	r0, r2
  402522:	4798      	blx	r3
  402524:	4602      	mov	r2, r0
  402526:	4b88      	ldr	r3, [pc, #544]	; (402748 <dmp_set_tap_thresh+0x254>)
  402528:	4988      	ldr	r1, [pc, #544]	; (40274c <dmp_set_tap_thresh+0x258>)
  40252a:	4610      	mov	r0, r2
  40252c:	4798      	blx	r3
  40252e:	4603      	mov	r3, r0
  402530:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
  402532:	f107 030b 	add.w	r3, r7, #11
  402536:	4618      	mov	r0, r3
  402538:	4b85      	ldr	r3, [pc, #532]	; (402750 <dmp_set_tap_thresh+0x25c>)
  40253a:	4798      	blx	r3
    switch (accel_fsr) {
  40253c:	7afb      	ldrb	r3, [r7, #11]
  40253e:	3b02      	subs	r3, #2
  402540:	2b0e      	cmp	r3, #14
  402542:	f200 8081 	bhi.w	402648 <dmp_set_tap_thresh+0x154>
  402546:	a201      	add	r2, pc, #4	; (adr r2, 40254c <dmp_set_tap_thresh+0x58>)
  402548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40254c:	00402589 	.word	0x00402589
  402550:	00402649 	.word	0x00402649
  402554:	004025b9 	.word	0x004025b9
  402558:	00402649 	.word	0x00402649
  40255c:	00402649 	.word	0x00402649
  402560:	00402649 	.word	0x00402649
  402564:	004025e9 	.word	0x004025e9
  402568:	00402649 	.word	0x00402649
  40256c:	00402649 	.word	0x00402649
  402570:	00402649 	.word	0x00402649
  402574:	00402649 	.word	0x00402649
  402578:	00402649 	.word	0x00402649
  40257c:	00402649 	.word	0x00402649
  402580:	00402649 	.word	0x00402649
  402584:	00402619 	.word	0x00402619
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
  402588:	4b72      	ldr	r3, [pc, #456]	; (402754 <dmp_set_tap_thresh+0x260>)
  40258a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
  40258e:	6938      	ldr	r0, [r7, #16]
  402590:	4798      	blx	r3
  402592:	4603      	mov	r3, r0
  402594:	461a      	mov	r2, r3
  402596:	4b70      	ldr	r3, [pc, #448]	; (402758 <dmp_set_tap_thresh+0x264>)
  402598:	4610      	mov	r0, r2
  40259a:	4798      	blx	r3
  40259c:	4603      	mov	r3, r0
  40259e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
  4025a0:	4b6c      	ldr	r3, [pc, #432]	; (402754 <dmp_set_tap_thresh+0x260>)
  4025a2:	496e      	ldr	r1, [pc, #440]	; (40275c <dmp_set_tap_thresh+0x268>)
  4025a4:	6938      	ldr	r0, [r7, #16]
  4025a6:	4798      	blx	r3
  4025a8:	4603      	mov	r3, r0
  4025aa:	461a      	mov	r2, r3
  4025ac:	4b6a      	ldr	r3, [pc, #424]	; (402758 <dmp_set_tap_thresh+0x264>)
  4025ae:	4610      	mov	r0, r2
  4025b0:	4798      	blx	r3
  4025b2:	4603      	mov	r3, r0
  4025b4:	82bb      	strh	r3, [r7, #20]
        break;
  4025b6:	e04a      	b.n	40264e <dmp_set_tap_thresh+0x15a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
  4025b8:	4b66      	ldr	r3, [pc, #408]	; (402754 <dmp_set_tap_thresh+0x260>)
  4025ba:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
  4025be:	6938      	ldr	r0, [r7, #16]
  4025c0:	4798      	blx	r3
  4025c2:	4603      	mov	r3, r0
  4025c4:	461a      	mov	r2, r3
  4025c6:	4b64      	ldr	r3, [pc, #400]	; (402758 <dmp_set_tap_thresh+0x264>)
  4025c8:	4610      	mov	r0, r2
  4025ca:	4798      	blx	r3
  4025cc:	4603      	mov	r3, r0
  4025ce:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
  4025d0:	4b60      	ldr	r3, [pc, #384]	; (402754 <dmp_set_tap_thresh+0x260>)
  4025d2:	4963      	ldr	r1, [pc, #396]	; (402760 <dmp_set_tap_thresh+0x26c>)
  4025d4:	6938      	ldr	r0, [r7, #16]
  4025d6:	4798      	blx	r3
  4025d8:	4603      	mov	r3, r0
  4025da:	461a      	mov	r2, r3
  4025dc:	4b5e      	ldr	r3, [pc, #376]	; (402758 <dmp_set_tap_thresh+0x264>)
  4025de:	4610      	mov	r0, r2
  4025e0:	4798      	blx	r3
  4025e2:	4603      	mov	r3, r0
  4025e4:	82bb      	strh	r3, [r7, #20]
        break;
  4025e6:	e032      	b.n	40264e <dmp_set_tap_thresh+0x15a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
  4025e8:	4b5a      	ldr	r3, [pc, #360]	; (402754 <dmp_set_tap_thresh+0x260>)
  4025ea:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
  4025ee:	6938      	ldr	r0, [r7, #16]
  4025f0:	4798      	blx	r3
  4025f2:	4603      	mov	r3, r0
  4025f4:	461a      	mov	r2, r3
  4025f6:	4b58      	ldr	r3, [pc, #352]	; (402758 <dmp_set_tap_thresh+0x264>)
  4025f8:	4610      	mov	r0, r2
  4025fa:	4798      	blx	r3
  4025fc:	4603      	mov	r3, r0
  4025fe:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
  402600:	4b54      	ldr	r3, [pc, #336]	; (402754 <dmp_set_tap_thresh+0x260>)
  402602:	4958      	ldr	r1, [pc, #352]	; (402764 <dmp_set_tap_thresh+0x270>)
  402604:	6938      	ldr	r0, [r7, #16]
  402606:	4798      	blx	r3
  402608:	4603      	mov	r3, r0
  40260a:	461a      	mov	r2, r3
  40260c:	4b52      	ldr	r3, [pc, #328]	; (402758 <dmp_set_tap_thresh+0x264>)
  40260e:	4610      	mov	r0, r2
  402610:	4798      	blx	r3
  402612:	4603      	mov	r3, r0
  402614:	82bb      	strh	r3, [r7, #20]
        break;
  402616:	e01a      	b.n	40264e <dmp_set_tap_thresh+0x15a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
  402618:	4b4e      	ldr	r3, [pc, #312]	; (402754 <dmp_set_tap_thresh+0x260>)
  40261a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
  40261e:	6938      	ldr	r0, [r7, #16]
  402620:	4798      	blx	r3
  402622:	4603      	mov	r3, r0
  402624:	461a      	mov	r2, r3
  402626:	4b4c      	ldr	r3, [pc, #304]	; (402758 <dmp_set_tap_thresh+0x264>)
  402628:	4610      	mov	r0, r2
  40262a:	4798      	blx	r3
  40262c:	4603      	mov	r3, r0
  40262e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
  402630:	4b48      	ldr	r3, [pc, #288]	; (402754 <dmp_set_tap_thresh+0x260>)
  402632:	494d      	ldr	r1, [pc, #308]	; (402768 <dmp_set_tap_thresh+0x274>)
  402634:	6938      	ldr	r0, [r7, #16]
  402636:	4798      	blx	r3
  402638:	4603      	mov	r3, r0
  40263a:	461a      	mov	r2, r3
  40263c:	4b46      	ldr	r3, [pc, #280]	; (402758 <dmp_set_tap_thresh+0x264>)
  40263e:	4610      	mov	r0, r2
  402640:	4798      	blx	r3
  402642:	4603      	mov	r3, r0
  402644:	82bb      	strh	r3, [r7, #20]
        break;
  402646:	e002      	b.n	40264e <dmp_set_tap_thresh+0x15a>
    default:
        return -1;
  402648:	f04f 33ff 	mov.w	r3, #4294967295
  40264c:	e076      	b.n	40273c <dmp_set_tap_thresh+0x248>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
  40264e:	8afb      	ldrh	r3, [r7, #22]
  402650:	0a1b      	lsrs	r3, r3, #8
  402652:	b29b      	uxth	r3, r3
  402654:	b2db      	uxtb	r3, r3
  402656:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
  402658:	8afb      	ldrh	r3, [r7, #22]
  40265a:	b2db      	uxtb	r3, r3
  40265c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
  40265e:	8abb      	ldrh	r3, [r7, #20]
  402660:	0a1b      	lsrs	r3, r3, #8
  402662:	b29b      	uxth	r3, r3
  402664:	b2db      	uxtb	r3, r3
  402666:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
  402668:	8abb      	ldrh	r3, [r7, #20]
  40266a:	b2db      	uxtb	r3, r3
  40266c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
  40266e:	79fb      	ldrb	r3, [r7, #7]
  402670:	f003 0301 	and.w	r3, r3, #1
  402674:	2b00      	cmp	r3, #0
  402676:	d01c      	beq.n	4026b2 <dmp_set_tap_thresh+0x1be>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
  402678:	f107 030c 	add.w	r3, r7, #12
  40267c:	461a      	mov	r2, r3
  40267e:	2102      	movs	r1, #2
  402680:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
  402684:	4b39      	ldr	r3, [pc, #228]	; (40276c <dmp_set_tap_thresh+0x278>)
  402686:	4798      	blx	r3
  402688:	4603      	mov	r3, r0
  40268a:	2b00      	cmp	r3, #0
  40268c:	d002      	beq.n	402694 <dmp_set_tap_thresh+0x1a0>
            return -1;
  40268e:	f04f 33ff 	mov.w	r3, #4294967295
  402692:	e053      	b.n	40273c <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
  402694:	f107 030c 	add.w	r3, r7, #12
  402698:	3302      	adds	r3, #2
  40269a:	461a      	mov	r2, r3
  40269c:	2102      	movs	r1, #2
  40269e:	f44f 7092 	mov.w	r0, #292	; 0x124
  4026a2:	4b32      	ldr	r3, [pc, #200]	; (40276c <dmp_set_tap_thresh+0x278>)
  4026a4:	4798      	blx	r3
  4026a6:	4603      	mov	r3, r0
  4026a8:	2b00      	cmp	r3, #0
  4026aa:	d002      	beq.n	4026b2 <dmp_set_tap_thresh+0x1be>
            return -1;
  4026ac:	f04f 33ff 	mov.w	r3, #4294967295
  4026b0:	e044      	b.n	40273c <dmp_set_tap_thresh+0x248>
    }
    if (axis & TAP_Y) {
  4026b2:	79fb      	ldrb	r3, [r7, #7]
  4026b4:	f003 0302 	and.w	r3, r3, #2
  4026b8:	2b00      	cmp	r3, #0
  4026ba:	d01c      	beq.n	4026f6 <dmp_set_tap_thresh+0x202>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
  4026bc:	f107 030c 	add.w	r3, r7, #12
  4026c0:	461a      	mov	r2, r3
  4026c2:	2102      	movs	r1, #2
  4026c4:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
  4026c8:	4b28      	ldr	r3, [pc, #160]	; (40276c <dmp_set_tap_thresh+0x278>)
  4026ca:	4798      	blx	r3
  4026cc:	4603      	mov	r3, r0
  4026ce:	2b00      	cmp	r3, #0
  4026d0:	d002      	beq.n	4026d8 <dmp_set_tap_thresh+0x1e4>
            return -1;
  4026d2:	f04f 33ff 	mov.w	r3, #4294967295
  4026d6:	e031      	b.n	40273c <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
  4026d8:	f107 030c 	add.w	r3, r7, #12
  4026dc:	3302      	adds	r3, #2
  4026de:	461a      	mov	r2, r3
  4026e0:	2102      	movs	r1, #2
  4026e2:	f44f 7094 	mov.w	r0, #296	; 0x128
  4026e6:	4b21      	ldr	r3, [pc, #132]	; (40276c <dmp_set_tap_thresh+0x278>)
  4026e8:	4798      	blx	r3
  4026ea:	4603      	mov	r3, r0
  4026ec:	2b00      	cmp	r3, #0
  4026ee:	d002      	beq.n	4026f6 <dmp_set_tap_thresh+0x202>
            return -1;
  4026f0:	f04f 33ff 	mov.w	r3, #4294967295
  4026f4:	e022      	b.n	40273c <dmp_set_tap_thresh+0x248>
    }
    if (axis & TAP_Z) {
  4026f6:	79fb      	ldrb	r3, [r7, #7]
  4026f8:	f003 0304 	and.w	r3, r3, #4
  4026fc:	2b00      	cmp	r3, #0
  4026fe:	d01c      	beq.n	40273a <dmp_set_tap_thresh+0x246>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
  402700:	f107 030c 	add.w	r3, r7, #12
  402704:	461a      	mov	r2, r3
  402706:	2102      	movs	r1, #2
  402708:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
  40270c:	4b17      	ldr	r3, [pc, #92]	; (40276c <dmp_set_tap_thresh+0x278>)
  40270e:	4798      	blx	r3
  402710:	4603      	mov	r3, r0
  402712:	2b00      	cmp	r3, #0
  402714:	d002      	beq.n	40271c <dmp_set_tap_thresh+0x228>
            return -1;
  402716:	f04f 33ff 	mov.w	r3, #4294967295
  40271a:	e00f      	b.n	40273c <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
  40271c:	f107 030c 	add.w	r3, r7, #12
  402720:	3302      	adds	r3, #2
  402722:	461a      	mov	r2, r3
  402724:	2102      	movs	r1, #2
  402726:	f44f 7096 	mov.w	r0, #300	; 0x12c
  40272a:	4b10      	ldr	r3, [pc, #64]	; (40276c <dmp_set_tap_thresh+0x278>)
  40272c:	4798      	blx	r3
  40272e:	4603      	mov	r3, r0
  402730:	2b00      	cmp	r3, #0
  402732:	d002      	beq.n	40273a <dmp_set_tap_thresh+0x246>
            return -1;
  402734:	f04f 33ff 	mov.w	r3, #4294967295
  402738:	e000      	b.n	40273c <dmp_set_tap_thresh+0x248>
    }
    return 0;
  40273a:	2300      	movs	r3, #0
}
  40273c:	4618      	mov	r0, r3
  40273e:	3718      	adds	r7, #24
  402740:	46bd      	mov	sp, r7
  402742:	bd80      	pop	{r7, pc}
  402744:	0040653d 	.word	0x0040653d
  402748:	00406755 	.word	0x00406755
  40274c:	43480000 	.word	0x43480000
  402750:	00401491 	.word	0x00401491
  402754:	004065ed 	.word	0x004065ed
  402758:	00406979 	.word	0x00406979
  40275c:	46400000 	.word	0x46400000
  402760:	45c00000 	.word	0x45c00000
  402764:	45400000 	.word	0x45400000
  402768:	44c00000 	.word	0x44c00000
  40276c:	00401cb9 	.word	0x00401cb9

00402770 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
  402770:	b580      	push	{r7, lr}
  402772:	b084      	sub	sp, #16
  402774:	af00      	add	r7, sp, #0
  402776:	4603      	mov	r3, r0
  402778:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
  40277a:	2300      	movs	r3, #0
  40277c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
  40277e:	79fb      	ldrb	r3, [r7, #7]
  402780:	f003 0301 	and.w	r3, r3, #1
  402784:	2b00      	cmp	r3, #0
  402786:	d004      	beq.n	402792 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
  402788:	7bfb      	ldrb	r3, [r7, #15]
  40278a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  40278e:	b2db      	uxtb	r3, r3
  402790:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
  402792:	79fb      	ldrb	r3, [r7, #7]
  402794:	f003 0302 	and.w	r3, r3, #2
  402798:	2b00      	cmp	r3, #0
  40279a:	d004      	beq.n	4027a6 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
  40279c:	7bfb      	ldrb	r3, [r7, #15]
  40279e:	f043 030c 	orr.w	r3, r3, #12
  4027a2:	b2db      	uxtb	r3, r3
  4027a4:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
  4027a6:	79fb      	ldrb	r3, [r7, #7]
  4027a8:	f003 0304 	and.w	r3, r3, #4
  4027ac:	2b00      	cmp	r3, #0
  4027ae:	d004      	beq.n	4027ba <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
  4027b0:	7bfb      	ldrb	r3, [r7, #15]
  4027b2:	f043 0303 	orr.w	r3, r3, #3
  4027b6:	b2db      	uxtb	r3, r3
  4027b8:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
  4027ba:	f107 030f 	add.w	r3, r7, #15
  4027be:	461a      	mov	r2, r3
  4027c0:	2101      	movs	r1, #1
  4027c2:	f44f 70a4 	mov.w	r0, #328	; 0x148
  4027c6:	4b03      	ldr	r3, [pc, #12]	; (4027d4 <dmp_set_tap_axes+0x64>)
  4027c8:	4798      	blx	r3
  4027ca:	4603      	mov	r3, r0
}
  4027cc:	4618      	mov	r0, r3
  4027ce:	3710      	adds	r7, #16
  4027d0:	46bd      	mov	sp, r7
  4027d2:	bd80      	pop	{r7, pc}
  4027d4:	00401cb9 	.word	0x00401cb9

004027d8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
  4027d8:	b580      	push	{r7, lr}
  4027da:	b084      	sub	sp, #16
  4027dc:	af00      	add	r7, sp, #0
  4027de:	4603      	mov	r3, r0
  4027e0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
  4027e2:	79fb      	ldrb	r3, [r7, #7]
  4027e4:	2b00      	cmp	r3, #0
  4027e6:	d102      	bne.n	4027ee <dmp_set_tap_count+0x16>
        min_taps = 1;
  4027e8:	2301      	movs	r3, #1
  4027ea:	71fb      	strb	r3, [r7, #7]
  4027ec:	e004      	b.n	4027f8 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
  4027ee:	79fb      	ldrb	r3, [r7, #7]
  4027f0:	2b04      	cmp	r3, #4
  4027f2:	d901      	bls.n	4027f8 <dmp_set_tap_count+0x20>
        min_taps = 4;
  4027f4:	2304      	movs	r3, #4
  4027f6:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
  4027f8:	79fb      	ldrb	r3, [r7, #7]
  4027fa:	3b01      	subs	r3, #1
  4027fc:	b2db      	uxtb	r3, r3
  4027fe:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
  402800:	f107 030f 	add.w	r3, r7, #15
  402804:	461a      	mov	r2, r3
  402806:	2101      	movs	r1, #1
  402808:	f240 104f 	movw	r0, #335	; 0x14f
  40280c:	4b03      	ldr	r3, [pc, #12]	; (40281c <dmp_set_tap_count+0x44>)
  40280e:	4798      	blx	r3
  402810:	4603      	mov	r3, r0
}
  402812:	4618      	mov	r0, r3
  402814:	3710      	adds	r7, #16
  402816:	46bd      	mov	sp, r7
  402818:	bd80      	pop	{r7, pc}
  40281a:	bf00      	nop
  40281c:	00401cb9 	.word	0x00401cb9

00402820 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
  402820:	b580      	push	{r7, lr}
  402822:	b084      	sub	sp, #16
  402824:	af00      	add	r7, sp, #0
  402826:	4603      	mov	r3, r0
  402828:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
  40282a:	88fb      	ldrh	r3, [r7, #6]
  40282c:	4a0c      	ldr	r2, [pc, #48]	; (402860 <dmp_set_tap_time+0x40>)
  40282e:	fba2 2303 	umull	r2, r3, r2, r3
  402832:	089b      	lsrs	r3, r3, #2
  402834:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
  402836:	89fb      	ldrh	r3, [r7, #14]
  402838:	0a1b      	lsrs	r3, r3, #8
  40283a:	b29b      	uxth	r3, r3
  40283c:	b2db      	uxtb	r3, r3
  40283e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
  402840:	89fb      	ldrh	r3, [r7, #14]
  402842:	b2db      	uxtb	r3, r3
  402844:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
  402846:	f107 030c 	add.w	r3, r7, #12
  40284a:	461a      	mov	r2, r3
  40284c:	2102      	movs	r1, #2
  40284e:	f44f 70ef 	mov.w	r0, #478	; 0x1de
  402852:	4b04      	ldr	r3, [pc, #16]	; (402864 <dmp_set_tap_time+0x44>)
  402854:	4798      	blx	r3
  402856:	4603      	mov	r3, r0
}
  402858:	4618      	mov	r0, r3
  40285a:	3710      	adds	r7, #16
  40285c:	46bd      	mov	sp, r7
  40285e:	bd80      	pop	{r7, pc}
  402860:	cccccccd 	.word	0xcccccccd
  402864:	00401cb9 	.word	0x00401cb9

00402868 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
  402868:	b580      	push	{r7, lr}
  40286a:	b084      	sub	sp, #16
  40286c:	af00      	add	r7, sp, #0
  40286e:	4603      	mov	r3, r0
  402870:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
  402872:	88fb      	ldrh	r3, [r7, #6]
  402874:	4a0c      	ldr	r2, [pc, #48]	; (4028a8 <dmp_set_tap_time_multi+0x40>)
  402876:	fba2 2303 	umull	r2, r3, r2, r3
  40287a:	089b      	lsrs	r3, r3, #2
  40287c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
  40287e:	89fb      	ldrh	r3, [r7, #14]
  402880:	0a1b      	lsrs	r3, r3, #8
  402882:	b29b      	uxth	r3, r3
  402884:	b2db      	uxtb	r3, r3
  402886:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
  402888:	89fb      	ldrh	r3, [r7, #14]
  40288a:	b2db      	uxtb	r3, r3
  40288c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
  40288e:	f107 030c 	add.w	r3, r7, #12
  402892:	461a      	mov	r2, r3
  402894:	2102      	movs	r1, #2
  402896:	f44f 70ed 	mov.w	r0, #474	; 0x1da
  40289a:	4b04      	ldr	r3, [pc, #16]	; (4028ac <dmp_set_tap_time_multi+0x44>)
  40289c:	4798      	blx	r3
  40289e:	4603      	mov	r3, r0
}
  4028a0:	4618      	mov	r0, r3
  4028a2:	3710      	adds	r7, #16
  4028a4:	46bd      	mov	sp, r7
  4028a6:	bd80      	pop	{r7, pc}
  4028a8:	cccccccd 	.word	0xcccccccd
  4028ac:	00401cb9 	.word	0x00401cb9

004028b0 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
  4028b0:	b580      	push	{r7, lr}
  4028b2:	b084      	sub	sp, #16
  4028b4:	af00      	add	r7, sp, #0
  4028b6:	6078      	str	r0, [r7, #4]
  4028b8:	460b      	mov	r3, r1
  4028ba:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
  4028bc:	687b      	ldr	r3, [r7, #4]
  4028be:	4a13      	ldr	r2, [pc, #76]	; (40290c <dmp_set_shake_reject_thresh+0x5c>)
  4028c0:	fb82 1203 	smull	r1, r2, r2, r3
  4028c4:	1192      	asrs	r2, r2, #6
  4028c6:	17db      	asrs	r3, r3, #31
  4028c8:	1ad3      	subs	r3, r2, r3
  4028ca:	887a      	ldrh	r2, [r7, #2]
  4028cc:	fb02 f303 	mul.w	r3, r2, r3
  4028d0:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
  4028d2:	68fb      	ldr	r3, [r7, #12]
  4028d4:	161b      	asrs	r3, r3, #24
  4028d6:	b2db      	uxtb	r3, r3
  4028d8:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
  4028da:	68fb      	ldr	r3, [r7, #12]
  4028dc:	141b      	asrs	r3, r3, #16
  4028de:	b2db      	uxtb	r3, r3
  4028e0:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
  4028e2:	68fb      	ldr	r3, [r7, #12]
  4028e4:	121b      	asrs	r3, r3, #8
  4028e6:	b2db      	uxtb	r3, r3
  4028e8:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
  4028ea:	68fb      	ldr	r3, [r7, #12]
  4028ec:	b2db      	uxtb	r3, r3
  4028ee:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
  4028f0:	f107 0308 	add.w	r3, r7, #8
  4028f4:	461a      	mov	r2, r3
  4028f6:	2104      	movs	r1, #4
  4028f8:	f44f 70ae 	mov.w	r0, #348	; 0x15c
  4028fc:	4b04      	ldr	r3, [pc, #16]	; (402910 <dmp_set_shake_reject_thresh+0x60>)
  4028fe:	4798      	blx	r3
  402900:	4603      	mov	r3, r0
}
  402902:	4618      	mov	r0, r3
  402904:	3710      	adds	r7, #16
  402906:	46bd      	mov	sp, r7
  402908:	bd80      	pop	{r7, pc}
  40290a:	bf00      	nop
  40290c:	10624dd3 	.word	0x10624dd3
  402910:	00401cb9 	.word	0x00401cb9

00402914 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
  402914:	b580      	push	{r7, lr}
  402916:	b084      	sub	sp, #16
  402918:	af00      	add	r7, sp, #0
  40291a:	4603      	mov	r3, r0
  40291c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
  40291e:	88fb      	ldrh	r3, [r7, #6]
  402920:	4a0c      	ldr	r2, [pc, #48]	; (402954 <dmp_set_shake_reject_time+0x40>)
  402922:	fba2 2303 	umull	r2, r3, r2, r3
  402926:	089b      	lsrs	r3, r3, #2
  402928:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
  40292a:	88fb      	ldrh	r3, [r7, #6]
  40292c:	0a1b      	lsrs	r3, r3, #8
  40292e:	b29b      	uxth	r3, r3
  402930:	b2db      	uxtb	r3, r3
  402932:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
  402934:	88fb      	ldrh	r3, [r7, #6]
  402936:	b2db      	uxtb	r3, r3
  402938:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
  40293a:	f107 030c 	add.w	r3, r7, #12
  40293e:	461a      	mov	r2, r3
  402940:	2102      	movs	r1, #2
  402942:	f44f 70ad 	mov.w	r0, #346	; 0x15a
  402946:	4b04      	ldr	r3, [pc, #16]	; (402958 <dmp_set_shake_reject_time+0x44>)
  402948:	4798      	blx	r3
  40294a:	4603      	mov	r3, r0
}
  40294c:	4618      	mov	r0, r3
  40294e:	3710      	adds	r7, #16
  402950:	46bd      	mov	sp, r7
  402952:	bd80      	pop	{r7, pc}
  402954:	cccccccd 	.word	0xcccccccd
  402958:	00401cb9 	.word	0x00401cb9

0040295c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
  40295c:	b580      	push	{r7, lr}
  40295e:	b084      	sub	sp, #16
  402960:	af00      	add	r7, sp, #0
  402962:	4603      	mov	r3, r0
  402964:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
  402966:	88fb      	ldrh	r3, [r7, #6]
  402968:	4a0c      	ldr	r2, [pc, #48]	; (40299c <dmp_set_shake_reject_timeout+0x40>)
  40296a:	fba2 2303 	umull	r2, r3, r2, r3
  40296e:	089b      	lsrs	r3, r3, #2
  402970:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
  402972:	88fb      	ldrh	r3, [r7, #6]
  402974:	0a1b      	lsrs	r3, r3, #8
  402976:	b29b      	uxth	r3, r3
  402978:	b2db      	uxtb	r3, r3
  40297a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
  40297c:	88fb      	ldrh	r3, [r7, #6]
  40297e:	b2db      	uxtb	r3, r3
  402980:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
  402982:	f107 030c 	add.w	r3, r7, #12
  402986:	461a      	mov	r2, r3
  402988:	2102      	movs	r1, #2
  40298a:	f44f 70ac 	mov.w	r0, #344	; 0x158
  40298e:	4b04      	ldr	r3, [pc, #16]	; (4029a0 <dmp_set_shake_reject_timeout+0x44>)
  402990:	4798      	blx	r3
  402992:	4603      	mov	r3, r0
}
  402994:	4618      	mov	r0, r3
  402996:	3710      	adds	r7, #16
  402998:	46bd      	mov	sp, r7
  40299a:	bd80      	pop	{r7, pc}
  40299c:	cccccccd 	.word	0xcccccccd
  4029a0:	00401cb9 	.word	0x00401cb9

004029a4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
  4029a4:	b580      	push	{r7, lr}
  4029a6:	b086      	sub	sp, #24
  4029a8:	af00      	add	r7, sp, #0
  4029aa:	4603      	mov	r3, r0
  4029ac:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
  4029ae:	2302      	movs	r3, #2
  4029b0:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
  4029b2:	23ca      	movs	r3, #202	; 0xca
  4029b4:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
  4029b6:	23e3      	movs	r3, #227	; 0xe3
  4029b8:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
  4029ba:	2309      	movs	r3, #9
  4029bc:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
  4029be:	f107 030c 	add.w	r3, r7, #12
  4029c2:	461a      	mov	r2, r3
  4029c4:	2104      	movs	r1, #4
  4029c6:	2068      	movs	r0, #104	; 0x68
  4029c8:	4b88      	ldr	r3, [pc, #544]	; (402bec <dmp_enable_feature+0x248>)
  4029ca:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
  4029cc:	23a3      	movs	r3, #163	; 0xa3
  4029ce:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
  4029d0:	88fb      	ldrh	r3, [r7, #6]
  4029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4029d6:	2b00      	cmp	r3, #0
  4029d8:	d006      	beq.n	4029e8 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
  4029da:	23c0      	movs	r3, #192	; 0xc0
  4029dc:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
  4029de:	23c8      	movs	r3, #200	; 0xc8
  4029e0:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
  4029e2:	23c2      	movs	r3, #194	; 0xc2
  4029e4:	73fb      	strb	r3, [r7, #15]
  4029e6:	e005      	b.n	4029f4 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
  4029e8:	23a3      	movs	r3, #163	; 0xa3
  4029ea:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
  4029ec:	23a3      	movs	r3, #163	; 0xa3
  4029ee:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
  4029f0:	23a3      	movs	r3, #163	; 0xa3
  4029f2:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
  4029f4:	88fb      	ldrh	r3, [r7, #6]
  4029f6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  4029fa:	2b00      	cmp	r3, #0
  4029fc:	d006      	beq.n	402a0c <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
  4029fe:	23c4      	movs	r3, #196	; 0xc4
  402a00:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
  402a02:	23cc      	movs	r3, #204	; 0xcc
  402a04:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
  402a06:	23c6      	movs	r3, #198	; 0xc6
  402a08:	74bb      	strb	r3, [r7, #18]
  402a0a:	e005      	b.n	402a18 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
  402a0c:	23a3      	movs	r3, #163	; 0xa3
  402a0e:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
  402a10:	23a3      	movs	r3, #163	; 0xa3
  402a12:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
  402a14:	23a3      	movs	r3, #163	; 0xa3
  402a16:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
  402a18:	23a3      	movs	r3, #163	; 0xa3
  402a1a:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
  402a1c:	23a3      	movs	r3, #163	; 0xa3
  402a1e:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
  402a20:	23a3      	movs	r3, #163	; 0xa3
  402a22:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
  402a24:	f107 030c 	add.w	r3, r7, #12
  402a28:	461a      	mov	r2, r3
  402a2a:	210a      	movs	r1, #10
  402a2c:	f640 20a7 	movw	r0, #2727	; 0xaa7
  402a30:	4b6e      	ldr	r3, [pc, #440]	; (402bec <dmp_enable_feature+0x248>)
  402a32:	4798      	blx	r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
  402a34:	88fb      	ldrh	r3, [r7, #6]
  402a36:	f003 0303 	and.w	r3, r3, #3
  402a3a:	2b00      	cmp	r3, #0
  402a3c:	d002      	beq.n	402a44 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
  402a3e:	2320      	movs	r3, #32
  402a40:	733b      	strb	r3, [r7, #12]
  402a42:	e001      	b.n	402a48 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
  402a44:	23d8      	movs	r3, #216	; 0xd8
  402a46:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
  402a48:	f107 030c 	add.w	r3, r7, #12
  402a4c:	461a      	mov	r2, r3
  402a4e:	2101      	movs	r1, #1
  402a50:	f640 20b6 	movw	r0, #2742	; 0xab6
  402a54:	4b65      	ldr	r3, [pc, #404]	; (402bec <dmp_enable_feature+0x248>)
  402a56:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
  402a58:	88fb      	ldrh	r3, [r7, #6]
  402a5a:	f003 0320 	and.w	r3, r3, #32
  402a5e:	2b00      	cmp	r3, #0
  402a60:	d003      	beq.n	402a6a <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
  402a62:	2001      	movs	r0, #1
  402a64:	4b62      	ldr	r3, [pc, #392]	; (402bf0 <dmp_enable_feature+0x24c>)
  402a66:	4798      	blx	r3
  402a68:	e002      	b.n	402a70 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
  402a6a:	2000      	movs	r0, #0
  402a6c:	4b60      	ldr	r3, [pc, #384]	; (402bf0 <dmp_enable_feature+0x24c>)
  402a6e:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
  402a70:	88fb      	ldrh	r3, [r7, #6]
  402a72:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402a76:	2b00      	cmp	r3, #0
  402a78:	d01d      	beq.n	402ab6 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
  402a7a:	88fb      	ldrh	r3, [r7, #6]
  402a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402a80:	2b00      	cmp	r3, #0
  402a82:	d008      	beq.n	402a96 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
  402a84:	23b2      	movs	r3, #178	; 0xb2
  402a86:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
  402a88:	238b      	movs	r3, #139	; 0x8b
  402a8a:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
  402a8c:	23b6      	movs	r3, #182	; 0xb6
  402a8e:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
  402a90:	239b      	movs	r3, #155	; 0x9b
  402a92:	73fb      	strb	r3, [r7, #15]
  402a94:	e007      	b.n	402aa6 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
  402a96:	23b0      	movs	r3, #176	; 0xb0
  402a98:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
  402a9a:	2380      	movs	r3, #128	; 0x80
  402a9c:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
  402a9e:	23b4      	movs	r3, #180	; 0xb4
  402aa0:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
  402aa2:	2390      	movs	r3, #144	; 0x90
  402aa4:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
  402aa6:	f107 030c 	add.w	r3, r7, #12
  402aaa:	461a      	mov	r2, r3
  402aac:	2104      	movs	r1, #4
  402aae:	f640 20a2 	movw	r0, #2722	; 0xaa2
  402ab2:	4b4e      	ldr	r3, [pc, #312]	; (402bec <dmp_enable_feature+0x248>)
  402ab4:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
  402ab6:	88fb      	ldrh	r3, [r7, #6]
  402ab8:	f003 0301 	and.w	r3, r3, #1
  402abc:	2b00      	cmp	r3, #0
  402abe:	d025      	beq.n	402b0c <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
  402ac0:	23f8      	movs	r3, #248	; 0xf8
  402ac2:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
  402ac4:	f107 030c 	add.w	r3, r7, #12
  402ac8:	461a      	mov	r2, r3
  402aca:	2101      	movs	r1, #1
  402acc:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
  402ad0:	4b46      	ldr	r3, [pc, #280]	; (402bec <dmp_enable_feature+0x248>)
  402ad2:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
  402ad4:	21fa      	movs	r1, #250	; 0xfa
  402ad6:	2007      	movs	r0, #7
  402ad8:	4b46      	ldr	r3, [pc, #280]	; (402bf4 <dmp_enable_feature+0x250>)
  402ada:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
  402adc:	2007      	movs	r0, #7
  402ade:	4b46      	ldr	r3, [pc, #280]	; (402bf8 <dmp_enable_feature+0x254>)
  402ae0:	4798      	blx	r3
        dmp_set_tap_count(1);
  402ae2:	2001      	movs	r0, #1
  402ae4:	4b45      	ldr	r3, [pc, #276]	; (402bfc <dmp_enable_feature+0x258>)
  402ae6:	4798      	blx	r3
        dmp_set_tap_time(100);
  402ae8:	2064      	movs	r0, #100	; 0x64
  402aea:	4b45      	ldr	r3, [pc, #276]	; (402c00 <dmp_enable_feature+0x25c>)
  402aec:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
  402aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402af2:	4b44      	ldr	r3, [pc, #272]	; (402c04 <dmp_enable_feature+0x260>)
  402af4:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
  402af6:	21c8      	movs	r1, #200	; 0xc8
  402af8:	4843      	ldr	r0, [pc, #268]	; (402c08 <dmp_enable_feature+0x264>)
  402afa:	4b44      	ldr	r3, [pc, #272]	; (402c0c <dmp_enable_feature+0x268>)
  402afc:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
  402afe:	2028      	movs	r0, #40	; 0x28
  402b00:	4b43      	ldr	r3, [pc, #268]	; (402c10 <dmp_enable_feature+0x26c>)
  402b02:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
  402b04:	200a      	movs	r0, #10
  402b06:	4b43      	ldr	r3, [pc, #268]	; (402c14 <dmp_enable_feature+0x270>)
  402b08:	4798      	blx	r3
  402b0a:	e009      	b.n	402b20 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
  402b0c:	23d8      	movs	r3, #216	; 0xd8
  402b0e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
  402b10:	f107 030c 	add.w	r3, r7, #12
  402b14:	461a      	mov	r2, r3
  402b16:	2101      	movs	r1, #1
  402b18:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
  402b1c:	4b33      	ldr	r3, [pc, #204]	; (402bec <dmp_enable_feature+0x248>)
  402b1e:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
  402b20:	88fb      	ldrh	r3, [r7, #6]
  402b22:	f003 0302 	and.w	r3, r3, #2
  402b26:	2b00      	cmp	r3, #0
  402b28:	d002      	beq.n	402b30 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
  402b2a:	23d9      	movs	r3, #217	; 0xd9
  402b2c:	733b      	strb	r3, [r7, #12]
  402b2e:	e001      	b.n	402b34 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
  402b30:	23d8      	movs	r3, #216	; 0xd8
  402b32:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
  402b34:	f107 030c 	add.w	r3, r7, #12
  402b38:	461a      	mov	r2, r3
  402b3a:	2101      	movs	r1, #1
  402b3c:	f240 703d 	movw	r0, #1853	; 0x73d
  402b40:	4b2a      	ldr	r3, [pc, #168]	; (402bec <dmp_enable_feature+0x248>)
  402b42:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
  402b44:	88fb      	ldrh	r3, [r7, #6]
  402b46:	f003 0304 	and.w	r3, r3, #4
  402b4a:	2b00      	cmp	r3, #0
  402b4c:	d003      	beq.n	402b56 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
  402b4e:	2001      	movs	r0, #1
  402b50:	4b31      	ldr	r3, [pc, #196]	; (402c18 <dmp_enable_feature+0x274>)
  402b52:	4798      	blx	r3
  402b54:	e002      	b.n	402b5c <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
  402b56:	2000      	movs	r0, #0
  402b58:	4b2f      	ldr	r3, [pc, #188]	; (402c18 <dmp_enable_feature+0x274>)
  402b5a:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
  402b5c:	88fb      	ldrh	r3, [r7, #6]
  402b5e:	f003 0310 	and.w	r3, r3, #16
  402b62:	2b00      	cmp	r3, #0
  402b64:	d003      	beq.n	402b6e <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
  402b66:	2001      	movs	r0, #1
  402b68:	4b2c      	ldr	r3, [pc, #176]	; (402c1c <dmp_enable_feature+0x278>)
  402b6a:	4798      	blx	r3
  402b6c:	e002      	b.n	402b74 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
  402b6e:	2000      	movs	r0, #0
  402b70:	4b2a      	ldr	r3, [pc, #168]	; (402c1c <dmp_enable_feature+0x278>)
  402b72:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
  402b74:	88fb      	ldrh	r3, [r7, #6]
  402b76:	f043 0308 	orr.w	r3, r3, #8
  402b7a:	b29a      	uxth	r2, r3
  402b7c:	4b28      	ldr	r3, [pc, #160]	; (402c20 <dmp_enable_feature+0x27c>)
  402b7e:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
  402b80:	4b28      	ldr	r3, [pc, #160]	; (402c24 <dmp_enable_feature+0x280>)
  402b82:	4798      	blx	r3

    dmp.packet_length = 0;
  402b84:	4b26      	ldr	r3, [pc, #152]	; (402c20 <dmp_enable_feature+0x27c>)
  402b86:	2200      	movs	r2, #0
  402b88:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
  402b8a:	88fb      	ldrh	r3, [r7, #6]
  402b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402b90:	2b00      	cmp	r3, #0
  402b92:	d005      	beq.n	402ba0 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
  402b94:	4b22      	ldr	r3, [pc, #136]	; (402c20 <dmp_enable_feature+0x27c>)
  402b96:	7b9b      	ldrb	r3, [r3, #14]
  402b98:	3306      	adds	r3, #6
  402b9a:	b2da      	uxtb	r2, r3
  402b9c:	4b20      	ldr	r3, [pc, #128]	; (402c20 <dmp_enable_feature+0x27c>)
  402b9e:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
  402ba0:	88fb      	ldrh	r3, [r7, #6]
  402ba2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402ba6:	2b00      	cmp	r3, #0
  402ba8:	d005      	beq.n	402bb6 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
  402baa:	4b1d      	ldr	r3, [pc, #116]	; (402c20 <dmp_enable_feature+0x27c>)
  402bac:	7b9b      	ldrb	r3, [r3, #14]
  402bae:	3306      	adds	r3, #6
  402bb0:	b2da      	uxtb	r2, r3
  402bb2:	4b1b      	ldr	r3, [pc, #108]	; (402c20 <dmp_enable_feature+0x27c>)
  402bb4:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
  402bb6:	88fb      	ldrh	r3, [r7, #6]
  402bb8:	f003 0314 	and.w	r3, r3, #20
  402bbc:	2b00      	cmp	r3, #0
  402bbe:	d005      	beq.n	402bcc <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
  402bc0:	4b17      	ldr	r3, [pc, #92]	; (402c20 <dmp_enable_feature+0x27c>)
  402bc2:	7b9b      	ldrb	r3, [r3, #14]
  402bc4:	3310      	adds	r3, #16
  402bc6:	b2da      	uxtb	r2, r3
  402bc8:	4b15      	ldr	r3, [pc, #84]	; (402c20 <dmp_enable_feature+0x27c>)
  402bca:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
  402bcc:	88fb      	ldrh	r3, [r7, #6]
  402bce:	f003 0303 	and.w	r3, r3, #3
  402bd2:	2b00      	cmp	r3, #0
  402bd4:	d005      	beq.n	402be2 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
  402bd6:	4b12      	ldr	r3, [pc, #72]	; (402c20 <dmp_enable_feature+0x27c>)
  402bd8:	7b9b      	ldrb	r3, [r3, #14]
  402bda:	3304      	adds	r3, #4
  402bdc:	b2da      	uxtb	r2, r3
  402bde:	4b10      	ldr	r3, [pc, #64]	; (402c20 <dmp_enable_feature+0x27c>)
  402be0:	739a      	strb	r2, [r3, #14]

    return 0;
  402be2:	2300      	movs	r3, #0
}
  402be4:	4618      	mov	r0, r3
  402be6:	3718      	adds	r7, #24
  402be8:	46bd      	mov	sp, r7
  402bea:	bd80      	pop	{r7, pc}
  402bec:	00401cb9 	.word	0x00401cb9
  402bf0:	00402c29 	.word	0x00402c29
  402bf4:	004024f5 	.word	0x004024f5
  402bf8:	00402771 	.word	0x00402771
  402bfc:	004027d9 	.word	0x004027d9
  402c00:	00402821 	.word	0x00402821
  402c04:	00402869 	.word	0x00402869
  402c08:	02cae309 	.word	0x02cae309
  402c0c:	004028b1 	.word	0x004028b1
  402c10:	00402915 	.word	0x00402915
  402c14:	0040295d 	.word	0x0040295d
  402c18:	00402c95 	.word	0x00402c95
  402c1c:	00402cf1 	.word	0x00402cf1
  402c20:	200004a4 	.word	0x200004a4
  402c24:	00401171 	.word	0x00401171

00402c28 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
  402c28:	b580      	push	{r7, lr}
  402c2a:	b088      	sub	sp, #32
  402c2c:	af00      	add	r7, sp, #0
  402c2e:	4603      	mov	r3, r0
  402c30:	71fb      	strb	r3, [r7, #7]
    if (enable) {
  402c32:	79fb      	ldrb	r3, [r7, #7]
  402c34:	2b00      	cmp	r3, #0
  402c36:	d011      	beq.n	402c5c <dmp_enable_gyro_cal+0x34>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
  402c38:	4a13      	ldr	r2, [pc, #76]	; (402c88 <dmp_enable_gyro_cal+0x60>)
  402c3a:	f107 0314 	add.w	r3, r7, #20
  402c3e:	6810      	ldr	r0, [r2, #0]
  402c40:	6851      	ldr	r1, [r2, #4]
  402c42:	c303      	stmia	r3!, {r0, r1}
  402c44:	7a12      	ldrb	r2, [r2, #8]
  402c46:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
  402c48:	f107 0314 	add.w	r3, r7, #20
  402c4c:	461a      	mov	r2, r3
  402c4e:	2109      	movs	r1, #9
  402c50:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
  402c54:	4b0d      	ldr	r3, [pc, #52]	; (402c8c <dmp_enable_gyro_cal+0x64>)
  402c56:	4798      	blx	r3
  402c58:	4603      	mov	r3, r0
  402c5a:	e010      	b.n	402c7e <dmp_enable_gyro_cal+0x56>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
  402c5c:	4a0c      	ldr	r2, [pc, #48]	; (402c90 <dmp_enable_gyro_cal+0x68>)
  402c5e:	f107 0308 	add.w	r3, r7, #8
  402c62:	6810      	ldr	r0, [r2, #0]
  402c64:	6851      	ldr	r1, [r2, #4]
  402c66:	c303      	stmia	r3!, {r0, r1}
  402c68:	7a12      	ldrb	r2, [r2, #8]
  402c6a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
  402c6c:	f107 0308 	add.w	r3, r7, #8
  402c70:	461a      	mov	r2, r3
  402c72:	2109      	movs	r1, #9
  402c74:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
  402c78:	4b04      	ldr	r3, [pc, #16]	; (402c8c <dmp_enable_gyro_cal+0x64>)
  402c7a:	4798      	blx	r3
  402c7c:	4603      	mov	r3, r0
    }
}
  402c7e:	4618      	mov	r0, r3
  402c80:	3720      	adds	r7, #32
  402c82:	46bd      	mov	sp, r7
  402c84:	bd80      	pop	{r7, pc}
  402c86:	bf00      	nop
  402c88:	00407ba8 	.word	0x00407ba8
  402c8c:	00401cb9 	.word	0x00401cb9
  402c90:	00407bb4 	.word	0x00407bb4

00402c94 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
  402c94:	b580      	push	{r7, lr}
  402c96:	b084      	sub	sp, #16
  402c98:	af00      	add	r7, sp, #0
  402c9a:	4603      	mov	r3, r0
  402c9c:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
  402c9e:	79fb      	ldrb	r3, [r7, #7]
  402ca0:	2b00      	cmp	r3, #0
  402ca2:	d008      	beq.n	402cb6 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
  402ca4:	23c0      	movs	r3, #192	; 0xc0
  402ca6:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
  402ca8:	23c2      	movs	r3, #194	; 0xc2
  402caa:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
  402cac:	23c4      	movs	r3, #196	; 0xc4
  402cae:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
  402cb0:	23c6      	movs	r3, #198	; 0xc6
  402cb2:	73fb      	strb	r3, [r7, #15]
  402cb4:	e006      	b.n	402cc4 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
  402cb6:	f107 030c 	add.w	r3, r7, #12
  402cba:	2204      	movs	r2, #4
  402cbc:	218b      	movs	r1, #139	; 0x8b
  402cbe:	4618      	mov	r0, r3
  402cc0:	4b08      	ldr	r3, [pc, #32]	; (402ce4 <dmp_enable_lp_quat+0x50>)
  402cc2:	4798      	blx	r3

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
  402cc4:	f107 030c 	add.w	r3, r7, #12
  402cc8:	461a      	mov	r2, r3
  402cca:	2104      	movs	r1, #4
  402ccc:	f640 2098 	movw	r0, #2712	; 0xa98
  402cd0:	4b05      	ldr	r3, [pc, #20]	; (402ce8 <dmp_enable_lp_quat+0x54>)
  402cd2:	4798      	blx	r3

    return mpu_reset_fifo();
  402cd4:	4b05      	ldr	r3, [pc, #20]	; (402cec <dmp_enable_lp_quat+0x58>)
  402cd6:	4798      	blx	r3
  402cd8:	4603      	mov	r3, r0
}
  402cda:	4618      	mov	r0, r3
  402cdc:	3710      	adds	r7, #16
  402cde:	46bd      	mov	sp, r7
  402ce0:	bd80      	pop	{r7, pc}
  402ce2:	bf00      	nop
  402ce4:	00406ba1 	.word	0x00406ba1
  402ce8:	00401cb9 	.word	0x00401cb9
  402cec:	00401171 	.word	0x00401171

00402cf0 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
  402cf0:	b580      	push	{r7, lr}
  402cf2:	b084      	sub	sp, #16
  402cf4:	af00      	add	r7, sp, #0
  402cf6:	4603      	mov	r3, r0
  402cf8:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
  402cfa:	79fb      	ldrb	r3, [r7, #7]
  402cfc:	2b00      	cmp	r3, #0
  402cfe:	d008      	beq.n	402d12 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
  402d00:	2320      	movs	r3, #32
  402d02:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
  402d04:	2328      	movs	r3, #40	; 0x28
  402d06:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
  402d08:	2330      	movs	r3, #48	; 0x30
  402d0a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
  402d0c:	2338      	movs	r3, #56	; 0x38
  402d0e:	73fb      	strb	r3, [r7, #15]
  402d10:	e006      	b.n	402d20 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
  402d12:	f107 030c 	add.w	r3, r7, #12
  402d16:	2204      	movs	r2, #4
  402d18:	21a3      	movs	r1, #163	; 0xa3
  402d1a:	4618      	mov	r0, r3
  402d1c:	4b08      	ldr	r3, [pc, #32]	; (402d40 <dmp_enable_6x_lp_quat+0x50>)
  402d1e:	4798      	blx	r3

    mpu_write_mem(CFG_8, 4, regs);
  402d20:	f107 030c 	add.w	r3, r7, #12
  402d24:	461a      	mov	r2, r3
  402d26:	2104      	movs	r1, #4
  402d28:	f640 209e 	movw	r0, #2718	; 0xa9e
  402d2c:	4b05      	ldr	r3, [pc, #20]	; (402d44 <dmp_enable_6x_lp_quat+0x54>)
  402d2e:	4798      	blx	r3

    return mpu_reset_fifo();
  402d30:	4b05      	ldr	r3, [pc, #20]	; (402d48 <dmp_enable_6x_lp_quat+0x58>)
  402d32:	4798      	blx	r3
  402d34:	4603      	mov	r3, r0
}
  402d36:	4618      	mov	r0, r3
  402d38:	3710      	adds	r7, #16
  402d3a:	46bd      	mov	sp, r7
  402d3c:	bd80      	pop	{r7, pc}
  402d3e:	bf00      	nop
  402d40:	00406ba1 	.word	0x00406ba1
  402d44:	00401cb9 	.word	0x00401cb9
  402d48:	00401171 	.word	0x00401171

00402d4c <LightSensor_Setup>:

/******** Light Sensor Registry Setup ********/
//White Light Detection Enabled with low lux (40ms integration time), No Trigger, Auto Mode
//Only sets up one light sensor at a time, not both
void LightSensor_Setup(uint8_t channel)
{
  402d4c:	b580      	push	{r7, lr}
  402d4e:	b082      	sub	sp, #8
  402d50:	af00      	add	r7, sp, #0
  402d52:	4603      	mov	r3, r0
  402d54:	71fb      	strb	r3, [r7, #7]
	TWI0_MuxSwitch(channel); //Set multiplexer address to correct device
  402d56:	79fb      	ldrb	r3, [r7, #7]
  402d58:	4618      	mov	r0, r3
  402d5a:	4b05      	ldr	r3, [pc, #20]	; (402d70 <LightSensor_Setup+0x24>)
  402d5c:	4798      	blx	r3
	TWI0_Write(TWI0_LightSensorAddress, LightSens_Config, LightSens_Auto_LowLux);
  402d5e:	2200      	movs	r2, #0
  402d60:	2100      	movs	r1, #0
  402d62:	2010      	movs	r0, #16
  402d64:	4b03      	ldr	r3, [pc, #12]	; (402d74 <LightSensor_Setup+0x28>)
  402d66:	4798      	blx	r3
}
  402d68:	bf00      	nop
  402d6a:	3708      	adds	r7, #8
  402d6c:	46bd      	mov	sp, r7
  402d6e:	bd80      	pop	{r7, pc}
  402d70:	0040411d 	.word	0x0040411d
  402d74:	004041f1 	.word	0x004041f1

00402d78 <LightSensor_Data_Read>:

/******** Light Sensor Data Read ********/
//Retrieves the White Light (16-bit) data from the selected Light Sensor
uint16_t LightSensor_Data_Read(uint8_t channel)
{
  402d78:	b580      	push	{r7, lr}
  402d7a:	b084      	sub	sp, #16
  402d7c:	af00      	add	r7, sp, #0
  402d7e:	4603      	mov	r3, r0
  402d80:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	TWI0_MuxSwitch(channel);	//Set multiplexer address to correct device
  402d82:	79fb      	ldrb	r3, [r7, #7]
  402d84:	4618      	mov	r0, r3
  402d86:	4b06      	ldr	r3, [pc, #24]	; (402da0 <LightSensor_Data_Read+0x28>)
  402d88:	4798      	blx	r3
	data = TWI0_ReadDB(TWI0_LightSensorAddress, LightSensorWhite);
  402d8a:	210b      	movs	r1, #11
  402d8c:	2010      	movs	r0, #16
  402d8e:	4b05      	ldr	r3, [pc, #20]	; (402da4 <LightSensor_Data_Read+0x2c>)
  402d90:	4798      	blx	r3
  402d92:	4603      	mov	r3, r0
  402d94:	81fb      	strh	r3, [r7, #14]
	return data;
  402d96:	89fb      	ldrh	r3, [r7, #14]
}
  402d98:	4618      	mov	r0, r3
  402d9a:	3710      	adds	r7, #16
  402d9c:	46bd      	mov	sp, r7
  402d9e:	bd80      	pop	{r7, pc}
  402da0:	0040411d 	.word	0x0040411d
  402da4:	00404275 	.word	0x00404275

00402da8 <motor_init>:
 * \param 
 * 
 * \return void
 */
void motor_init(void)
{
  402da8:	b480      	push	{r7}
  402daa:	af00      	add	r7, sp, #0
	REG_CCFG_SYSIO |= CCFG_SYSIO_SYSIO12; //disable erase pin to give access to PB12 via PIO
  402dac:	4a82      	ldr	r2, [pc, #520]	; (402fb8 <motor_init+0x210>)
  402dae:	4b82      	ldr	r3, [pc, #520]	; (402fb8 <motor_init+0x210>)
  402db0:	681b      	ldr	r3, [r3, #0]
  402db2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402db6:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<31);		//Enable clock access for PWM
  402db8:	4a80      	ldr	r2, [pc, #512]	; (402fbc <motor_init+0x214>)
  402dba:	4b80      	ldr	r3, [pc, #512]	; (402fbc <motor_init+0x214>)
  402dbc:	681b      	ldr	r3, [r3, #0]
  402dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402dc2:	6013      	str	r3, [r2, #0]
	
	//****Channel 3 (Motor 1)****//
	REG_PWM_CMR3 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  402dc4:	4a7e      	ldr	r2, [pc, #504]	; (402fc0 <motor_init+0x218>)
  402dc6:	4b7e      	ldr	r3, [pc, #504]	; (402fc0 <motor_init+0x218>)
  402dc8:	681b      	ldr	r3, [r3, #0]
  402dca:	f043 0304 	orr.w	r3, r3, #4
  402dce:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 |= (1<<9);			//output starts at high level
  402dd0:	4a7b      	ldr	r2, [pc, #492]	; (402fc0 <motor_init+0x218>)
  402dd2:	4b7b      	ldr	r3, [pc, #492]	; (402fc0 <motor_init+0x218>)
  402dd4:	681b      	ldr	r3, [r3, #0]
  402dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402dda:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 &= ~(1<<8);		//Left aligned output
  402ddc:	4a78      	ldr	r2, [pc, #480]	; (402fc0 <motor_init+0x218>)
  402dde:	4b78      	ldr	r3, [pc, #480]	; (402fc0 <motor_init+0x218>)
  402de0:	681b      	ldr	r3, [r3, #0]
  402de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402de6:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 &= ~(1<<10);		//Update Duty cycle (NOT period)
  402de8:	4a75      	ldr	r2, [pc, #468]	; (402fc0 <motor_init+0x218>)
  402dea:	4b75      	ldr	r3, [pc, #468]	; (402fc0 <motor_init+0x218>)
  402dec:	681b      	ldr	r3, [r3, #0]
  402dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402df2:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY3 = 0;				//PWM Duty cycle (default = 0)
  402df4:	4b73      	ldr	r3, [pc, #460]	; (402fc4 <motor_init+0x21c>)
  402df6:	2200      	movs	r2, #0
  402df8:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD3 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  402dfa:	4b73      	ldr	r3, [pc, #460]	; (402fc8 <motor_init+0x220>)
  402dfc:	2264      	movs	r2, #100	; 0x64
  402dfe:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<21);		//Enable peripheral control of PC21
  402e00:	4a72      	ldr	r2, [pc, #456]	; (402fcc <motor_init+0x224>)
  402e02:	4b72      	ldr	r3, [pc, #456]	; (402fcc <motor_init+0x224>)
  402e04:	681b      	ldr	r3, [r3, #0]
  402e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  402e0a:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<21);		//Assign PC21 to PWM Peripheral B		
  402e0c:	4b70      	ldr	r3, [pc, #448]	; (402fd0 <motor_init+0x228>)
  402e0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402e12:	601a      	str	r2, [r3, #0]
	REG_PIOB_PER |= (1<<12);		//Enable PIO control of PB12
  402e14:	4a6f      	ldr	r2, [pc, #444]	; (402fd4 <motor_init+0x22c>)
  402e16:	4b6f      	ldr	r3, [pc, #444]	; (402fd4 <motor_init+0x22c>)
  402e18:	681b      	ldr	r3, [r3, #0]
  402e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402e1e:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<12);		//Set PB12 as output
  402e20:	4a6d      	ldr	r2, [pc, #436]	; (402fd8 <motor_init+0x230>)
  402e22:	4b6d      	ldr	r3, [pc, #436]	; (402fd8 <motor_init+0x230>)
  402e24:	681b      	ldr	r3, [r3, #0]
  402e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402e2a:	6013      	str	r3, [r2, #0]
	FIN_1_Low;		
  402e2c:	4a6b      	ldr	r2, [pc, #428]	; (402fdc <motor_init+0x234>)
  402e2e:	4b6b      	ldr	r3, [pc, #428]	; (402fdc <motor_init+0x234>)
  402e30:	681b      	ldr	r3, [r3, #0]
  402e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402e36:	6013      	str	r3, [r2, #0]
	REG_PIOC_PER |= (1<<22);		//Enable PIO control of PC22
  402e38:	4a69      	ldr	r2, [pc, #420]	; (402fe0 <motor_init+0x238>)
  402e3a:	4b69      	ldr	r3, [pc, #420]	; (402fe0 <motor_init+0x238>)
  402e3c:	681b      	ldr	r3, [r3, #0]
  402e3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402e42:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<22);		//Set PC22 as output
  402e44:	4a67      	ldr	r2, [pc, #412]	; (402fe4 <motor_init+0x23c>)
  402e46:	4b67      	ldr	r3, [pc, #412]	; (402fe4 <motor_init+0x23c>)
  402e48:	681b      	ldr	r3, [r3, #0]
  402e4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402e4e:	6013      	str	r3, [r2, #0]
	RIN_1_Low;
  402e50:	4a65      	ldr	r2, [pc, #404]	; (402fe8 <motor_init+0x240>)
  402e52:	4b65      	ldr	r3, [pc, #404]	; (402fe8 <motor_init+0x240>)
  402e54:	681b      	ldr	r3, [r3, #0]
  402e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402e5a:	6013      	str	r3, [r2, #0]
								
	//****Channel 2 (Motor 2)****//
	REG_PWM_CMR2 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  402e5c:	4a63      	ldr	r2, [pc, #396]	; (402fec <motor_init+0x244>)
  402e5e:	4b63      	ldr	r3, [pc, #396]	; (402fec <motor_init+0x244>)
  402e60:	681b      	ldr	r3, [r3, #0]
  402e62:	f043 0304 	orr.w	r3, r3, #4
  402e66:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 |= (1<<9);			//output starts at low level
  402e68:	4a60      	ldr	r2, [pc, #384]	; (402fec <motor_init+0x244>)
  402e6a:	4b60      	ldr	r3, [pc, #384]	; (402fec <motor_init+0x244>)
  402e6c:	681b      	ldr	r3, [r3, #0]
  402e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402e72:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 &= ~(1<<8);		//Left aligned output
  402e74:	4a5d      	ldr	r2, [pc, #372]	; (402fec <motor_init+0x244>)
  402e76:	4b5d      	ldr	r3, [pc, #372]	; (402fec <motor_init+0x244>)
  402e78:	681b      	ldr	r3, [r3, #0]
  402e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402e7e:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 &= ~(1<<10);		//Update Duty cycle (NOT period)
  402e80:	4a5a      	ldr	r2, [pc, #360]	; (402fec <motor_init+0x244>)
  402e82:	4b5a      	ldr	r3, [pc, #360]	; (402fec <motor_init+0x244>)
  402e84:	681b      	ldr	r3, [r3, #0]
  402e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402e8a:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY2 = 0;				//PWM Duty cycle (default = 0)
  402e8c:	4b58      	ldr	r3, [pc, #352]	; (402ff0 <motor_init+0x248>)
  402e8e:	2200      	movs	r2, #0
  402e90:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD2 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  402e92:	4b58      	ldr	r3, [pc, #352]	; (402ff4 <motor_init+0x24c>)
  402e94:	2264      	movs	r2, #100	; 0x64
  402e96:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<20);		//Enable peripheral control of PC20
  402e98:	4a4c      	ldr	r2, [pc, #304]	; (402fcc <motor_init+0x224>)
  402e9a:	4b4c      	ldr	r3, [pc, #304]	; (402fcc <motor_init+0x224>)
  402e9c:	681b      	ldr	r3, [r3, #0]
  402e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402ea2:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<20);		//Assign VREF_1 to PWM Peripheral B			
  402ea4:	4b4a      	ldr	r3, [pc, #296]	; (402fd0 <motor_init+0x228>)
  402ea6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402eaa:	601a      	str	r2, [r3, #0]
	REG_PIOC_PER |= (1<<19);		//Enable PIO control of PC19
  402eac:	4a4c      	ldr	r2, [pc, #304]	; (402fe0 <motor_init+0x238>)
  402eae:	4b4c      	ldr	r3, [pc, #304]	; (402fe0 <motor_init+0x238>)
  402eb0:	681b      	ldr	r3, [r3, #0]
  402eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  402eb6:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<19);		//Set PC19 as output
  402eb8:	4a4a      	ldr	r2, [pc, #296]	; (402fe4 <motor_init+0x23c>)
  402eba:	4b4a      	ldr	r3, [pc, #296]	; (402fe4 <motor_init+0x23c>)
  402ebc:	681b      	ldr	r3, [r3, #0]
  402ebe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  402ec2:	6013      	str	r3, [r2, #0]
	RIN_2_Low;		
  402ec4:	4a4c      	ldr	r2, [pc, #304]	; (402ff8 <motor_init+0x250>)
  402ec6:	4b4c      	ldr	r3, [pc, #304]	; (402ff8 <motor_init+0x250>)
  402ec8:	681b      	ldr	r3, [r3, #0]
  402eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402ece:	6013      	str	r3, [r2, #0]
	REG_PIOA_PER |= (1<<31);		//Enable PIO control of PA31
  402ed0:	4a4a      	ldr	r2, [pc, #296]	; (402ffc <motor_init+0x254>)
  402ed2:	4b4a      	ldr	r3, [pc, #296]	; (402ffc <motor_init+0x254>)
  402ed4:	681b      	ldr	r3, [r3, #0]
  402ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402eda:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<31);		//Set PA31 as output
  402edc:	4a48      	ldr	r2, [pc, #288]	; (403000 <motor_init+0x258>)
  402ede:	4b48      	ldr	r3, [pc, #288]	; (403000 <motor_init+0x258>)
  402ee0:	681b      	ldr	r3, [r3, #0]
  402ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402ee6:	6013      	str	r3, [r2, #0]
	FIN_2_Low;		
  402ee8:	4a3f      	ldr	r2, [pc, #252]	; (402fe8 <motor_init+0x240>)
  402eea:	4b3f      	ldr	r3, [pc, #252]	; (402fe8 <motor_init+0x240>)
  402eec:	681b      	ldr	r3, [r3, #0]
  402eee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  402ef2:	6013      	str	r3, [r2, #0]

	//****Channel 1 (Motor 3)****//
	REG_PWM_CMR1 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  402ef4:	4a43      	ldr	r2, [pc, #268]	; (403004 <motor_init+0x25c>)
  402ef6:	4b43      	ldr	r3, [pc, #268]	; (403004 <motor_init+0x25c>)
  402ef8:	681b      	ldr	r3, [r3, #0]
  402efa:	f043 0304 	orr.w	r3, r3, #4
  402efe:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 |= (1<<9);			//output starts at low level
  402f00:	4a40      	ldr	r2, [pc, #256]	; (403004 <motor_init+0x25c>)
  402f02:	4b40      	ldr	r3, [pc, #256]	; (403004 <motor_init+0x25c>)
  402f04:	681b      	ldr	r3, [r3, #0]
  402f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402f0a:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 &= ~(1<<8);		//Left aligned output
  402f0c:	4a3d      	ldr	r2, [pc, #244]	; (403004 <motor_init+0x25c>)
  402f0e:	4b3d      	ldr	r3, [pc, #244]	; (403004 <motor_init+0x25c>)
  402f10:	681b      	ldr	r3, [r3, #0]
  402f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402f16:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 &= ~(1<<10);		//Update Duty cycle (NOT period)
  402f18:	4a3a      	ldr	r2, [pc, #232]	; (403004 <motor_init+0x25c>)
  402f1a:	4b3a      	ldr	r3, [pc, #232]	; (403004 <motor_init+0x25c>)
  402f1c:	681b      	ldr	r3, [r3, #0]
  402f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402f22:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY1 = 0;				//PWM Duty cycle (default = 0)
  402f24:	4b38      	ldr	r3, [pc, #224]	; (403008 <motor_init+0x260>)
  402f26:	2200      	movs	r2, #0
  402f28:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD1 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  402f2a:	4b38      	ldr	r3, [pc, #224]	; (40300c <motor_init+0x264>)
  402f2c:	2264      	movs	r2, #100	; 0x64
  402f2e:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<9);			//Enable peripheral control of PC9
  402f30:	4a26      	ldr	r2, [pc, #152]	; (402fcc <motor_init+0x224>)
  402f32:	4b26      	ldr	r3, [pc, #152]	; (402fcc <motor_init+0x224>)
  402f34:	681b      	ldr	r3, [r3, #0]
  402f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402f3a:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<9);		//Assign PC9 to PWM Peripheral B		
  402f3c:	4b24      	ldr	r3, [pc, #144]	; (402fd0 <motor_init+0x228>)
  402f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402f42:	601a      	str	r2, [r3, #0]
	REG_PIOA_PER |= (1<<30);		//Enable PIO control of PA30
  402f44:	4a2d      	ldr	r2, [pc, #180]	; (402ffc <motor_init+0x254>)
  402f46:	4b2d      	ldr	r3, [pc, #180]	; (402ffc <motor_init+0x254>)
  402f48:	681b      	ldr	r3, [r3, #0]
  402f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f4e:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<30);		//Set PA30 as output
  402f50:	4a2b      	ldr	r2, [pc, #172]	; (403000 <motor_init+0x258>)
  402f52:	4b2b      	ldr	r3, [pc, #172]	; (403000 <motor_init+0x258>)
  402f54:	681b      	ldr	r3, [r3, #0]
  402f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f5a:	6013      	str	r3, [r2, #0]
	RIN_3_Low;		
  402f5c:	4a26      	ldr	r2, [pc, #152]	; (402ff8 <motor_init+0x250>)
  402f5e:	4b26      	ldr	r3, [pc, #152]	; (402ff8 <motor_init+0x250>)
  402f60:	681b      	ldr	r3, [r3, #0]
  402f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f66:	6013      	str	r3, [r2, #0]
	REG_PIOA_PER |= (1<<29);		//Enable PIO control of PA29
  402f68:	4a24      	ldr	r2, [pc, #144]	; (402ffc <motor_init+0x254>)
  402f6a:	4b24      	ldr	r3, [pc, #144]	; (402ffc <motor_init+0x254>)
  402f6c:	681b      	ldr	r3, [r3, #0]
  402f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f72:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<29);		//Set PA29 as output
  402f74:	4a22      	ldr	r2, [pc, #136]	; (403000 <motor_init+0x258>)
  402f76:	4b22      	ldr	r3, [pc, #136]	; (403000 <motor_init+0x258>)
  402f78:	681b      	ldr	r3, [r3, #0]
  402f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f7e:	6013      	str	r3, [r2, #0]
	FIN_3_Low;
  402f80:	4a1d      	ldr	r2, [pc, #116]	; (402ff8 <motor_init+0x250>)
  402f82:	4b1d      	ldr	r3, [pc, #116]	; (402ff8 <motor_init+0x250>)
  402f84:	681b      	ldr	r3, [r3, #0]
  402f86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f8a:	6013      	str	r3, [r2, #0]
	
	//****Enable PWM Channels as last step of setup****//	
	REG_PWM_ENA |= PWM_ENA_CHID1;	//Enable PWM on channel 1
  402f8c:	4a20      	ldr	r2, [pc, #128]	; (403010 <motor_init+0x268>)
  402f8e:	4b20      	ldr	r3, [pc, #128]	; (403010 <motor_init+0x268>)
  402f90:	681b      	ldr	r3, [r3, #0]
  402f92:	f043 0302 	orr.w	r3, r3, #2
  402f96:	6013      	str	r3, [r2, #0]
	REG_PWM_ENA |= PWM_ENA_CHID2;	//Enable PWM on channel 2
  402f98:	4a1d      	ldr	r2, [pc, #116]	; (403010 <motor_init+0x268>)
  402f9a:	4b1d      	ldr	r3, [pc, #116]	; (403010 <motor_init+0x268>)
  402f9c:	681b      	ldr	r3, [r3, #0]
  402f9e:	f043 0304 	orr.w	r3, r3, #4
  402fa2:	6013      	str	r3, [r2, #0]
	REG_PWM_ENA |= PWM_ENA_CHID3;	//Enable PWM on channel 3
  402fa4:	4a1a      	ldr	r2, [pc, #104]	; (403010 <motor_init+0x268>)
  402fa6:	4b1a      	ldr	r3, [pc, #104]	; (403010 <motor_init+0x268>)
  402fa8:	681b      	ldr	r3, [r3, #0]
  402faa:	f043 0308 	orr.w	r3, r3, #8
  402fae:	6013      	str	r3, [r2, #0]
}
  402fb0:	bf00      	nop
  402fb2:	46bd      	mov	sp, r7
  402fb4:	bc80      	pop	{r7}
  402fb6:	4770      	bx	lr
  402fb8:	400e0314 	.word	0x400e0314
  402fbc:	400e0410 	.word	0x400e0410
  402fc0:	40020260 	.word	0x40020260
  402fc4:	40020264 	.word	0x40020264
  402fc8:	40020268 	.word	0x40020268
  402fcc:	400e1204 	.word	0x400e1204
  402fd0:	400e1270 	.word	0x400e1270
  402fd4:	400e1000 	.word	0x400e1000
  402fd8:	400e1010 	.word	0x400e1010
  402fdc:	400e1034 	.word	0x400e1034
  402fe0:	400e1200 	.word	0x400e1200
  402fe4:	400e1210 	.word	0x400e1210
  402fe8:	400e1234 	.word	0x400e1234
  402fec:	40020240 	.word	0x40020240
  402ff0:	40020244 	.word	0x40020244
  402ff4:	40020248 	.word	0x40020248
  402ff8:	400e0e34 	.word	0x400e0e34
  402ffc:	400e0e00 	.word	0x400e0e00
  403000:	400e0e10 	.word	0x400e0e10
  403004:	40020220 	.word	0x40020220
  403008:	40020224 	.word	0x40020224
  40300c:	40020228 	.word	0x40020228
  403010:	40020004 	.word	0x40020004
  403014:	00000000 	.word	0x00000000

00403018 <moveRobot>:
 * \param speed
 * 
 * \return void
 */
void moveRobot(float direction, unsigned char speed)
{
  403018:	b5f0      	push	{r4, r5, r6, r7, lr}
  40301a:	b087      	sub	sp, #28
  40301c:	af00      	add	r7, sp, #0
  40301e:	6078      	str	r0, [r7, #4]
  403020:	460b      	mov	r3, r1
  403022:	70fb      	strb	r3, [r7, #3]
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
  403024:	e005      	b.n	403032 <moveRobot+0x1a>
		direction -= 360;
  403026:	4ba4      	ldr	r3, [pc, #656]	; (4032b8 <moveRobot+0x2a0>)
  403028:	49a4      	ldr	r1, [pc, #656]	; (4032bc <moveRobot+0x2a4>)
  40302a:	6878      	ldr	r0, [r7, #4]
  40302c:	4798      	blx	r3
  40302e:	4603      	mov	r3, r0
  403030:	607b      	str	r3, [r7, #4]
void moveRobot(float direction, unsigned char speed)
{
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
  403032:	4ba3      	ldr	r3, [pc, #652]	; (4032c0 <moveRobot+0x2a8>)
  403034:	49a3      	ldr	r1, [pc, #652]	; (4032c4 <moveRobot+0x2ac>)
  403036:	6878      	ldr	r0, [r7, #4]
  403038:	4798      	blx	r3
  40303a:	4603      	mov	r3, r0
  40303c:	2b00      	cmp	r3, #0
  40303e:	d1f2      	bne.n	403026 <moveRobot+0xe>
		direction -= 360;
	while(direction < -180)
  403040:	e005      	b.n	40304e <moveRobot+0x36>
		direction += 360;
  403042:	4ba1      	ldr	r3, [pc, #644]	; (4032c8 <moveRobot+0x2b0>)
  403044:	499d      	ldr	r1, [pc, #628]	; (4032bc <moveRobot+0x2a4>)
  403046:	6878      	ldr	r0, [r7, #4]
  403048:	4798      	blx	r3
  40304a:	4603      	mov	r3, r0
  40304c:	607b      	str	r3, [r7, #4]
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
		direction -= 360;
	while(direction < -180)
  40304e:	4b9f      	ldr	r3, [pc, #636]	; (4032cc <moveRobot+0x2b4>)
  403050:	499f      	ldr	r1, [pc, #636]	; (4032d0 <moveRobot+0x2b8>)
  403052:	6878      	ldr	r0, [r7, #4]
  403054:	4798      	blx	r3
  403056:	4603      	mov	r3, r0
  403058:	2b00      	cmp	r3, #0
  40305a:	d1f2      	bne.n	403042 <moveRobot+0x2a>
		direction += 360;
	//stop speed from being over max in case of user input error
	if(speed > 100)
  40305c:	78fb      	ldrb	r3, [r7, #3]
  40305e:	2b64      	cmp	r3, #100	; 0x64
  403060:	d901      	bls.n	403066 <moveRobot+0x4e>
		speed = 100;
  403062:	2364      	movs	r3, #100	; 0x64
  403064:	70fb      	strb	r3, [r7, #3]
	directionRad = (direction * M_PI) / 180; //convert desired direction to radians
  403066:	4b9b      	ldr	r3, [pc, #620]	; (4032d4 <moveRobot+0x2bc>)
  403068:	6878      	ldr	r0, [r7, #4]
  40306a:	4798      	blx	r3
  40306c:	4c9a      	ldr	r4, [pc, #616]	; (4032d8 <moveRobot+0x2c0>)
  40306e:	a38a      	add	r3, pc, #552	; (adr r3, 403298 <moveRobot+0x280>)
  403070:	e9d3 2300 	ldrd	r2, r3, [r3]
  403074:	47a0      	blx	r4
  403076:	4603      	mov	r3, r0
  403078:	460c      	mov	r4, r1
  40307a:	4618      	mov	r0, r3
  40307c:	4621      	mov	r1, r4
  40307e:	4c97      	ldr	r4, [pc, #604]	; (4032dc <moveRobot+0x2c4>)
  403080:	f04f 0200 	mov.w	r2, #0
  403084:	4b96      	ldr	r3, [pc, #600]	; (4032e0 <moveRobot+0x2c8>)
  403086:	47a0      	blx	r4
  403088:	4603      	mov	r3, r0
  40308a:	460c      	mov	r4, r1
  40308c:	4619      	mov	r1, r3
  40308e:	4622      	mov	r2, r4
  403090:	4b94      	ldr	r3, [pc, #592]	; (4032e4 <moveRobot+0x2cc>)
  403092:	4608      	mov	r0, r1
  403094:	4611      	mov	r1, r2
  403096:	4798      	blx	r3
  403098:	4603      	mov	r3, r0
  40309a:	60bb      	str	r3, [r7, #8]
	motor1Speed = speed * cos ((270 * M_PI) / 180 - directionRad );//radians
  40309c:	78fa      	ldrb	r2, [r7, #3]
  40309e:	4b92      	ldr	r3, [pc, #584]	; (4032e8 <moveRobot+0x2d0>)
  4030a0:	4610      	mov	r0, r2
  4030a2:	4798      	blx	r3
  4030a4:	4605      	mov	r5, r0
  4030a6:	460e      	mov	r6, r1
  4030a8:	4b8a      	ldr	r3, [pc, #552]	; (4032d4 <moveRobot+0x2bc>)
  4030aa:	68b8      	ldr	r0, [r7, #8]
  4030ac:	4798      	blx	r3
  4030ae:	4602      	mov	r2, r0
  4030b0:	460b      	mov	r3, r1
  4030b2:	4c8e      	ldr	r4, [pc, #568]	; (4032ec <moveRobot+0x2d4>)
  4030b4:	a17a      	add	r1, pc, #488	; (adr r1, 4032a0 <moveRobot+0x288>)
  4030b6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4030ba:	47a0      	blx	r4
  4030bc:	4603      	mov	r3, r0
  4030be:	460c      	mov	r4, r1
  4030c0:	4618      	mov	r0, r3
  4030c2:	4621      	mov	r1, r4
  4030c4:	4b8a      	ldr	r3, [pc, #552]	; (4032f0 <moveRobot+0x2d8>)
  4030c6:	4798      	blx	r3
  4030c8:	4602      	mov	r2, r0
  4030ca:	460b      	mov	r3, r1
  4030cc:	4c82      	ldr	r4, [pc, #520]	; (4032d8 <moveRobot+0x2c0>)
  4030ce:	4628      	mov	r0, r5
  4030d0:	4631      	mov	r1, r6
  4030d2:	47a0      	blx	r4
  4030d4:	4603      	mov	r3, r0
  4030d6:	460c      	mov	r4, r1
  4030d8:	4619      	mov	r1, r3
  4030da:	4622      	mov	r2, r4
  4030dc:	4b81      	ldr	r3, [pc, #516]	; (4032e4 <moveRobot+0x2cc>)
  4030de:	4608      	mov	r0, r1
  4030e0:	4611      	mov	r1, r2
  4030e2:	4798      	blx	r3
  4030e4:	4603      	mov	r3, r0
  4030e6:	617b      	str	r3, [r7, #20]
	motor2Speed = speed * cos ((30  * M_PI) / 180 - directionRad );
  4030e8:	78fa      	ldrb	r2, [r7, #3]
  4030ea:	4b7f      	ldr	r3, [pc, #508]	; (4032e8 <moveRobot+0x2d0>)
  4030ec:	4610      	mov	r0, r2
  4030ee:	4798      	blx	r3
  4030f0:	4605      	mov	r5, r0
  4030f2:	460e      	mov	r6, r1
  4030f4:	4b77      	ldr	r3, [pc, #476]	; (4032d4 <moveRobot+0x2bc>)
  4030f6:	68b8      	ldr	r0, [r7, #8]
  4030f8:	4798      	blx	r3
  4030fa:	4602      	mov	r2, r0
  4030fc:	460b      	mov	r3, r1
  4030fe:	4c7b      	ldr	r4, [pc, #492]	; (4032ec <moveRobot+0x2d4>)
  403100:	a169      	add	r1, pc, #420	; (adr r1, 4032a8 <moveRobot+0x290>)
  403102:	e9d1 0100 	ldrd	r0, r1, [r1]
  403106:	47a0      	blx	r4
  403108:	4603      	mov	r3, r0
  40310a:	460c      	mov	r4, r1
  40310c:	4618      	mov	r0, r3
  40310e:	4621      	mov	r1, r4
  403110:	4b77      	ldr	r3, [pc, #476]	; (4032f0 <moveRobot+0x2d8>)
  403112:	4798      	blx	r3
  403114:	4602      	mov	r2, r0
  403116:	460b      	mov	r3, r1
  403118:	4c6f      	ldr	r4, [pc, #444]	; (4032d8 <moveRobot+0x2c0>)
  40311a:	4628      	mov	r0, r5
  40311c:	4631      	mov	r1, r6
  40311e:	47a0      	blx	r4
  403120:	4603      	mov	r3, r0
  403122:	460c      	mov	r4, r1
  403124:	4619      	mov	r1, r3
  403126:	4622      	mov	r2, r4
  403128:	4b6e      	ldr	r3, [pc, #440]	; (4032e4 <moveRobot+0x2cc>)
  40312a:	4608      	mov	r0, r1
  40312c:	4611      	mov	r1, r2
  40312e:	4798      	blx	r3
  403130:	4603      	mov	r3, r0
  403132:	613b      	str	r3, [r7, #16]
	motor3Speed = speed * cos ((150 * M_PI) / 180 - directionRad );
  403134:	78fa      	ldrb	r2, [r7, #3]
  403136:	4b6c      	ldr	r3, [pc, #432]	; (4032e8 <moveRobot+0x2d0>)
  403138:	4610      	mov	r0, r2
  40313a:	4798      	blx	r3
  40313c:	4605      	mov	r5, r0
  40313e:	460e      	mov	r6, r1
  403140:	4b64      	ldr	r3, [pc, #400]	; (4032d4 <moveRobot+0x2bc>)
  403142:	68b8      	ldr	r0, [r7, #8]
  403144:	4798      	blx	r3
  403146:	4602      	mov	r2, r0
  403148:	460b      	mov	r3, r1
  40314a:	4c68      	ldr	r4, [pc, #416]	; (4032ec <moveRobot+0x2d4>)
  40314c:	a158      	add	r1, pc, #352	; (adr r1, 4032b0 <moveRobot+0x298>)
  40314e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403152:	47a0      	blx	r4
  403154:	4603      	mov	r3, r0
  403156:	460c      	mov	r4, r1
  403158:	4618      	mov	r0, r3
  40315a:	4621      	mov	r1, r4
  40315c:	4b64      	ldr	r3, [pc, #400]	; (4032f0 <moveRobot+0x2d8>)
  40315e:	4798      	blx	r3
  403160:	4602      	mov	r2, r0
  403162:	460b      	mov	r3, r1
  403164:	4c5c      	ldr	r4, [pc, #368]	; (4032d8 <moveRobot+0x2c0>)
  403166:	4628      	mov	r0, r5
  403168:	4631      	mov	r1, r6
  40316a:	47a0      	blx	r4
  40316c:	4603      	mov	r3, r0
  40316e:	460c      	mov	r4, r1
  403170:	4619      	mov	r1, r3
  403172:	4622      	mov	r2, r4
  403174:	4b5b      	ldr	r3, [pc, #364]	; (4032e4 <moveRobot+0x2cc>)
  403176:	4608      	mov	r0, r1
  403178:	4611      	mov	r1, r2
  40317a:	4798      	blx	r3
  40317c:	4603      	mov	r3, r0
  40317e:	60fb      	str	r3, [r7, #12]
	
	//motor 2 & 3 is wired backwards on test robot so forward and back is flipped
	if(motor1Speed > 0)
  403180:	4b4f      	ldr	r3, [pc, #316]	; (4032c0 <moveRobot+0x2a8>)
  403182:	f04f 0100 	mov.w	r1, #0
  403186:	6978      	ldr	r0, [r7, #20]
  403188:	4798      	blx	r3
  40318a:	4603      	mov	r3, r0
  40318c:	2b00      	cmp	r3, #0
  40318e:	d00c      	beq.n	4031aa <moveRobot+0x192>
	{
		//Forward
		RIN_1_Low;
  403190:	4a58      	ldr	r2, [pc, #352]	; (4032f4 <moveRobot+0x2dc>)
  403192:	4b58      	ldr	r3, [pc, #352]	; (4032f4 <moveRobot+0x2dc>)
  403194:	681b      	ldr	r3, [r3, #0]
  403196:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40319a:	6013      	str	r3, [r2, #0]
		FIN_1_High;		
  40319c:	4a56      	ldr	r2, [pc, #344]	; (4032f8 <moveRobot+0x2e0>)
  40319e:	4b56      	ldr	r3, [pc, #344]	; (4032f8 <moveRobot+0x2e0>)
  4031a0:	681b      	ldr	r3, [r3, #0]
  4031a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031a6:	6013      	str	r3, [r2, #0]
  4031a8:	e024      	b.n	4031f4 <moveRobot+0x1dc>
	}
	else if (motor1Speed == 0)
  4031aa:	4b54      	ldr	r3, [pc, #336]	; (4032fc <moveRobot+0x2e4>)
  4031ac:	f04f 0100 	mov.w	r1, #0
  4031b0:	6978      	ldr	r0, [r7, #20]
  4031b2:	4798      	blx	r3
  4031b4:	4603      	mov	r3, r0
  4031b6:	2b00      	cmp	r3, #0
  4031b8:	d00c      	beq.n	4031d4 <moveRobot+0x1bc>
	{
		//Motor off (coast not brake)
		RIN_1_Low;
  4031ba:	4a4e      	ldr	r2, [pc, #312]	; (4032f4 <moveRobot+0x2dc>)
  4031bc:	4b4d      	ldr	r3, [pc, #308]	; (4032f4 <moveRobot+0x2dc>)
  4031be:	681b      	ldr	r3, [r3, #0]
  4031c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4031c4:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4031c6:	4a4e      	ldr	r2, [pc, #312]	; (403300 <moveRobot+0x2e8>)
  4031c8:	4b4d      	ldr	r3, [pc, #308]	; (403300 <moveRobot+0x2e8>)
  4031ca:	681b      	ldr	r3, [r3, #0]
  4031cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031d0:	6013      	str	r3, [r2, #0]
  4031d2:	e00f      	b.n	4031f4 <moveRobot+0x1dc>
	}
	else
	{
		//Reverse
		motor1Speed = motor1Speed * (-1); 
  4031d4:	697b      	ldr	r3, [r7, #20]
  4031d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  4031da:	617b      	str	r3, [r7, #20]
		RIN_1_High;
  4031dc:	4a49      	ldr	r2, [pc, #292]	; (403304 <moveRobot+0x2ec>)
  4031de:	4b49      	ldr	r3, [pc, #292]	; (403304 <moveRobot+0x2ec>)
  4031e0:	681b      	ldr	r3, [r3, #0]
  4031e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4031e6:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4031e8:	4a45      	ldr	r2, [pc, #276]	; (403300 <moveRobot+0x2e8>)
  4031ea:	4b45      	ldr	r3, [pc, #276]	; (403300 <moveRobot+0x2e8>)
  4031ec:	681b      	ldr	r3, [r3, #0]
  4031ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031f2:	6013      	str	r3, [r2, #0]
	}

	if(motor2Speed > 0)
  4031f4:	4b32      	ldr	r3, [pc, #200]	; (4032c0 <moveRobot+0x2a8>)
  4031f6:	f04f 0100 	mov.w	r1, #0
  4031fa:	6938      	ldr	r0, [r7, #16]
  4031fc:	4798      	blx	r3
  4031fe:	4603      	mov	r3, r0
  403200:	2b00      	cmp	r3, #0
  403202:	d00c      	beq.n	40321e <moveRobot+0x206>
	{
		//Forward
		RIN_2_Low;
  403204:	4a40      	ldr	r2, [pc, #256]	; (403308 <moveRobot+0x2f0>)
  403206:	4b40      	ldr	r3, [pc, #256]	; (403308 <moveRobot+0x2f0>)
  403208:	681b      	ldr	r3, [r3, #0]
  40320a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40320e:	6013      	str	r3, [r2, #0]
		FIN_2_High;
  403210:	4a3c      	ldr	r2, [pc, #240]	; (403304 <moveRobot+0x2ec>)
  403212:	4b3c      	ldr	r3, [pc, #240]	; (403304 <moveRobot+0x2ec>)
  403214:	681b      	ldr	r3, [r3, #0]
  403216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  40321a:	6013      	str	r3, [r2, #0]
  40321c:	e024      	b.n	403268 <moveRobot+0x250>
	}
	else if (motor2Speed == 0)
  40321e:	4b37      	ldr	r3, [pc, #220]	; (4032fc <moveRobot+0x2e4>)
  403220:	f04f 0100 	mov.w	r1, #0
  403224:	6938      	ldr	r0, [r7, #16]
  403226:	4798      	blx	r3
  403228:	4603      	mov	r3, r0
  40322a:	2b00      	cmp	r3, #0
  40322c:	d00c      	beq.n	403248 <moveRobot+0x230>
	{
		//Motor off (coast not brake)
		RIN_2_Low;
  40322e:	4a36      	ldr	r2, [pc, #216]	; (403308 <moveRobot+0x2f0>)
  403230:	4b35      	ldr	r3, [pc, #212]	; (403308 <moveRobot+0x2f0>)
  403232:	681b      	ldr	r3, [r3, #0]
  403234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403238:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  40323a:	4a2e      	ldr	r2, [pc, #184]	; (4032f4 <moveRobot+0x2dc>)
  40323c:	4b2d      	ldr	r3, [pc, #180]	; (4032f4 <moveRobot+0x2dc>)
  40323e:	681b      	ldr	r3, [r3, #0]
  403240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403244:	6013      	str	r3, [r2, #0]
  403246:	e00f      	b.n	403268 <moveRobot+0x250>
	}
	else
	{
		//Reverse
		motor2Speed = motor2Speed * (-1); 
  403248:	693b      	ldr	r3, [r7, #16]
  40324a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  40324e:	613b      	str	r3, [r7, #16]
		RIN_2_High;
  403250:	4a2e      	ldr	r2, [pc, #184]	; (40330c <moveRobot+0x2f4>)
  403252:	4b2e      	ldr	r3, [pc, #184]	; (40330c <moveRobot+0x2f4>)
  403254:	681b      	ldr	r3, [r3, #0]
  403256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40325a:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  40325c:	4a25      	ldr	r2, [pc, #148]	; (4032f4 <moveRobot+0x2dc>)
  40325e:	4b25      	ldr	r3, [pc, #148]	; (4032f4 <moveRobot+0x2dc>)
  403260:	681b      	ldr	r3, [r3, #0]
  403262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403266:	6013      	str	r3, [r2, #0]
	}
	
	if(motor3Speed > 0)
  403268:	4b15      	ldr	r3, [pc, #84]	; (4032c0 <moveRobot+0x2a8>)
  40326a:	f04f 0100 	mov.w	r1, #0
  40326e:	68f8      	ldr	r0, [r7, #12]
  403270:	4798      	blx	r3
  403272:	4603      	mov	r3, r0
  403274:	2b00      	cmp	r3, #0
  403276:	d04b      	beq.n	403310 <moveRobot+0x2f8>
	{
		//Forward
		RIN_3_Low;
  403278:	4a23      	ldr	r2, [pc, #140]	; (403308 <moveRobot+0x2f0>)
  40327a:	4b23      	ldr	r3, [pc, #140]	; (403308 <moveRobot+0x2f0>)
  40327c:	681b      	ldr	r3, [r3, #0]
  40327e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403282:	6013      	str	r3, [r2, #0]
		FIN_3_High;			
  403284:	4a21      	ldr	r2, [pc, #132]	; (40330c <moveRobot+0x2f4>)
  403286:	4b21      	ldr	r3, [pc, #132]	; (40330c <moveRobot+0x2f4>)
  403288:	681b      	ldr	r3, [r3, #0]
  40328a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40328e:	6013      	str	r3, [r2, #0]
  403290:	e063      	b.n	40335a <moveRobot+0x342>
  403292:	bf00      	nop
  403294:	f3af 8000 	nop.w
  403298:	54442d18 	.word	0x54442d18
  40329c:	400921fb 	.word	0x400921fb
  4032a0:	7f3321d2 	.word	0x7f3321d2
  4032a4:	4012d97c 	.word	0x4012d97c
  4032a8:	382d7365 	.word	0x382d7365
  4032ac:	3fe0c152 	.word	0x3fe0c152
  4032b0:	c638d03f 	.word	0xc638d03f
  4032b4:	4004f1a6 	.word	0x4004f1a6
  4032b8:	004063d9 	.word	0x004063d9
  4032bc:	43b40000 	.word	0x43b40000
  4032c0:	00406965 	.word	0x00406965
  4032c4:	43340000 	.word	0x43340000
  4032c8:	004063dd 	.word	0x004063dd
  4032cc:	00406929 	.word	0x00406929
  4032d0:	c3340000 	.word	0xc3340000
  4032d4:	00405cc5 	.word	0x00405cc5
  4032d8:	00405d6d 	.word	0x00405d6d
  4032dc:	00405fc1 	.word	0x00405fc1
  4032e0:	40668000 	.word	0x40668000
  4032e4:	00406331 	.word	0x00406331
  4032e8:	00405ca1 	.word	0x00405ca1
  4032ec:	00405a05 	.word	0x00405a05
  4032f0:	00404749 	.word	0x00404749
  4032f4:	400e1234 	.word	0x400e1234
  4032f8:	400e1030 	.word	0x400e1030
  4032fc:	00406915 	.word	0x00406915
  403300:	400e1034 	.word	0x400e1034
  403304:	400e1230 	.word	0x400e1230
  403308:	400e0e34 	.word	0x400e0e34
  40330c:	400e0e30 	.word	0x400e0e30
	}
	else if (motor3Speed == 0)
  403310:	4b1d      	ldr	r3, [pc, #116]	; (403388 <moveRobot+0x370>)
  403312:	f04f 0100 	mov.w	r1, #0
  403316:	68f8      	ldr	r0, [r7, #12]
  403318:	4798      	blx	r3
  40331a:	4603      	mov	r3, r0
  40331c:	2b00      	cmp	r3, #0
  40331e:	d00c      	beq.n	40333a <moveRobot+0x322>
	{
		//Motor off (coast not brake)
		RIN_3_Low;
  403320:	4a1a      	ldr	r2, [pc, #104]	; (40338c <moveRobot+0x374>)
  403322:	4b1a      	ldr	r3, [pc, #104]	; (40338c <moveRobot+0x374>)
  403324:	681b      	ldr	r3, [r3, #0]
  403326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40332a:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  40332c:	4a17      	ldr	r2, [pc, #92]	; (40338c <moveRobot+0x374>)
  40332e:	4b17      	ldr	r3, [pc, #92]	; (40338c <moveRobot+0x374>)
  403330:	681b      	ldr	r3, [r3, #0]
  403332:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403336:	6013      	str	r3, [r2, #0]
  403338:	e00f      	b.n	40335a <moveRobot+0x342>
	}
	else
	{
		//Reverse
		motor3Speed = motor3Speed * (-1); 
  40333a:	68fb      	ldr	r3, [r7, #12]
  40333c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  403340:	60fb      	str	r3, [r7, #12]
		RIN_3_High;
  403342:	4a13      	ldr	r2, [pc, #76]	; (403390 <moveRobot+0x378>)
  403344:	4b12      	ldr	r3, [pc, #72]	; (403390 <moveRobot+0x378>)
  403346:	681b      	ldr	r3, [r3, #0]
  403348:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40334c:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  40334e:	4a0f      	ldr	r2, [pc, #60]	; (40338c <moveRobot+0x374>)
  403350:	4b0e      	ldr	r3, [pc, #56]	; (40338c <moveRobot+0x374>)
  403352:	681b      	ldr	r3, [r3, #0]
  403354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403358:	6013      	str	r3, [r2, #0]
	}
	REG_PWM_CUPD1 = (motor3Speed); //Update duty cycle as per calculations
  40335a:	4c0e      	ldr	r4, [pc, #56]	; (403394 <moveRobot+0x37c>)
  40335c:	4b0e      	ldr	r3, [pc, #56]	; (403398 <moveRobot+0x380>)
  40335e:	68f8      	ldr	r0, [r7, #12]
  403360:	4798      	blx	r3
  403362:	4603      	mov	r3, r0
  403364:	6023      	str	r3, [r4, #0]
	REG_PWM_CUPD2 = (motor2Speed); //Update duty cycle as per calculations
  403366:	4c0d      	ldr	r4, [pc, #52]	; (40339c <moveRobot+0x384>)
  403368:	4b0b      	ldr	r3, [pc, #44]	; (403398 <moveRobot+0x380>)
  40336a:	6938      	ldr	r0, [r7, #16]
  40336c:	4798      	blx	r3
  40336e:	4603      	mov	r3, r0
  403370:	6023      	str	r3, [r4, #0]
	REG_PWM_CUPD3 = (motor1Speed); //Update duty cycle as per calculations
  403372:	4c0b      	ldr	r4, [pc, #44]	; (4033a0 <moveRobot+0x388>)
  403374:	4b08      	ldr	r3, [pc, #32]	; (403398 <moveRobot+0x380>)
  403376:	6978      	ldr	r0, [r7, #20]
  403378:	4798      	blx	r3
  40337a:	4603      	mov	r3, r0
  40337c:	6023      	str	r3, [r4, #0]
}
  40337e:	bf00      	nop
  403380:	371c      	adds	r7, #28
  403382:	46bd      	mov	sp, r7
  403384:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403386:	bf00      	nop
  403388:	00406915 	.word	0x00406915
  40338c:	400e0e34 	.word	0x400e0e34
  403390:	400e0e30 	.word	0x400e0e30
  403394:	40020230 	.word	0x40020230
  403398:	00406979 	.word	0x00406979
  40339c:	40020250 	.word	0x40020250
  4033a0:	40020270 	.word	0x40020270

004033a4 <rotateRobot>:

void rotateRobot(char direction, unsigned char speed)
{
  4033a4:	b480      	push	{r7}
  4033a6:	b083      	sub	sp, #12
  4033a8:	af00      	add	r7, sp, #0
  4033aa:	4603      	mov	r3, r0
  4033ac:	460a      	mov	r2, r1
  4033ae:	71fb      	strb	r3, [r7, #7]
  4033b0:	4613      	mov	r3, r2
  4033b2:	71bb      	strb	r3, [r7, #6]
	if(direction == CW)			//enable all motors to spin the robot clockwise
  4033b4:	79fb      	ldrb	r3, [r7, #7]
  4033b6:	2b00      	cmp	r3, #0
  4033b8:	d124      	bne.n	403404 <rotateRobot+0x60>
	{
		RIN_1_High;
  4033ba:	4a2d      	ldr	r2, [pc, #180]	; (403470 <rotateRobot+0xcc>)
  4033bc:	4b2c      	ldr	r3, [pc, #176]	; (403470 <rotateRobot+0xcc>)
  4033be:	681b      	ldr	r3, [r3, #0]
  4033c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4033c4:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4033c6:	4a2b      	ldr	r2, [pc, #172]	; (403474 <rotateRobot+0xd0>)
  4033c8:	4b2a      	ldr	r3, [pc, #168]	; (403474 <rotateRobot+0xd0>)
  4033ca:	681b      	ldr	r3, [r3, #0]
  4033cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4033d0:	6013      	str	r3, [r2, #0]
		RIN_2_High;
  4033d2:	4a29      	ldr	r2, [pc, #164]	; (403478 <rotateRobot+0xd4>)
  4033d4:	4b28      	ldr	r3, [pc, #160]	; (403478 <rotateRobot+0xd4>)
  4033d6:	681b      	ldr	r3, [r3, #0]
  4033d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4033dc:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  4033de:	4a27      	ldr	r2, [pc, #156]	; (40347c <rotateRobot+0xd8>)
  4033e0:	4b26      	ldr	r3, [pc, #152]	; (40347c <rotateRobot+0xd8>)
  4033e2:	681b      	ldr	r3, [r3, #0]
  4033e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4033e8:	6013      	str	r3, [r2, #0]
		RIN_3_High;
  4033ea:	4a23      	ldr	r2, [pc, #140]	; (403478 <rotateRobot+0xd4>)
  4033ec:	4b22      	ldr	r3, [pc, #136]	; (403478 <rotateRobot+0xd4>)
  4033ee:	681b      	ldr	r3, [r3, #0]
  4033f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4033f4:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  4033f6:	4a22      	ldr	r2, [pc, #136]	; (403480 <rotateRobot+0xdc>)
  4033f8:	4b21      	ldr	r3, [pc, #132]	; (403480 <rotateRobot+0xdc>)
  4033fa:	681b      	ldr	r3, [r3, #0]
  4033fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403400:	6013      	str	r3, [r2, #0]
  403402:	e026      	b.n	403452 <rotateRobot+0xae>
	}
	else if(direction == CCW)	//enable all motors to spin the robot counter-clockwise
  403404:	79fb      	ldrb	r3, [r7, #7]
  403406:	2b01      	cmp	r3, #1
  403408:	d123      	bne.n	403452 <rotateRobot+0xae>
	{
		RIN_1_Low;
  40340a:	4a1c      	ldr	r2, [pc, #112]	; (40347c <rotateRobot+0xd8>)
  40340c:	4b1b      	ldr	r3, [pc, #108]	; (40347c <rotateRobot+0xd8>)
  40340e:	681b      	ldr	r3, [r3, #0]
  403410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403414:	6013      	str	r3, [r2, #0]
		FIN_1_High;
  403416:	4a1b      	ldr	r2, [pc, #108]	; (403484 <rotateRobot+0xe0>)
  403418:	4b1a      	ldr	r3, [pc, #104]	; (403484 <rotateRobot+0xe0>)
  40341a:	681b      	ldr	r3, [r3, #0]
  40341c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403420:	6013      	str	r3, [r2, #0]
		RIN_2_Low;
  403422:	4a17      	ldr	r2, [pc, #92]	; (403480 <rotateRobot+0xdc>)
  403424:	4b16      	ldr	r3, [pc, #88]	; (403480 <rotateRobot+0xdc>)
  403426:	681b      	ldr	r3, [r3, #0]
  403428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40342c:	6013      	str	r3, [r2, #0]
		FIN_2_High;
  40342e:	4a10      	ldr	r2, [pc, #64]	; (403470 <rotateRobot+0xcc>)
  403430:	4b0f      	ldr	r3, [pc, #60]	; (403470 <rotateRobot+0xcc>)
  403432:	681b      	ldr	r3, [r3, #0]
  403434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403438:	6013      	str	r3, [r2, #0]
		RIN_3_Low;
  40343a:	4a11      	ldr	r2, [pc, #68]	; (403480 <rotateRobot+0xdc>)
  40343c:	4b10      	ldr	r3, [pc, #64]	; (403480 <rotateRobot+0xdc>)
  40343e:	681b      	ldr	r3, [r3, #0]
  403440:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403444:	6013      	str	r3, [r2, #0]
		FIN_3_High;
  403446:	4a0c      	ldr	r2, [pc, #48]	; (403478 <rotateRobot+0xd4>)
  403448:	4b0b      	ldr	r3, [pc, #44]	; (403478 <rotateRobot+0xd4>)
  40344a:	681b      	ldr	r3, [r3, #0]
  40344c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403450:	6013      	str	r3, [r2, #0]
	}
	//Update all duty cycles to match the desired rotation speed
	REG_PWM_CUPD1 = speed;
  403452:	4a0d      	ldr	r2, [pc, #52]	; (403488 <rotateRobot+0xe4>)
  403454:	79bb      	ldrb	r3, [r7, #6]
  403456:	6013      	str	r3, [r2, #0]
	REG_PWM_CUPD2 = speed;
  403458:	4a0c      	ldr	r2, [pc, #48]	; (40348c <rotateRobot+0xe8>)
  40345a:	79bb      	ldrb	r3, [r7, #6]
  40345c:	6013      	str	r3, [r2, #0]
	REG_PWM_CUPD3 = speed;	
  40345e:	4a0c      	ldr	r2, [pc, #48]	; (403490 <rotateRobot+0xec>)
  403460:	79bb      	ldrb	r3, [r7, #6]
  403462:	6013      	str	r3, [r2, #0]
}
  403464:	bf00      	nop
  403466:	370c      	adds	r7, #12
  403468:	46bd      	mov	sp, r7
  40346a:	bc80      	pop	{r7}
  40346c:	4770      	bx	lr
  40346e:	bf00      	nop
  403470:	400e1230 	.word	0x400e1230
  403474:	400e1034 	.word	0x400e1034
  403478:	400e0e30 	.word	0x400e0e30
  40347c:	400e1234 	.word	0x400e1234
  403480:	400e0e34 	.word	0x400e0e34
  403484:	400e1030 	.word	0x400e1030
  403488:	40020230 	.word	0x40020230
  40348c:	40020250 	.word	0x40020250
  403490:	40020270 	.word	0x40020270

00403494 <dockRobot>:

//assume max brightness is 0-100 (scale it to make this work)
void dockRobot(void)
{
  403494:	b590      	push	{r4, r7, lr}
  403496:	b085      	sub	sp, #20
  403498:	af00      	add	r7, sp, #0
	//10cm away 0x0070 - 0x0100
	//20cm away 0x0030 - 0x003f
	//30cm away 0x0020 - 0x0029
	
	uint16_t rightBrightness, leftBrightness;
	float diff = 0;
  40349a:	f04f 0300 	mov.w	r3, #0
  40349e:	60fb      	str	r3, [r7, #12]
	float rightBrightnessScaled, leftBrightnessScaled;
	
	leftBrightness = LightSensor_Data_Read(Mux_LHS_LightSens);
  4034a0:	20f9      	movs	r0, #249	; 0xf9
  4034a2:	4b3d      	ldr	r3, [pc, #244]	; (403598 <dockRobot+0x104>)
  4034a4:	4798      	blx	r3
  4034a6:	4603      	mov	r3, r0
  4034a8:	817b      	strh	r3, [r7, #10]
	rightBrightness = LightSensor_Data_Read(Mux_RHS_LightSens);
  4034aa:	20f8      	movs	r0, #248	; 0xf8
  4034ac:	4b3a      	ldr	r3, [pc, #232]	; (403598 <dockRobot+0x104>)
  4034ae:	4798      	blx	r3
  4034b0:	4603      	mov	r3, r0
  4034b2:	813b      	strh	r3, [r7, #8]
	
	//frontProximity = Proximity_Data_Read(Mux_ProximityA); //need to test this
	
	if(rightBrightness > 0x0200 && leftBrightness > 0x0200)//if there is more light than ambient
  4034b4:	893b      	ldrh	r3, [r7, #8]
  4034b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034ba:	d94a      	bls.n	403552 <dockRobot+0xbe>
  4034bc:	897b      	ldrh	r3, [r7, #10]
  4034be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034c2:	d946      	bls.n	403552 <dockRobot+0xbe>
	{
		//Scale brightness to calculate required position
		rightBrightnessScaled = (rightBrightness / 0xFFFF) * 100;
  4034c4:	893b      	ldrh	r3, [r7, #8]
  4034c6:	4a35      	ldr	r2, [pc, #212]	; (40359c <dockRobot+0x108>)
  4034c8:	fba2 2303 	umull	r2, r3, r2, r3
  4034cc:	0bdb      	lsrs	r3, r3, #15
  4034ce:	b29b      	uxth	r3, r3
  4034d0:	461a      	mov	r2, r3
  4034d2:	2364      	movs	r3, #100	; 0x64
  4034d4:	fb03 f202 	mul.w	r2, r3, r2
  4034d8:	4b31      	ldr	r3, [pc, #196]	; (4035a0 <dockRobot+0x10c>)
  4034da:	4610      	mov	r0, r2
  4034dc:	4798      	blx	r3
  4034de:	4603      	mov	r3, r0
  4034e0:	607b      	str	r3, [r7, #4]
		leftBrightnessScaled = (leftBrightness / 0xFFFF) * 100;
  4034e2:	897b      	ldrh	r3, [r7, #10]
  4034e4:	4a2d      	ldr	r2, [pc, #180]	; (40359c <dockRobot+0x108>)
  4034e6:	fba2 2303 	umull	r2, r3, r2, r3
  4034ea:	0bdb      	lsrs	r3, r3, #15
  4034ec:	b29b      	uxth	r3, r3
  4034ee:	461a      	mov	r2, r3
  4034f0:	2364      	movs	r3, #100	; 0x64
  4034f2:	fb03 f202 	mul.w	r2, r3, r2
  4034f6:	4b2a      	ldr	r3, [pc, #168]	; (4035a0 <dockRobot+0x10c>)
  4034f8:	4610      	mov	r0, r2
  4034fa:	4798      	blx	r3
  4034fc:	4603      	mov	r3, r0
  4034fe:	603b      	str	r3, [r7, #0]
		//Zero Justified Normalized Differential Shade Calculation
		diff = 2 * (((rightBrightnessScaled * 100)/(rightBrightnessScaled + leftBrightnessScaled)) - 50);
  403500:	4b28      	ldr	r3, [pc, #160]	; (4035a4 <dockRobot+0x110>)
  403502:	4929      	ldr	r1, [pc, #164]	; (4035a8 <dockRobot+0x114>)
  403504:	6878      	ldr	r0, [r7, #4]
  403506:	4798      	blx	r3
  403508:	4603      	mov	r3, r0
  40350a:	461c      	mov	r4, r3
  40350c:	4b27      	ldr	r3, [pc, #156]	; (4035ac <dockRobot+0x118>)
  40350e:	6839      	ldr	r1, [r7, #0]
  403510:	6878      	ldr	r0, [r7, #4]
  403512:	4798      	blx	r3
  403514:	4603      	mov	r3, r0
  403516:	461a      	mov	r2, r3
  403518:	4b25      	ldr	r3, [pc, #148]	; (4035b0 <dockRobot+0x11c>)
  40351a:	4611      	mov	r1, r2
  40351c:	4620      	mov	r0, r4
  40351e:	4798      	blx	r3
  403520:	4603      	mov	r3, r0
  403522:	461a      	mov	r2, r3
  403524:	4b23      	ldr	r3, [pc, #140]	; (4035b4 <dockRobot+0x120>)
  403526:	4924      	ldr	r1, [pc, #144]	; (4035b8 <dockRobot+0x124>)
  403528:	4610      	mov	r0, r2
  40352a:	4798      	blx	r3
  40352c:	4603      	mov	r3, r0
  40352e:	461a      	mov	r2, r3
  403530:	4b1e      	ldr	r3, [pc, #120]	; (4035ac <dockRobot+0x118>)
  403532:	4611      	mov	r1, r2
  403534:	4610      	mov	r0, r2
  403536:	4798      	blx	r3
  403538:	4603      	mov	r3, r0
  40353a:	60fb      	str	r3, [r7, #12]
		//Convert to degrees
		moveRobot(diff/2, 50);
  40353c:	4b1c      	ldr	r3, [pc, #112]	; (4035b0 <dockRobot+0x11c>)
  40353e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403542:	68f8      	ldr	r0, [r7, #12]
  403544:	4798      	blx	r3
  403546:	4603      	mov	r3, r0
  403548:	2132      	movs	r1, #50	; 0x32
  40354a:	4618      	mov	r0, r3
  40354c:	4b1b      	ldr	r3, [pc, #108]	; (4035bc <dockRobot+0x128>)
  40354e:	4798      	blx	r3
  403550:	e01e      	b.n	403590 <dockRobot+0xfc>
	}
	else if((leftBrightness > 0x1000 || rightBrightness >  0x1000))// && frontProximity > 0x0300)
  403552:	897b      	ldrh	r3, [r7, #10]
  403554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  403558:	d803      	bhi.n	403562 <dockRobot+0xce>
  40355a:	893b      	ldrh	r3, [r7, #8]
  40355c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  403560:	d902      	bls.n	403568 <dockRobot+0xd4>
	{
		stopRobot();
  403562:	4b17      	ldr	r3, [pc, #92]	; (4035c0 <dockRobot+0x12c>)
  403564:	4798      	blx	r3
  403566:	e013      	b.n	403590 <dockRobot+0xfc>
	}
	else if((rightBrightness - leftBrightness) > 0x009F)
  403568:	893a      	ldrh	r2, [r7, #8]
  40356a:	897b      	ldrh	r3, [r7, #10]
  40356c:	1ad3      	subs	r3, r2, r3
  40356e:	2b9f      	cmp	r3, #159	; 0x9f
  403570:	dd04      	ble.n	40357c <dockRobot+0xe8>
	{
		rotateRobot(CW, 30); //turn right
  403572:	211e      	movs	r1, #30
  403574:	2000      	movs	r0, #0
  403576:	4b13      	ldr	r3, [pc, #76]	; (4035c4 <dockRobot+0x130>)
  403578:	4798      	blx	r3
	}
	else if((leftBrightness - rightBrightness) > 0x009F)
	{
		rotateRobot(CCW, 30);//turn left
	}
}
  40357a:	e009      	b.n	403590 <dockRobot+0xfc>
	}
	else if((rightBrightness - leftBrightness) > 0x009F)
	{
		rotateRobot(CW, 30); //turn right
	}
	else if((leftBrightness - rightBrightness) > 0x009F)
  40357c:	897a      	ldrh	r2, [r7, #10]
  40357e:	893b      	ldrh	r3, [r7, #8]
  403580:	1ad3      	subs	r3, r2, r3
  403582:	2b9f      	cmp	r3, #159	; 0x9f
  403584:	dd04      	ble.n	403590 <dockRobot+0xfc>
	{
		rotateRobot(CCW, 30);//turn left
  403586:	211e      	movs	r1, #30
  403588:	2001      	movs	r0, #1
  40358a:	4b0e      	ldr	r3, [pc, #56]	; (4035c4 <dockRobot+0x130>)
  40358c:	4798      	blx	r3
	}
}
  40358e:	e7ff      	b.n	403590 <dockRobot+0xfc>
  403590:	bf00      	nop
  403592:	3714      	adds	r7, #20
  403594:	46bd      	mov	sp, r7
  403596:	bd90      	pop	{r4, r7, pc}
  403598:	00402d79 	.word	0x00402d79
  40359c:	80008001 	.word	0x80008001
  4035a0:	00406545 	.word	0x00406545
  4035a4:	004065ed 	.word	0x004065ed
  4035a8:	42c80000 	.word	0x42c80000
  4035ac:	004063dd 	.word	0x004063dd
  4035b0:	00406755 	.word	0x00406755
  4035b4:	004063d9 	.word	0x004063d9
  4035b8:	42480000 	.word	0x42480000
  4035bc:	00403019 	.word	0x00403019
  4035c0:	004035c9 	.word	0x004035c9
  4035c4:	004033a5 	.word	0x004033a5

004035c8 <stopRobot>:

void stopRobot(void)
{
  4035c8:	b480      	push	{r7}
  4035ca:	af00      	add	r7, sp, #0
	//Stops the robot from moving
	FIN_1_Low;
  4035cc:	4a13      	ldr	r2, [pc, #76]	; (40361c <stopRobot+0x54>)
  4035ce:	4b13      	ldr	r3, [pc, #76]	; (40361c <stopRobot+0x54>)
  4035d0:	681b      	ldr	r3, [r3, #0]
  4035d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4035d6:	6013      	str	r3, [r2, #0]
	RIN_1_Low;
  4035d8:	4a11      	ldr	r2, [pc, #68]	; (403620 <stopRobot+0x58>)
  4035da:	4b11      	ldr	r3, [pc, #68]	; (403620 <stopRobot+0x58>)
  4035dc:	681b      	ldr	r3, [r3, #0]
  4035de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4035e2:	6013      	str	r3, [r2, #0]
	FIN_2_Low;
  4035e4:	4a0e      	ldr	r2, [pc, #56]	; (403620 <stopRobot+0x58>)
  4035e6:	4b0e      	ldr	r3, [pc, #56]	; (403620 <stopRobot+0x58>)
  4035e8:	681b      	ldr	r3, [r3, #0]
  4035ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4035ee:	6013      	str	r3, [r2, #0]
	RIN_2_Low;
  4035f0:	4a0c      	ldr	r2, [pc, #48]	; (403624 <stopRobot+0x5c>)
  4035f2:	4b0c      	ldr	r3, [pc, #48]	; (403624 <stopRobot+0x5c>)
  4035f4:	681b      	ldr	r3, [r3, #0]
  4035f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4035fa:	6013      	str	r3, [r2, #0]
	FIN_3_Low;
  4035fc:	4a09      	ldr	r2, [pc, #36]	; (403624 <stopRobot+0x5c>)
  4035fe:	4b09      	ldr	r3, [pc, #36]	; (403624 <stopRobot+0x5c>)
  403600:	681b      	ldr	r3, [r3, #0]
  403602:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403606:	6013      	str	r3, [r2, #0]
	RIN_3_Low;
  403608:	4a06      	ldr	r2, [pc, #24]	; (403624 <stopRobot+0x5c>)
  40360a:	4b06      	ldr	r3, [pc, #24]	; (403624 <stopRobot+0x5c>)
  40360c:	681b      	ldr	r3, [r3, #0]
  40360e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403612:	6013      	str	r3, [r2, #0]
  403614:	bf00      	nop
  403616:	46bd      	mov	sp, r7
  403618:	bc80      	pop	{r7}
  40361a:	4770      	bx	lr
  40361c:	400e1034 	.word	0x400e1034
  403620:	400e1234 	.word	0x400e1234
  403624:	400e0e34 	.word	0x400e0e34

00403628 <SPI_Init>:
* In this Swarm robotics project this is already handled by the included spi.h header file
* If this was not included it either needs to be added or the host PC version of spi.h for the SAM4N8C needs to be updated
*
*/
void SPI_Init(void)
{
  403628:	b480      	push	{r7}
  40362a:	af00      	add	r7, sp, #0
	REG_PMC_PCER0 |= PMC_PCER0_PID21;		//Enable clock access to SPI
  40362c:	4a2b      	ldr	r2, [pc, #172]	; (4036dc <SPI_Init+0xb4>)
  40362e:	4b2b      	ldr	r3, [pc, #172]	; (4036dc <SPI_Init+0xb4>)
  403630:	681b      	ldr	r3, [r3, #0]
  403632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  403636:	6013      	str	r3, [r2, #0]
	REG_SPI_WPMR |= (SPI_KEY<<8);
  403638:	4929      	ldr	r1, [pc, #164]	; (4036e0 <SPI_Init+0xb8>)
  40363a:	4b29      	ldr	r3, [pc, #164]	; (4036e0 <SPI_Init+0xb8>)
  40363c:	681a      	ldr	r2, [r3, #0]
  40363e:	4b29      	ldr	r3, [pc, #164]	; (4036e4 <SPI_Init+0xbc>)
  403640:	4313      	orrs	r3, r2
  403642:	600b      	str	r3, [r1, #0]
	REG_SPI_WPMR &= ~(1<<0);				//Disable SPI write protect
  403644:	4a26      	ldr	r2, [pc, #152]	; (4036e0 <SPI_Init+0xb8>)
  403646:	4b26      	ldr	r3, [pc, #152]	; (4036e0 <SPI_Init+0xb8>)
  403648:	681b      	ldr	r3, [r3, #0]
  40364a:	f023 0301 	bic.w	r3, r3, #1
  40364e:	6013      	str	r3, [r2, #0]
	
	REG_SPI_CR |= SPI_CR_SWRST;				//Software reset
  403650:	4a25      	ldr	r2, [pc, #148]	; (4036e8 <SPI_Init+0xc0>)
  403652:	4b25      	ldr	r3, [pc, #148]	; (4036e8 <SPI_Init+0xc0>)
  403654:	681b      	ldr	r3, [r3, #0]
  403656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40365a:	6013      	str	r3, [r2, #0]
	//Give control of MOSI, MISO & SCLK pins to SPI
	REG_PIOA_PDR |= PIO_PDR_P12;			//Give control of MISO to SPI
  40365c:	4a23      	ldr	r2, [pc, #140]	; (4036ec <SPI_Init+0xc4>)
  40365e:	4b23      	ldr	r3, [pc, #140]	; (4036ec <SPI_Init+0xc4>)
  403660:	681b      	ldr	r3, [r3, #0]
  403662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403666:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P13;			//Give control of MOSI to SPI
  403668:	4a20      	ldr	r2, [pc, #128]	; (4036ec <SPI_Init+0xc4>)
  40366a:	4b20      	ldr	r3, [pc, #128]	; (4036ec <SPI_Init+0xc4>)
  40366c:	681b      	ldr	r3, [r3, #0]
  40366e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403672:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P14;			//Give control of SCLK to SPI
  403674:	4a1d      	ldr	r2, [pc, #116]	; (4036ec <SPI_Init+0xc4>)
  403676:	4b1d      	ldr	r3, [pc, #116]	; (4036ec <SPI_Init+0xc4>)
  403678:	681b      	ldr	r3, [r3, #0]
  40367a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40367e:	6013      	str	r3, [r2, #0]
	REG_PIOB_PER |= (1<<14);				//Enable PIO control of PB14
  403680:	4a1b      	ldr	r2, [pc, #108]	; (4036f0 <SPI_Init+0xc8>)
  403682:	4b1b      	ldr	r3, [pc, #108]	; (4036f0 <SPI_Init+0xc8>)
  403684:	681b      	ldr	r3, [r3, #0]
  403686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40368a:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<14);				//Set PB14 as output
  40368c:	4a19      	ldr	r2, [pc, #100]	; (4036f4 <SPI_Init+0xcc>)
  40368e:	4b19      	ldr	r3, [pc, #100]	; (4036f4 <SPI_Init+0xcc>)
  403690:	681b      	ldr	r3, [r3, #0]
  403692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  403696:	6013      	str	r3, [r2, #0]
	REG_SPI_CR |= SPI_CR_SPIEN; 	
  403698:	4a13      	ldr	r2, [pc, #76]	; (4036e8 <SPI_Init+0xc0>)
  40369a:	4b13      	ldr	r3, [pc, #76]	; (4036e8 <SPI_Init+0xc0>)
  40369c:	681b      	ldr	r3, [r3, #0]
  40369e:	f043 0301 	orr.w	r3, r3, #1
  4036a2:	6013      	str	r3, [r2, #0]
	//REG_PIOB_PDR |= PIO_PDR_P14; //Give control of NPCS1 (on PB14/Pin 99) to SPI
	REG_SPI_MR |= SPI_MR_MSTR;				//SPI in Master Mode
  4036a4:	4a14      	ldr	r2, [pc, #80]	; (4036f8 <SPI_Init+0xd0>)
  4036a6:	4b14      	ldr	r3, [pc, #80]	; (4036f8 <SPI_Init+0xd0>)
  4036a8:	681b      	ldr	r3, [r3, #0]
  4036aa:	f043 0301 	orr.w	r3, r3, #1
  4036ae:	6013      	str	r3, [r2, #0]
	REG_SPI_MR &= ~SPI_MR_PS;				//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
  4036b0:	4a11      	ldr	r2, [pc, #68]	; (4036f8 <SPI_Init+0xd0>)
  4036b2:	4b11      	ldr	r3, [pc, #68]	; (4036f8 <SPI_Init+0xd0>)
  4036b4:	681b      	ldr	r3, [r3, #0]
  4036b6:	f023 0302 	bic.w	r3, r3, #2
  4036ba:	6013      	str	r3, [r2, #0]
	REG_SPI_MR |= SPI_MR_PCS(0b1101); //set slave to NPCS1 (only works while SPI_MR_PS = 0)	
  4036bc:	4a0e      	ldr	r2, [pc, #56]	; (4036f8 <SPI_Init+0xd0>)
  4036be:	4b0e      	ldr	r3, [pc, #56]	; (4036f8 <SPI_Init+0xd0>)
  4036c0:	681b      	ldr	r3, [r3, #0]
  4036c2:	f443 2350 	orr.w	r3, r3, #851968	; 0xd0000
  4036c6:	6013      	str	r3, [r2, #0]
	REG_SPI_CSR1 |= (1<<0) | (0xF0<<8) | (0x17<<24); // CPOL=1, 500k baud (2us period), 6us DLYBCT
  4036c8:	490c      	ldr	r1, [pc, #48]	; (4036fc <SPI_Init+0xd4>)
  4036ca:	4b0c      	ldr	r3, [pc, #48]	; (4036fc <SPI_Init+0xd4>)
  4036cc:	681a      	ldr	r2, [r3, #0]
  4036ce:	4b0c      	ldr	r3, [pc, #48]	; (403700 <SPI_Init+0xd8>)
  4036d0:	4313      	orrs	r3, r2
  4036d2:	600b      	str	r3, [r1, #0]
}
  4036d4:	bf00      	nop
  4036d6:	46bd      	mov	sp, r7
  4036d8:	bc80      	pop	{r7}
  4036da:	4770      	bx	lr
  4036dc:	400e0410 	.word	0x400e0410
  4036e0:	400080e4 	.word	0x400080e4
  4036e4:	53504900 	.word	0x53504900
  4036e8:	40008000 	.word	0x40008000
  4036ec:	400e0e04 	.word	0x400e0e04
  4036f0:	400e1000 	.word	0x400e1000
  4036f4:	400e1010 	.word	0x400e1010
  4036f8:	40008004 	.word	0x40008004
  4036fc:	40008034 	.word	0x40008034
  403700:	1700f001 	.word	0x1700f001
  403704:	00000000 	.word	0x00000000

00403708 <getMouseXY>:
* this is then combined with the lower values and given the correct sign (using 2s complement)
* before being written to the opticaldx and opticaldy members of the position structure
*
*/
void getMouseXY(struct Position *mousePos)
{
  403708:	b590      	push	{r4, r7, lr}
  40370a:	b087      	sub	sp, #28
  40370c:	af00      	add	r7, sp, #0
  40370e:	6078      	str	r0, [r7, #4]
	int Xtemp = 0, Ytemp = 0;
  403710:	2300      	movs	r3, #0
  403712:	617b      	str	r3, [r7, #20]
  403714:	2300      	movs	r3, #0
  403716:	613b      	str	r3, [r7, #16]
	char topX, topY, data2, data3, data4, data5;
	data2 = SPI_Read(OPT_OBSERVATION);
  403718:	202e      	movs	r0, #46	; 0x2e
  40371a:	4b35      	ldr	r3, [pc, #212]	; (4037f0 <getMouseXY+0xe8>)
  40371c:	4798      	blx	r3
  40371e:	4603      	mov	r3, r0
  403720:	73fb      	strb	r3, [r7, #15]
	if(data2 & (1<<7))
  403722:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403726:	2b00      	cmp	r3, #0
  403728:	da59      	bge.n	4037de <getMouseXY+0xd6>
	{
		data3 = SPI_Read(OPT_DELTA_X_L);	//delta x low
  40372a:	2003      	movs	r0, #3
  40372c:	4b30      	ldr	r3, [pc, #192]	; (4037f0 <getMouseXY+0xe8>)
  40372e:	4798      	blx	r3
  403730:	4603      	mov	r3, r0
  403732:	73bb      	strb	r3, [r7, #14]
		data4 = SPI_Read(OPT_DELTA_Y_L);	//delta y low
  403734:	2004      	movs	r0, #4
  403736:	4b2e      	ldr	r3, [pc, #184]	; (4037f0 <getMouseXY+0xe8>)
  403738:	4798      	blx	r3
  40373a:	4603      	mov	r3, r0
  40373c:	737b      	strb	r3, [r7, #13]
		data5 = SPI_Read(OPT_DELTA_XY_H);	//delta xy high
  40373e:	2005      	movs	r0, #5
  403740:	4b2b      	ldr	r3, [pc, #172]	; (4037f0 <getMouseXY+0xe8>)
  403742:	4798      	blx	r3
  403744:	4603      	mov	r3, r0
  403746:	733b      	strb	r3, [r7, #12]
		topX = (data5 & (0xF0)) >> 4;		//only read the 4 MSB of data5
  403748:	7b3b      	ldrb	r3, [r7, #12]
  40374a:	091b      	lsrs	r3, r3, #4
  40374c:	72fb      	strb	r3, [r7, #11]
		topY = data5 & (0x0F);				//only read the 4 LSB of data5
  40374e:	7b3b      	ldrb	r3, [r7, #12]
  403750:	f003 030f 	and.w	r3, r3, #15
  403754:	72bb      	strb	r3, [r7, #10]
		Xtemp = data3 | (topX << 8);
  403756:	7bba      	ldrb	r2, [r7, #14]
  403758:	7afb      	ldrb	r3, [r7, #11]
  40375a:	021b      	lsls	r3, r3, #8
  40375c:	4313      	orrs	r3, r2
  40375e:	617b      	str	r3, [r7, #20]
		Ytemp = data4 | (topY << 8);
  403760:	7b7a      	ldrb	r2, [r7, #13]
  403762:	7abb      	ldrb	r3, [r7, #10]
  403764:	021b      	lsls	r3, r3, #8
  403766:	4313      	orrs	r3, r2
  403768:	613b      	str	r3, [r7, #16]
		if(Xtemp & (1<<12))					//if MSB of X is set (for 2s complement)
  40376a:	697b      	ldr	r3, [r7, #20]
  40376c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  403770:	2b00      	cmp	r3, #0
  403772:	d003      	beq.n	40377c <getMouseXY+0x74>
		{
			Xtemp -= 4096;
  403774:	697b      	ldr	r3, [r7, #20]
  403776:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
  40377a:	617b      	str	r3, [r7, #20]
		}
		mousePos->opticaldx = Xtemp * RESOLUTION;
  40377c:	4b1d      	ldr	r3, [pc, #116]	; (4037f4 <getMouseXY+0xec>)
  40377e:	6978      	ldr	r0, [r7, #20]
  403780:	4798      	blx	r3
  403782:	4c1d      	ldr	r4, [pc, #116]	; (4037f8 <getMouseXY+0xf0>)
  403784:	a318      	add	r3, pc, #96	; (adr r3, 4037e8 <getMouseXY+0xe0>)
  403786:	e9d3 2300 	ldrd	r2, r3, [r3]
  40378a:	47a0      	blx	r4
  40378c:	4603      	mov	r3, r0
  40378e:	460c      	mov	r4, r1
  403790:	4619      	mov	r1, r3
  403792:	4622      	mov	r2, r4
  403794:	4b19      	ldr	r3, [pc, #100]	; (4037fc <getMouseXY+0xf4>)
  403796:	4608      	mov	r0, r1
  403798:	4611      	mov	r1, r2
  40379a:	4798      	blx	r3
  40379c:	4603      	mov	r3, r0
  40379e:	b29a      	uxth	r2, r3
  4037a0:	687b      	ldr	r3, [r7, #4]
  4037a2:	801a      	strh	r2, [r3, #0]
		if(Ytemp & (1<<12))					//if MSB of Y is set (for 2s complement)
  4037a4:	693b      	ldr	r3, [r7, #16]
  4037a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4037aa:	2b00      	cmp	r3, #0
  4037ac:	d003      	beq.n	4037b6 <getMouseXY+0xae>
		{
			Ytemp -= 4096;
  4037ae:	693b      	ldr	r3, [r7, #16]
  4037b0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
  4037b4:	613b      	str	r3, [r7, #16]
		}
		mousePos->opticaldy = Ytemp * RESOLUTION;
  4037b6:	4b0f      	ldr	r3, [pc, #60]	; (4037f4 <getMouseXY+0xec>)
  4037b8:	6938      	ldr	r0, [r7, #16]
  4037ba:	4798      	blx	r3
  4037bc:	4c0e      	ldr	r4, [pc, #56]	; (4037f8 <getMouseXY+0xf0>)
  4037be:	a30a      	add	r3, pc, #40	; (adr r3, 4037e8 <getMouseXY+0xe0>)
  4037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037c4:	47a0      	blx	r4
  4037c6:	4603      	mov	r3, r0
  4037c8:	460c      	mov	r4, r1
  4037ca:	4619      	mov	r1, r3
  4037cc:	4622      	mov	r2, r4
  4037ce:	4b0b      	ldr	r3, [pc, #44]	; (4037fc <getMouseXY+0xf4>)
  4037d0:	4608      	mov	r0, r1
  4037d2:	4611      	mov	r1, r2
  4037d4:	4798      	blx	r3
  4037d6:	4603      	mov	r3, r0
  4037d8:	b29a      	uxth	r2, r3
  4037da:	687b      	ldr	r3, [r7, #4]
  4037dc:	805a      	strh	r2, [r3, #2]
	}
}
  4037de:	bf00      	nop
  4037e0:	371c      	adds	r7, #28
  4037e2:	46bd      	mov	sp, r7
  4037e4:	bd90      	pop	{r4, r7, pc}
  4037e6:	bf00      	nop
  4037e8:	47ae147b 	.word	0x47ae147b
  4037ec:	3f547ae1 	.word	0x3f547ae1
  4037f0:	00403801 	.word	0x00403801
  4037f4:	00405ca1 	.word	0x00405ca1
  4037f8:	00405d6d 	.word	0x00405d6d
  4037fc:	004062f1 	.word	0x004062f1

00403800 <SPI_Read>:
* Repeat the process
* When the flag is set the received data register will contain the desired data
* 
*/
char SPI_Read(char readAddress)
{
  403800:	b480      	push	{r7}
  403802:	b085      	sub	sp, #20
  403804:	af00      	add	r7, sp, #0
  403806:	4603      	mov	r3, r0
  403808:	71fb      	strb	r3, [r7, #7]
	char data;
	data = REG_SPI_RDR;						//Read the RDR to ensure that the RDRF flag is reset.
  40380a:	4b14      	ldr	r3, [pc, #80]	; (40385c <SPI_Read+0x5c>)
  40380c:	681b      	ldr	r3, [r3, #0]
  40380e:	73fb      	strb	r3, [r7, #15]
	REG_SPI_TDR |= (readAddress);			//Load TDR with peripheral register to be read from. 0  in bit 7 which indicates a reading operation.
  403810:	4913      	ldr	r1, [pc, #76]	; (403860 <SPI_Read+0x60>)
  403812:	4b13      	ldr	r3, [pc, #76]	; (403860 <SPI_Read+0x60>)
  403814:	681a      	ldr	r2, [r3, #0]
  403816:	79fb      	ldrb	r3, [r7, #7]
  403818:	4313      	orrs	r3, r2
  40381a:	600b      	str	r3, [r1, #0]
	while(!(REG_SPI_SR & (1<<0)));			//Wait for first RDRF flag.
  40381c:	bf00      	nop
  40381e:	4b11      	ldr	r3, [pc, #68]	; (403864 <SPI_Read+0x64>)
  403820:	681b      	ldr	r3, [r3, #0]
  403822:	f003 0301 	and.w	r3, r3, #1
  403826:	2b00      	cmp	r3, #0
  403828:	d0f9      	beq.n	40381e <SPI_Read+0x1e>
	data = REG_SPI_RDR;						//First lot of data which will be incorrect. Its only being read to reset the RDRF flag.
  40382a:	4b0c      	ldr	r3, [pc, #48]	; (40385c <SPI_Read+0x5c>)
  40382c:	681b      	ldr	r3, [r3, #0]
  40382e:	73fb      	strb	r3, [r7, #15]
	REG_SPI_TDR |= (readAddress);			//Load TDR again.
  403830:	490b      	ldr	r1, [pc, #44]	; (403860 <SPI_Read+0x60>)
  403832:	4b0b      	ldr	r3, [pc, #44]	; (403860 <SPI_Read+0x60>)
  403834:	681a      	ldr	r2, [r3, #0]
  403836:	79fb      	ldrb	r3, [r7, #7]
  403838:	4313      	orrs	r3, r2
  40383a:	600b      	str	r3, [r1, #0]
	while(!(REG_SPI_SR & (1<<0)));			//Wait for second RDRF flag.
  40383c:	bf00      	nop
  40383e:	4b09      	ldr	r3, [pc, #36]	; (403864 <SPI_Read+0x64>)
  403840:	681b      	ldr	r3, [r3, #0]
  403842:	f003 0301 	and.w	r3, r3, #1
  403846:	2b00      	cmp	r3, #0
  403848:	d0f9      	beq.n	40383e <SPI_Read+0x3e>
	data = REG_SPI_RDR;						//Read the correct data
  40384a:	4b04      	ldr	r3, [pc, #16]	; (40385c <SPI_Read+0x5c>)
  40384c:	681b      	ldr	r3, [r3, #0]
  40384e:	73fb      	strb	r3, [r7, #15]
	return data;
  403850:	7bfb      	ldrb	r3, [r7, #15]
}
  403852:	4618      	mov	r0, r3
  403854:	3714      	adds	r7, #20
  403856:	46bd      	mov	sp, r7
  403858:	bc80      	pop	{r7}
  40385a:	4770      	bx	lr
  40385c:	40008008 	.word	0x40008008
  403860:	4000800c 	.word	0x4000800c
  403864:	40008010 	.word	0x40008010

00403868 <initImu>:
* Next the update rate of the first in first out buffer is set, and the DMP system is started on
* the IMU.
*
*/
int initImu(void)
{
  403868:	b580      	push	{r7, lr}
  40386a:	b084      	sub	sp, #16
  40386c:	af00      	add	r7, sp, #0
	unsigned char accel_fsr;
	unsigned short gyro_rate, gyro_fsr;
	int result = 0;
  40386e:	2300      	movs	r3, #0
  403870:	60fb      	str	r3, [r7, #12]
		0,	-1,	 0,
		0,	 0,	 1
	};

	//Initialise the IMU's driver	
	result += mpu_init(0);								// Initialise the MPU with no interrupts
  403872:	2000      	movs	r0, #0
  403874:	4b2f      	ldr	r3, [pc, #188]	; (403934 <initImu+0xcc>)
  403876:	4798      	blx	r3
  403878:	4602      	mov	r2, r0
  40387a:	68fb      	ldr	r3, [r7, #12]
  40387c:	4413      	add	r3, r2
  40387e:	60fb      	str	r3, [r7, #12]
	result += mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);// Wake up all sensors
  403880:	2079      	movs	r0, #121	; 0x79
  403882:	4b2d      	ldr	r3, [pc, #180]	; (403938 <initImu+0xd0>)
  403884:	4798      	blx	r3
  403886:	4602      	mov	r2, r0
  403888:	68fb      	ldr	r3, [r7, #12]
  40388a:	4413      	add	r3, r2
  40388c:	60fb      	str	r3, [r7, #12]
	result += mpu_set_sample_rate(200);				// Set 200Hz sample rate (for accel and gyro)
  40388e:	20c8      	movs	r0, #200	; 0xc8
  403890:	4b2a      	ldr	r3, [pc, #168]	; (40393c <initImu+0xd4>)
  403892:	4798      	blx	r3
  403894:	4602      	mov	r2, r0
  403896:	68fb      	ldr	r3, [r7, #12]
  403898:	4413      	add	r3, r2
  40389a:	60fb      	str	r3, [r7, #12]
														
	result += mpu_set_compass_sample_rate(100);			// Set 100Hz compass sample rate (max)
  40389c:	2064      	movs	r0, #100	; 0x64
  40389e:	4b28      	ldr	r3, [pc, #160]	; (403940 <initImu+0xd8>)
  4038a0:	4798      	blx	r3
  4038a2:	4602      	mov	r2, r0
  4038a4:	68fb      	ldr	r3, [r7, #12]
  4038a6:	4413      	add	r3, r2
  4038a8:	60fb      	str	r3, [r7, #12]
	
	//Read back configuration in case it was set improperly.
	result += mpu_get_sample_rate(&gyro_rate);
  4038aa:	f107 0308 	add.w	r3, r7, #8
  4038ae:	4618      	mov	r0, r3
  4038b0:	4b24      	ldr	r3, [pc, #144]	; (403944 <initImu+0xdc>)
  4038b2:	4798      	blx	r3
  4038b4:	4602      	mov	r2, r0
  4038b6:	68fb      	ldr	r3, [r7, #12]
  4038b8:	4413      	add	r3, r2
  4038ba:	60fb      	str	r3, [r7, #12]
	result += mpu_get_gyro_fsr(&gyro_fsr);
  4038bc:	1dbb      	adds	r3, r7, #6
  4038be:	4618      	mov	r0, r3
  4038c0:	4b21      	ldr	r3, [pc, #132]	; (403948 <initImu+0xe0>)
  4038c2:	4798      	blx	r3
  4038c4:	4602      	mov	r2, r0
  4038c6:	68fb      	ldr	r3, [r7, #12]
  4038c8:	4413      	add	r3, r2
  4038ca:	60fb      	str	r3, [r7, #12]
	result += mpu_get_accel_fsr(&accel_fsr);
  4038cc:	f107 030b 	add.w	r3, r7, #11
  4038d0:	4618      	mov	r0, r3
  4038d2:	4b1e      	ldr	r3, [pc, #120]	; (40394c <initImu+0xe4>)
  4038d4:	4798      	blx	r3
  4038d6:	4602      	mov	r2, r0
  4038d8:	68fb      	ldr	r3, [r7, #12]
  4038da:	4413      	add	r3, r2
  4038dc:	60fb      	str	r3, [r7, #12]
	
	result += dmp_load_motion_driver_firmware();		// Load the DMP firmware
  4038de:	4b1c      	ldr	r3, [pc, #112]	; (403950 <initImu+0xe8>)
  4038e0:	4798      	blx	r3
  4038e2:	4602      	mov	r2, r0
  4038e4:	68fb      	ldr	r3, [r7, #12]
  4038e6:	4413      	add	r3, r2
  4038e8:	60fb      	str	r3, [r7, #12]
	//Send the orientation correction matrix
	result += dmp_set_orientation(invOrientationMatrixToScalar(gyro_orientation));
  4038ea:	481a      	ldr	r0, [pc, #104]	; (403954 <initImu+0xec>)
  4038ec:	4b1a      	ldr	r3, [pc, #104]	; (403958 <initImu+0xf0>)
  4038ee:	4798      	blx	r3
  4038f0:	4603      	mov	r3, r0
  4038f2:	4618      	mov	r0, r3
  4038f4:	4b19      	ldr	r3, [pc, #100]	; (40395c <initImu+0xf4>)
  4038f6:	4798      	blx	r3
  4038f8:	4602      	mov	r2, r0
  4038fa:	68fb      	ldr	r3, [r7, #12]
  4038fc:	4413      	add	r3, r2
  4038fe:	60fb      	str	r3, [r7, #12]
	//result += dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | 
	//								DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL);
	result += dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT);//Enable 6 axis low power quaternions
  403900:	2010      	movs	r0, #16
  403902:	4b17      	ldr	r3, [pc, #92]	; (403960 <initImu+0xf8>)
  403904:	4798      	blx	r3
  403906:	4602      	mov	r2, r0
  403908:	68fb      	ldr	r3, [r7, #12]
  40390a:	4413      	add	r3, r2
  40390c:	60fb      	str	r3, [r7, #12]
	result += dmp_set_fifo_rate(200);					//200Hz update rate from the FIFO
  40390e:	20c8      	movs	r0, #200	; 0xc8
  403910:	4b14      	ldr	r3, [pc, #80]	; (403964 <initImu+0xfc>)
  403912:	4798      	blx	r3
  403914:	4602      	mov	r2, r0
  403916:	68fb      	ldr	r3, [r7, #12]
  403918:	4413      	add	r3, r2
  40391a:	60fb      	str	r3, [r7, #12]
	result += mpu_set_dmp_state(1);						//Start DMP
  40391c:	2001      	movs	r0, #1
  40391e:	4b12      	ldr	r3, [pc, #72]	; (403968 <initImu+0x100>)
  403920:	4798      	blx	r3
  403922:	4602      	mov	r2, r0
  403924:	68fb      	ldr	r3, [r7, #12]
  403926:	4413      	add	r3, r2
  403928:	60fb      	str	r3, [r7, #12]
	return result;
  40392a:	68fb      	ldr	r3, [r7, #12]
}
  40392c:	4618      	mov	r0, r3
  40392e:	3710      	adds	r7, #16
  403930:	46bd      	mov	sp, r7
  403932:	bd80      	pop	{r7, pc}
  403934:	00400e71 	.word	0x00400e71
  403938:	004018c9 	.word	0x004018c9
  40393c:	004016a9 	.word	0x004016a9
  403940:	00401799 	.word	0x00401799
  403944:	00401679 	.word	0x00401679
  403948:	00401381 	.word	0x00401381
  40394c:	00401491 	.word	0x00401491
  403950:	00402261 	.word	0x00402261
  403954:	20000038 	.word	0x20000038
  403958:	0040396d 	.word	0x0040396d
  40395c:	00402285 	.word	0x00402285
  403960:	004029a5 	.word	0x004029a5
  403964:	0040245d 	.word	0x0040245d
  403968:	00401f19 	.word	0x00401f19

0040396c <invOrientationMatrixToScalar>:
* Implementation:
* TODO
*
*/
unsigned short invOrientationMatrixToScalar(const signed char *mtx)
{
  40396c:	b580      	push	{r7, lr}
  40396e:	b084      	sub	sp, #16
  403970:	af00      	add	r7, sp, #0
  403972:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = invRow2Scale(mtx);
  403974:	6878      	ldr	r0, [r7, #4]
  403976:	4b11      	ldr	r3, [pc, #68]	; (4039bc <invOrientationMatrixToScalar+0x50>)
  403978:	4798      	blx	r3
  40397a:	4603      	mov	r3, r0
  40397c:	81fb      	strh	r3, [r7, #14]
    scalar |= invRow2Scale(mtx + 3) << 3;
  40397e:	687b      	ldr	r3, [r7, #4]
  403980:	3303      	adds	r3, #3
  403982:	4618      	mov	r0, r3
  403984:	4b0d      	ldr	r3, [pc, #52]	; (4039bc <invOrientationMatrixToScalar+0x50>)
  403986:	4798      	blx	r3
  403988:	4603      	mov	r3, r0
  40398a:	00db      	lsls	r3, r3, #3
  40398c:	b21a      	sxth	r2, r3
  40398e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  403992:	4313      	orrs	r3, r2
  403994:	b21b      	sxth	r3, r3
  403996:	81fb      	strh	r3, [r7, #14]
    scalar |= invRow2Scale(mtx + 6) << 6;
  403998:	687b      	ldr	r3, [r7, #4]
  40399a:	3306      	adds	r3, #6
  40399c:	4618      	mov	r0, r3
  40399e:	4b07      	ldr	r3, [pc, #28]	; (4039bc <invOrientationMatrixToScalar+0x50>)
  4039a0:	4798      	blx	r3
  4039a2:	4603      	mov	r3, r0
  4039a4:	019b      	lsls	r3, r3, #6
  4039a6:	b21a      	sxth	r2, r3
  4039a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  4039ac:	4313      	orrs	r3, r2
  4039ae:	b21b      	sxth	r3, r3
  4039b0:	81fb      	strh	r3, [r7, #14]

    return scalar;
  4039b2:	89fb      	ldrh	r3, [r7, #14]
}
  4039b4:	4618      	mov	r0, r3
  4039b6:	3710      	adds	r7, #16
  4039b8:	46bd      	mov	sp, r7
  4039ba:	bd80      	pop	{r7, pc}
  4039bc:	004039c1 	.word	0x004039c1

004039c0 <invRow2Scale>:
* Implementation:
* TODO
*
*/
unsigned short invRow2Scale(const signed char *row)
{
  4039c0:	b480      	push	{r7}
  4039c2:	b085      	sub	sp, #20
  4039c4:	af00      	add	r7, sp, #0
  4039c6:	6078      	str	r0, [r7, #4]
	unsigned short b;

	if (row[0] > 0)
  4039c8:	687b      	ldr	r3, [r7, #4]
  4039ca:	f993 3000 	ldrsb.w	r3, [r3]
  4039ce:	2b00      	cmp	r3, #0
  4039d0:	dd02      	ble.n	4039d8 <invRow2Scale+0x18>
	b = 0;
  4039d2:	2300      	movs	r3, #0
  4039d4:	81fb      	strh	r3, [r7, #14]
  4039d6:	e02d      	b.n	403a34 <invRow2Scale+0x74>
	else if (row[0] < 0)
  4039d8:	687b      	ldr	r3, [r7, #4]
  4039da:	f993 3000 	ldrsb.w	r3, [r3]
  4039de:	2b00      	cmp	r3, #0
  4039e0:	da02      	bge.n	4039e8 <invRow2Scale+0x28>
	b = 4;
  4039e2:	2304      	movs	r3, #4
  4039e4:	81fb      	strh	r3, [r7, #14]
  4039e6:	e025      	b.n	403a34 <invRow2Scale+0x74>
	else if (row[1] > 0)
  4039e8:	687b      	ldr	r3, [r7, #4]
  4039ea:	3301      	adds	r3, #1
  4039ec:	f993 3000 	ldrsb.w	r3, [r3]
  4039f0:	2b00      	cmp	r3, #0
  4039f2:	dd02      	ble.n	4039fa <invRow2Scale+0x3a>
	b = 1;
  4039f4:	2301      	movs	r3, #1
  4039f6:	81fb      	strh	r3, [r7, #14]
  4039f8:	e01c      	b.n	403a34 <invRow2Scale+0x74>
	else if (row[1] < 0)
  4039fa:	687b      	ldr	r3, [r7, #4]
  4039fc:	3301      	adds	r3, #1
  4039fe:	f993 3000 	ldrsb.w	r3, [r3]
  403a02:	2b00      	cmp	r3, #0
  403a04:	da02      	bge.n	403a0c <invRow2Scale+0x4c>
	b = 5;
  403a06:	2305      	movs	r3, #5
  403a08:	81fb      	strh	r3, [r7, #14]
  403a0a:	e013      	b.n	403a34 <invRow2Scale+0x74>
	else if (row[2] > 0)
  403a0c:	687b      	ldr	r3, [r7, #4]
  403a0e:	3302      	adds	r3, #2
  403a10:	f993 3000 	ldrsb.w	r3, [r3]
  403a14:	2b00      	cmp	r3, #0
  403a16:	dd02      	ble.n	403a1e <invRow2Scale+0x5e>
	b = 2;
  403a18:	2302      	movs	r3, #2
  403a1a:	81fb      	strh	r3, [r7, #14]
  403a1c:	e00a      	b.n	403a34 <invRow2Scale+0x74>
	else if (row[2] < 0)
  403a1e:	687b      	ldr	r3, [r7, #4]
  403a20:	3302      	adds	r3, #2
  403a22:	f993 3000 	ldrsb.w	r3, [r3]
  403a26:	2b00      	cmp	r3, #0
  403a28:	da02      	bge.n	403a30 <invRow2Scale+0x70>
	b = 6;
  403a2a:	2306      	movs	r3, #6
  403a2c:	81fb      	strh	r3, [r7, #14]
  403a2e:	e001      	b.n	403a34 <invRow2Scale+0x74>
	else
	b = 7;      // error
  403a30:	2307      	movs	r3, #7
  403a32:	81fb      	strh	r3, [r7, #14]
	return b;
  403a34:	89fb      	ldrh	r3, [r7, #14]
}
  403a36:	4618      	mov	r0, r3
  403a38:	3714      	adds	r7, #20
  403a3a:	46bd      	mov	sp, r7
  403a3c:	bc80      	pop	{r7}
  403a3e:	4770      	bx	lr

00403a40 <delay_ms>:
* Stores systemTimestamp at the start of the function, then waits until systemTimestamp has
* increased by the amount given in period_ms before continuing.
*
*/
int delay_ms(uint32_t period_ms)
{
  403a40:	b480      	push	{r7}
  403a42:	b085      	sub	sp, #20
  403a44:	af00      	add	r7, sp, #0
  403a46:	6078      	str	r0, [r7, #4]
	uint32_t startTime = systemTimestamp;
  403a48:	4b08      	ldr	r3, [pc, #32]	; (403a6c <delay_ms+0x2c>)
  403a4a:	681b      	ldr	r3, [r3, #0]
  403a4c:	60fb      	str	r3, [r7, #12]
	while(systemTimestamp < (startTime + period_ms));
  403a4e:	bf00      	nop
  403a50:	68fa      	ldr	r2, [r7, #12]
  403a52:	687b      	ldr	r3, [r7, #4]
  403a54:	441a      	add	r2, r3
  403a56:	4b05      	ldr	r3, [pc, #20]	; (403a6c <delay_ms+0x2c>)
  403a58:	681b      	ldr	r3, [r3, #0]
  403a5a:	429a      	cmp	r2, r3
  403a5c:	d8f8      	bhi.n	403a50 <delay_ms+0x10>
	return 0;
  403a5e:	2300      	movs	r3, #0
}
  403a60:	4618      	mov	r0, r3
  403a62:	3714      	adds	r7, #20
  403a64:	46bd      	mov	sp, r7
  403a66:	bc80      	pop	{r7}
  403a68:	4770      	bx	lr
  403a6a:	bf00      	nop
  403a6c:	200004b4 	.word	0x200004b4

00403a70 <twi_write_imu>:
* flag isn't set until all bytes have been sent and the transmission holding register is clear.
*
*/
char twi_write_imu(unsigned char slave_addr, unsigned char reg_addr, 
					unsigned char length, unsigned char const *data)
{
  403a70:	b480      	push	{r7}
  403a72:	b085      	sub	sp, #20
  403a74:	af00      	add	r7, sp, #0
  403a76:	603b      	str	r3, [r7, #0]
  403a78:	4603      	mov	r3, r0
  403a7a:	71fb      	strb	r3, [r7, #7]
  403a7c:	460b      	mov	r3, r1
  403a7e:	71bb      	strb	r3, [r7, #6]
  403a80:	4613      	mov	r3, r2
  403a82:	717b      	strb	r3, [r7, #5]
	//note txcomp MUST = 1 before writing (according to datasheet)
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
  403a84:	4a24      	ldr	r2, [pc, #144]	; (403b18 <twi_write_imu+0xa8>)
  403a86:	4b24      	ldr	r3, [pc, #144]	; (403b18 <twi_write_imu+0xa8>)
  403a88:	681b      	ldr	r3, [r3, #0]
  403a8a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403a8e:	6013      	str	r3, [r2, #0]
	REG_TWI2_MMR
  403a90:	4a22      	ldr	r2, [pc, #136]	; (403b1c <twi_write_imu+0xac>)
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  403a92:	79fb      	ldrb	r3, [r7, #7]
  403a94:	041b      	lsls	r3, r3, #16
  403a96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
		|	TWI_MMR_IADRSZ_1_BYTE;				//Set register address length to 1 byte
  403a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
					unsigned char length, unsigned char const *data)
{
	//note txcomp MUST = 1 before writing (according to datasheet)
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
	REG_TWI2_MMR
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  403a9e:	6013      	str	r3, [r2, #0]
		|	TWI_MMR_IADRSZ_1_BYTE;				//Set register address length to 1 byte
	REG_TWI2_IADR = reg_addr;					//set register address to write to
  403aa0:	4a1f      	ldr	r2, [pc, #124]	; (403b20 <twi_write_imu+0xb0>)
  403aa2:	79bb      	ldrb	r3, [r7, #6]
  403aa4:	6013      	str	r3, [r2, #0]

	if(length == 1)
  403aa6:	797b      	ldrb	r3, [r7, #5]
  403aa8:	2b01      	cmp	r3, #1
  403aaa:	d10e      	bne.n	403aca <twi_write_imu+0x5a>
	{
		REG_TWI2_THR = data[0];					//set up data to transmit
  403aac:	4a1d      	ldr	r2, [pc, #116]	; (403b24 <twi_write_imu+0xb4>)
  403aae:	683b      	ldr	r3, [r7, #0]
  403ab0:	781b      	ldrb	r3, [r3, #0]
  403ab2:	6013      	str	r3, [r2, #0]
		REG_TWI2_CR = TWI_CR_STOP;				// Send a stop bit
  403ab4:	4b18      	ldr	r3, [pc, #96]	; (403b18 <twi_write_imu+0xa8>)
  403ab6:	2202      	movs	r2, #2
  403ab8:	601a      	str	r2, [r3, #0]
		while(!IMU_TXRDY);						//while Transmit Holding Register not ready. wait.
  403aba:	bf00      	nop
  403abc:	4b1a      	ldr	r3, [pc, #104]	; (403b28 <twi_write_imu+0xb8>)
  403abe:	681b      	ldr	r3, [r3, #0]
  403ac0:	f003 0304 	and.w	r3, r3, #4
  403ac4:	2b00      	cmp	r3, #0
  403ac6:	d0f9      	beq.n	403abc <twi_write_imu+0x4c>
  403ac8:	e019      	b.n	403afe <twi_write_imu+0x8e>
	} else {
		for(unsigned char b = 0; b < length; b++)//Send data bit by bit until data length is reached
  403aca:	2300      	movs	r3, #0
  403acc:	73fb      	strb	r3, [r7, #15]
  403ace:	e00f      	b.n	403af0 <twi_write_imu+0x80>
		{
			REG_TWI2_THR = data[b];				//set up data to transmit
  403ad0:	4914      	ldr	r1, [pc, #80]	; (403b24 <twi_write_imu+0xb4>)
  403ad2:	7bfb      	ldrb	r3, [r7, #15]
  403ad4:	683a      	ldr	r2, [r7, #0]
  403ad6:	4413      	add	r3, r2
  403ad8:	781b      	ldrb	r3, [r3, #0]
  403ada:	600b      	str	r3, [r1, #0]
			while(!IMU_TXRDY);					//while Transmit Holding Register not ready. wait.
  403adc:	bf00      	nop
  403ade:	4b12      	ldr	r3, [pc, #72]	; (403b28 <twi_write_imu+0xb8>)
  403ae0:	681b      	ldr	r3, [r3, #0]
  403ae2:	f003 0304 	and.w	r3, r3, #4
  403ae6:	2b00      	cmp	r3, #0
  403ae8:	d0f9      	beq.n	403ade <twi_write_imu+0x6e>
	{
		REG_TWI2_THR = data[0];					//set up data to transmit
		REG_TWI2_CR = TWI_CR_STOP;				// Send a stop bit
		while(!IMU_TXRDY);						//while Transmit Holding Register not ready. wait.
	} else {
		for(unsigned char b = 0; b < length; b++)//Send data bit by bit until data length is reached
  403aea:	7bfb      	ldrb	r3, [r7, #15]
  403aec:	3301      	adds	r3, #1
  403aee:	73fb      	strb	r3, [r7, #15]
  403af0:	7bfa      	ldrb	r2, [r7, #15]
  403af2:	797b      	ldrb	r3, [r7, #5]
  403af4:	429a      	cmp	r2, r3
  403af6:	d3eb      	bcc.n	403ad0 <twi_write_imu+0x60>
		{
			REG_TWI2_THR = data[b];				//set up data to transmit
			while(!IMU_TXRDY);					//while Transmit Holding Register not ready. wait.
		}
	
		REG_TWI2_CR = TWI_CR_STOP;				// Send a stop bit
  403af8:	4b07      	ldr	r3, [pc, #28]	; (403b18 <twi_write_imu+0xa8>)
  403afa:	2202      	movs	r2, #2
  403afc:	601a      	str	r2, [r3, #0]
	}
	while(!IMU_TXCOMP);							//while transmit not complete. wait.
  403afe:	bf00      	nop
  403b00:	4b09      	ldr	r3, [pc, #36]	; (403b28 <twi_write_imu+0xb8>)
  403b02:	681b      	ldr	r3, [r3, #0]
  403b04:	f003 0301 	and.w	r3, r3, #1
  403b08:	2b00      	cmp	r3, #0
  403b0a:	d0f9      	beq.n	403b00 <twi_write_imu+0x90>
	return 0;
  403b0c:	2300      	movs	r3, #0
}
  403b0e:	4618      	mov	r0, r3
  403b10:	3714      	adds	r7, #20
  403b12:	46bd      	mov	sp, r7
  403b14:	bc80      	pop	{r7}
  403b16:	4770      	bx	lr
  403b18:	40040000 	.word	0x40040000
  403b1c:	40040004 	.word	0x40040004
  403b20:	4004000c 	.word	0x4004000c
  403b24:	40040034 	.word	0x40040034
  403b28:	40040020 	.word	0x40040020

00403b2c <twi_read_imu>:
* decides to stop talking.
*
*/
char twi_read_imu(unsigned char slave_addr, unsigned char reg_addr, 
					unsigned char length, unsigned char *data)
{
  403b2c:	b480      	push	{r7}
  403b2e:	b085      	sub	sp, #20
  403b30:	af00      	add	r7, sp, #0
  403b32:	603b      	str	r3, [r7, #0]
  403b34:	4603      	mov	r3, r0
  403b36:	71fb      	strb	r3, [r7, #7]
  403b38:	460b      	mov	r3, r1
  403b3a:	71bb      	strb	r3, [r7, #6]
  403b3c:	4613      	mov	r3, r2
  403b3e:	717b      	strb	r3, [r7, #5]
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
  403b40:	4a2d      	ldr	r2, [pc, #180]	; (403bf8 <twi_read_imu+0xcc>)
  403b42:	4b2d      	ldr	r3, [pc, #180]	; (403bf8 <twi_read_imu+0xcc>)
  403b44:	681b      	ldr	r3, [r3, #0]
  403b46:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403b4a:	6013      	str	r3, [r2, #0]
	REG_TWI2_MMR
  403b4c:	4a2b      	ldr	r2, [pc, #172]	; (403bfc <twi_read_imu+0xd0>)
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  403b4e:	79fb      	ldrb	r3, [r7, #7]
  403b50:	041b      	lsls	r3, r3, #16
  403b52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
		|	(TWI_MMR_MREAD)						//Set to read from register
		|	TWI_MMR_IADRSZ_1_BYTE;				//Register addr byte length (0-3)
  403b56:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
char twi_read_imu(unsigned char slave_addr, unsigned char reg_addr, 
					unsigned char length, unsigned char *data)
{
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
	REG_TWI2_MMR
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  403b5a:	6013      	str	r3, [r2, #0]
		|	(TWI_MMR_MREAD)						//Set to read from register
		|	TWI_MMR_IADRSZ_1_BYTE;				//Register addr byte length (0-3)
	REG_TWI2_IADR = reg_addr;					//set up address to read from
  403b5c:	4a28      	ldr	r2, [pc, #160]	; (403c00 <twi_read_imu+0xd4>)
  403b5e:	79bb      	ldrb	r3, [r7, #6]
  403b60:	6013      	str	r3, [r2, #0]
	
	if (length == 1)							//If only ready one byte, then START and STOP bits need to be set at the same time
  403b62:	797b      	ldrb	r3, [r7, #5]
  403b64:	2b01      	cmp	r3, #1
  403b66:	d117      	bne.n	403b98 <twi_read_imu+0x6c>
	{
		REG_TWI2_CR
  403b68:	4b23      	ldr	r3, [pc, #140]	; (403bf8 <twi_read_imu+0xcc>)
			=	TWI_CR_START
  403b6a:	2203      	movs	r2, #3
  403b6c:	601a      	str	r2, [r3, #0]
			|	TWI_CR_STOP;					//Send a START and STOP condition as required (single byte read)	
		while(!IMU_RXRDY);						//while Receive Holding Register not ready. wait.
  403b6e:	bf00      	nop
  403b70:	4b24      	ldr	r3, [pc, #144]	; (403c04 <twi_read_imu+0xd8>)
  403b72:	681b      	ldr	r3, [r3, #0]
  403b74:	f003 0302 	and.w	r3, r3, #2
  403b78:	2b00      	cmp	r3, #0
  403b7a:	d0f9      	beq.n	403b70 <twi_read_imu+0x44>
		data[0] = REG_TWI2_RHR;					//store data received		
  403b7c:	4b22      	ldr	r3, [pc, #136]	; (403c08 <twi_read_imu+0xdc>)
  403b7e:	681b      	ldr	r3, [r3, #0]
  403b80:	b2da      	uxtb	r2, r3
  403b82:	683b      	ldr	r3, [r7, #0]
  403b84:	701a      	strb	r2, [r3, #0]
		while(!IMU_TXCOMP);						//while transmit not complete. wait.
  403b86:	bf00      	nop
  403b88:	4b1e      	ldr	r3, [pc, #120]	; (403c04 <twi_read_imu+0xd8>)
  403b8a:	681b      	ldr	r3, [r3, #0]
  403b8c:	f003 0301 	and.w	r3, r3, #1
  403b90:	2b00      	cmp	r3, #0
  403b92:	d0f9      	beq.n	403b88 <twi_read_imu+0x5c>
		return 0;
  403b94:	2300      	movs	r3, #0
  403b96:	e02a      	b.n	403bee <twi_read_imu+0xc2>
	} else {
		REG_TWI2_CR = TWI_CR_START;				//Send start bit
  403b98:	4b17      	ldr	r3, [pc, #92]	; (403bf8 <twi_read_imu+0xcc>)
  403b9a:	2201      	movs	r2, #1
  403b9c:	601a      	str	r2, [r3, #0]
		for(unsigned char b = 0; b < length; b++)
  403b9e:	2300      	movs	r3, #0
  403ba0:	73fb      	strb	r3, [r7, #15]
  403ba2:	e018      	b.n	403bd6 <twi_read_imu+0xaa>
		{
			while(!IMU_RXRDY);
  403ba4:	bf00      	nop
  403ba6:	4b17      	ldr	r3, [pc, #92]	; (403c04 <twi_read_imu+0xd8>)
  403ba8:	681b      	ldr	r3, [r3, #0]
  403baa:	f003 0302 	and.w	r3, r3, #2
  403bae:	2b00      	cmp	r3, #0
  403bb0:	d0f9      	beq.n	403ba6 <twi_read_imu+0x7a>
			data[b] = REG_TWI2_RHR;
  403bb2:	7bfb      	ldrb	r3, [r7, #15]
  403bb4:	683a      	ldr	r2, [r7, #0]
  403bb6:	4413      	add	r3, r2
  403bb8:	4a13      	ldr	r2, [pc, #76]	; (403c08 <twi_read_imu+0xdc>)
  403bba:	6812      	ldr	r2, [r2, #0]
  403bbc:	b2d2      	uxtb	r2, r2
  403bbe:	701a      	strb	r2, [r3, #0]
			if(b == length-2)
  403bc0:	7bfa      	ldrb	r2, [r7, #15]
  403bc2:	797b      	ldrb	r3, [r7, #5]
  403bc4:	3b02      	subs	r3, #2
  403bc6:	429a      	cmp	r2, r3
  403bc8:	d102      	bne.n	403bd0 <twi_read_imu+0xa4>
				REG_TWI2_CR = TWI_CR_STOP;	//Send stop on reception of 2nd to last byte
  403bca:	4b0b      	ldr	r3, [pc, #44]	; (403bf8 <twi_read_imu+0xcc>)
  403bcc:	2202      	movs	r2, #2
  403bce:	601a      	str	r2, [r3, #0]
		data[0] = REG_TWI2_RHR;					//store data received		
		while(!IMU_TXCOMP);						//while transmit not complete. wait.
		return 0;
	} else {
		REG_TWI2_CR = TWI_CR_START;				//Send start bit
		for(unsigned char b = 0; b < length; b++)
  403bd0:	7bfb      	ldrb	r3, [r7, #15]
  403bd2:	3301      	adds	r3, #1
  403bd4:	73fb      	strb	r3, [r7, #15]
  403bd6:	7bfa      	ldrb	r2, [r7, #15]
  403bd8:	797b      	ldrb	r3, [r7, #5]
  403bda:	429a      	cmp	r2, r3
  403bdc:	d3e2      	bcc.n	403ba4 <twi_read_imu+0x78>
			while(!IMU_RXRDY);
			data[b] = REG_TWI2_RHR;
			if(b == length-2)
				REG_TWI2_CR = TWI_CR_STOP;	//Send stop on reception of 2nd to last byte
		}
		while(!IMU_TXCOMP);							//while transmit not complete. wait.
  403bde:	bf00      	nop
  403be0:	4b08      	ldr	r3, [pc, #32]	; (403c04 <twi_read_imu+0xd8>)
  403be2:	681b      	ldr	r3, [r3, #0]
  403be4:	f003 0301 	and.w	r3, r3, #1
  403be8:	2b00      	cmp	r3, #0
  403bea:	d0f9      	beq.n	403be0 <twi_read_imu+0xb4>
	}
	return 0;
  403bec:	2300      	movs	r3, #0
}
  403bee:	4618      	mov	r0, r3
  403bf0:	3714      	adds	r7, #20
  403bf2:	46bd      	mov	sp, r7
  403bf4:	bc80      	pop	{r7}
  403bf6:	4770      	bx	lr
  403bf8:	40040000 	.word	0x40040000
  403bfc:	40040004 	.word	0x40040004
  403c00:	4004000c 	.word	0x4004000c
  403c04:	40040020 	.word	0x40040020
  403c08:	40040030 	.word	0x40040030

00403c0c <TC0_Handler>:
* If the RC compare flag is set then it increments the systemTimestamp, and also checks if 5ms
* has elapsed. If so, will set a flag to read from the IMU's FIFO buffer (unimplemented)
*
*/
void TC0_Handler()
{
  403c0c:	b480      	push	{r7}
  403c0e:	af00      	add	r7, sp, #0
	//The interrupt handler for timer counter 0
	//Triggers every 1ms
	if(REG_TC0_SR0 & TC_SR_CPCS)									//If RC compare flag
  403c10:	4b0c      	ldr	r3, [pc, #48]	; (403c44 <TC0_Handler+0x38>)
  403c12:	681b      	ldr	r3, [r3, #0]
  403c14:	f003 0310 	and.w	r3, r3, #16
  403c18:	2b00      	cmp	r3, #0
  403c1a:	d00f      	beq.n	403c3c <TC0_Handler+0x30>
	{
		systemTimestamp++;
  403c1c:	4b0a      	ldr	r3, [pc, #40]	; (403c48 <TC0_Handler+0x3c>)
  403c1e:	681b      	ldr	r3, [r3, #0]
  403c20:	3301      	adds	r3, #1
  403c22:	4a09      	ldr	r2, [pc, #36]	; (403c48 <TC0_Handler+0x3c>)
  403c24:	6013      	str	r3, [r2, #0]
		//Read IMUs FIFO every 5ms. In future this will be done from an external interrupt.
		if(systemTimestamp >= (check_IMU_FIFO + 5))					
  403c26:	4b09      	ldr	r3, [pc, #36]	; (403c4c <TC0_Handler+0x40>)
  403c28:	681b      	ldr	r3, [r3, #0]
  403c2a:	1d5a      	adds	r2, r3, #5
  403c2c:	4b06      	ldr	r3, [pc, #24]	; (403c48 <TC0_Handler+0x3c>)
  403c2e:	681b      	ldr	r3, [r3, #0]
  403c30:	429a      	cmp	r2, r3
  403c32:	d803      	bhi.n	403c3c <TC0_Handler+0x30>
		{
			check_IMU_FIFO = systemTimestamp;
  403c34:	4b04      	ldr	r3, [pc, #16]	; (403c48 <TC0_Handler+0x3c>)
  403c36:	681b      	ldr	r3, [r3, #0]
  403c38:	4a04      	ldr	r2, [pc, #16]	; (403c4c <TC0_Handler+0x40>)
  403c3a:	6013      	str	r3, [r2, #0]
		}
	}
}
  403c3c:	bf00      	nop
  403c3e:	46bd      	mov	sp, r7
  403c40:	bc80      	pop	{r7}
  403c42:	4770      	bx	lr
  403c44:	40010020 	.word	0x40010020
  403c48:	200004b4 	.word	0x200004b4
  403c4c:	200004b8 	.word	0x200004b8

00403c50 <Proximity_Setup>:
#include "twimux_interface.h"

/******** Proximity Sensor Registry Setup ********/
//This function will pass the desired channel to the Multiplexer and setup an *individual* proximity sensor
void Proximity_Setup(uint8_t channel)
{
  403c50:	b580      	push	{r7, lr}
  403c52:	b082      	sub	sp, #8
  403c54:	af00      	add	r7, sp, #0
  403c56:	4603      	mov	r3, r0
  403c58:	71fb      	strb	r3, [r7, #7]
	TWI0_MuxSwitch(channel); //Set multiplexer address to correct device
  403c5a:	79fb      	ldrb	r3, [r7, #7]
  403c5c:	4618      	mov	r0, r3
  403c5e:	4b0f      	ldr	r3, [pc, #60]	; (403c9c <Proximity_Setup+0x4c>)
  403c60:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_Enable, PDisable);			//Disable and Power down
  403c62:	2200      	movs	r2, #0
  403c64:	2180      	movs	r1, #128	; 0x80
  403c66:	2039      	movs	r0, #57	; 0x39
  403c68:	4b0d      	ldr	r3, [pc, #52]	; (403ca0 <Proximity_Setup+0x50>)
  403c6a:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_PTime, PTIME);				//Proximity ADC time: 2.73 ms, minimum proximity integration time
  403c6c:	22ff      	movs	r2, #255	; 0xff
  403c6e:	2182      	movs	r1, #130	; 0x82
  403c70:	2039      	movs	r0, #57	; 0x39
  403c72:	4b0b      	ldr	r3, [pc, #44]	; (403ca0 <Proximity_Setup+0x50>)
  403c74:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_PPulse, PPULSE);			//Sets the number of Proximity pulses that the LDR pin will generate during the prox Accum state: (recommended proximity pulse count = 8) PREVIOUSLY HAD BEEN SET TO 0X02
  403c76:	2208      	movs	r2, #8
  403c78:	218e      	movs	r1, #142	; 0x8e
  403c7a:	2039      	movs	r0, #57	; 0x39
  403c7c:	4b08      	ldr	r3, [pc, #32]	; (403ca0 <Proximity_Setup+0x50>)
  403c7e:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_GainControl, PDiode);		//Gain Control register: LED = 100mA, Proximity diode select, Proximity gain x1, recommended settings
  403c80:	2220      	movs	r2, #32
  403c82:	218f      	movs	r1, #143	; 0x8f
  403c84:	2039      	movs	r0, #57	; 0x39
  403c86:	4b06      	ldr	r3, [pc, #24]	; (403ca0 <Proximity_Setup+0x50>)
  403c88:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_Enable, PEnable);			//Power ON, Proximity Enable
  403c8a:	2205      	movs	r2, #5
  403c8c:	2180      	movs	r1, #128	; 0x80
  403c8e:	2039      	movs	r0, #57	; 0x39
  403c90:	4b03      	ldr	r3, [pc, #12]	; (403ca0 <Proximity_Setup+0x50>)
  403c92:	4798      	blx	r3
}
  403c94:	bf00      	nop
  403c96:	3708      	adds	r7, #8
  403c98:	46bd      	mov	sp, r7
  403c9a:	bd80      	pop	{r7, pc}
  403c9c:	0040411d 	.word	0x0040411d
  403ca0:	004041f1 	.word	0x004041f1

00403ca4 <Proximity_Data_Read>:
/******** Proximity Sensor Data Read ********/
//Retrieves the Proximity Sensor (16-bit) data from the selected Sensor
//After the programmed number of proximity pulses have been generated, the proximity ADC converts and scales the proximity measurement to a 16-bit value,
//then stores the result in two 8-bit proximity data (PDATAx) registers. Therefore, the TWI must read/retrieve both 8-bit registers.
uint16_t Proximity_Data_Read(uint8_t channel)
{
  403ca4:	b580      	push	{r7, lr}
  403ca6:	b084      	sub	sp, #16
  403ca8:	af00      	add	r7, sp, #0
  403caa:	4603      	mov	r3, r0
  403cac:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	TWI0_MuxSwitch(channel);	//Set multiplexer address to correct device
  403cae:	79fb      	ldrb	r3, [r7, #7]
  403cb0:	4618      	mov	r0, r3
  403cb2:	4b06      	ldr	r3, [pc, #24]	; (403ccc <Proximity_Data_Read+0x28>)
  403cb4:	4798      	blx	r3
	data = TWI0_ReadDB(TWI0_ProximitySensorAddress, Proximity_Command_REG_Increment | Proximity_DataLow);
  403cb6:	21b8      	movs	r1, #184	; 0xb8
  403cb8:	2039      	movs	r0, #57	; 0x39
  403cba:	4b05      	ldr	r3, [pc, #20]	; (403cd0 <Proximity_Data_Read+0x2c>)
  403cbc:	4798      	blx	r3
  403cbe:	4603      	mov	r3, r0
  403cc0:	81fb      	strh	r3, [r7, #14]
	//NOTE: Command_REG of the ProxSensor must be written to, as part of R/W functions.
	//Low data register is read, auto-increment occurs and high data register is read.
	return data;
  403cc2:	89fb      	ldrh	r3, [r7, #14]
}
  403cc4:	4618      	mov	r0, r3
  403cc6:	3710      	adds	r7, #16
  403cc8:	46bd      	mov	sp, r7
  403cca:	bd80      	pop	{r7, pc}
  403ccc:	0040411d 	.word	0x0040411d
  403cd0:	00404275 	.word	0x00404275

00403cd4 <testManager>:
*/

#include "testFunctions.h"

void testManager(struct message_info message)
{
  403cd4:	b590      	push	{r4, r7, lr}
  403cd6:	b0ad      	sub	sp, #180	; 0xb4
  403cd8:	af02      	add	r7, sp, #8
  403cda:	1d3b      	adds	r3, r7, #4
  403cdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t receivedTestData[50];
	uint8_t transmitTestData[50];
	uint16_t peripheralReturnData;
	char testType = message.command;
  403ce0:	7a3b      	ldrb	r3, [r7, #8]
  403ce2:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	uint8_t testMode;
	uint8_t transmitTestDataSize;
	convertData(message, &receivedTestData);
  403ce6:	f107 0370 	add.w	r3, r7, #112	; 0x70
  403cea:	1d3a      	adds	r2, r7, #4
  403cec:	ca07      	ldmia	r2, {r0, r1, r2}
  403cee:	4c68      	ldr	r4, [pc, #416]	; (403e90 <testManager+0x1bc>)
  403cf0:	47a0      	blx	r4
	testMode = receivedTestData[1];
  403cf2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
  403cf6:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	struct Position testPosition;
	
	switch(testType)
  403cfa:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
  403cfe:	3be4      	subs	r3, #228	; 0xe4
  403d00:	2b09      	cmp	r3, #9
  403d02:	f200 809a 	bhi.w	403e3a <testManager+0x166>
  403d06:	a201      	add	r2, pc, #4	; (adr r2, 403d0c <testManager+0x38>)
  403d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403d0c:	00403d35 	.word	0x00403d35
  403d10:	00403d73 	.word	0x00403d73
  403d14:	00403db1 	.word	0x00403db1
  403d18:	00403dd9 	.word	0x00403dd9
  403d1c:	00403e3b 	.word	0x00403e3b
  403d20:	00403e3b 	.word	0x00403e3b
  403d24:	00403e3b 	.word	0x00403e3b
  403d28:	00403e19 	.word	0x00403e19
  403d2c:	00403e3b 	.word	0x00403e3b
  403d30:	00403e3b 	.word	0x00403e3b
	{
		case TEST_PROXIMITY_SENSORS:
			peripheralReturnData = Proximity_Data_Read(receivedTestData[0]);
  403d34:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
  403d38:	4618      	mov	r0, r3
  403d3a:	4b56      	ldr	r3, [pc, #344]	; (403e94 <testManager+0x1c0>)
  403d3c:	4798      	blx	r3
  403d3e:	4603      	mov	r3, r0
  403d40:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			transmitTestData[0] = receivedTestData[0];
  403d44:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
  403d48:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			transmitTestData[1] = DATA_RETURN; //sending data out
  403d4c:	2300      	movs	r3, #0
  403d4e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			transmitTestData[2] = peripheralReturnData >> 8; //upper byte
  403d52:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
  403d56:	0a1b      	lsrs	r3, r3, #8
  403d58:	b29b      	uxth	r3, r3
  403d5a:	b2db      	uxtb	r3, r3
  403d5c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			transmitTestData[3] = peripheralReturnData & 0xFF; //lower byte
  403d60:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
  403d64:	b2db      	uxtb	r3, r3
  403d66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			transmitTestDataSize = 4;
  403d6a:	2304      	movs	r3, #4
  403d6c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			break;
  403d70:	e063      	b.n	403e3a <testManager+0x166>
		
		case TEST_LIGHT_SENSORS:
			peripheralReturnData = LightSensor_Data_Read(receivedTestData[0]);
  403d72:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
  403d76:	4618      	mov	r0, r3
  403d78:	4b47      	ldr	r3, [pc, #284]	; (403e98 <testManager+0x1c4>)
  403d7a:	4798      	blx	r3
  403d7c:	4603      	mov	r3, r0
  403d7e:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			transmitTestData[0] = receivedTestData[0];
  403d82:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
  403d86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			transmitTestData[1] = DATA_RETURN; //sending data out
  403d8a:	2300      	movs	r3, #0
  403d8c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			transmitTestData[2] = peripheralReturnData >> 8; //upper byte
  403d90:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
  403d94:	0a1b      	lsrs	r3, r3, #8
  403d96:	b29b      	uxth	r3, r3
  403d98:	b2db      	uxtb	r3, r3
  403d9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			transmitTestData[3] = peripheralReturnData & 0xFF; //lower byte
  403d9e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
  403da2:	b2db      	uxtb	r3, r3
  403da4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			transmitTestDataSize = 4;
  403da8:	2304      	movs	r3, #4
  403daa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			break;
  403dae:	e044      	b.n	403e3a <testManager+0x166>
		
		case TEST_MOTORS:
		//TO FINSH ADAM
			setTestMotors(receivedTestData);
  403db0:	f107 0370 	add.w	r3, r7, #112	; 0x70
  403db4:	4618      	mov	r0, r3
  403db6:	4b39      	ldr	r3, [pc, #228]	; (403e9c <testManager+0x1c8>)
  403db8:	4798      	blx	r3
			transmitTestData[0] = receivedTestData[0];
  403dba:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
  403dbe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			transmitTestData[1] = DATA_RETURN;
  403dc2:	2300      	movs	r3, #0
  403dc4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			transmitTestData[2] = receivedTestData[2];
  403dc8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
  403dcc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			transmitTestDataSize = 3;
  403dd0:	2303      	movs	r3, #3
  403dd2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

			break;
  403dd6:	e030      	b.n	403e3a <testManager+0x166>
		
		case TEST_MOUSE_SENSOR:
			getMouseXY(&testPosition);
  403dd8:	f107 0314 	add.w	r3, r7, #20
  403ddc:	4618      	mov	r0, r3
  403dde:	4b30      	ldr	r3, [pc, #192]	; (403ea0 <testManager+0x1cc>)
  403de0:	4798      	blx	r3
			transmitTestData[0] = DATA_RETURN; //sending data out
  403de2:	2300      	movs	r3, #0
  403de4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			transmitTestData[1] = testPosition.opticaldx >> 8; //upper byte
  403de8:	8abb      	ldrh	r3, [r7, #20]
  403dea:	0a1b      	lsrs	r3, r3, #8
  403dec:	b29b      	uxth	r3, r3
  403dee:	b2db      	uxtb	r3, r3
  403df0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			transmitTestData[2] = testPosition.opticaldx & 0xFF; //lower byte
  403df4:	8abb      	ldrh	r3, [r7, #20]
  403df6:	b2db      	uxtb	r3, r3
  403df8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			transmitTestData[3] = testPosition.opticaldy >> 8; //upper byte
  403dfc:	8afb      	ldrh	r3, [r7, #22]
  403dfe:	0a1b      	lsrs	r3, r3, #8
  403e00:	b29b      	uxth	r3, r3
  403e02:	b2db      	uxtb	r3, r3
  403e04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			transmitTestData[4] = testPosition.opticaldy & 0xFF; //lower byte
  403e08:	8afb      	ldrh	r3, [r7, #22]
  403e0a:	b2db      	uxtb	r3, r3
  403e0c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			transmitTestDataSize = 5;
  403e10:	2305      	movs	r3, #5
  403e12:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			break;
  403e16:	e010      	b.n	403e3a <testManager+0x166>
		case TEST_FAST_CHARGE_CHIP:
		//TO DO Adam & Esmond
			break;
		
		case TEST_TWI_MULTIPLEXOR:
			TWI0_MuxSwitch(receivedTestData[1]);
  403e18:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
  403e1c:	4618      	mov	r0, r3
  403e1e:	4b21      	ldr	r3, [pc, #132]	; (403ea4 <testManager+0x1d0>)
  403e20:	4798      	blx	r3
			transmitTestData[0] = DATA_RETURN;
  403e22:	2300      	movs	r3, #0
  403e24:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			transmitTestData[1] = TWI0_ReadMuxChannel();
  403e28:	4b1f      	ldr	r3, [pc, #124]	; (403ea8 <testManager+0x1d4>)
  403e2a:	4798      	blx	r3
  403e2c:	4603      	mov	r3, r0
  403e2e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			transmitTestDataSize = 2;
  403e32:	2302      	movs	r3, #2
  403e34:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			break;
  403e38:	bf00      	nop
		case TEST_CAMERA:
		//TO DO Adam & Brae
			break;

	}
	if(testMode == STREAM_DATA)// && ms100Flag)
  403e3a:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
  403e3e:	2b02      	cmp	r3, #2
  403e40:	d10d      	bne.n	403e5e <testManager+0x18a>
	{
		SendXbeeAPITransmitRequest(BROADCAST_64,UNKNOWN_16,transmitTestData,transmitTestDataSize);  //Send the Message
  403e42:	f107 023c 	add.w	r2, r7, #60	; 0x3c
  403e46:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
  403e4a:	9300      	str	r3, [sp, #0]
  403e4c:	4613      	mov	r3, r2
  403e4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  403e52:	f64f 70ff 	movw	r0, #65535	; 0xffff
  403e56:	f04f 0100 	mov.w	r1, #0
  403e5a:	4c14      	ldr	r4, [pc, #80]	; (403eac <testManager+0x1d8>)
  403e5c:	47a0      	blx	r4
	}
	if(testMode == SINGLE_SAMPLE)
  403e5e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
  403e62:	2b01      	cmp	r3, #1
  403e64:	d110      	bne.n	403e88 <testManager+0x1b4>
	{
		SendXbeeAPITransmitRequest(BROADCAST_64,UNKNOWN_16,transmitTestData,transmitTestDataSize);  //Send the Message
  403e66:	f107 023c 	add.w	r2, r7, #60	; 0x3c
  403e6a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
  403e6e:	9300      	str	r3, [sp, #0]
  403e70:	4613      	mov	r3, r2
  403e72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  403e76:	f64f 70ff 	movw	r0, #65535	; 0xffff
  403e7a:	f04f 0100 	mov.w	r1, #0
  403e7e:	4c0b      	ldr	r4, [pc, #44]	; (403eac <testManager+0x1d8>)
  403e80:	47a0      	blx	r4
		testMode = STOP_STREAMING;
  403e82:	23ff      	movs	r3, #255	; 0xff
  403e84:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	}

}
  403e88:	bf00      	nop
  403e8a:	37ac      	adds	r7, #172	; 0xac
  403e8c:	46bd      	mov	sp, r7
  403e8e:	bd90      	pop	{r4, r7, pc}
  403e90:	00403eb1 	.word	0x00403eb1
  403e94:	00403ca5 	.word	0x00403ca5
  403e98:	00402d79 	.word	0x00402d79
  403e9c:	00403f0d 	.word	0x00403f0d
  403ea0:	00403709 	.word	0x00403709
  403ea4:	0040411d 	.word	0x0040411d
  403ea8:	00404185 	.word	0x00404185
  403eac:	004006a9 	.word	0x004006a9

00403eb0 <convertData>:


//converts Xbee data to array
void convertData(struct message_info message, uint8_t* data[50])
{
  403eb0:	b590      	push	{r4, r7, lr}
  403eb2:	b087      	sub	sp, #28
  403eb4:	af00      	add	r7, sp, #0
  403eb6:	1d3c      	adds	r4, r7, #4
  403eb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  403ebc:	603b      	str	r3, [r7, #0]
	uint8_t dataByte;
	char messageError;
	MessageBufferOut = message.index;
  403ebe:	687b      	ldr	r3, [r7, #4]
  403ec0:	4a10      	ldr	r2, [pc, #64]	; (403f04 <convertData+0x54>)
  403ec2:	6013      	str	r3, [r2, #0]
	for (char i = 0; i < message.length; i++)
  403ec4:	2300      	movs	r3, #0
  403ec6:	75fb      	strb	r3, [r7, #23]
  403ec8:	e012      	b.n	403ef0 <convertData+0x40>
	{
		messageError = MessageBufferGet(&dataByte);
  403eca:	f107 0315 	add.w	r3, r7, #21
  403ece:	4618      	mov	r0, r3
  403ed0:	4b0d      	ldr	r3, [pc, #52]	; (403f08 <convertData+0x58>)
  403ed2:	4798      	blx	r3
  403ed4:	4603      	mov	r3, r0
  403ed6:	75bb      	strb	r3, [r7, #22]
		if(messageError == 0)
  403ed8:	7dbb      	ldrb	r3, [r7, #22]
  403eda:	2b00      	cmp	r3, #0
  403edc:	d10d      	bne.n	403efa <convertData+0x4a>
		{
			data[i] = dataByte;
  403ede:	7dfb      	ldrb	r3, [r7, #23]
  403ee0:	009b      	lsls	r3, r3, #2
  403ee2:	683a      	ldr	r2, [r7, #0]
  403ee4:	4413      	add	r3, r2
  403ee6:	7d7a      	ldrb	r2, [r7, #21]
  403ee8:	601a      	str	r2, [r3, #0]
void convertData(struct message_info message, uint8_t* data[50])
{
	uint8_t dataByte;
	char messageError;
	MessageBufferOut = message.index;
	for (char i = 0; i < message.length; i++)
  403eea:	7dfb      	ldrb	r3, [r7, #23]
  403eec:	3301      	adds	r3, #1
  403eee:	75fb      	strb	r3, [r7, #23]
  403ef0:	7dfa      	ldrb	r2, [r7, #23]
  403ef2:	68fb      	ldr	r3, [r7, #12]
  403ef4:	429a      	cmp	r2, r3
  403ef6:	dbe8      	blt.n	403eca <convertData+0x1a>
  403ef8:	e000      	b.n	403efc <convertData+0x4c>
		if(messageError == 0)
		{
			data[i] = dataByte;
		}
		else
		return;
  403efa:	bf00      	nop
	}
}
  403efc:	371c      	adds	r7, #28
  403efe:	46bd      	mov	sp, r7
  403f00:	bd90      	pop	{r4, r7, pc}
  403f02:	bf00      	nop
  403f04:	20000b24 	.word	0x20000b24
  403f08:	00400b5d 	.word	0x00400b5d

00403f0c <setTestMotors>:

void setTestMotors(uint8_t motorData[])
{
  403f0c:	b480      	push	{r7}
  403f0e:	b083      	sub	sp, #12
  403f10:	af00      	add	r7, sp, #0
  403f12:	6078      	str	r0, [r7, #4]
	if(motorData[0] == MOTOR_1 && (motorData[1] & 0x80))//check if bit 7 is set meaning forward
  403f14:	687b      	ldr	r3, [r7, #4]
  403f16:	781b      	ldrb	r3, [r3, #0]
  403f18:	2b01      	cmp	r3, #1
  403f1a:	d119      	bne.n	403f50 <setTestMotors+0x44>
  403f1c:	687b      	ldr	r3, [r7, #4]
  403f1e:	3301      	adds	r3, #1
  403f20:	781b      	ldrb	r3, [r3, #0]
  403f22:	b25b      	sxtb	r3, r3
  403f24:	2b00      	cmp	r3, #0
  403f26:	da13      	bge.n	403f50 <setTestMotors+0x44>
	{
		FIN_1_High;
  403f28:	4a4e      	ldr	r2, [pc, #312]	; (404064 <setTestMotors+0x158>)
  403f2a:	4b4e      	ldr	r3, [pc, #312]	; (404064 <setTestMotors+0x158>)
  403f2c:	681b      	ldr	r3, [r3, #0]
  403f2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403f32:	6013      	str	r3, [r2, #0]
		RIN_1_Low;
  403f34:	4a4c      	ldr	r2, [pc, #304]	; (404068 <setTestMotors+0x15c>)
  403f36:	4b4c      	ldr	r3, [pc, #304]	; (404068 <setTestMotors+0x15c>)
  403f38:	681b      	ldr	r3, [r3, #0]
  403f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403f3e:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD1 = (motorData[1] & 0x7F);
  403f40:	4a4a      	ldr	r2, [pc, #296]	; (40406c <setTestMotors+0x160>)
  403f42:	687b      	ldr	r3, [r7, #4]
  403f44:	3301      	adds	r3, #1
  403f46:	781b      	ldrb	r3, [r3, #0]
  403f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403f4c:	6013      	str	r3, [r2, #0]
  403f4e:	e083      	b.n	404058 <setTestMotors+0x14c>
	}
	else if(motorData[0] == MOTOR_1 && ~(motorData[1] & 0x80))
  403f50:	687b      	ldr	r3, [r7, #4]
  403f52:	781b      	ldrb	r3, [r3, #0]
  403f54:	2b01      	cmp	r3, #1
  403f56:	d113      	bne.n	403f80 <setTestMotors+0x74>
	{
		FIN_1_Low;
  403f58:	4a45      	ldr	r2, [pc, #276]	; (404070 <setTestMotors+0x164>)
  403f5a:	4b45      	ldr	r3, [pc, #276]	; (404070 <setTestMotors+0x164>)
  403f5c:	681b      	ldr	r3, [r3, #0]
  403f5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403f62:	6013      	str	r3, [r2, #0]
		RIN_1_High;
  403f64:	4a43      	ldr	r2, [pc, #268]	; (404074 <setTestMotors+0x168>)
  403f66:	4b43      	ldr	r3, [pc, #268]	; (404074 <setTestMotors+0x168>)
  403f68:	681b      	ldr	r3, [r3, #0]
  403f6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403f6e:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD1 = (motorData[1] & 0x7F);
  403f70:	4a3e      	ldr	r2, [pc, #248]	; (40406c <setTestMotors+0x160>)
  403f72:	687b      	ldr	r3, [r7, #4]
  403f74:	3301      	adds	r3, #1
  403f76:	781b      	ldrb	r3, [r3, #0]
  403f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403f7c:	6013      	str	r3, [r2, #0]
	{
		FIN_3_Low;
		RIN_3_High;
		REG_PWM_CUPD3 = (motorData[1] & 0x7F);
	}					
  403f7e:	e06b      	b.n	404058 <setTestMotors+0x14c>
	{
		FIN_1_Low;
		RIN_1_High;
		REG_PWM_CUPD1 = (motorData[1] & 0x7F);
	}
	else if(motorData[0] == MOTOR_2 && (motorData[1] & 0x80))//check if bit 7 is set meaning forward
  403f80:	687b      	ldr	r3, [r7, #4]
  403f82:	781b      	ldrb	r3, [r3, #0]
  403f84:	2b02      	cmp	r3, #2
  403f86:	d119      	bne.n	403fbc <setTestMotors+0xb0>
  403f88:	687b      	ldr	r3, [r7, #4]
  403f8a:	3301      	adds	r3, #1
  403f8c:	781b      	ldrb	r3, [r3, #0]
  403f8e:	b25b      	sxtb	r3, r3
  403f90:	2b00      	cmp	r3, #0
  403f92:	da13      	bge.n	403fbc <setTestMotors+0xb0>
	{
		FIN_2_High;
  403f94:	4a37      	ldr	r2, [pc, #220]	; (404074 <setTestMotors+0x168>)
  403f96:	4b37      	ldr	r3, [pc, #220]	; (404074 <setTestMotors+0x168>)
  403f98:	681b      	ldr	r3, [r3, #0]
  403f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403f9e:	6013      	str	r3, [r2, #0]
		RIN_2_Low;
  403fa0:	4a35      	ldr	r2, [pc, #212]	; (404078 <setTestMotors+0x16c>)
  403fa2:	4b35      	ldr	r3, [pc, #212]	; (404078 <setTestMotors+0x16c>)
  403fa4:	681b      	ldr	r3, [r3, #0]
  403fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403faa:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD2 = (motorData[1] & 0x7F);
  403fac:	4a33      	ldr	r2, [pc, #204]	; (40407c <setTestMotors+0x170>)
  403fae:	687b      	ldr	r3, [r7, #4]
  403fb0:	3301      	adds	r3, #1
  403fb2:	781b      	ldrb	r3, [r3, #0]
  403fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403fb8:	6013      	str	r3, [r2, #0]
  403fba:	e04d      	b.n	404058 <setTestMotors+0x14c>
	}
	else if(motorData[0] == MOTOR_2 && ~(motorData[1] & 0x80))
  403fbc:	687b      	ldr	r3, [r7, #4]
  403fbe:	781b      	ldrb	r3, [r3, #0]
  403fc0:	2b02      	cmp	r3, #2
  403fc2:	d113      	bne.n	403fec <setTestMotors+0xe0>
	{
		FIN_2_Low;
  403fc4:	4a28      	ldr	r2, [pc, #160]	; (404068 <setTestMotors+0x15c>)
  403fc6:	4b28      	ldr	r3, [pc, #160]	; (404068 <setTestMotors+0x15c>)
  403fc8:	681b      	ldr	r3, [r3, #0]
  403fca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403fce:	6013      	str	r3, [r2, #0]
		RIN_2_High;
  403fd0:	4a2b      	ldr	r2, [pc, #172]	; (404080 <setTestMotors+0x174>)
  403fd2:	4b2b      	ldr	r3, [pc, #172]	; (404080 <setTestMotors+0x174>)
  403fd4:	681b      	ldr	r3, [r3, #0]
  403fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403fda:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD2 = (motorData[1] & 0x7F);
  403fdc:	4a27      	ldr	r2, [pc, #156]	; (40407c <setTestMotors+0x170>)
  403fde:	687b      	ldr	r3, [r7, #4]
  403fe0:	3301      	adds	r3, #1
  403fe2:	781b      	ldrb	r3, [r3, #0]
  403fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403fe8:	6013      	str	r3, [r2, #0]
	{
		FIN_3_Low;
		RIN_3_High;
		REG_PWM_CUPD3 = (motorData[1] & 0x7F);
	}					
  403fea:	e035      	b.n	404058 <setTestMotors+0x14c>
	{
		FIN_2_Low;
		RIN_2_High;
		REG_PWM_CUPD2 = (motorData[1] & 0x7F);
	}
	else if(motorData[0] == MOTOR_3 && (motorData[1] & 0x80))//check if bit 7 is set meaning forward
  403fec:	687b      	ldr	r3, [r7, #4]
  403fee:	781b      	ldrb	r3, [r3, #0]
  403ff0:	2b03      	cmp	r3, #3
  403ff2:	d119      	bne.n	404028 <setTestMotors+0x11c>
  403ff4:	687b      	ldr	r3, [r7, #4]
  403ff6:	3301      	adds	r3, #1
  403ff8:	781b      	ldrb	r3, [r3, #0]
  403ffa:	b25b      	sxtb	r3, r3
  403ffc:	2b00      	cmp	r3, #0
  403ffe:	da13      	bge.n	404028 <setTestMotors+0x11c>
	{
		FIN_3_High;
  404000:	4a1f      	ldr	r2, [pc, #124]	; (404080 <setTestMotors+0x174>)
  404002:	4b1f      	ldr	r3, [pc, #124]	; (404080 <setTestMotors+0x174>)
  404004:	681b      	ldr	r3, [r3, #0]
  404006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40400a:	6013      	str	r3, [r2, #0]
		RIN_3_Low;
  40400c:	4a1a      	ldr	r2, [pc, #104]	; (404078 <setTestMotors+0x16c>)
  40400e:	4b1a      	ldr	r3, [pc, #104]	; (404078 <setTestMotors+0x16c>)
  404010:	681b      	ldr	r3, [r3, #0]
  404012:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  404016:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD3 = (motorData[1] & 0x7F);
  404018:	4a1a      	ldr	r2, [pc, #104]	; (404084 <setTestMotors+0x178>)
  40401a:	687b      	ldr	r3, [r7, #4]
  40401c:	3301      	adds	r3, #1
  40401e:	781b      	ldrb	r3, [r3, #0]
  404020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404024:	6013      	str	r3, [r2, #0]
  404026:	e017      	b.n	404058 <setTestMotors+0x14c>
	}
	else if(motorData[0] == MOTOR_1 && ~(motorData[1] & 0x80))
  404028:	687b      	ldr	r3, [r7, #4]
  40402a:	781b      	ldrb	r3, [r3, #0]
  40402c:	2b01      	cmp	r3, #1
  40402e:	d113      	bne.n	404058 <setTestMotors+0x14c>
	{
		FIN_3_Low;
  404030:	4a11      	ldr	r2, [pc, #68]	; (404078 <setTestMotors+0x16c>)
  404032:	4b11      	ldr	r3, [pc, #68]	; (404078 <setTestMotors+0x16c>)
  404034:	681b      	ldr	r3, [r3, #0]
  404036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40403a:	6013      	str	r3, [r2, #0]
		RIN_3_High;
  40403c:	4a10      	ldr	r2, [pc, #64]	; (404080 <setTestMotors+0x174>)
  40403e:	4b10      	ldr	r3, [pc, #64]	; (404080 <setTestMotors+0x174>)
  404040:	681b      	ldr	r3, [r3, #0]
  404042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  404046:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD3 = (motorData[1] & 0x7F);
  404048:	4a0e      	ldr	r2, [pc, #56]	; (404084 <setTestMotors+0x178>)
  40404a:	687b      	ldr	r3, [r7, #4]
  40404c:	3301      	adds	r3, #1
  40404e:	781b      	ldrb	r3, [r3, #0]
  404050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404054:	6013      	str	r3, [r2, #0]
	}					
  404056:	e7ff      	b.n	404058 <setTestMotors+0x14c>
  404058:	bf00      	nop
  40405a:	370c      	adds	r7, #12
  40405c:	46bd      	mov	sp, r7
  40405e:	bc80      	pop	{r7}
  404060:	4770      	bx	lr
  404062:	bf00      	nop
  404064:	400e1030 	.word	0x400e1030
  404068:	400e1234 	.word	0x400e1234
  40406c:	40020230 	.word	0x40020230
  404070:	400e1034 	.word	0x400e1034
  404074:	400e1230 	.word	0x400e1230
  404078:	400e0e34 	.word	0x400e0e34
  40407c:	40020250 	.word	0x40020250
  404080:	400e0e30 	.word	0x400e0e30
  404084:	40020270 	.word	0x40020270

00404088 <twi0Init>:
#include "twimux_interface.h"

//Initialise the TWI0 hardware. No Parameters
//Update to new code format necessary
void twi0Init(void)
{
  404088:	b480      	push	{r7}
  40408a:	b083      	sub	sp, #12
  40408c:	af00      	add	r7, sp, #0
	/******** TWI0 SETUP ********/
	REG_PMC_PCER0 |= (1<<19);				//Enable clock access to TWI0, Peripheral TWI0_ID = 19
  40408e:	4a1e      	ldr	r2, [pc, #120]	; (404108 <twi0Init+0x80>)
  404090:	4b1d      	ldr	r3, [pc, #116]	; (404108 <twi0Init+0x80>)
  404092:	681b      	ldr	r3, [r3, #0]
  404094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  404098:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR  |= (1<<3);				// Enable peripheralA control of PA3 (TWD0)
  40409a:	4a1c      	ldr	r2, [pc, #112]	; (40410c <twi0Init+0x84>)
  40409c:	4b1b      	ldr	r3, [pc, #108]	; (40410c <twi0Init+0x84>)
  40409e:	681b      	ldr	r3, [r3, #0]
  4040a0:	f043 0308 	orr.w	r3, r3, #8
  4040a4:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR  |= (1<<4);				// Enable peripheralA control of PA4 (TWCK0)
  4040a6:	4a19      	ldr	r2, [pc, #100]	; (40410c <twi0Init+0x84>)
  4040a8:	4b18      	ldr	r3, [pc, #96]	; (40410c <twi0Init+0x84>)
  4040aa:	681b      	ldr	r3, [r3, #0]
  4040ac:	f043 0310 	orr.w	r3, r3, #16
  4040b0:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR = (1<<7);					//Software Reset
  4040b2:	4b17      	ldr	r3, [pc, #92]	; (404110 <twi0Init+0x88>)
  4040b4:	2280      	movs	r2, #128	; 0x80
  4040b6:	601a      	str	r2, [r3, #0]
	/* TWI0 Clock Waveform Setup */
	//NOTE: A high period of 0.6uSec and a low period of 1.3uSec is required by both the Proximity and Light Sensors
	uint8_t CKDIV, CHDIV, CLDIV;
	CKDIV = 1;
  4040b8:	2301      	movs	r3, #1
  4040ba:	71fb      	strb	r3, [r7, #7]
	CLDIV = 63;								//x=63 1.3uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
  4040bc:	233f      	movs	r3, #63	; 0x3f
  4040be:	71bb      	strb	r3, [r7, #6]
	CHDIV = 28;								//x=28, 0.6uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
  4040c0:	231c      	movs	r3, #28
  4040c2:	717b      	strb	r3, [r7, #5]
	REG_TWI0_CWGR |= (CKDIV<<16);			//Clock speed 400000, fast mode
  4040c4:	4913      	ldr	r1, [pc, #76]	; (404114 <twi0Init+0x8c>)
  4040c6:	4b13      	ldr	r3, [pc, #76]	; (404114 <twi0Init+0x8c>)
  4040c8:	681b      	ldr	r3, [r3, #0]
  4040ca:	79fa      	ldrb	r2, [r7, #7]
  4040cc:	0412      	lsls	r2, r2, #16
  4040ce:	4313      	orrs	r3, r2
  4040d0:	600b      	str	r3, [r1, #0]
	REG_TWI0_CWGR |= (CHDIV<<8);			//Clock high period  0.6uSec
  4040d2:	4910      	ldr	r1, [pc, #64]	; (404114 <twi0Init+0x8c>)
  4040d4:	4b0f      	ldr	r3, [pc, #60]	; (404114 <twi0Init+0x8c>)
  4040d6:	681b      	ldr	r3, [r3, #0]
  4040d8:	797a      	ldrb	r2, [r7, #5]
  4040da:	0212      	lsls	r2, r2, #8
  4040dc:	4313      	orrs	r3, r2
  4040de:	600b      	str	r3, [r1, #0]
	REG_TWI0_CWGR |= (CLDIV<<0);			//Clock low period 1.3uSec
  4040e0:	490c      	ldr	r1, [pc, #48]	; (404114 <twi0Init+0x8c>)
  4040e2:	4b0c      	ldr	r3, [pc, #48]	; (404114 <twi0Init+0x8c>)
  4040e4:	681a      	ldr	r2, [r3, #0]
  4040e6:	79bb      	ldrb	r3, [r7, #6]
  4040e8:	4313      	orrs	r3, r2
  4040ea:	600b      	str	r3, [r1, #0]
	REG_TWI0_CR |= (1<<2)|(1<<5);			//Master mode enabled, Slave disabled
  4040ec:	4a08      	ldr	r2, [pc, #32]	; (404110 <twi0Init+0x88>)
  4040ee:	4b08      	ldr	r3, [pc, #32]	; (404110 <twi0Init+0x88>)
  4040f0:	681b      	ldr	r3, [r3, #0]
  4040f2:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  4040f6:	6013      	str	r3, [r2, #0]
	uint8_t dummy = REG_TWI0_RHR;			//Ensure RXRDY flag is cleared
  4040f8:	4b07      	ldr	r3, [pc, #28]	; (404118 <twi0Init+0x90>)
  4040fa:	681b      	ldr	r3, [r3, #0]
  4040fc:	713b      	strb	r3, [r7, #4]
}
  4040fe:	bf00      	nop
  404100:	370c      	adds	r7, #12
  404102:	46bd      	mov	sp, r7
  404104:	bc80      	pop	{r7}
  404106:	4770      	bx	lr
  404108:	400e0410 	.word	0x400e0410
  40410c:	400e0e04 	.word	0x400e0e04
  404110:	40018000 	.word	0x40018000
  404114:	40018010 	.word	0x40018010
  404118:	40018030 	.word	0x40018030

0040411c <TWI0_MuxSwitch>:

/******** TWI0 Multiplexer Channel Select ********/
//Sets the Multiplexer to desired channel. Can put called by the user but is mostly called by other functions
void TWI0_MuxSwitch(uint8_t channel)
{
  40411c:	b480      	push	{r7}
  40411e:	b083      	sub	sp, #12
  404120:	af00      	add	r7, sp, #0
  404122:	4603      	mov	r3, r0
  404124:	71fb      	strb	r3, [r7, #7]
	REG_TWI0_CR |= (1<<2)|(1<<5);			//Master mode enabled, Slave disabled
  404126:	4a13      	ldr	r2, [pc, #76]	; (404174 <TWI0_MuxSwitch+0x58>)
  404128:	4b12      	ldr	r3, [pc, #72]	; (404174 <TWI0_MuxSwitch+0x58>)
  40412a:	681b      	ldr	r3, [r3, #0]
  40412c:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  404130:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (TWI0_Mux_Address<<16);	//Set Slave Device address
  404132:	4b11      	ldr	r3, [pc, #68]	; (404178 <TWI0_MuxSwitch+0x5c>)
  404134:	f44f 0260 	mov.w	r2, #14680064	; 0xe00000
  404138:	601a      	str	r2, [r3, #0]
	//No internal address and set to master write mode by default of zero
	REG_TWI0_THR = channel;					//Load THR and writing to THR causes start to be sent
  40413a:	4a10      	ldr	r2, [pc, #64]	; (40417c <TWI0_MuxSwitch+0x60>)
  40413c:	79fb      	ldrb	r3, [r7, #7]
  40413e:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR |= (1<<1);					//Set STOP bit after tx
  404140:	4a0c      	ldr	r2, [pc, #48]	; (404174 <TWI0_MuxSwitch+0x58>)
  404142:	4b0c      	ldr	r3, [pc, #48]	; (404174 <TWI0_MuxSwitch+0x58>)
  404144:	681b      	ldr	r3, [r3, #0]
  404146:	f043 0302 	orr.w	r3, r3, #2
  40414a:	6013      	str	r3, [r2, #0]
	while(!(twi0TXRDY));					//wait for start and data to be shifted out of holding register
  40414c:	bf00      	nop
  40414e:	4b0c      	ldr	r3, [pc, #48]	; (404180 <TWI0_MuxSwitch+0x64>)
  404150:	681b      	ldr	r3, [r3, #0]
  404152:	f003 0304 	and.w	r3, r3, #4
  404156:	2b00      	cmp	r3, #0
  404158:	d0f9      	beq.n	40414e <TWI0_MuxSwitch+0x32>
	while(!(twi0TXCOMP));					//Communication complete, holding and shifting registers empty, Stop sent
  40415a:	bf00      	nop
  40415c:	4b08      	ldr	r3, [pc, #32]	; (404180 <TWI0_MuxSwitch+0x64>)
  40415e:	681b      	ldr	r3, [r3, #0]
  404160:	f003 0301 	and.w	r3, r3, #1
  404164:	2b00      	cmp	r3, #0
  404166:	d0f9      	beq.n	40415c <TWI0_MuxSwitch+0x40>
}
  404168:	bf00      	nop
  40416a:	370c      	adds	r7, #12
  40416c:	46bd      	mov	sp, r7
  40416e:	bc80      	pop	{r7}
  404170:	4770      	bx	lr
  404172:	bf00      	nop
  404174:	40018000 	.word	0x40018000
  404178:	40018004 	.word	0x40018004
  40417c:	40018034 	.word	0x40018034
  404180:	40018020 	.word	0x40018020

00404184 <TWI0_ReadMuxChannel>:

/******** TWI0 Multiplexer Channel Read ********/
//Allows read back of the currently selected Multiplexer channel
uint8_t TWI0_ReadMuxChannel(void)
{
  404184:	b480      	push	{r7}
  404186:	b083      	sub	sp, #12
  404188:	af00      	add	r7, sp, #0
	/*** This read function tells you the selected Mux channel (8 bits of data, no internal address) ***/
	uint8_t data;
	REG_TWI0_CR |= (1<<2)|(1<<5);			//Enable master mode and disable slave mode
  40418a:	4a15      	ldr	r2, [pc, #84]	; (4041e0 <TWI0_ReadMuxChannel+0x5c>)
  40418c:	4b14      	ldr	r3, [pc, #80]	; (4041e0 <TWI0_ReadMuxChannel+0x5c>)
  40418e:	681b      	ldr	r3, [r3, #0]
  404190:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  404194:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (TWI0_Mux_Address<<16);	//Device Slave address
  404196:	4b13      	ldr	r3, [pc, #76]	; (4041e4 <TWI0_ReadMuxChannel+0x60>)
  404198:	f44f 0260 	mov.w	r2, #14680064	; 0xe00000
  40419c:	601a      	str	r2, [r3, #0]
	REG_TWI0_MMR |= (1<<12);				//Master read direction = 1
  40419e:	4a11      	ldr	r2, [pc, #68]	; (4041e4 <TWI0_ReadMuxChannel+0x60>)
  4041a0:	4b10      	ldr	r3, [pc, #64]	; (4041e4 <TWI0_ReadMuxChannel+0x60>)
  4041a2:	681b      	ldr	r3, [r3, #0]
  4041a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4041a8:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR = 0x3;						//Send a START|STOP bit as required (single byte read)
  4041aa:	4b0d      	ldr	r3, [pc, #52]	; (4041e0 <TWI0_ReadMuxChannel+0x5c>)
  4041ac:	2203      	movs	r2, #3
  4041ae:	601a      	str	r2, [r3, #0]
	while(!(twi0RXRDY));					//While Receive Holding Register not ready. wait.
  4041b0:	bf00      	nop
  4041b2:	4b0d      	ldr	r3, [pc, #52]	; (4041e8 <TWI0_ReadMuxChannel+0x64>)
  4041b4:	681b      	ldr	r3, [r3, #0]
  4041b6:	f003 0302 	and.w	r3, r3, #2
  4041ba:	2b00      	cmp	r3, #0
  4041bc:	d0f9      	beq.n	4041b2 <TWI0_ReadMuxChannel+0x2e>
	data = REG_TWI0_RHR;					//Store data received
  4041be:	4b0b      	ldr	r3, [pc, #44]	; (4041ec <TWI0_ReadMuxChannel+0x68>)
  4041c0:	681b      	ldr	r3, [r3, #0]
  4041c2:	71fb      	strb	r3, [r7, #7]
	while(!(twi0TXCOMP));					//Wait for transmission complete
  4041c4:	bf00      	nop
  4041c6:	4b08      	ldr	r3, [pc, #32]	; (4041e8 <TWI0_ReadMuxChannel+0x64>)
  4041c8:	681b      	ldr	r3, [r3, #0]
  4041ca:	f003 0301 	and.w	r3, r3, #1
  4041ce:	2b00      	cmp	r3, #0
  4041d0:	d0f9      	beq.n	4041c6 <TWI0_ReadMuxChannel+0x42>
	return data;
  4041d2:	79fb      	ldrb	r3, [r7, #7]
}
  4041d4:	4618      	mov	r0, r3
  4041d6:	370c      	adds	r7, #12
  4041d8:	46bd      	mov	sp, r7
  4041da:	bc80      	pop	{r7}
  4041dc:	4770      	bx	lr
  4041de:	bf00      	nop
  4041e0:	40018000 	.word	0x40018000
  4041e4:	40018004 	.word	0x40018004
  4041e8:	40018020 	.word	0x40018020
  4041ec:	40018030 	.word	0x40018030

004041f0 <TWI0_Write>:

/******** TWI0 Write ********/
void TWI0_Write(uint8_t SlaveAddress, uint8_t intAddress, uint8_t Data)
{
  4041f0:	b480      	push	{r7}
  4041f2:	b083      	sub	sp, #12
  4041f4:	af00      	add	r7, sp, #0
  4041f6:	4603      	mov	r3, r0
  4041f8:	71fb      	strb	r3, [r7, #7]
  4041fa:	460b      	mov	r3, r1
  4041fc:	71bb      	strb	r3, [r7, #6]
  4041fe:	4613      	mov	r3, r2
  404200:	717b      	strb	r3, [r7, #5]
	REG_TWI0_CR |= (1<<2)|(1<<5);		//Enable master mode and disable slave mode
  404202:	4a17      	ldr	r2, [pc, #92]	; (404260 <TWI0_Write+0x70>)
  404204:	4b16      	ldr	r3, [pc, #88]	; (404260 <TWI0_Write+0x70>)
  404206:	681b      	ldr	r3, [r3, #0]
  404208:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  40420c:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (SlaveAddress<<16);	//Slave address (eg. Mux or Fast Charge Chip)
  40420e:	4a15      	ldr	r2, [pc, #84]	; (404264 <TWI0_Write+0x74>)
  404210:	79fb      	ldrb	r3, [r7, #7]
  404212:	041b      	lsls	r3, r3, #16
  404214:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR |= (1<<8);				//Set one-byte internal device address
  404216:	4a13      	ldr	r2, [pc, #76]	; (404264 <TWI0_Write+0x74>)
  404218:	4b12      	ldr	r3, [pc, #72]	; (404264 <TWI0_Write+0x74>)
  40421a:	681b      	ldr	r3, [r3, #0]
  40421c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404220:	6013      	str	r3, [r2, #0]
	//Master write direction default by 0
	REG_TWI0_IADR = intAddress;			//Set up the address to write to
  404222:	4a11      	ldr	r2, [pc, #68]	; (404268 <TWI0_Write+0x78>)
  404224:	79bb      	ldrb	r3, [r7, #6]
  404226:	6013      	str	r3, [r2, #0]
	REG_TWI0_THR = Data;				//Load the transmit holding register with data to send (start bit is also sent)
  404228:	4a10      	ldr	r2, [pc, #64]	; (40426c <TWI0_Write+0x7c>)
  40422a:	797b      	ldrb	r3, [r7, #5]
  40422c:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR |= (1<<1);				//Set the STOP bit
  40422e:	4a0c      	ldr	r2, [pc, #48]	; (404260 <TWI0_Write+0x70>)
  404230:	4b0b      	ldr	r3, [pc, #44]	; (404260 <TWI0_Write+0x70>)
  404232:	681b      	ldr	r3, [r3, #0]
  404234:	f043 0302 	orr.w	r3, r3, #2
  404238:	6013      	str	r3, [r2, #0]
	while(!(twi0TXRDY));				//while Transmit Holding Register not ready. wait.
  40423a:	bf00      	nop
  40423c:	4b0c      	ldr	r3, [pc, #48]	; (404270 <TWI0_Write+0x80>)
  40423e:	681b      	ldr	r3, [r3, #0]
  404240:	f003 0304 	and.w	r3, r3, #4
  404244:	2b00      	cmp	r3, #0
  404246:	d0f9      	beq.n	40423c <TWI0_Write+0x4c>
	while(!(twi0TXCOMP));				//while transmit not complete. wait.
  404248:	bf00      	nop
  40424a:	4b09      	ldr	r3, [pc, #36]	; (404270 <TWI0_Write+0x80>)
  40424c:	681b      	ldr	r3, [r3, #0]
  40424e:	f003 0301 	and.w	r3, r3, #1
  404252:	2b00      	cmp	r3, #0
  404254:	d0f9      	beq.n	40424a <TWI0_Write+0x5a>
}
  404256:	bf00      	nop
  404258:	370c      	adds	r7, #12
  40425a:	46bd      	mov	sp, r7
  40425c:	bc80      	pop	{r7}
  40425e:	4770      	bx	lr
  404260:	40018000 	.word	0x40018000
  404264:	40018004 	.word	0x40018004
  404268:	4001800c 	.word	0x4001800c
  40426c:	40018034 	.word	0x40018034
  404270:	40018020 	.word	0x40018020

00404274 <TWI0_ReadDB>:
}

/******** TWI0 Read - Double Byte ********/
//This read function is for peripherals with 16 bits of data and an internal address
uint16_t TWI0_ReadDB(uint8_t SlaveAddress, uint8_t intAddress)
{
  404274:	b480      	push	{r7}
  404276:	b085      	sub	sp, #20
  404278:	af00      	add	r7, sp, #0
  40427a:	4603      	mov	r3, r0
  40427c:	460a      	mov	r2, r1
  40427e:	71fb      	strb	r3, [r7, #7]
  404280:	4613      	mov	r3, r2
  404282:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;
	uint16_t data;
	REG_TWI0_CR |= (1<<2)|(1<<5);		//Enable master mode and disable slave mode
  404284:	4a26      	ldr	r2, [pc, #152]	; (404320 <TWI0_ReadDB+0xac>)
  404286:	4b26      	ldr	r3, [pc, #152]	; (404320 <TWI0_ReadDB+0xac>)
  404288:	681b      	ldr	r3, [r3, #0]
  40428a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  40428e:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (SlaveAddress<<16);	//Device Slave address
  404290:	4a24      	ldr	r2, [pc, #144]	; (404324 <TWI0_ReadDB+0xb0>)
  404292:	79fb      	ldrb	r3, [r7, #7]
  404294:	041b      	lsls	r3, r3, #16
  404296:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR |= (1<<8);				//Set one-byte internal device address
  404298:	4a22      	ldr	r2, [pc, #136]	; (404324 <TWI0_ReadDB+0xb0>)
  40429a:	4b22      	ldr	r3, [pc, #136]	; (404324 <TWI0_ReadDB+0xb0>)
  40429c:	681b      	ldr	r3, [r3, #0]
  40429e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4042a2:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR |= (1<<12);			//Master read direction = 1
  4042a4:	4a1f      	ldr	r2, [pc, #124]	; (404324 <TWI0_ReadDB+0xb0>)
  4042a6:	4b1f      	ldr	r3, [pc, #124]	; (404324 <TWI0_ReadDB+0xb0>)
  4042a8:	681b      	ldr	r3, [r3, #0]
  4042aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4042ae:	6013      	str	r3, [r2, #0]
	REG_TWI0_IADR = intAddress;			//Set up device internal address to read from
  4042b0:	4a1d      	ldr	r2, [pc, #116]	; (404328 <TWI0_ReadDB+0xb4>)
  4042b2:	79bb      	ldrb	r3, [r7, #6]
  4042b4:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR |= (1<<0);				//Send a START bit as required (single byte read)
  4042b6:	4a1a      	ldr	r2, [pc, #104]	; (404320 <TWI0_ReadDB+0xac>)
  4042b8:	4b19      	ldr	r3, [pc, #100]	; (404320 <TWI0_ReadDB+0xac>)
  4042ba:	681b      	ldr	r3, [r3, #0]
  4042bc:	f043 0301 	orr.w	r3, r3, #1
  4042c0:	6013      	str	r3, [r2, #0]
	while(!(twi0RXRDY));				//While Receive Holding Register not ready. wait.
  4042c2:	bf00      	nop
  4042c4:	4b19      	ldr	r3, [pc, #100]	; (40432c <TWI0_ReadDB+0xb8>)
  4042c6:	681b      	ldr	r3, [r3, #0]
  4042c8:	f003 0302 	and.w	r3, r3, #2
  4042cc:	2b00      	cmp	r3, #0
  4042ce:	d0f9      	beq.n	4042c4 <TWI0_ReadDB+0x50>
	data1 = REG_TWI0_RHR;				//Store data received (the lower byte of 16-bit data)
  4042d0:	4b17      	ldr	r3, [pc, #92]	; (404330 <TWI0_ReadDB+0xbc>)
  4042d2:	681b      	ldr	r3, [r3, #0]
  4042d4:	73fb      	strb	r3, [r7, #15]
	REG_TWI0_CR |= (1<<1);				//Set STOP bit as required
  4042d6:	4a12      	ldr	r2, [pc, #72]	; (404320 <TWI0_ReadDB+0xac>)
  4042d8:	4b11      	ldr	r3, [pc, #68]	; (404320 <TWI0_ReadDB+0xac>)
  4042da:	681b      	ldr	r3, [r3, #0]
  4042dc:	f043 0302 	orr.w	r3, r3, #2
  4042e0:	6013      	str	r3, [r2, #0]
	while(!(twi0RXRDY));				//While Receive Holding Register not ready. wait.
  4042e2:	bf00      	nop
  4042e4:	4b11      	ldr	r3, [pc, #68]	; (40432c <TWI0_ReadDB+0xb8>)
  4042e6:	681b      	ldr	r3, [r3, #0]
  4042e8:	f003 0302 	and.w	r3, r3, #2
  4042ec:	2b00      	cmp	r3, #0
  4042ee:	d0f9      	beq.n	4042e4 <TWI0_ReadDB+0x70>
	data2 = REG_TWI0_RHR;				//Store data received (the upper byte of 16-bit data)
  4042f0:	4b0f      	ldr	r3, [pc, #60]	; (404330 <TWI0_ReadDB+0xbc>)
  4042f2:	681b      	ldr	r3, [r3, #0]
  4042f4:	73bb      	strb	r3, [r7, #14]
	while(!(twi0TXCOMP));				//While transmit not complete. wait.
  4042f6:	bf00      	nop
  4042f8:	4b0c      	ldr	r3, [pc, #48]	; (40432c <TWI0_ReadDB+0xb8>)
  4042fa:	681b      	ldr	r3, [r3, #0]
  4042fc:	f003 0301 	and.w	r3, r3, #1
  404300:	2b00      	cmp	r3, #0
  404302:	d0f9      	beq.n	4042f8 <TWI0_ReadDB+0x84>
	data = (data2 << 8) | data1;		//Puts the two 8 bits into 16 bits
  404304:	7bbb      	ldrb	r3, [r7, #14]
  404306:	021b      	lsls	r3, r3, #8
  404308:	b21a      	sxth	r2, r3
  40430a:	7bfb      	ldrb	r3, [r7, #15]
  40430c:	b21b      	sxth	r3, r3
  40430e:	4313      	orrs	r3, r2
  404310:	b21b      	sxth	r3, r3
  404312:	81bb      	strh	r3, [r7, #12]
	return data;
  404314:	89bb      	ldrh	r3, [r7, #12]
}
  404316:	4618      	mov	r0, r3
  404318:	3714      	adds	r7, #20
  40431a:	46bd      	mov	sp, r7
  40431c:	bc80      	pop	{r7}
  40431e:	4770      	bx	lr
  404320:	40018000 	.word	0x40018000
  404324:	40018004 	.word	0x40018004
  404328:	4001800c 	.word	0x4001800c
  40432c:	40018020 	.word	0x40018020
  404330:	40018030 	.word	0x40018030

00404334 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  404334:	b580      	push	{r7, lr}
  404336:	b082      	sub	sp, #8
  404338:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40433a:	4b16      	ldr	r3, [pc, #88]	; (404394 <Reset_Handler+0x60>)
  40433c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  40433e:	4b16      	ldr	r3, [pc, #88]	; (404398 <Reset_Handler+0x64>)
  404340:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  404342:	687a      	ldr	r2, [r7, #4]
  404344:	683b      	ldr	r3, [r7, #0]
  404346:	429a      	cmp	r2, r3
  404348:	d00c      	beq.n	404364 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40434a:	e007      	b.n	40435c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40434c:	683b      	ldr	r3, [r7, #0]
  40434e:	1d1a      	adds	r2, r3, #4
  404350:	603a      	str	r2, [r7, #0]
  404352:	687a      	ldr	r2, [r7, #4]
  404354:	1d11      	adds	r1, r2, #4
  404356:	6079      	str	r1, [r7, #4]
  404358:	6812      	ldr	r2, [r2, #0]
  40435a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40435c:	683b      	ldr	r3, [r7, #0]
  40435e:	4a0f      	ldr	r2, [pc, #60]	; (40439c <Reset_Handler+0x68>)
  404360:	4293      	cmp	r3, r2
  404362:	d3f3      	bcc.n	40434c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404364:	4b0e      	ldr	r3, [pc, #56]	; (4043a0 <Reset_Handler+0x6c>)
  404366:	603b      	str	r3, [r7, #0]
  404368:	e004      	b.n	404374 <Reset_Handler+0x40>
                *pDest++ = 0;
  40436a:	683b      	ldr	r3, [r7, #0]
  40436c:	1d1a      	adds	r2, r3, #4
  40436e:	603a      	str	r2, [r7, #0]
  404370:	2200      	movs	r2, #0
  404372:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404374:	683b      	ldr	r3, [r7, #0]
  404376:	4a0b      	ldr	r2, [pc, #44]	; (4043a4 <Reset_Handler+0x70>)
  404378:	4293      	cmp	r3, r2
  40437a:	d3f6      	bcc.n	40436a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  40437c:	4b0a      	ldr	r3, [pc, #40]	; (4043a8 <Reset_Handler+0x74>)
  40437e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404380:	4a0a      	ldr	r2, [pc, #40]	; (4043ac <Reset_Handler+0x78>)
  404382:	687b      	ldr	r3, [r7, #4]
  404384:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404388:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  40438a:	4b09      	ldr	r3, [pc, #36]	; (4043b0 <Reset_Handler+0x7c>)
  40438c:	4798      	blx	r3

        /* Branch to main function */
        main();
  40438e:	4b09      	ldr	r3, [pc, #36]	; (4043b4 <Reset_Handler+0x80>)
  404390:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  404392:	e7fe      	b.n	404392 <Reset_Handler+0x5e>
  404394:	00407ddc 	.word	0x00407ddc
  404398:	20000000 	.word	0x20000000
  40439c:	20000470 	.word	0x20000470
  4043a0:	20000470 	.word	0x20000470
  4043a4:	20000f9c 	.word	0x20000f9c
  4043a8:	00400000 	.word	0x00400000
  4043ac:	e000ed00 	.word	0xe000ed00
  4043b0:	004069b9 	.word	0x004069b9
  4043b4:	004043f1 	.word	0x004043f1

004043b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4043b8:	b480      	push	{r7}
  4043ba:	af00      	add	r7, sp, #0
        while (1) {
        }
  4043bc:	e7fe      	b.n	4043bc <Dummy_Handler+0x4>
  4043be:	bf00      	nop

004043c0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4043c0:	b480      	push	{r7}
  4043c2:	b083      	sub	sp, #12
  4043c4:	af00      	add	r7, sp, #0
  4043c6:	4603      	mov	r3, r0
  4043c8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4043ca:	4908      	ldr	r1, [pc, #32]	; (4043ec <NVIC_EnableIRQ+0x2c>)
  4043cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4043d0:	095b      	lsrs	r3, r3, #5
  4043d2:	79fa      	ldrb	r2, [r7, #7]
  4043d4:	f002 021f 	and.w	r2, r2, #31
  4043d8:	2001      	movs	r0, #1
  4043da:	fa00 f202 	lsl.w	r2, r0, r2
  4043de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4043e2:	bf00      	nop
  4043e4:	370c      	adds	r7, #12
  4043e6:	46bd      	mov	sp, r7
  4043e8:	bc80      	pop	{r7}
  4043ea:	4770      	bx	lr
  4043ec:	e000e100 	.word	0xe000e100

004043f0 <main>:
/******** Global Variables ********/
uint8_t SBtest, SBtest1;
uint16_t DBtest, DBtest1, DBtest2;

int main(void)
{
  4043f0:	b580      	push	{r7, lr}
  4043f2:	b090      	sub	sp, #64	; 0x40
  4043f4:	af00      	add	r7, sp, #0
	setup();
  4043f6:	4b1c      	ldr	r3, [pc, #112]	; (404468 <main+0x78>)
  4043f8:	4798      	blx	r3
	//Comms
	struct frame_info frame;
	struct message_info message;
	//Optical
	struct Position robotPosition;
	robotPosition.x = 0;
  4043fa:	f04f 0300 	mov.w	r3, #0
  4043fe:	61fb      	str	r3, [r7, #28]
	robotPosition.y = 0;
  404400:	f04f 0300 	mov.w	r3, #0
  404404:	623b      	str	r3, [r7, #32]
	while(1)
	{
		if(testCommandFlag == 1 || message.command == STREAM_DATA)
  404406:	4b19      	ldr	r3, [pc, #100]	; (40446c <main+0x7c>)
  404408:	781b      	ldrb	r3, [r3, #0]
  40440a:	2b01      	cmp	r3, #1
  40440c:	d003      	beq.n	404416 <main+0x26>
  40440e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  404412:	2b02      	cmp	r3, #2
  404414:	d108      	bne.n	404428 <main+0x38>
		{
			testCommandFlag = 0;
  404416:	4b15      	ldr	r3, [pc, #84]	; (40446c <main+0x7c>)
  404418:	2200      	movs	r2, #0
  40441a:	701a      	strb	r2, [r3, #0]
			testManager(message);
  40441c:	f107 0328 	add.w	r3, r7, #40	; 0x28
  404420:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404424:	4b12      	ldr	r3, [pc, #72]	; (404470 <main+0x80>)
  404426:	4798      	blx	r3
		}
		if(batteryLow)
		{
			//moveRobot(0, 50);
			dockRobot();
  404428:	4b12      	ldr	r3, [pc, #72]	; (404474 <main+0x84>)
  40442a:	4798      	blx	r3
		}
		
		if(FrameBufferInfoGetFull(&frame) == 0)	//Check for a received XBee Message
  40442c:	f107 0334 	add.w	r3, r7, #52	; 0x34
  404430:	4618      	mov	r0, r3
  404432:	4b11      	ldr	r3, [pc, #68]	; (404478 <main+0x88>)
  404434:	4798      	blx	r3
  404436:	4603      	mov	r3, r0
  404438:	2b00      	cmp	r3, #0
  40443a:	d1e4      	bne.n	404406 <main+0x16>
		{
			InterpretXbeeAPIFrame(frame); //Interpret the received XBee Message
  40443c:	f107 0334 	add.w	r3, r7, #52	; 0x34
  404440:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404444:	4b0d      	ldr	r3, [pc, #52]	; (40447c <main+0x8c>)
  404446:	4798      	blx	r3

			if(MessageBufferInfoGetFull(&message) == 0) //Check for a message from the swarm
  404448:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40444c:	4618      	mov	r0, r3
  40444e:	4b0c      	ldr	r3, [pc, #48]	; (404480 <main+0x90>)
  404450:	4798      	blx	r3
  404452:	4603      	mov	r3, r0
  404454:	2b00      	cmp	r3, #0
  404456:	d1d6      	bne.n	404406 <main+0x16>
			{
				InterpretSwarmMessage(message);	//Interpret the message
  404458:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40445c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404460:	4b08      	ldr	r3, [pc, #32]	; (404484 <main+0x94>)
  404462:	4798      	blx	r3
			}
		}
	}
  404464:	e7cf      	b.n	404406 <main+0x16>
  404466:	bf00      	nop
  404468:	00404489 	.word	0x00404489
  40446c:	20000f94 	.word	0x20000f94
  404470:	00403cd5 	.word	0x00403cd5
  404474:	00403495 	.word	0x00403495
  404478:	00400a21 	.word	0x00400a21
  40447c:	0040017d 	.word	0x0040017d
  404480:	00400cc5 	.word	0x00400cc5
  404484:	0040014d 	.word	0x0040014d

00404488 <setup>:
}

void setup(void)
{
  404488:	b580      	push	{r7, lr}
  40448a:	af00      	add	r7, sp, #0
	REG_WDT_MR = (1 << 15); 				//WDT Disable
  40448c:	4b83      	ldr	r3, [pc, #524]	; (40469c <setup+0x214>)
  40448e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404492:	601a      	str	r2, [r3, #0]

	/******** CLOCK Setup @ 100MHz ********/
	REG_EFC_FMR = ((1<<26) | (5<<8));		//Set Flash Wait State for 100MHz
  404494:	4b82      	ldr	r3, [pc, #520]	; (4046a0 <setup+0x218>)
  404496:	4a83      	ldr	r2, [pc, #524]	; (4046a4 <setup+0x21c>)
  404498:	601a      	str	r2, [r3, #0]
	REG_PMC_WPMR = 0x504D4300;				//Disable PMC write protect
  40449a:	4b83      	ldr	r3, [pc, #524]	; (4046a8 <setup+0x220>)
  40449c:	4a83      	ldr	r2, [pc, #524]	; (4046ac <setup+0x224>)
  40449e:	601a      	str	r2, [r3, #0]
	REG_CKGR_MOR |= (0x37<<16) | (0x14<<8); //Set 5ms main xtal osc. Start up time. Start Up Time = 8 * MOSCXTST / SLCK => MOSCXTST = 20
  4044a0:	4a83      	ldr	r2, [pc, #524]	; (4046b0 <setup+0x228>)
  4044a2:	4b83      	ldr	r3, [pc, #524]	; (4046b0 <setup+0x228>)
  4044a4:	681b      	ldr	r3, [r3, #0]
  4044a6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4044aa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  4044ae:	6013      	str	r3, [r2, #0]
	REG_CKGR_MOR |= (0x37<<16) | (1<<0);	//Enable the external crystal connected to XIN and XOUT
  4044b0:	4a7f      	ldr	r2, [pc, #508]	; (4046b0 <setup+0x228>)
  4044b2:	4b7f      	ldr	r3, [pc, #508]	; (4046b0 <setup+0x228>)
  4044b4:	681b      	ldr	r3, [r3, #0]
  4044b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4044ba:	f043 0301 	orr.w	r3, r3, #1
  4044be:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & 0x01));			//Wait for the main crystal oscillator to stabilize
  4044c0:	bf00      	nop
  4044c2:	4b7c      	ldr	r3, [pc, #496]	; (4046b4 <setup+0x22c>)
  4044c4:	681b      	ldr	r3, [r3, #0]
  4044c6:	f003 0301 	and.w	r3, r3, #1
  4044ca:	2b00      	cmp	r3, #0
  4044cc:	d0f9      	beq.n	4044c2 <setup+0x3a>
	REG_CKGR_MOR |= (0x37<<16) | (1<<24);	//MAINCK source set to external xtal
  4044ce:	4a78      	ldr	r2, [pc, #480]	; (4046b0 <setup+0x228>)
  4044d0:	4b77      	ldr	r3, [pc, #476]	; (4046b0 <setup+0x228>)
  4044d2:	681b      	ldr	r3, [r3, #0]
  4044d4:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4044dc:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & 0x10000));			//Wait for the source changeover to be complete
  4044de:	bf00      	nop
  4044e0:	4b74      	ldr	r3, [pc, #464]	; (4046b4 <setup+0x22c>)
  4044e2:	681b      	ldr	r3, [r3, #0]
  4044e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4044e8:	2b00      	cmp	r3, #0
  4044ea:	d0f9      	beq.n	4044e0 <setup+0x58>
	REG_CKGR_MOR = 0x01371401;				//Disable the RC oscillator
  4044ec:	4b70      	ldr	r3, [pc, #448]	; (4046b0 <setup+0x228>)
  4044ee:	4a72      	ldr	r2, [pc, #456]	; (4046b8 <setup+0x230>)
  4044f0:	601a      	str	r2, [r3, #0]
	REG_CKGR_PLLAR |= (1<<29) | (0x03<<0) | (0x18<<16) | (0x3F<<8); //Sets PLL to Divide by 3, Multiply by 25 and wait 63 SLCK cycles
  4044f2:	4972      	ldr	r1, [pc, #456]	; (4046bc <setup+0x234>)
  4044f4:	4b71      	ldr	r3, [pc, #452]	; (4046bc <setup+0x234>)
  4044f6:	681a      	ldr	r2, [r3, #0]
  4044f8:	4b71      	ldr	r3, [pc, #452]	; (4046c0 <setup+0x238>)
  4044fa:	4313      	orrs	r3, r2
  4044fc:	600b      	str	r3, [r1, #0]
	while(!(REG_PMC_SR & 0x02));			//Wait for PLL LOCKA bit to be set
  4044fe:	bf00      	nop
  404500:	4b6c      	ldr	r3, [pc, #432]	; (4046b4 <setup+0x22c>)
  404502:	681b      	ldr	r3, [r3, #0]
  404504:	f003 0302 	and.w	r3, r3, #2
  404508:	2b00      	cmp	r3, #0
  40450a:	d0f9      	beq.n	404500 <setup+0x78>
	REG_PMC_MCKR = (2<<0);					//Set PLLA_CLK as MCK
  40450c:	4b6d      	ldr	r3, [pc, #436]	; (4046c4 <setup+0x23c>)
  40450e:	2202      	movs	r2, #2
  404510:	601a      	str	r2, [r3, #0]
	while(!(REG_PMC_SR & 0x08));			//Wait for MCK ready
  404512:	bf00      	nop
  404514:	4b67      	ldr	r3, [pc, #412]	; (4046b4 <setup+0x22c>)
  404516:	681b      	ldr	r3, [r3, #0]
  404518:	f003 0308 	and.w	r3, r3, #8
  40451c:	2b00      	cmp	r3, #0
  40451e:	d0f9      	beq.n	404514 <setup+0x8c>
	
	/******** PIO Controller Setup ********/
	REG_PMC_PCER0 |= (1<<11);	//Enable clock access to PIO controller A
  404520:	4a69      	ldr	r2, [pc, #420]	; (4046c8 <setup+0x240>)
  404522:	4b69      	ldr	r3, [pc, #420]	; (4046c8 <setup+0x240>)
  404524:	681b      	ldr	r3, [r3, #0]
  404526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40452a:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<12);	//Enable clock access to PIO controller B
  40452c:	4a66      	ldr	r2, [pc, #408]	; (4046c8 <setup+0x240>)
  40452e:	4b66      	ldr	r3, [pc, #408]	; (4046c8 <setup+0x240>)
  404530:	681b      	ldr	r3, [r3, #0]
  404532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  404536:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<13);	//Enable clock access to PIO controller C
  404538:	4a63      	ldr	r2, [pc, #396]	; (4046c8 <setup+0x240>)
  40453a:	4b63      	ldr	r3, [pc, #396]	; (4046c8 <setup+0x240>)
  40453c:	681b      	ldr	r3, [r3, #0]
  40453e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404542:	6013      	str	r3, [r2, #0]
	REG_PIOA_WPMR = 0x50494F00; //Disable PIOA write protect
  404544:	4b61      	ldr	r3, [pc, #388]	; (4046cc <setup+0x244>)
  404546:	4a62      	ldr	r2, [pc, #392]	; (4046d0 <setup+0x248>)
  404548:	601a      	str	r2, [r3, #0]
	REG_PIOB_WPMR = 0x50494F00; //Disable PIOB write protect
  40454a:	4b62      	ldr	r3, [pc, #392]	; (4046d4 <setup+0x24c>)
  40454c:	4a60      	ldr	r2, [pc, #384]	; (4046d0 <setup+0x248>)
  40454e:	601a      	str	r2, [r3, #0]
	REG_PIOC_WPMR = 0x50494F00; //Disable PIOC write protect
  404550:	4b61      	ldr	r3, [pc, #388]	; (4046d8 <setup+0x250>)
  404552:	4a5f      	ldr	r2, [pc, #380]	; (4046d0 <setup+0x248>)
  404554:	601a      	str	r2, [r3, #0]
	
	motor_init();
  404556:	4b61      	ldr	r3, [pc, #388]	; (4046dc <setup+0x254>)
  404558:	4798      	blx	r3
	SPI_Init();
  40455a:	4b61      	ldr	r3, [pc, #388]	; (4046e0 <setup+0x258>)
  40455c:	4798      	blx	r3
	//mouseInit(); //May require further testing - Adam
	CommunicationSetup();
  40455e:	4b61      	ldr	r3, [pc, #388]	; (4046e4 <setup+0x25c>)
  404560:	4798      	blx	r3
	initImu();
  404562:	4b61      	ldr	r3, [pc, #388]	; (4046e8 <setup+0x260>)
  404564:	4798      	blx	r3
	twi0Init();
  404566:	4b61      	ldr	r3, [pc, #388]	; (4046ec <setup+0x264>)
  404568:	4798      	blx	r3

	/******** LED Setup ********/
	REG_PIOA_PER |= ((1<<28) | (1<<27));	//Enable PIO control of D1 & D3.
  40456a:	4a61      	ldr	r2, [pc, #388]	; (4046f0 <setup+0x268>)
  40456c:	4b60      	ldr	r3, [pc, #384]	; (4046f0 <setup+0x268>)
  40456e:	681b      	ldr	r3, [r3, #0]
  404570:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
  404574:	6013      	str	r3, [r2, #0]
	REG_PIOC_PER |= (1<<8);					//Enable PIO control of D2
  404576:	4a5f      	ldr	r2, [pc, #380]	; (4046f4 <setup+0x26c>)
  404578:	4b5e      	ldr	r3, [pc, #376]	; (4046f4 <setup+0x26c>)
  40457a:	681b      	ldr	r3, [r3, #0]
  40457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404580:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= ((1<<28) | (1<<27));	//Set D1 & D3 as outputs
  404582:	4a5d      	ldr	r2, [pc, #372]	; (4046f8 <setup+0x270>)
  404584:	4b5c      	ldr	r3, [pc, #368]	; (4046f8 <setup+0x270>)
  404586:	681b      	ldr	r3, [r3, #0]
  404588:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
  40458c:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<8);					//Set D2 as an output
  40458e:	4a5b      	ldr	r2, [pc, #364]	; (4046fc <setup+0x274>)
  404590:	4b5a      	ldr	r3, [pc, #360]	; (4046fc <setup+0x274>)
  404592:	681b      	ldr	r3, [r3, #0]
  404594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404598:	6013      	str	r3, [r2, #0]
	D1off;									//D1 starts up off
  40459a:	4a59      	ldr	r2, [pc, #356]	; (404700 <setup+0x278>)
  40459c:	4b58      	ldr	r3, [pc, #352]	; (404700 <setup+0x278>)
  40459e:	681b      	ldr	r3, [r3, #0]
  4045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  4045a4:	6013      	str	r3, [r2, #0]
	D2off;									//D2 starts up off
  4045a6:	4a57      	ldr	r2, [pc, #348]	; (404704 <setup+0x27c>)
  4045a8:	4b56      	ldr	r3, [pc, #344]	; (404704 <setup+0x27c>)
  4045aa:	681b      	ldr	r3, [r3, #0]
  4045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4045b0:	6013      	str	r3, [r2, #0]
	D3off;									//D3 starts up off
  4045b2:	4a53      	ldr	r2, [pc, #332]	; (404700 <setup+0x278>)
  4045b4:	4b52      	ldr	r3, [pc, #328]	; (404700 <setup+0x278>)
  4045b6:	681b      	ldr	r3, [r3, #0]
  4045b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  4045bc:	6013      	str	r3, [r2, #0]
	
	/******** ADC SETUP, 10 bit default SINGLE CONVERSION SINGLE CHANNEL MODE  ********/
	REG_ADC_WPMR = 0x41444300;						//Disable ADC write protect
  4045be:	4b52      	ldr	r3, [pc, #328]	; (404708 <setup+0x280>)
  4045c0:	4a52      	ldr	r2, [pc, #328]	; (40470c <setup+0x284>)
  4045c2:	601a      	str	r2, [r3, #0]
	REG_PMC_PCER0 |= (1<<29);						//Enable peripheral clock on ADC
  4045c4:	4a40      	ldr	r2, [pc, #256]	; (4046c8 <setup+0x240>)
  4045c6:	4b40      	ldr	r3, [pc, #256]	; (4046c8 <setup+0x240>)
  4045c8:	681b      	ldr	r3, [r3, #0]
  4045ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4045ce:	6013      	str	r3, [r2, #0]
	REG_ADC_MR |= ((49<<8) | (3<<16) | (2<<28));	//Prescale ADC conversion by 49 (100MHZ/((49+1)x2))=1MHZ. Startup time is 24 ADC clock cycles. Field 28 must be programmed with value 2.
  4045d0:	494f      	ldr	r1, [pc, #316]	; (404710 <setup+0x288>)
  4045d2:	4b4f      	ldr	r3, [pc, #316]	; (404710 <setup+0x288>)
  4045d4:	681a      	ldr	r2, [r3, #0]
  4045d6:	4b4f      	ldr	r3, [pc, #316]	; (404714 <setup+0x28c>)
  4045d8:	4313      	orrs	r3, r2
  4045da:	600b      	str	r3, [r1, #0]
	
	/****************TWI2(ID22) SETUP***************/
	REG_PMC_PCER0
	|=	(1<<ID_TWI2);						//Enable clock access to TWI2, Peripheral TWI2_ID = 22
  4045dc:	4a3a      	ldr	r2, [pc, #232]	; (4046c8 <setup+0x240>)
  4045de:	4b3a      	ldr	r3, [pc, #232]	; (4046c8 <setup+0x240>)
  4045e0:	681b      	ldr	r3, [r3, #0]
  4045e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4045e6:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR
	|=	PIO_PDR_P0							//Enable peripheralB control of PB0 (TWD2)
  4045e8:	4a4b      	ldr	r2, [pc, #300]	; (404718 <setup+0x290>)
  4045ea:	4b4b      	ldr	r3, [pc, #300]	; (404718 <setup+0x290>)
  4045ec:	681b      	ldr	r3, [r3, #0]
  4045ee:	f043 0303 	orr.w	r3, r3, #3
  4045f2:	6013      	str	r3, [r2, #0]
	|	PIO_PDR_P1;							//Enable peripheralB control of PB1 (TWCK2)
	REG_PIOB_ABCDSR
	|=	PIO_ABCDSR_P0						//Set peripheral B
  4045f4:	4a49      	ldr	r2, [pc, #292]	; (40471c <setup+0x294>)
  4045f6:	4b49      	ldr	r3, [pc, #292]	; (40471c <setup+0x294>)
  4045f8:	681b      	ldr	r3, [r3, #0]
  4045fa:	f043 0303 	orr.w	r3, r3, #3
  4045fe:	6013      	str	r3, [r2, #0]
	|	PIO_ABCDSR_P1;
	REG_TWI2_CR
  404600:	4b47      	ldr	r3, [pc, #284]	; (404720 <setup+0x298>)
	=	TWI_CR_SWRST;						//Software Reset
  404602:	2280      	movs	r2, #128	; 0x80
  404604:	601a      	str	r2, [r3, #0]
	
	//TWI2 Clock Waveform Setup.
	//1.3uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
	//0.6uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
	REG_TWI2_CWGR
	|=	TWI_CWGR_CKDIV(1)					//Clock speed 400000, fast mode
  404606:	4a47      	ldr	r2, [pc, #284]	; (404724 <setup+0x29c>)
  404608:	4b46      	ldr	r3, [pc, #280]	; (404724 <setup+0x29c>)
  40460a:	681b      	ldr	r3, [r3, #0]
  40460c:	f443 338e 	orr.w	r3, r3, #72704	; 0x11c00
  404610:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
  404614:	6013      	str	r3, [r2, #0]
	|	TWI_CWGR_CLDIV(63)					//Clock low period 1.3uSec
	|	TWI_CWGR_CHDIV(28);					//Clock high period  0.6uSec
	REG_TWI2_CR
	|=	TWI_CR_MSEN							//Master mode enabled
  404616:	4a42      	ldr	r2, [pc, #264]	; (404720 <setup+0x298>)
  404618:	4b41      	ldr	r3, [pc, #260]	; (404720 <setup+0x298>)
  40461a:	681b      	ldr	r3, [r3, #0]
  40461c:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  404620:	6013      	str	r3, [r2, #0]

	/****************TIMER0 SETUP***************/
	//Timer0 is used for delay_ms and get_ms functions required by the imu driver
	//TC Channel Mode Register (Pg877)
	REG_PMC_PCER0
	|=	(1<<ID_TC0);						//Enable TC clock (ID_TC0 is the peripheral identifier for timer counter 0)
  404622:	4a29      	ldr	r2, [pc, #164]	; (4046c8 <setup+0x240>)
  404624:	4b28      	ldr	r3, [pc, #160]	; (4046c8 <setup+0x240>)
  404626:	681b      	ldr	r3, [r3, #0]
  404628:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  40462c:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(ID_TC0);
  40462e:	2017      	movs	r0, #23
  404630:	4b3d      	ldr	r3, [pc, #244]	; (404728 <setup+0x2a0>)
  404632:	4798      	blx	r3
	REG_TC0_CMR0
	|=	TC_CMR_TCCLKS_TIMER_CLOCK3			//Prescaler MCK/32
  404634:	4a3d      	ldr	r2, [pc, #244]	; (40472c <setup+0x2a4>)
  404636:	4b3d      	ldr	r3, [pc, #244]	; (40472c <setup+0x2a4>)
  404638:	681b      	ldr	r3, [r3, #0]
  40463a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
  40463e:	f043 0302 	orr.w	r3, r3, #2
  404642:	6013      	str	r3, [r2, #0]
	|	TC_CMR_WAVE							//Waveform mode
	|	TC_CMR_WAVSEL_UP_RC;				//Clear on RC compare
	//TC interrupt enable register
	REG_TC0_IER0
	|=	TC_IER_CPCS;						//Enable Register C compare interrupt
  404644:	4a3a      	ldr	r2, [pc, #232]	; (404730 <setup+0x2a8>)
  404646:	4b3a      	ldr	r3, [pc, #232]	; (404730 <setup+0x2a8>)
  404648:	681b      	ldr	r3, [r3, #0]
  40464a:	f043 0310 	orr.w	r3, r3, #16
  40464e:	6013      	str	r3, [r2, #0]
	//Set Register C
	REG_TC0_RC0
  404650:	4b38      	ldr	r3, [pc, #224]	; (404734 <setup+0x2ac>)
	=	3125;								//Trigger once every 1/1000th of a second (100Mhz/32/1000)
  404652:	f640 4235 	movw	r2, #3125	; 0xc35
  404656:	601a      	str	r2, [r3, #0]
	//Clock control register
	REG_TC0_CCR0
	|=	TC_CCR_CLKEN						//Enable the timer clk.
  404658:	4a37      	ldr	r2, [pc, #220]	; (404738 <setup+0x2b0>)
  40465a:	4b37      	ldr	r3, [pc, #220]	; (404738 <setup+0x2b0>)
  40465c:	681b      	ldr	r3, [r3, #0]
  40465e:	f043 0305 	orr.w	r3, r3, #5
  404662:	6013      	str	r3, [r2, #0]
	|	TC_CCR_SWTRG;

	LightSensor_Setup(Mux_RHS_LightSens);
  404664:	20f8      	movs	r0, #248	; 0xf8
  404666:	4b35      	ldr	r3, [pc, #212]	; (40473c <setup+0x2b4>)
  404668:	4798      	blx	r3
	LightSensor_Setup(Mux_LHS_LightSens);
  40466a:	20f9      	movs	r0, #249	; 0xf9
  40466c:	4b33      	ldr	r3, [pc, #204]	; (40473c <setup+0x2b4>)
  40466e:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityA);
  404670:	20fa      	movs	r0, #250	; 0xfa
  404672:	4b33      	ldr	r3, [pc, #204]	; (404740 <setup+0x2b8>)
  404674:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityB);
  404676:	20ff      	movs	r0, #255	; 0xff
  404678:	4b31      	ldr	r3, [pc, #196]	; (404740 <setup+0x2b8>)
  40467a:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityC);
  40467c:	20fe      	movs	r0, #254	; 0xfe
  40467e:	4b30      	ldr	r3, [pc, #192]	; (404740 <setup+0x2b8>)
  404680:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityD);
  404682:	20fd      	movs	r0, #253	; 0xfd
  404684:	4b2e      	ldr	r3, [pc, #184]	; (404740 <setup+0x2b8>)
  404686:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityE);
  404688:	20fc      	movs	r0, #252	; 0xfc
  40468a:	4b2d      	ldr	r3, [pc, #180]	; (404740 <setup+0x2b8>)
  40468c:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityF);
  40468e:	20fb      	movs	r0, #251	; 0xfb
  404690:	4b2b      	ldr	r3, [pc, #172]	; (404740 <setup+0x2b8>)
  404692:	4798      	blx	r3
	FastChargeController_Setup(); //Sets Voltage and Current registers on FCC
  404694:	4b2b      	ldr	r3, [pc, #172]	; (404744 <setup+0x2bc>)
  404696:	4798      	blx	r3
}
  404698:	bf00      	nop
  40469a:	bd80      	pop	{r7, pc}
  40469c:	400e1454 	.word	0x400e1454
  4046a0:	400e0a00 	.word	0x400e0a00
  4046a4:	04000500 	.word	0x04000500
  4046a8:	400e04e4 	.word	0x400e04e4
  4046ac:	504d4300 	.word	0x504d4300
  4046b0:	400e0420 	.word	0x400e0420
  4046b4:	400e0468 	.word	0x400e0468
  4046b8:	01371401 	.word	0x01371401
  4046bc:	400e0428 	.word	0x400e0428
  4046c0:	20183f03 	.word	0x20183f03
  4046c4:	400e0430 	.word	0x400e0430
  4046c8:	400e0410 	.word	0x400e0410
  4046cc:	400e0ee4 	.word	0x400e0ee4
  4046d0:	50494f00 	.word	0x50494f00
  4046d4:	400e10e4 	.word	0x400e10e4
  4046d8:	400e12e4 	.word	0x400e12e4
  4046dc:	00402da9 	.word	0x00402da9
  4046e0:	00403629 	.word	0x00403629
  4046e4:	004002f5 	.word	0x004002f5
  4046e8:	00403869 	.word	0x00403869
  4046ec:	00404089 	.word	0x00404089
  4046f0:	400e0e00 	.word	0x400e0e00
  4046f4:	400e1200 	.word	0x400e1200
  4046f8:	400e0e10 	.word	0x400e0e10
  4046fc:	400e1210 	.word	0x400e1210
  404700:	400e0e34 	.word	0x400e0e34
  404704:	400e1234 	.word	0x400e1234
  404708:	400380e4 	.word	0x400380e4
  40470c:	41444300 	.word	0x41444300
  404710:	40038004 	.word	0x40038004
  404714:	20033100 	.word	0x20033100
  404718:	400e1004 	.word	0x400e1004
  40471c:	400e1070 	.word	0x400e1070
  404720:	40040000 	.word	0x40040000
  404724:	40040010 	.word	0x40040010
  404728:	004043c1 	.word	0x004043c1
  40472c:	40010004 	.word	0x40010004
  404730:	40010024 	.word	0x40010024
  404734:	4001001c 	.word	0x4001001c
  404738:	40010000 	.word	0x40010000
  40473c:	00402d4d 	.word	0x00402d4d
  404740:	00403c51 	.word	0x00403c51
  404744:	00400d49 	.word	0x00400d49

00404748 <cos>:
  404748:	b530      	push	{r4, r5, lr}
  40474a:	4a22      	ldr	r2, [pc, #136]	; (4047d4 <cos+0x8c>)
  40474c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404750:	4293      	cmp	r3, r2
  404752:	b087      	sub	sp, #28
  404754:	dd1b      	ble.n	40478e <cos+0x46>
  404756:	4a20      	ldr	r2, [pc, #128]	; (4047d8 <cos+0x90>)
  404758:	4293      	cmp	r3, r2
  40475a:	dd05      	ble.n	404768 <cos+0x20>
  40475c:	4602      	mov	r2, r0
  40475e:	460b      	mov	r3, r1
  404760:	f001 f950 	bl	405a04 <__aeabi_dsub>
  404764:	b007      	add	sp, #28
  404766:	bd30      	pop	{r4, r5, pc}
  404768:	aa02      	add	r2, sp, #8
  40476a:	f000 f839 	bl	4047e0 <__ieee754_rem_pio2>
  40476e:	f000 0303 	and.w	r3, r0, #3
  404772:	2b01      	cmp	r3, #1
  404774:	d01a      	beq.n	4047ac <cos+0x64>
  404776:	2b02      	cmp	r3, #2
  404778:	d00f      	beq.n	40479a <cos+0x52>
  40477a:	b31b      	cbz	r3, 4047c4 <cos+0x7c>
  40477c:	2401      	movs	r4, #1
  40477e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404786:	9400      	str	r4, [sp, #0]
  404788:	f000 ff6e 	bl	405668 <__kernel_sin>
  40478c:	e7ea      	b.n	404764 <cos+0x1c>
  40478e:	2200      	movs	r2, #0
  404790:	2300      	movs	r3, #0
  404792:	f000 fa49 	bl	404c28 <__kernel_cos>
  404796:	b007      	add	sp, #28
  404798:	bd30      	pop	{r4, r5, pc}
  40479a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40479e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4047a2:	f000 fa41 	bl	404c28 <__kernel_cos>
  4047a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4047aa:	e7db      	b.n	404764 <cos+0x1c>
  4047ac:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4047b0:	9300      	str	r3, [sp, #0]
  4047b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4047b6:	4622      	mov	r2, r4
  4047b8:	462b      	mov	r3, r5
  4047ba:	f000 ff55 	bl	405668 <__kernel_sin>
  4047be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4047c2:	e7cf      	b.n	404764 <cos+0x1c>
  4047c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4047c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4047cc:	f000 fa2c 	bl	404c28 <__kernel_cos>
  4047d0:	e7c8      	b.n	404764 <cos+0x1c>
  4047d2:	bf00      	nop
  4047d4:	3fe921fb 	.word	0x3fe921fb
  4047d8:	7fefffff 	.word	0x7fefffff
  4047dc:	00000000 	.word	0x00000000

004047e0 <__ieee754_rem_pio2>:
  4047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047e4:	4e94      	ldr	r6, [pc, #592]	; (404a38 <__ieee754_rem_pio2+0x258>)
  4047e6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4047ea:	42b7      	cmp	r7, r6
  4047ec:	b091      	sub	sp, #68	; 0x44
  4047ee:	f340 8082 	ble.w	4048f6 <__ieee754_rem_pio2+0x116>
  4047f2:	4692      	mov	sl, r2
  4047f4:	4a91      	ldr	r2, [pc, #580]	; (404a3c <__ieee754_rem_pio2+0x25c>)
  4047f6:	4297      	cmp	r7, r2
  4047f8:	460c      	mov	r4, r1
  4047fa:	dc26      	bgt.n	40484a <__ieee754_rem_pio2+0x6a>
  4047fc:	2900      	cmp	r1, #0
  4047fe:	a384      	add	r3, pc, #528	; (adr r3, 404a10 <__ieee754_rem_pio2+0x230>)
  404800:	e9d3 2300 	ldrd	r2, r3, [r3]
  404804:	f340 81a8 	ble.w	404b58 <__ieee754_rem_pio2+0x378>
  404808:	f001 f8fc 	bl	405a04 <__aeabi_dsub>
  40480c:	4b8c      	ldr	r3, [pc, #560]	; (404a40 <__ieee754_rem_pio2+0x260>)
  40480e:	429f      	cmp	r7, r3
  404810:	4604      	mov	r4, r0
  404812:	460d      	mov	r5, r1
  404814:	f000 8084 	beq.w	404920 <__ieee754_rem_pio2+0x140>
  404818:	a37f      	add	r3, pc, #508	; (adr r3, 404a18 <__ieee754_rem_pio2+0x238>)
  40481a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40481e:	f001 f8f1 	bl	405a04 <__aeabi_dsub>
  404822:	4602      	mov	r2, r0
  404824:	460b      	mov	r3, r1
  404826:	e9ca 2300 	strd	r2, r3, [sl]
  40482a:	4620      	mov	r0, r4
  40482c:	4629      	mov	r1, r5
  40482e:	f001 f8e9 	bl	405a04 <__aeabi_dsub>
  404832:	a379      	add	r3, pc, #484	; (adr r3, 404a18 <__ieee754_rem_pio2+0x238>)
  404834:	e9d3 2300 	ldrd	r2, r3, [r3]
  404838:	f001 f8e4 	bl	405a04 <__aeabi_dsub>
  40483c:	2501      	movs	r5, #1
  40483e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404842:	4628      	mov	r0, r5
  404844:	b011      	add	sp, #68	; 0x44
  404846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40484a:	4a7e      	ldr	r2, [pc, #504]	; (404a44 <__ieee754_rem_pio2+0x264>)
  40484c:	4297      	cmp	r7, r2
  40484e:	f340 8084 	ble.w	40495a <__ieee754_rem_pio2+0x17a>
  404852:	4a7d      	ldr	r2, [pc, #500]	; (404a48 <__ieee754_rem_pio2+0x268>)
  404854:	4297      	cmp	r7, r2
  404856:	dc59      	bgt.n	40490c <__ieee754_rem_pio2+0x12c>
  404858:	153d      	asrs	r5, r7, #20
  40485a:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  40485e:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  404862:	4619      	mov	r1, r3
  404864:	461f      	mov	r7, r3
  404866:	4606      	mov	r6, r0
  404868:	f001 fd1a 	bl	4062a0 <__aeabi_d2iz>
  40486c:	f001 fa18 	bl	405ca0 <__aeabi_i2d>
  404870:	4680      	mov	r8, r0
  404872:	4689      	mov	r9, r1
  404874:	4602      	mov	r2, r0
  404876:	460b      	mov	r3, r1
  404878:	4630      	mov	r0, r6
  40487a:	4639      	mov	r1, r7
  40487c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  404880:	f001 f8c0 	bl	405a04 <__aeabi_dsub>
  404884:	2200      	movs	r2, #0
  404886:	4b71      	ldr	r3, [pc, #452]	; (404a4c <__ieee754_rem_pio2+0x26c>)
  404888:	f001 fa70 	bl	405d6c <__aeabi_dmul>
  40488c:	4689      	mov	r9, r1
  40488e:	4680      	mov	r8, r0
  404890:	f001 fd06 	bl	4062a0 <__aeabi_d2iz>
  404894:	f001 fa04 	bl	405ca0 <__aeabi_i2d>
  404898:	4602      	mov	r2, r0
  40489a:	460b      	mov	r3, r1
  40489c:	4606      	mov	r6, r0
  40489e:	460f      	mov	r7, r1
  4048a0:	4640      	mov	r0, r8
  4048a2:	4649      	mov	r1, r9
  4048a4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  4048a8:	f001 f8ac 	bl	405a04 <__aeabi_dsub>
  4048ac:	2200      	movs	r2, #0
  4048ae:	4b67      	ldr	r3, [pc, #412]	; (404a4c <__ieee754_rem_pio2+0x26c>)
  4048b0:	f001 fa5c 	bl	405d6c <__aeabi_dmul>
  4048b4:	2200      	movs	r2, #0
  4048b6:	2300      	movs	r3, #0
  4048b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  4048bc:	f001 fcbe 	bl	40623c <__aeabi_dcmpeq>
  4048c0:	2800      	cmp	r0, #0
  4048c2:	f000 8175 	beq.w	404bb0 <__ieee754_rem_pio2+0x3d0>
  4048c6:	2300      	movs	r3, #0
  4048c8:	4630      	mov	r0, r6
  4048ca:	4639      	mov	r1, r7
  4048cc:	2200      	movs	r2, #0
  4048ce:	f001 fcb5 	bl	40623c <__aeabi_dcmpeq>
  4048d2:	2800      	cmp	r0, #0
  4048d4:	bf14      	ite	ne
  4048d6:	2301      	movne	r3, #1
  4048d8:	2302      	moveq	r3, #2
  4048da:	4a5d      	ldr	r2, [pc, #372]	; (404a50 <__ieee754_rem_pio2+0x270>)
  4048dc:	9201      	str	r2, [sp, #4]
  4048de:	2102      	movs	r1, #2
  4048e0:	9100      	str	r1, [sp, #0]
  4048e2:	462a      	mov	r2, r5
  4048e4:	4651      	mov	r1, sl
  4048e6:	a80a      	add	r0, sp, #40	; 0x28
  4048e8:	f000 fac2 	bl	404e70 <__kernel_rem_pio2>
  4048ec:	2c00      	cmp	r4, #0
  4048ee:	f2c0 8151 	blt.w	404b94 <__ieee754_rem_pio2+0x3b4>
  4048f2:	4605      	mov	r5, r0
  4048f4:	e006      	b.n	404904 <__ieee754_rem_pio2+0x124>
  4048f6:	e9c2 0100 	strd	r0, r1, [r2]
  4048fa:	2500      	movs	r5, #0
  4048fc:	2400      	movs	r4, #0
  4048fe:	e9c2 4502 	strd	r4, r5, [r2, #8]
  404902:	2500      	movs	r5, #0
  404904:	4628      	mov	r0, r5
  404906:	b011      	add	sp, #68	; 0x44
  404908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40490c:	4602      	mov	r2, r0
  40490e:	460b      	mov	r3, r1
  404910:	f001 f878 	bl	405a04 <__aeabi_dsub>
  404914:	2500      	movs	r5, #0
  404916:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40491a:	e9ca 0100 	strd	r0, r1, [sl]
  40491e:	e7f1      	b.n	404904 <__ieee754_rem_pio2+0x124>
  404920:	a33f      	add	r3, pc, #252	; (adr r3, 404a20 <__ieee754_rem_pio2+0x240>)
  404922:	e9d3 2300 	ldrd	r2, r3, [r3]
  404926:	f001 f86d 	bl	405a04 <__aeabi_dsub>
  40492a:	a33f      	add	r3, pc, #252	; (adr r3, 404a28 <__ieee754_rem_pio2+0x248>)
  40492c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404930:	460d      	mov	r5, r1
  404932:	4604      	mov	r4, r0
  404934:	f001 f866 	bl	405a04 <__aeabi_dsub>
  404938:	4602      	mov	r2, r0
  40493a:	460b      	mov	r3, r1
  40493c:	e9ca 2300 	strd	r2, r3, [sl]
  404940:	4629      	mov	r1, r5
  404942:	4620      	mov	r0, r4
  404944:	f001 f85e 	bl	405a04 <__aeabi_dsub>
  404948:	a337      	add	r3, pc, #220	; (adr r3, 404a28 <__ieee754_rem_pio2+0x248>)
  40494a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40494e:	f001 f859 	bl	405a04 <__aeabi_dsub>
  404952:	2501      	movs	r5, #1
  404954:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404958:	e7d4      	b.n	404904 <__ieee754_rem_pio2+0x124>
  40495a:	f000 ff3b 	bl	4057d4 <fabs>
  40495e:	a334      	add	r3, pc, #208	; (adr r3, 404a30 <__ieee754_rem_pio2+0x250>)
  404960:	e9d3 2300 	ldrd	r2, r3, [r3]
  404964:	4680      	mov	r8, r0
  404966:	4689      	mov	r9, r1
  404968:	f001 fa00 	bl	405d6c <__aeabi_dmul>
  40496c:	2200      	movs	r2, #0
  40496e:	4b39      	ldr	r3, [pc, #228]	; (404a54 <__ieee754_rem_pio2+0x274>)
  404970:	f001 f84a 	bl	405a08 <__adddf3>
  404974:	f001 fc94 	bl	4062a0 <__aeabi_d2iz>
  404978:	4605      	mov	r5, r0
  40497a:	f001 f991 	bl	405ca0 <__aeabi_i2d>
  40497e:	a324      	add	r3, pc, #144	; (adr r3, 404a10 <__ieee754_rem_pio2+0x230>)
  404980:	e9d3 2300 	ldrd	r2, r3, [r3]
  404984:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404988:	f001 f9f0 	bl	405d6c <__aeabi_dmul>
  40498c:	4602      	mov	r2, r0
  40498e:	460b      	mov	r3, r1
  404990:	4640      	mov	r0, r8
  404992:	4649      	mov	r1, r9
  404994:	f001 f836 	bl	405a04 <__aeabi_dsub>
  404998:	a31f      	add	r3, pc, #124	; (adr r3, 404a18 <__ieee754_rem_pio2+0x238>)
  40499a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40499e:	4680      	mov	r8, r0
  4049a0:	4689      	mov	r9, r1
  4049a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4049a6:	f001 f9e1 	bl	405d6c <__aeabi_dmul>
  4049aa:	2d1f      	cmp	r5, #31
  4049ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4049b0:	dc54      	bgt.n	404a5c <__ieee754_rem_pio2+0x27c>
  4049b2:	4b29      	ldr	r3, [pc, #164]	; (404a58 <__ieee754_rem_pio2+0x278>)
  4049b4:	1e6a      	subs	r2, r5, #1
  4049b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4049ba:	429f      	cmp	r7, r3
  4049bc:	d04e      	beq.n	404a5c <__ieee754_rem_pio2+0x27c>
  4049be:	4602      	mov	r2, r0
  4049c0:	460b      	mov	r3, r1
  4049c2:	4640      	mov	r0, r8
  4049c4:	4649      	mov	r1, r9
  4049c6:	f001 f81d 	bl	405a04 <__aeabi_dsub>
  4049ca:	4602      	mov	r2, r0
  4049cc:	460b      	mov	r3, r1
  4049ce:	e9ca 2300 	strd	r2, r3, [sl]
  4049d2:	4683      	mov	fp, r0
  4049d4:	460e      	mov	r6, r1
  4049d6:	465a      	mov	r2, fp
  4049d8:	4633      	mov	r3, r6
  4049da:	4640      	mov	r0, r8
  4049dc:	4649      	mov	r1, r9
  4049de:	f001 f811 	bl	405a04 <__aeabi_dsub>
  4049e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4049e6:	f001 f80d 	bl	405a04 <__aeabi_dsub>
  4049ea:	2c00      	cmp	r4, #0
  4049ec:	4602      	mov	r2, r0
  4049ee:	460b      	mov	r3, r1
  4049f0:	e9ca 2302 	strd	r2, r3, [sl, #8]
  4049f4:	da86      	bge.n	404904 <__ieee754_rem_pio2+0x124>
  4049f6:	465b      	mov	r3, fp
  4049f8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  4049fc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404a00:	e88a 0048 	stmia.w	sl, {r3, r6}
  404a04:	f8ca 100c 	str.w	r1, [sl, #12]
  404a08:	f8ca 0008 	str.w	r0, [sl, #8]
  404a0c:	426d      	negs	r5, r5
  404a0e:	e779      	b.n	404904 <__ieee754_rem_pio2+0x124>
  404a10:	54400000 	.word	0x54400000
  404a14:	3ff921fb 	.word	0x3ff921fb
  404a18:	1a626331 	.word	0x1a626331
  404a1c:	3dd0b461 	.word	0x3dd0b461
  404a20:	1a600000 	.word	0x1a600000
  404a24:	3dd0b461 	.word	0x3dd0b461
  404a28:	2e037073 	.word	0x2e037073
  404a2c:	3ba3198a 	.word	0x3ba3198a
  404a30:	6dc9c883 	.word	0x6dc9c883
  404a34:	3fe45f30 	.word	0x3fe45f30
  404a38:	3fe921fb 	.word	0x3fe921fb
  404a3c:	4002d97b 	.word	0x4002d97b
  404a40:	3ff921fb 	.word	0x3ff921fb
  404a44:	413921fb 	.word	0x413921fb
  404a48:	7fefffff 	.word	0x7fefffff
  404a4c:	41700000 	.word	0x41700000
  404a50:	00407c58 	.word	0x00407c58
  404a54:	3fe00000 	.word	0x3fe00000
  404a58:	00407bd8 	.word	0x00407bd8
  404a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404a60:	4640      	mov	r0, r8
  404a62:	4649      	mov	r1, r9
  404a64:	f000 ffce 	bl	405a04 <__aeabi_dsub>
  404a68:	153a      	asrs	r2, r7, #20
  404a6a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  404a6e:	1ad3      	subs	r3, r2, r3
  404a70:	2b10      	cmp	r3, #16
  404a72:	4683      	mov	fp, r0
  404a74:	460e      	mov	r6, r1
  404a76:	9209      	str	r2, [sp, #36]	; 0x24
  404a78:	e9ca 0100 	strd	r0, r1, [sl]
  404a7c:	ddab      	ble.n	4049d6 <__ieee754_rem_pio2+0x1f6>
  404a7e:	a35e      	add	r3, pc, #376	; (adr r3, 404bf8 <__ieee754_rem_pio2+0x418>)
  404a80:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404a88:	f001 f970 	bl	405d6c <__aeabi_dmul>
  404a8c:	4606      	mov	r6, r0
  404a8e:	460f      	mov	r7, r1
  404a90:	4602      	mov	r2, r0
  404a92:	460b      	mov	r3, r1
  404a94:	4640      	mov	r0, r8
  404a96:	4649      	mov	r1, r9
  404a98:	f000 ffb4 	bl	405a04 <__aeabi_dsub>
  404a9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404aa0:	4602      	mov	r2, r0
  404aa2:	460b      	mov	r3, r1
  404aa4:	4640      	mov	r0, r8
  404aa6:	4649      	mov	r1, r9
  404aa8:	f000 ffac 	bl	405a04 <__aeabi_dsub>
  404aac:	4632      	mov	r2, r6
  404aae:	463b      	mov	r3, r7
  404ab0:	f000 ffa8 	bl	405a04 <__aeabi_dsub>
  404ab4:	a352      	add	r3, pc, #328	; (adr r3, 404c00 <__ieee754_rem_pio2+0x420>)
  404ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404aba:	4606      	mov	r6, r0
  404abc:	460f      	mov	r7, r1
  404abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404ac2:	f001 f953 	bl	405d6c <__aeabi_dmul>
  404ac6:	4632      	mov	r2, r6
  404ac8:	463b      	mov	r3, r7
  404aca:	f000 ff9b 	bl	405a04 <__aeabi_dsub>
  404ace:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ad6:	4602      	mov	r2, r0
  404ad8:	460b      	mov	r3, r1
  404ada:	4640      	mov	r0, r8
  404adc:	4649      	mov	r1, r9
  404ade:	f000 ff91 	bl	405a04 <__aeabi_dsub>
  404ae2:	460b      	mov	r3, r1
  404ae4:	f3c1 570a 	ubfx	r7, r1, #20, #11
  404ae8:	460e      	mov	r6, r1
  404aea:	9909      	ldr	r1, [sp, #36]	; 0x24
  404aec:	1bcf      	subs	r7, r1, r7
  404aee:	4602      	mov	r2, r0
  404af0:	2f31      	cmp	r7, #49	; 0x31
  404af2:	4683      	mov	fp, r0
  404af4:	e9ca 2300 	strd	r2, r3, [sl]
  404af8:	dd7a      	ble.n	404bf0 <__ieee754_rem_pio2+0x410>
  404afa:	a343      	add	r3, pc, #268	; (adr r3, 404c08 <__ieee754_rem_pio2+0x428>)
  404afc:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404b04:	f001 f932 	bl	405d6c <__aeabi_dmul>
  404b08:	4606      	mov	r6, r0
  404b0a:	460f      	mov	r7, r1
  404b0c:	4602      	mov	r2, r0
  404b0e:	460b      	mov	r3, r1
  404b10:	4640      	mov	r0, r8
  404b12:	4649      	mov	r1, r9
  404b14:	e9cd 8906 	strd	r8, r9, [sp, #24]
  404b18:	f000 ff74 	bl	405a04 <__aeabi_dsub>
  404b1c:	4602      	mov	r2, r0
  404b1e:	460b      	mov	r3, r1
  404b20:	4680      	mov	r8, r0
  404b22:	4689      	mov	r9, r1
  404b24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404b28:	f000 ff6c 	bl	405a04 <__aeabi_dsub>
  404b2c:	4632      	mov	r2, r6
  404b2e:	463b      	mov	r3, r7
  404b30:	f000 ff68 	bl	405a04 <__aeabi_dsub>
  404b34:	a336      	add	r3, pc, #216	; (adr r3, 404c10 <__ieee754_rem_pio2+0x430>)
  404b36:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b3a:	4606      	mov	r6, r0
  404b3c:	460f      	mov	r7, r1
  404b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404b42:	f001 f913 	bl	405d6c <__aeabi_dmul>
  404b46:	4632      	mov	r2, r6
  404b48:	463b      	mov	r3, r7
  404b4a:	f000 ff5b 	bl	405a04 <__aeabi_dsub>
  404b4e:	4602      	mov	r2, r0
  404b50:	460b      	mov	r3, r1
  404b52:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404b56:	e734      	b.n	4049c2 <__ieee754_rem_pio2+0x1e2>
  404b58:	f000 ff56 	bl	405a08 <__adddf3>
  404b5c:	4b30      	ldr	r3, [pc, #192]	; (404c20 <__ieee754_rem_pio2+0x440>)
  404b5e:	429f      	cmp	r7, r3
  404b60:	4604      	mov	r4, r0
  404b62:	460d      	mov	r5, r1
  404b64:	d026      	beq.n	404bb4 <__ieee754_rem_pio2+0x3d4>
  404b66:	a32c      	add	r3, pc, #176	; (adr r3, 404c18 <__ieee754_rem_pio2+0x438>)
  404b68:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b6c:	f000 ff4c 	bl	405a08 <__adddf3>
  404b70:	4602      	mov	r2, r0
  404b72:	460b      	mov	r3, r1
  404b74:	e9ca 2300 	strd	r2, r3, [sl]
  404b78:	4629      	mov	r1, r5
  404b7a:	4620      	mov	r0, r4
  404b7c:	f000 ff42 	bl	405a04 <__aeabi_dsub>
  404b80:	a325      	add	r3, pc, #148	; (adr r3, 404c18 <__ieee754_rem_pio2+0x438>)
  404b82:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b86:	f000 ff3f 	bl	405a08 <__adddf3>
  404b8a:	f04f 35ff 	mov.w	r5, #4294967295
  404b8e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404b92:	e6b7      	b.n	404904 <__ieee754_rem_pio2+0x124>
  404b94:	f8da 2004 	ldr.w	r2, [sl, #4]
  404b98:	f8da 300c 	ldr.w	r3, [sl, #12]
  404b9c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404ba0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404ba4:	4245      	negs	r5, r0
  404ba6:	f8ca 2004 	str.w	r2, [sl, #4]
  404baa:	f8ca 300c 	str.w	r3, [sl, #12]
  404bae:	e6a9      	b.n	404904 <__ieee754_rem_pio2+0x124>
  404bb0:	2303      	movs	r3, #3
  404bb2:	e692      	b.n	4048da <__ieee754_rem_pio2+0xfa>
  404bb4:	a310      	add	r3, pc, #64	; (adr r3, 404bf8 <__ieee754_rem_pio2+0x418>)
  404bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bba:	f000 ff25 	bl	405a08 <__adddf3>
  404bbe:	a310      	add	r3, pc, #64	; (adr r3, 404c00 <__ieee754_rem_pio2+0x420>)
  404bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bc4:	460d      	mov	r5, r1
  404bc6:	4604      	mov	r4, r0
  404bc8:	f000 ff1e 	bl	405a08 <__adddf3>
  404bcc:	4602      	mov	r2, r0
  404bce:	460b      	mov	r3, r1
  404bd0:	e9ca 2300 	strd	r2, r3, [sl]
  404bd4:	4629      	mov	r1, r5
  404bd6:	4620      	mov	r0, r4
  404bd8:	f000 ff14 	bl	405a04 <__aeabi_dsub>
  404bdc:	a308      	add	r3, pc, #32	; (adr r3, 404c00 <__ieee754_rem_pio2+0x420>)
  404bde:	e9d3 2300 	ldrd	r2, r3, [r3]
  404be2:	f000 ff11 	bl	405a08 <__adddf3>
  404be6:	f04f 35ff 	mov.w	r5, #4294967295
  404bea:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404bee:	e689      	b.n	404904 <__ieee754_rem_pio2+0x124>
  404bf0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404bf4:	e6ef      	b.n	4049d6 <__ieee754_rem_pio2+0x1f6>
  404bf6:	bf00      	nop
  404bf8:	1a600000 	.word	0x1a600000
  404bfc:	3dd0b461 	.word	0x3dd0b461
  404c00:	2e037073 	.word	0x2e037073
  404c04:	3ba3198a 	.word	0x3ba3198a
  404c08:	2e000000 	.word	0x2e000000
  404c0c:	3ba3198a 	.word	0x3ba3198a
  404c10:	252049c1 	.word	0x252049c1
  404c14:	397b839a 	.word	0x397b839a
  404c18:	1a626331 	.word	0x1a626331
  404c1c:	3dd0b461 	.word	0x3dd0b461
  404c20:	3ff921fb 	.word	0x3ff921fb
  404c24:	00000000 	.word	0x00000000

00404c28 <__kernel_cos>:
  404c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  404c30:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  404c34:	b085      	sub	sp, #20
  404c36:	460c      	mov	r4, r1
  404c38:	4692      	mov	sl, r2
  404c3a:	469b      	mov	fp, r3
  404c3c:	4605      	mov	r5, r0
  404c3e:	da6b      	bge.n	404d18 <__kernel_cos+0xf0>
  404c40:	f001 fb2e 	bl	4062a0 <__aeabi_d2iz>
  404c44:	2800      	cmp	r0, #0
  404c46:	f000 80e8 	beq.w	404e1a <__kernel_cos+0x1f2>
  404c4a:	462a      	mov	r2, r5
  404c4c:	4623      	mov	r3, r4
  404c4e:	4628      	mov	r0, r5
  404c50:	4621      	mov	r1, r4
  404c52:	f001 f88b 	bl	405d6c <__aeabi_dmul>
  404c56:	a374      	add	r3, pc, #464	; (adr r3, 404e28 <__kernel_cos+0x200>)
  404c58:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c5c:	4680      	mov	r8, r0
  404c5e:	4689      	mov	r9, r1
  404c60:	f001 f884 	bl	405d6c <__aeabi_dmul>
  404c64:	a372      	add	r3, pc, #456	; (adr r3, 404e30 <__kernel_cos+0x208>)
  404c66:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c6a:	f000 fecd 	bl	405a08 <__adddf3>
  404c6e:	4642      	mov	r2, r8
  404c70:	464b      	mov	r3, r9
  404c72:	f001 f87b 	bl	405d6c <__aeabi_dmul>
  404c76:	a370      	add	r3, pc, #448	; (adr r3, 404e38 <__kernel_cos+0x210>)
  404c78:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c7c:	f000 fec2 	bl	405a04 <__aeabi_dsub>
  404c80:	4642      	mov	r2, r8
  404c82:	464b      	mov	r3, r9
  404c84:	f001 f872 	bl	405d6c <__aeabi_dmul>
  404c88:	a36d      	add	r3, pc, #436	; (adr r3, 404e40 <__kernel_cos+0x218>)
  404c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c8e:	f000 febb 	bl	405a08 <__adddf3>
  404c92:	4642      	mov	r2, r8
  404c94:	464b      	mov	r3, r9
  404c96:	f001 f869 	bl	405d6c <__aeabi_dmul>
  404c9a:	a36b      	add	r3, pc, #428	; (adr r3, 404e48 <__kernel_cos+0x220>)
  404c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ca0:	f000 feb0 	bl	405a04 <__aeabi_dsub>
  404ca4:	4642      	mov	r2, r8
  404ca6:	464b      	mov	r3, r9
  404ca8:	f001 f860 	bl	405d6c <__aeabi_dmul>
  404cac:	a368      	add	r3, pc, #416	; (adr r3, 404e50 <__kernel_cos+0x228>)
  404cae:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cb2:	f000 fea9 	bl	405a08 <__adddf3>
  404cb6:	4642      	mov	r2, r8
  404cb8:	464b      	mov	r3, r9
  404cba:	f001 f857 	bl	405d6c <__aeabi_dmul>
  404cbe:	e9cd 0100 	strd	r0, r1, [sp]
  404cc2:	2200      	movs	r2, #0
  404cc4:	4b64      	ldr	r3, [pc, #400]	; (404e58 <__kernel_cos+0x230>)
  404cc6:	4640      	mov	r0, r8
  404cc8:	4649      	mov	r1, r9
  404cca:	f001 f84f 	bl	405d6c <__aeabi_dmul>
  404cce:	e9dd 2300 	ldrd	r2, r3, [sp]
  404cd2:	4606      	mov	r6, r0
  404cd4:	460f      	mov	r7, r1
  404cd6:	4640      	mov	r0, r8
  404cd8:	4649      	mov	r1, r9
  404cda:	f001 f847 	bl	405d6c <__aeabi_dmul>
  404cde:	4652      	mov	r2, sl
  404ce0:	4680      	mov	r8, r0
  404ce2:	4689      	mov	r9, r1
  404ce4:	465b      	mov	r3, fp
  404ce6:	4628      	mov	r0, r5
  404ce8:	4621      	mov	r1, r4
  404cea:	f001 f83f 	bl	405d6c <__aeabi_dmul>
  404cee:	4602      	mov	r2, r0
  404cf0:	460b      	mov	r3, r1
  404cf2:	4640      	mov	r0, r8
  404cf4:	4649      	mov	r1, r9
  404cf6:	f000 fe85 	bl	405a04 <__aeabi_dsub>
  404cfa:	4602      	mov	r2, r0
  404cfc:	460b      	mov	r3, r1
  404cfe:	4630      	mov	r0, r6
  404d00:	4639      	mov	r1, r7
  404d02:	f000 fe7f 	bl	405a04 <__aeabi_dsub>
  404d06:	4602      	mov	r2, r0
  404d08:	460b      	mov	r3, r1
  404d0a:	2000      	movs	r0, #0
  404d0c:	4953      	ldr	r1, [pc, #332]	; (404e5c <__kernel_cos+0x234>)
  404d0e:	f000 fe79 	bl	405a04 <__aeabi_dsub>
  404d12:	b005      	add	sp, #20
  404d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d18:	4602      	mov	r2, r0
  404d1a:	460b      	mov	r3, r1
  404d1c:	f001 f826 	bl	405d6c <__aeabi_dmul>
  404d20:	a341      	add	r3, pc, #260	; (adr r3, 404e28 <__kernel_cos+0x200>)
  404d22:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d26:	4680      	mov	r8, r0
  404d28:	4689      	mov	r9, r1
  404d2a:	f001 f81f 	bl	405d6c <__aeabi_dmul>
  404d2e:	a340      	add	r3, pc, #256	; (adr r3, 404e30 <__kernel_cos+0x208>)
  404d30:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d34:	f000 fe68 	bl	405a08 <__adddf3>
  404d38:	4642      	mov	r2, r8
  404d3a:	464b      	mov	r3, r9
  404d3c:	f001 f816 	bl	405d6c <__aeabi_dmul>
  404d40:	a33d      	add	r3, pc, #244	; (adr r3, 404e38 <__kernel_cos+0x210>)
  404d42:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d46:	f000 fe5d 	bl	405a04 <__aeabi_dsub>
  404d4a:	4642      	mov	r2, r8
  404d4c:	464b      	mov	r3, r9
  404d4e:	f001 f80d 	bl	405d6c <__aeabi_dmul>
  404d52:	a33b      	add	r3, pc, #236	; (adr r3, 404e40 <__kernel_cos+0x218>)
  404d54:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d58:	f000 fe56 	bl	405a08 <__adddf3>
  404d5c:	4642      	mov	r2, r8
  404d5e:	464b      	mov	r3, r9
  404d60:	f001 f804 	bl	405d6c <__aeabi_dmul>
  404d64:	a338      	add	r3, pc, #224	; (adr r3, 404e48 <__kernel_cos+0x220>)
  404d66:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d6a:	f000 fe4b 	bl	405a04 <__aeabi_dsub>
  404d6e:	4642      	mov	r2, r8
  404d70:	464b      	mov	r3, r9
  404d72:	f000 fffb 	bl	405d6c <__aeabi_dmul>
  404d76:	a336      	add	r3, pc, #216	; (adr r3, 404e50 <__kernel_cos+0x228>)
  404d78:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d7c:	f000 fe44 	bl	405a08 <__adddf3>
  404d80:	464b      	mov	r3, r9
  404d82:	4642      	mov	r2, r8
  404d84:	f000 fff2 	bl	405d6c <__aeabi_dmul>
  404d88:	4b35      	ldr	r3, [pc, #212]	; (404e60 <__kernel_cos+0x238>)
  404d8a:	429e      	cmp	r6, r3
  404d8c:	e9cd 0100 	strd	r0, r1, [sp]
  404d90:	dd97      	ble.n	404cc2 <__kernel_cos+0x9a>
  404d92:	4b34      	ldr	r3, [pc, #208]	; (404e64 <__kernel_cos+0x23c>)
  404d94:	429e      	cmp	r6, r3
  404d96:	f04f 0200 	mov.w	r2, #0
  404d9a:	dc38      	bgt.n	404e0e <__kernel_cos+0x1e6>
  404d9c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  404da0:	2000      	movs	r0, #0
  404da2:	492e      	ldr	r1, [pc, #184]	; (404e5c <__kernel_cos+0x234>)
  404da4:	4616      	mov	r6, r2
  404da6:	461f      	mov	r7, r3
  404da8:	f000 fe2c 	bl	405a04 <__aeabi_dsub>
  404dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404db0:	2200      	movs	r2, #0
  404db2:	4b29      	ldr	r3, [pc, #164]	; (404e58 <__kernel_cos+0x230>)
  404db4:	4640      	mov	r0, r8
  404db6:	4649      	mov	r1, r9
  404db8:	f000 ffd8 	bl	405d6c <__aeabi_dmul>
  404dbc:	4632      	mov	r2, r6
  404dbe:	463b      	mov	r3, r7
  404dc0:	f000 fe20 	bl	405a04 <__aeabi_dsub>
  404dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
  404dc8:	4606      	mov	r6, r0
  404dca:	460f      	mov	r7, r1
  404dcc:	4640      	mov	r0, r8
  404dce:	4649      	mov	r1, r9
  404dd0:	f000 ffcc 	bl	405d6c <__aeabi_dmul>
  404dd4:	4652      	mov	r2, sl
  404dd6:	4680      	mov	r8, r0
  404dd8:	4689      	mov	r9, r1
  404dda:	465b      	mov	r3, fp
  404ddc:	4628      	mov	r0, r5
  404dde:	4621      	mov	r1, r4
  404de0:	f000 ffc4 	bl	405d6c <__aeabi_dmul>
  404de4:	4602      	mov	r2, r0
  404de6:	460b      	mov	r3, r1
  404de8:	4640      	mov	r0, r8
  404dea:	4649      	mov	r1, r9
  404dec:	f000 fe0a 	bl	405a04 <__aeabi_dsub>
  404df0:	4602      	mov	r2, r0
  404df2:	460b      	mov	r3, r1
  404df4:	4630      	mov	r0, r6
  404df6:	4639      	mov	r1, r7
  404df8:	f000 fe04 	bl	405a04 <__aeabi_dsub>
  404dfc:	4602      	mov	r2, r0
  404dfe:	460b      	mov	r3, r1
  404e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e04:	f000 fdfe 	bl	405a04 <__aeabi_dsub>
  404e08:	b005      	add	sp, #20
  404e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e0e:	4b16      	ldr	r3, [pc, #88]	; (404e68 <__kernel_cos+0x240>)
  404e10:	4f16      	ldr	r7, [pc, #88]	; (404e6c <__kernel_cos+0x244>)
  404e12:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404e16:	2600      	movs	r6, #0
  404e18:	e7ca      	b.n	404db0 <__kernel_cos+0x188>
  404e1a:	4910      	ldr	r1, [pc, #64]	; (404e5c <__kernel_cos+0x234>)
  404e1c:	2000      	movs	r0, #0
  404e1e:	b005      	add	sp, #20
  404e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e24:	f3af 8000 	nop.w
  404e28:	be8838d4 	.word	0xbe8838d4
  404e2c:	bda8fae9 	.word	0xbda8fae9
  404e30:	bdb4b1c4 	.word	0xbdb4b1c4
  404e34:	3e21ee9e 	.word	0x3e21ee9e
  404e38:	809c52ad 	.word	0x809c52ad
  404e3c:	3e927e4f 	.word	0x3e927e4f
  404e40:	19cb1590 	.word	0x19cb1590
  404e44:	3efa01a0 	.word	0x3efa01a0
  404e48:	16c15177 	.word	0x16c15177
  404e4c:	3f56c16c 	.word	0x3f56c16c
  404e50:	5555554c 	.word	0x5555554c
  404e54:	3fa55555 	.word	0x3fa55555
  404e58:	3fe00000 	.word	0x3fe00000
  404e5c:	3ff00000 	.word	0x3ff00000
  404e60:	3fd33332 	.word	0x3fd33332
  404e64:	3fe90000 	.word	0x3fe90000
  404e68:	3fe70000 	.word	0x3fe70000
  404e6c:	3fd20000 	.word	0x3fd20000

00404e70 <__kernel_rem_pio2>:
  404e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e74:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  404e78:	4c79      	ldr	r4, [pc, #484]	; (405060 <__kernel_rem_pio2+0x1f0>)
  404e7a:	9ea6      	ldr	r6, [sp, #664]	; 0x298
  404e7c:	4d79      	ldr	r5, [pc, #484]	; (405064 <__kernel_rem_pio2+0x1f4>)
  404e7e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  404e82:	9409      	str	r4, [sp, #36]	; 0x24
  404e84:	4626      	mov	r6, r4
  404e86:	1ed4      	subs	r4, r2, #3
  404e88:	fb85 7504 	smull	r7, r5, r5, r4
  404e8c:	17e4      	asrs	r4, r4, #31
  404e8e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  404e92:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  404e96:	461d      	mov	r5, r3
  404e98:	930c      	str	r3, [sp, #48]	; 0x30
  404e9a:	1c63      	adds	r3, r4, #1
  404e9c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  404ea0:	3d01      	subs	r5, #1
  404ea2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404ea6:	9308      	str	r3, [sp, #32]
  404ea8:	462b      	mov	r3, r5
  404eaa:	940d      	str	r4, [sp, #52]	; 0x34
  404eac:	9502      	str	r5, [sp, #8]
  404eae:	1b65      	subs	r5, r4, r5
  404eb0:	18f4      	adds	r4, r6, r3
  404eb2:	9004      	str	r0, [sp, #16]
  404eb4:	910a      	str	r1, [sp, #40]	; 0x28
  404eb6:	d416      	bmi.n	404ee6 <__kernel_rem_pio2+0x76>
  404eb8:	442c      	add	r4, r5
  404eba:	3401      	adds	r4, #1
  404ebc:	ae22      	add	r6, sp, #136	; 0x88
  404ebe:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  404ec0:	e008      	b.n	404ed4 <__kernel_rem_pio2+0x64>
  404ec2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  404ec6:	f000 feeb 	bl	405ca0 <__aeabi_i2d>
  404eca:	3501      	adds	r5, #1
  404ecc:	42a5      	cmp	r5, r4
  404ece:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404ed2:	d008      	beq.n	404ee6 <__kernel_rem_pio2+0x76>
  404ed4:	2d00      	cmp	r5, #0
  404ed6:	daf4      	bge.n	404ec2 <__kernel_rem_pio2+0x52>
  404ed8:	3501      	adds	r5, #1
  404eda:	2000      	movs	r0, #0
  404edc:	2100      	movs	r1, #0
  404ede:	42a5      	cmp	r5, r4
  404ee0:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404ee4:	d1f6      	bne.n	404ed4 <__kernel_rem_pio2+0x64>
  404ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ee8:	2b00      	cmp	r3, #0
  404eea:	db31      	blt.n	404f50 <__kernel_rem_pio2+0xe0>
  404eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404ef0:	a974      	add	r1, sp, #464	; 0x1d0
  404ef2:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  404ef6:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  404efa:	9a02      	ldr	r2, [sp, #8]
  404efc:	a924      	add	r1, sp, #144	; 0x90
  404efe:	00db      	lsls	r3, r3, #3
  404f00:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
  404f04:	9301      	str	r3, [sp, #4]
  404f06:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
  404f0a:	9b02      	ldr	r3, [sp, #8]
  404f0c:	2b00      	cmp	r3, #0
  404f0e:	f2c0 8190 	blt.w	405232 <__kernel_rem_pio2+0x3c2>
  404f12:	9b04      	ldr	r3, [sp, #16]
  404f14:	f1a3 0508 	sub.w	r5, r3, #8
  404f18:	9b01      	ldr	r3, [sp, #4]
  404f1a:	464c      	mov	r4, r9
  404f1c:	eb09 0803 	add.w	r8, r9, r3
  404f20:	2600      	movs	r6, #0
  404f22:	2700      	movs	r7, #0
  404f24:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  404f28:	e874 0102 	ldrd	r0, r1, [r4], #-8
  404f2c:	f000 ff1e 	bl	405d6c <__aeabi_dmul>
  404f30:	4602      	mov	r2, r0
  404f32:	460b      	mov	r3, r1
  404f34:	4630      	mov	r0, r6
  404f36:	4639      	mov	r1, r7
  404f38:	f000 fd66 	bl	405a08 <__adddf3>
  404f3c:	4544      	cmp	r4, r8
  404f3e:	4606      	mov	r6, r0
  404f40:	460f      	mov	r7, r1
  404f42:	d1ef      	bne.n	404f24 <__kernel_rem_pio2+0xb4>
  404f44:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  404f48:	45da      	cmp	sl, fp
  404f4a:	f109 0908 	add.w	r9, r9, #8
  404f4e:	d1dc      	bne.n	404f0a <__kernel_rem_pio2+0x9a>
  404f50:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404f52:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  404f56:	3b02      	subs	r3, #2
  404f58:	009b      	lsls	r3, r3, #2
  404f5a:	1d1a      	adds	r2, r3, #4
  404f5c:	a910      	add	r1, sp, #64	; 0x40
  404f5e:	440a      	add	r2, r1
  404f60:	440b      	add	r3, r1
  404f62:	920f      	str	r2, [sp, #60]	; 0x3c
  404f64:	930e      	str	r3, [sp, #56]	; 0x38
  404f66:	ab9c      	add	r3, sp, #624	; 0x270
  404f68:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404f6c:	2d00      	cmp	r5, #0
  404f6e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  404f72:	dd2b      	ble.n	404fcc <__kernel_rem_pio2+0x15c>
  404f74:	ab9c      	add	r3, sp, #624	; 0x270
  404f76:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
  404f7a:	3ca8      	subs	r4, #168	; 0xa8
  404f7c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
  404f80:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  404f84:	2200      	movs	r2, #0
  404f86:	4b38      	ldr	r3, [pc, #224]	; (405068 <__kernel_rem_pio2+0x1f8>)
  404f88:	4630      	mov	r0, r6
  404f8a:	4639      	mov	r1, r7
  404f8c:	f000 feee 	bl	405d6c <__aeabi_dmul>
  404f90:	f001 f986 	bl	4062a0 <__aeabi_d2iz>
  404f94:	f000 fe84 	bl	405ca0 <__aeabi_i2d>
  404f98:	2200      	movs	r2, #0
  404f9a:	4b34      	ldr	r3, [pc, #208]	; (40506c <__kernel_rem_pio2+0x1fc>)
  404f9c:	4680      	mov	r8, r0
  404f9e:	4689      	mov	r9, r1
  404fa0:	f000 fee4 	bl	405d6c <__aeabi_dmul>
  404fa4:	4602      	mov	r2, r0
  404fa6:	460b      	mov	r3, r1
  404fa8:	4630      	mov	r0, r6
  404faa:	4639      	mov	r1, r7
  404fac:	f000 fd2a 	bl	405a04 <__aeabi_dsub>
  404fb0:	f001 f976 	bl	4062a0 <__aeabi_d2iz>
  404fb4:	e874 2302 	ldrd	r2, r3, [r4], #-8
  404fb8:	f84a 0f04 	str.w	r0, [sl, #4]!
  404fbc:	4649      	mov	r1, r9
  404fbe:	4640      	mov	r0, r8
  404fc0:	f000 fd22 	bl	405a08 <__adddf3>
  404fc4:	455c      	cmp	r4, fp
  404fc6:	4606      	mov	r6, r0
  404fc8:	460f      	mov	r7, r1
  404fca:	d1db      	bne.n	404f84 <__kernel_rem_pio2+0x114>
  404fcc:	9c08      	ldr	r4, [sp, #32]
  404fce:	4630      	mov	r0, r6
  404fd0:	4639      	mov	r1, r7
  404fd2:	4622      	mov	r2, r4
  404fd4:	f000 fc8c 	bl	4058f0 <scalbn>
  404fd8:	2200      	movs	r2, #0
  404fda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  404fde:	4606      	mov	r6, r0
  404fe0:	460f      	mov	r7, r1
  404fe2:	f000 fec3 	bl	405d6c <__aeabi_dmul>
  404fe6:	f000 fbfb 	bl	4057e0 <floor>
  404fea:	2200      	movs	r2, #0
  404fec:	4b20      	ldr	r3, [pc, #128]	; (405070 <__kernel_rem_pio2+0x200>)
  404fee:	f000 febd 	bl	405d6c <__aeabi_dmul>
  404ff2:	4602      	mov	r2, r0
  404ff4:	460b      	mov	r3, r1
  404ff6:	4630      	mov	r0, r6
  404ff8:	4639      	mov	r1, r7
  404ffa:	f000 fd03 	bl	405a04 <__aeabi_dsub>
  404ffe:	460f      	mov	r7, r1
  405000:	4606      	mov	r6, r0
  405002:	f001 f94d 	bl	4062a0 <__aeabi_d2iz>
  405006:	4681      	mov	r9, r0
  405008:	f000 fe4a 	bl	405ca0 <__aeabi_i2d>
  40500c:	4602      	mov	r2, r0
  40500e:	460b      	mov	r3, r1
  405010:	4630      	mov	r0, r6
  405012:	4639      	mov	r1, r7
  405014:	f000 fcf6 	bl	405a04 <__aeabi_dsub>
  405018:	2c00      	cmp	r4, #0
  40501a:	4606      	mov	r6, r0
  40501c:	460f      	mov	r7, r1
  40501e:	f340 80ef 	ble.w	405200 <__kernel_rem_pio2+0x390>
  405022:	1e69      	subs	r1, r5, #1
  405024:	aa10      	add	r2, sp, #64	; 0x40
  405026:	f1c4 0318 	rsb	r3, r4, #24
  40502a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40502e:	fa42 f003 	asr.w	r0, r2, r3
  405032:	fa00 f303 	lsl.w	r3, r0, r3
  405036:	1ad3      	subs	r3, r2, r3
  405038:	aa10      	add	r2, sp, #64	; 0x40
  40503a:	f1c4 0817 	rsb	r8, r4, #23
  40503e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  405042:	4481      	add	r9, r0
  405044:	fa43 f808 	asr.w	r8, r3, r8
  405048:	f1b8 0f00 	cmp.w	r8, #0
  40504c:	dd3d      	ble.n	4050ca <__kernel_rem_pio2+0x25a>
  40504e:	2d00      	cmp	r5, #0
  405050:	f109 0901 	add.w	r9, r9, #1
  405054:	f340 82d6 	ble.w	405604 <__kernel_rem_pio2+0x794>
  405058:	2200      	movs	r2, #0
  40505a:	4614      	mov	r4, r2
  40505c:	a90f      	add	r1, sp, #60	; 0x3c
  40505e:	e011      	b.n	405084 <__kernel_rem_pio2+0x214>
  405060:	00407d60 	.word	0x00407d60
  405064:	2aaaaaab 	.word	0x2aaaaaab
  405068:	3e700000 	.word	0x3e700000
  40506c:	41700000 	.word	0x41700000
  405070:	40200000 	.word	0x40200000
  405074:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
  405078:	b10b      	cbz	r3, 40507e <__kernel_rem_pio2+0x20e>
  40507a:	6008      	str	r0, [r1, #0]
  40507c:	2401      	movs	r4, #1
  40507e:	3201      	adds	r2, #1
  405080:	4295      	cmp	r5, r2
  405082:	dd0d      	ble.n	4050a0 <__kernel_rem_pio2+0x230>
  405084:	f851 3f04 	ldr.w	r3, [r1, #4]!
  405088:	2c00      	cmp	r4, #0
  40508a:	d0f3      	beq.n	405074 <__kernel_rem_pio2+0x204>
  40508c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
  405090:	3201      	adds	r2, #1
  405092:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  405096:	4295      	cmp	r5, r2
  405098:	600b      	str	r3, [r1, #0]
  40509a:	f04f 0401 	mov.w	r4, #1
  40509e:	dcf1      	bgt.n	405084 <__kernel_rem_pio2+0x214>
  4050a0:	9b08      	ldr	r3, [sp, #32]
  4050a2:	2b00      	cmp	r3, #0
  4050a4:	dd0d      	ble.n	4050c2 <__kernel_rem_pio2+0x252>
  4050a6:	2b01      	cmp	r3, #1
  4050a8:	f000 80b2 	beq.w	405210 <__kernel_rem_pio2+0x3a0>
  4050ac:	2b02      	cmp	r3, #2
  4050ae:	d108      	bne.n	4050c2 <__kernel_rem_pio2+0x252>
  4050b0:	1e6a      	subs	r2, r5, #1
  4050b2:	ab10      	add	r3, sp, #64	; 0x40
  4050b4:	a910      	add	r1, sp, #64	; 0x40
  4050b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4050ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
  4050be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4050c2:	f1b8 0f02 	cmp.w	r8, #2
  4050c6:	f000 8082 	beq.w	4051ce <__kernel_rem_pio2+0x35e>
  4050ca:	2200      	movs	r2, #0
  4050cc:	2300      	movs	r3, #0
  4050ce:	4630      	mov	r0, r6
  4050d0:	4639      	mov	r1, r7
  4050d2:	f001 f8b3 	bl	40623c <__aeabi_dcmpeq>
  4050d6:	2800      	cmp	r0, #0
  4050d8:	f000 825e 	beq.w	405598 <__kernel_rem_pio2+0x728>
  4050dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050de:	f105 3bff 	add.w	fp, r5, #4294967295
  4050e2:	455b      	cmp	r3, fp
  4050e4:	dc10      	bgt.n	405108 <__kernel_rem_pio2+0x298>
  4050e6:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  4050ea:	aa10      	add	r2, sp, #64	; 0x40
  4050ec:	3b01      	subs	r3, #1
  4050ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4050f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4050f4:	2200      	movs	r2, #0
  4050f6:	f853 1904 	ldr.w	r1, [r3], #-4
  4050fa:	4283      	cmp	r3, r0
  4050fc:	ea42 0201 	orr.w	r2, r2, r1
  405100:	d1f9      	bne.n	4050f6 <__kernel_rem_pio2+0x286>
  405102:	2a00      	cmp	r2, #0
  405104:	f040 80b2 	bne.w	40526c <__kernel_rem_pio2+0x3fc>
  405108:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40510a:	aa10      	add	r2, sp, #64	; 0x40
  40510c:	3b01      	subs	r3, #1
  40510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405112:	2b00      	cmp	r3, #0
  405114:	f040 8274 	bne.w	405600 <__kernel_rem_pio2+0x790>
  405118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40511a:	2301      	movs	r3, #1
  40511c:	f852 1904 	ldr.w	r1, [r2], #-4
  405120:	3301      	adds	r3, #1
  405122:	2900      	cmp	r1, #0
  405124:	d0fa      	beq.n	40511c <__kernel_rem_pio2+0x2ac>
  405126:	18e9      	adds	r1, r5, r3
  405128:	1c6a      	adds	r2, r5, #1
  40512a:	428a      	cmp	r2, r1
  40512c:	910b      	str	r1, [sp, #44]	; 0x2c
  40512e:	dc49      	bgt.n	4051c4 <__kernel_rem_pio2+0x354>
  405130:	990d      	ldr	r1, [sp, #52]	; 0x34
  405132:	980c      	ldr	r0, [sp, #48]	; 0x30
  405134:	1851      	adds	r1, r2, r1
  405136:	00db      	lsls	r3, r3, #3
  405138:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  40513c:	9305      	str	r3, [sp, #20]
  40513e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  405140:	4405      	add	r5, r0
  405142:	3901      	subs	r1, #1
  405144:	00e8      	lsls	r0, r5, #3
  405146:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
  40514a:	ab24      	add	r3, sp, #144	; 0x90
  40514c:	00d2      	lsls	r2, r2, #3
  40514e:	eb03 0b00 	add.w	fp, r3, r0
  405152:	ab74      	add	r3, sp, #464	; 0x1d0
  405154:	4413      	add	r3, r2
  405156:	9301      	str	r3, [sp, #4]
  405158:	f1a2 0308 	sub.w	r3, r2, #8
  40515c:	9006      	str	r0, [sp, #24]
  40515e:	9307      	str	r3, [sp, #28]
  405160:	f04f 0900 	mov.w	r9, #0
  405164:	f85a 0f04 	ldr.w	r0, [sl, #4]!
  405168:	f000 fd9a 	bl	405ca0 <__aeabi_i2d>
  40516c:	9b02      	ldr	r3, [sp, #8]
  40516e:	2b00      	cmp	r3, #0
  405170:	e8eb 0102 	strd	r0, r1, [fp], #8
  405174:	db28      	blt.n	4051c8 <__kernel_rem_pio2+0x358>
  405176:	9b06      	ldr	r3, [sp, #24]
  405178:	eb03 0409 	add.w	r4, r3, r9
  40517c:	9b07      	ldr	r3, [sp, #28]
  40517e:	eb09 0803 	add.w	r8, r9, r3
  405182:	ab24      	add	r3, sp, #144	; 0x90
  405184:	441c      	add	r4, r3
  405186:	4498      	add	r8, r3
  405188:	9b04      	ldr	r3, [sp, #16]
  40518a:	2600      	movs	r6, #0
  40518c:	f1a3 0508 	sub.w	r5, r3, #8
  405190:	2700      	movs	r7, #0
  405192:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  405196:	e874 0102 	ldrd	r0, r1, [r4], #-8
  40519a:	f000 fde7 	bl	405d6c <__aeabi_dmul>
  40519e:	4602      	mov	r2, r0
  4051a0:	460b      	mov	r3, r1
  4051a2:	4630      	mov	r0, r6
  4051a4:	4639      	mov	r1, r7
  4051a6:	f000 fc2f 	bl	405a08 <__adddf3>
  4051aa:	4544      	cmp	r4, r8
  4051ac:	4606      	mov	r6, r0
  4051ae:	460f      	mov	r7, r1
  4051b0:	d1ef      	bne.n	405192 <__kernel_rem_pio2+0x322>
  4051b2:	9b01      	ldr	r3, [sp, #4]
  4051b4:	e8e3 6702 	strd	r6, r7, [r3], #8
  4051b8:	9301      	str	r3, [sp, #4]
  4051ba:	9b05      	ldr	r3, [sp, #20]
  4051bc:	f109 0908 	add.w	r9, r9, #8
  4051c0:	4599      	cmp	r9, r3
  4051c2:	d1cf      	bne.n	405164 <__kernel_rem_pio2+0x2f4>
  4051c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4051c6:	e6ce      	b.n	404f66 <__kernel_rem_pio2+0xf6>
  4051c8:	2600      	movs	r6, #0
  4051ca:	2700      	movs	r7, #0
  4051cc:	e7f1      	b.n	4051b2 <__kernel_rem_pio2+0x342>
  4051ce:	4632      	mov	r2, r6
  4051d0:	463b      	mov	r3, r7
  4051d2:	2000      	movs	r0, #0
  4051d4:	49b0      	ldr	r1, [pc, #704]	; (405498 <__kernel_rem_pio2+0x628>)
  4051d6:	f000 fc15 	bl	405a04 <__aeabi_dsub>
  4051da:	4606      	mov	r6, r0
  4051dc:	460f      	mov	r7, r1
  4051de:	2c00      	cmp	r4, #0
  4051e0:	f43f af73 	beq.w	4050ca <__kernel_rem_pio2+0x25a>
  4051e4:	9a08      	ldr	r2, [sp, #32]
  4051e6:	49ac      	ldr	r1, [pc, #688]	; (405498 <__kernel_rem_pio2+0x628>)
  4051e8:	2000      	movs	r0, #0
  4051ea:	f000 fb81 	bl	4058f0 <scalbn>
  4051ee:	4602      	mov	r2, r0
  4051f0:	460b      	mov	r3, r1
  4051f2:	4630      	mov	r0, r6
  4051f4:	4639      	mov	r1, r7
  4051f6:	f000 fc05 	bl	405a04 <__aeabi_dsub>
  4051fa:	4606      	mov	r6, r0
  4051fc:	460f      	mov	r7, r1
  4051fe:	e764      	b.n	4050ca <__kernel_rem_pio2+0x25a>
  405200:	d110      	bne.n	405224 <__kernel_rem_pio2+0x3b4>
  405202:	1e6b      	subs	r3, r5, #1
  405204:	aa10      	add	r2, sp, #64	; 0x40
  405206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40520a:	ea4f 58e3 	mov.w	r8, r3, asr #23
  40520e:	e71b      	b.n	405048 <__kernel_rem_pio2+0x1d8>
  405210:	1e6a      	subs	r2, r5, #1
  405212:	ab10      	add	r3, sp, #64	; 0x40
  405214:	a910      	add	r1, sp, #64	; 0x40
  405216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40521a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40521e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  405222:	e74e      	b.n	4050c2 <__kernel_rem_pio2+0x252>
  405224:	2200      	movs	r2, #0
  405226:	4b9d      	ldr	r3, [pc, #628]	; (40549c <__kernel_rem_pio2+0x62c>)
  405228:	f001 f826 	bl	406278 <__aeabi_dcmpge>
  40522c:	b958      	cbnz	r0, 405246 <__kernel_rem_pio2+0x3d6>
  40522e:	4680      	mov	r8, r0
  405230:	e74b      	b.n	4050ca <__kernel_rem_pio2+0x25a>
  405232:	2600      	movs	r6, #0
  405234:	2700      	movs	r7, #0
  405236:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40523a:	45da      	cmp	sl, fp
  40523c:	f109 0908 	add.w	r9, r9, #8
  405240:	f47f ae63 	bne.w	404f0a <__kernel_rem_pio2+0x9a>
  405244:	e684      	b.n	404f50 <__kernel_rem_pio2+0xe0>
  405246:	2d00      	cmp	r5, #0
  405248:	f109 0901 	add.w	r9, r9, #1
  40524c:	bfc8      	it	gt
  40524e:	f04f 0802 	movgt.w	r8, #2
  405252:	f73f af01 	bgt.w	405058 <__kernel_rem_pio2+0x1e8>
  405256:	4632      	mov	r2, r6
  405258:	463b      	mov	r3, r7
  40525a:	2000      	movs	r0, #0
  40525c:	498e      	ldr	r1, [pc, #568]	; (405498 <__kernel_rem_pio2+0x628>)
  40525e:	f000 fbd1 	bl	405a04 <__aeabi_dsub>
  405262:	f04f 0802 	mov.w	r8, #2
  405266:	4606      	mov	r6, r0
  405268:	460f      	mov	r7, r1
  40526a:	e72e      	b.n	4050ca <__kernel_rem_pio2+0x25a>
  40526c:	ab10      	add	r3, sp, #64	; 0x40
  40526e:	9a08      	ldr	r2, [sp, #32]
  405270:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
  405274:	f8cd 9014 	str.w	r9, [sp, #20]
  405278:	3a18      	subs	r2, #24
  40527a:	f8cd 8004 	str.w	r8, [sp, #4]
  40527e:	9208      	str	r2, [sp, #32]
  405280:	b96b      	cbnz	r3, 40529e <__kernel_rem_pio2+0x42e>
  405282:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
  405286:	3b01      	subs	r3, #1
  405288:	a910      	add	r1, sp, #64	; 0x40
  40528a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40528e:	f853 1904 	ldr.w	r1, [r3], #-4
  405292:	f10b 3bff 	add.w	fp, fp, #4294967295
  405296:	3a18      	subs	r2, #24
  405298:	2900      	cmp	r1, #0
  40529a:	d0f8      	beq.n	40528e <__kernel_rem_pio2+0x41e>
  40529c:	9208      	str	r2, [sp, #32]
  40529e:	9a08      	ldr	r2, [sp, #32]
  4052a0:	497d      	ldr	r1, [pc, #500]	; (405498 <__kernel_rem_pio2+0x628>)
  4052a2:	2000      	movs	r0, #0
  4052a4:	f000 fb24 	bl	4058f0 <scalbn>
  4052a8:	f1bb 0f00 	cmp.w	fp, #0
  4052ac:	4604      	mov	r4, r0
  4052ae:	460d      	mov	r5, r1
  4052b0:	f2c0 81b8 	blt.w	405624 <__kernel_rem_pio2+0x7b4>
  4052b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  4052b8:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
  4052bc:	aa10      	add	r2, sp, #64	; 0x40
  4052be:	eb02 068b 	add.w	r6, r2, fp, lsl #2
  4052c2:	eb08 0903 	add.w	r9, r8, r3
  4052c6:	9304      	str	r3, [sp, #16]
  4052c8:	3604      	adds	r6, #4
  4052ca:	f109 0708 	add.w	r7, r9, #8
  4052ce:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  4052d2:	f000 fce5 	bl	405ca0 <__aeabi_i2d>
  4052d6:	4622      	mov	r2, r4
  4052d8:	462b      	mov	r3, r5
  4052da:	f000 fd47 	bl	405d6c <__aeabi_dmul>
  4052de:	2200      	movs	r2, #0
  4052e0:	e967 0102 	strd	r0, r1, [r7, #-8]!
  4052e4:	4b6e      	ldr	r3, [pc, #440]	; (4054a0 <__kernel_rem_pio2+0x630>)
  4052e6:	4620      	mov	r0, r4
  4052e8:	4629      	mov	r1, r5
  4052ea:	f000 fd3f 	bl	405d6c <__aeabi_dmul>
  4052ee:	45b8      	cmp	r8, r7
  4052f0:	4604      	mov	r4, r0
  4052f2:	460d      	mov	r5, r1
  4052f4:	d1eb      	bne.n	4052ce <__kernel_rem_pio2+0x45e>
  4052f6:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  4052fa:	464b      	mov	r3, r9
  4052fc:	f8cd a008 	str.w	sl, [sp, #8]
  405300:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  405304:	f8cd b018 	str.w	fp, [sp, #24]
  405308:	f04f 0900 	mov.w	r9, #0
  40530c:	469b      	mov	fp, r3
  40530e:	f1ba 0f00 	cmp.w	sl, #0
  405312:	f2c0 812a 	blt.w	40556a <__kernel_rem_pio2+0x6fa>
  405316:	f8df 818c 	ldr.w	r8, [pc, #396]	; 4054a4 <__kernel_rem_pio2+0x634>
  40531a:	465d      	mov	r5, fp
  40531c:	a35c      	add	r3, pc, #368	; (adr r3, 405490 <__kernel_rem_pio2+0x620>)
  40531e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405322:	2600      	movs	r6, #0
  405324:	2700      	movs	r7, #0
  405326:	2400      	movs	r4, #0
  405328:	e003      	b.n	405332 <__kernel_rem_pio2+0x4c2>
  40532a:	45a1      	cmp	r9, r4
  40532c:	db10      	blt.n	405350 <__kernel_rem_pio2+0x4e0>
  40532e:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
  405332:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  405336:	f000 fd19 	bl	405d6c <__aeabi_dmul>
  40533a:	4602      	mov	r2, r0
  40533c:	460b      	mov	r3, r1
  40533e:	4630      	mov	r0, r6
  405340:	4639      	mov	r1, r7
  405342:	f000 fb61 	bl	405a08 <__adddf3>
  405346:	3401      	adds	r4, #1
  405348:	45a2      	cmp	sl, r4
  40534a:	4606      	mov	r6, r0
  40534c:	460f      	mov	r7, r1
  40534e:	daec      	bge.n	40532a <__kernel_rem_pio2+0x4ba>
  405350:	9b02      	ldr	r3, [sp, #8]
  405352:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  405356:	f1ab 0b08 	sub.w	fp, fp, #8
  40535a:	e9c3 6700 	strd	r6, r7, [r3]
  40535e:	ab72      	add	r3, sp, #456	; 0x1c8
  405360:	455b      	cmp	r3, fp
  405362:	f109 0901 	add.w	r9, r9, #1
  405366:	d1d2      	bne.n	40530e <__kernel_rem_pio2+0x49e>
  405368:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  40536a:	f8dd b018 	ldr.w	fp, [sp, #24]
  40536e:	f8dd a008 	ldr.w	sl, [sp, #8]
  405372:	2b03      	cmp	r3, #3
  405374:	f200 8083 	bhi.w	40547e <__kernel_rem_pio2+0x60e>
  405378:	e8df f013 	tbh	[pc, r3, lsl #1]
  40537c:	009600d5 	.word	0x009600d5
  405380:	00040096 	.word	0x00040096
  405384:	f1bb 0f00 	cmp.w	fp, #0
  405388:	f340 8156 	ble.w	405638 <__kernel_rem_pio2+0x7c8>
  40538c:	9b04      	ldr	r3, [sp, #16]
  40538e:	f8cd b008 	str.w	fp, [sp, #8]
  405392:	eb0a 0803 	add.w	r8, sl, r3
  405396:	e9d8 6700 	ldrd	r6, r7, [r8]
  40539a:	46d3      	mov	fp, sl
  40539c:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  4053a0:	4632      	mov	r2, r6
  4053a2:	463b      	mov	r3, r7
  4053a4:	4648      	mov	r0, r9
  4053a6:	4651      	mov	r1, sl
  4053a8:	f000 fb2e 	bl	405a08 <__adddf3>
  4053ac:	4604      	mov	r4, r0
  4053ae:	460d      	mov	r5, r1
  4053b0:	4602      	mov	r2, r0
  4053b2:	460b      	mov	r3, r1
  4053b4:	4648      	mov	r0, r9
  4053b6:	4651      	mov	r1, sl
  4053b8:	f000 fb24 	bl	405a04 <__aeabi_dsub>
  4053bc:	4632      	mov	r2, r6
  4053be:	463b      	mov	r3, r7
  4053c0:	f000 fb22 	bl	405a08 <__adddf3>
  4053c4:	e9c8 0100 	strd	r0, r1, [r8]
  4053c8:	e968 4502 	strd	r4, r5, [r8, #-8]!
  4053cc:	45c3      	cmp	fp, r8
  4053ce:	4626      	mov	r6, r4
  4053d0:	462f      	mov	r7, r5
  4053d2:	d1e3      	bne.n	40539c <__kernel_rem_pio2+0x52c>
  4053d4:	46da      	mov	sl, fp
  4053d6:	f8dd b008 	ldr.w	fp, [sp, #8]
  4053da:	f1bb 0f01 	cmp.w	fp, #1
  4053de:	f340 812b 	ble.w	405638 <__kernel_rem_pio2+0x7c8>
  4053e2:	9b04      	ldr	r3, [sp, #16]
  4053e4:	4453      	add	r3, sl
  4053e6:	e9d3 6700 	ldrd	r6, r7, [r3]
  4053ea:	4698      	mov	r8, r3
  4053ec:	4699      	mov	r9, r3
  4053ee:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  4053f2:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  4053f6:	4630      	mov	r0, r6
  4053f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4053fc:	461a      	mov	r2, r3
  4053fe:	4639      	mov	r1, r7
  405400:	4623      	mov	r3, r4
  405402:	f000 fb01 	bl	405a08 <__adddf3>
  405406:	4604      	mov	r4, r0
  405408:	460d      	mov	r5, r1
  40540a:	4602      	mov	r2, r0
  40540c:	460b      	mov	r3, r1
  40540e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405412:	f000 faf7 	bl	405a04 <__aeabi_dsub>
  405416:	4632      	mov	r2, r6
  405418:	463b      	mov	r3, r7
  40541a:	f000 faf5 	bl	405a08 <__adddf3>
  40541e:	e9c9 0100 	strd	r0, r1, [r9]
  405422:	e969 4502 	strd	r4, r5, [r9, #-8]!
  405426:	45cb      	cmp	fp, r9
  405428:	4626      	mov	r6, r4
  40542a:	462f      	mov	r7, r5
  40542c:	d1e1      	bne.n	4053f2 <__kernel_rem_pio2+0x582>
  40542e:	2300      	movs	r3, #0
  405430:	f108 0808 	add.w	r8, r8, #8
  405434:	461d      	mov	r5, r3
  405436:	ac50      	add	r4, sp, #320	; 0x140
  405438:	4618      	mov	r0, r3
  40543a:	4629      	mov	r1, r5
  40543c:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  405440:	f000 fae2 	bl	405a08 <__adddf3>
  405444:	4544      	cmp	r4, r8
  405446:	4603      	mov	r3, r0
  405448:	460d      	mov	r5, r1
  40544a:	d1f5      	bne.n	405438 <__kernel_rem_pio2+0x5c8>
  40544c:	9a01      	ldr	r2, [sp, #4]
  40544e:	2a00      	cmp	r2, #0
  405450:	f000 80da 	beq.w	405608 <__kernel_rem_pio2+0x798>
  405454:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405456:	f8da 4004 	ldr.w	r4, [sl, #4]
  40545a:	f8da 200c 	ldr.w	r2, [sl, #12]
  40545e:	f8da 1000 	ldr.w	r1, [sl]
  405462:	f8da 0008 	ldr.w	r0, [sl, #8]
  405466:	613b      	str	r3, [r7, #16]
  405468:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  40546c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  405470:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  405474:	617d      	str	r5, [r7, #20]
  405476:	607c      	str	r4, [r7, #4]
  405478:	60fb      	str	r3, [r7, #12]
  40547a:	6039      	str	r1, [r7, #0]
  40547c:	60b8      	str	r0, [r7, #8]
  40547e:	9b05      	ldr	r3, [sp, #20]
  405480:	f003 0007 	and.w	r0, r3, #7
  405484:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  405488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40548c:	f3af 8000 	nop.w
  405490:	40000000 	.word	0x40000000
  405494:	3ff921fb 	.word	0x3ff921fb
  405498:	3ff00000 	.word	0x3ff00000
  40549c:	3fe00000 	.word	0x3fe00000
  4054a0:	3e700000 	.word	0x3e700000
  4054a4:	00407d70 	.word	0x00407d70
  4054a8:	9c04      	ldr	r4, [sp, #16]
  4054aa:	2600      	movs	r6, #0
  4054ac:	3408      	adds	r4, #8
  4054ae:	4454      	add	r4, sl
  4054b0:	4633      	mov	r3, r6
  4054b2:	4630      	mov	r0, r6
  4054b4:	4619      	mov	r1, r3
  4054b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  4054ba:	f000 faa5 	bl	405a08 <__adddf3>
  4054be:	4554      	cmp	r4, sl
  4054c0:	4606      	mov	r6, r0
  4054c2:	460b      	mov	r3, r1
  4054c4:	d1f5      	bne.n	4054b2 <__kernel_rem_pio2+0x642>
  4054c6:	9a01      	ldr	r2, [sp, #4]
  4054c8:	4630      	mov	r0, r6
  4054ca:	4619      	mov	r1, r3
  4054cc:	2a00      	cmp	r2, #0
  4054ce:	d04f      	beq.n	405570 <__kernel_rem_pio2+0x700>
  4054d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4054d2:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  4054d6:	4632      	mov	r2, r6
  4054d8:	6044      	str	r4, [r0, #4]
  4054da:	6006      	str	r6, [r0, #0]
  4054dc:	e9da 0100 	ldrd	r0, r1, [sl]
  4054e0:	f000 fa90 	bl	405a04 <__aeabi_dsub>
  4054e4:	f1bb 0f00 	cmp.w	fp, #0
  4054e8:	4602      	mov	r2, r0
  4054ea:	460b      	mov	r3, r1
  4054ec:	dd0d      	ble.n	40550a <__kernel_rem_pio2+0x69a>
  4054ee:	2401      	movs	r4, #1
  4054f0:	4610      	mov	r0, r2
  4054f2:	4619      	mov	r1, r3
  4054f4:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  4054f8:	f000 fa86 	bl	405a08 <__adddf3>
  4054fc:	3401      	adds	r4, #1
  4054fe:	45a3      	cmp	fp, r4
  405500:	4602      	mov	r2, r0
  405502:	460b      	mov	r3, r1
  405504:	daf4      	bge.n	4054f0 <__kernel_rem_pio2+0x680>
  405506:	9901      	ldr	r1, [sp, #4]
  405508:	b109      	cbz	r1, 40550e <__kernel_rem_pio2+0x69e>
  40550a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40550e:	4619      	mov	r1, r3
  405510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405512:	4610      	mov	r0, r2
  405514:	e9c3 0102 	strd	r0, r1, [r3, #8]
  405518:	9b05      	ldr	r3, [sp, #20]
  40551a:	f003 0007 	and.w	r0, r3, #7
  40551e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  405522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405526:	9b04      	ldr	r3, [sp, #16]
  405528:	2200      	movs	r2, #0
  40552a:	3308      	adds	r3, #8
  40552c:	449a      	add	sl, r3
  40552e:	4613      	mov	r3, r2
  405530:	4610      	mov	r0, r2
  405532:	4619      	mov	r1, r3
  405534:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
  405538:	f000 fa66 	bl	405a08 <__adddf3>
  40553c:	f10b 3bff 	add.w	fp, fp, #4294967295
  405540:	f1bb 3fff 	cmp.w	fp, #4294967295
  405544:	4602      	mov	r2, r0
  405546:	460b      	mov	r3, r1
  405548:	d1f2      	bne.n	405530 <__kernel_rem_pio2+0x6c0>
  40554a:	9901      	ldr	r1, [sp, #4]
  40554c:	b109      	cbz	r1, 405552 <__kernel_rem_pio2+0x6e2>
  40554e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405552:	4619      	mov	r1, r3
  405554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405556:	4610      	mov	r0, r2
  405558:	e9c3 0100 	strd	r0, r1, [r3]
  40555c:	9b05      	ldr	r3, [sp, #20]
  40555e:	f003 0007 	and.w	r0, r3, #7
  405562:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  405566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40556a:	2600      	movs	r6, #0
  40556c:	2700      	movs	r7, #0
  40556e:	e6ef      	b.n	405350 <__kernel_rem_pio2+0x4e0>
  405570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405572:	4632      	mov	r2, r6
  405574:	e9c3 0100 	strd	r0, r1, [r3]
  405578:	460b      	mov	r3, r1
  40557a:	e9da 0100 	ldrd	r0, r1, [sl]
  40557e:	f000 fa41 	bl	405a04 <__aeabi_dsub>
  405582:	f1bb 0f00 	cmp.w	fp, #0
  405586:	4602      	mov	r2, r0
  405588:	460b      	mov	r3, r1
  40558a:	dcb0      	bgt.n	4054ee <__kernel_rem_pio2+0x67e>
  40558c:	4619      	mov	r1, r3
  40558e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405590:	4610      	mov	r0, r2
  405592:	e9c3 0102 	strd	r0, r1, [r3, #8]
  405596:	e7bf      	b.n	405518 <__kernel_rem_pio2+0x6a8>
  405598:	9b08      	ldr	r3, [sp, #32]
  40559a:	f8cd 9014 	str.w	r9, [sp, #20]
  40559e:	425a      	negs	r2, r3
  4055a0:	4630      	mov	r0, r6
  4055a2:	4639      	mov	r1, r7
  4055a4:	f8cd 8004 	str.w	r8, [sp, #4]
  4055a8:	f000 f9a2 	bl	4058f0 <scalbn>
  4055ac:	2200      	movs	r2, #0
  4055ae:	4b2c      	ldr	r3, [pc, #176]	; (405660 <__kernel_rem_pio2+0x7f0>)
  4055b0:	4606      	mov	r6, r0
  4055b2:	460f      	mov	r7, r1
  4055b4:	f000 fe60 	bl	406278 <__aeabi_dcmpge>
  4055b8:	2800      	cmp	r0, #0
  4055ba:	d040      	beq.n	40563e <__kernel_rem_pio2+0x7ce>
  4055bc:	2200      	movs	r2, #0
  4055be:	4b29      	ldr	r3, [pc, #164]	; (405664 <__kernel_rem_pio2+0x7f4>)
  4055c0:	4630      	mov	r0, r6
  4055c2:	4639      	mov	r1, r7
  4055c4:	f000 fbd2 	bl	405d6c <__aeabi_dmul>
  4055c8:	f000 fe6a 	bl	4062a0 <__aeabi_d2iz>
  4055cc:	4604      	mov	r4, r0
  4055ce:	f000 fb67 	bl	405ca0 <__aeabi_i2d>
  4055d2:	2200      	movs	r2, #0
  4055d4:	4b22      	ldr	r3, [pc, #136]	; (405660 <__kernel_rem_pio2+0x7f0>)
  4055d6:	f000 fbc9 	bl	405d6c <__aeabi_dmul>
  4055da:	460b      	mov	r3, r1
  4055dc:	4602      	mov	r2, r0
  4055de:	4639      	mov	r1, r7
  4055e0:	4630      	mov	r0, r6
  4055e2:	f000 fa0f 	bl	405a04 <__aeabi_dsub>
  4055e6:	f000 fe5b 	bl	4062a0 <__aeabi_d2iz>
  4055ea:	9b08      	ldr	r3, [sp, #32]
  4055ec:	3318      	adds	r3, #24
  4055ee:	f105 0b01 	add.w	fp, r5, #1
  4055f2:	9308      	str	r3, [sp, #32]
  4055f4:	ab10      	add	r3, sp, #64	; 0x40
  4055f6:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  4055fa:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
  4055fe:	e64e      	b.n	40529e <__kernel_rem_pio2+0x42e>
  405600:	2301      	movs	r3, #1
  405602:	e590      	b.n	405126 <__kernel_rem_pio2+0x2b6>
  405604:	2400      	movs	r4, #0
  405606:	e54b      	b.n	4050a0 <__kernel_rem_pio2+0x230>
  405608:	4618      	mov	r0, r3
  40560a:	4629      	mov	r1, r5
  40560c:	e9da 2300 	ldrd	r2, r3, [sl]
  405610:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  405614:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405616:	e9c7 0104 	strd	r0, r1, [r7, #16]
  40561a:	e9c7 2300 	strd	r2, r3, [r7]
  40561e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  405622:	e72c      	b.n	40547e <__kernel_rem_pio2+0x60e>
  405624:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  405626:	2b03      	cmp	r3, #3
  405628:	f63f af29 	bhi.w	40547e <__kernel_rem_pio2+0x60e>
  40562c:	e8df f003 	tbb	[pc, r3]
  405630:	02101015 	.word	0x02101015
  405634:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  405638:	2300      	movs	r3, #0
  40563a:	461d      	mov	r5, r3
  40563c:	e706      	b.n	40544c <__kernel_rem_pio2+0x5dc>
  40563e:	4630      	mov	r0, r6
  405640:	4639      	mov	r1, r7
  405642:	f000 fe2d 	bl	4062a0 <__aeabi_d2iz>
  405646:	ab10      	add	r3, sp, #64	; 0x40
  405648:	46ab      	mov	fp, r5
  40564a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  40564e:	e626      	b.n	40529e <__kernel_rem_pio2+0x42e>
  405650:	2600      	movs	r6, #0
  405652:	4633      	mov	r3, r6
  405654:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  405658:	e735      	b.n	4054c6 <__kernel_rem_pio2+0x656>
  40565a:	2200      	movs	r2, #0
  40565c:	4613      	mov	r3, r2
  40565e:	e774      	b.n	40554a <__kernel_rem_pio2+0x6da>
  405660:	41700000 	.word	0x41700000
  405664:	3e700000 	.word	0x3e700000

00405668 <__kernel_sin>:
  405668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40566c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  405670:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  405674:	b085      	sub	sp, #20
  405676:	460c      	mov	r4, r1
  405678:	4690      	mov	r8, r2
  40567a:	4699      	mov	r9, r3
  40567c:	4605      	mov	r5, r0
  40567e:	da04      	bge.n	40568a <__kernel_sin+0x22>
  405680:	f000 fe0e 	bl	4062a0 <__aeabi_d2iz>
  405684:	2800      	cmp	r0, #0
  405686:	f000 8085 	beq.w	405794 <__kernel_sin+0x12c>
  40568a:	462a      	mov	r2, r5
  40568c:	4623      	mov	r3, r4
  40568e:	4628      	mov	r0, r5
  405690:	4621      	mov	r1, r4
  405692:	f000 fb6b 	bl	405d6c <__aeabi_dmul>
  405696:	4606      	mov	r6, r0
  405698:	460f      	mov	r7, r1
  40569a:	4602      	mov	r2, r0
  40569c:	460b      	mov	r3, r1
  40569e:	4628      	mov	r0, r5
  4056a0:	4621      	mov	r1, r4
  4056a2:	f000 fb63 	bl	405d6c <__aeabi_dmul>
  4056a6:	a33e      	add	r3, pc, #248	; (adr r3, 4057a0 <__kernel_sin+0x138>)
  4056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056ac:	4682      	mov	sl, r0
  4056ae:	468b      	mov	fp, r1
  4056b0:	4630      	mov	r0, r6
  4056b2:	4639      	mov	r1, r7
  4056b4:	f000 fb5a 	bl	405d6c <__aeabi_dmul>
  4056b8:	a33b      	add	r3, pc, #236	; (adr r3, 4057a8 <__kernel_sin+0x140>)
  4056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056be:	f000 f9a1 	bl	405a04 <__aeabi_dsub>
  4056c2:	4632      	mov	r2, r6
  4056c4:	463b      	mov	r3, r7
  4056c6:	f000 fb51 	bl	405d6c <__aeabi_dmul>
  4056ca:	a339      	add	r3, pc, #228	; (adr r3, 4057b0 <__kernel_sin+0x148>)
  4056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056d0:	f000 f99a 	bl	405a08 <__adddf3>
  4056d4:	4632      	mov	r2, r6
  4056d6:	463b      	mov	r3, r7
  4056d8:	f000 fb48 	bl	405d6c <__aeabi_dmul>
  4056dc:	a336      	add	r3, pc, #216	; (adr r3, 4057b8 <__kernel_sin+0x150>)
  4056de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056e2:	f000 f98f 	bl	405a04 <__aeabi_dsub>
  4056e6:	4632      	mov	r2, r6
  4056e8:	463b      	mov	r3, r7
  4056ea:	f000 fb3f 	bl	405d6c <__aeabi_dmul>
  4056ee:	a334      	add	r3, pc, #208	; (adr r3, 4057c0 <__kernel_sin+0x158>)
  4056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056f4:	f000 f988 	bl	405a08 <__adddf3>
  4056f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4056fa:	e9cd 0100 	strd	r0, r1, [sp]
  4056fe:	b39b      	cbz	r3, 405768 <__kernel_sin+0x100>
  405700:	2200      	movs	r2, #0
  405702:	4b33      	ldr	r3, [pc, #204]	; (4057d0 <__kernel_sin+0x168>)
  405704:	4640      	mov	r0, r8
  405706:	4649      	mov	r1, r9
  405708:	f000 fb30 	bl	405d6c <__aeabi_dmul>
  40570c:	e9dd 2300 	ldrd	r2, r3, [sp]
  405710:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405714:	4650      	mov	r0, sl
  405716:	4659      	mov	r1, fp
  405718:	f000 fb28 	bl	405d6c <__aeabi_dmul>
  40571c:	4602      	mov	r2, r0
  40571e:	460b      	mov	r3, r1
  405720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405724:	f000 f96e 	bl	405a04 <__aeabi_dsub>
  405728:	4632      	mov	r2, r6
  40572a:	463b      	mov	r3, r7
  40572c:	f000 fb1e 	bl	405d6c <__aeabi_dmul>
  405730:	4642      	mov	r2, r8
  405732:	464b      	mov	r3, r9
  405734:	f000 f966 	bl	405a04 <__aeabi_dsub>
  405738:	a323      	add	r3, pc, #140	; (adr r3, 4057c8 <__kernel_sin+0x160>)
  40573a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40573e:	4606      	mov	r6, r0
  405740:	460f      	mov	r7, r1
  405742:	4650      	mov	r0, sl
  405744:	4659      	mov	r1, fp
  405746:	f000 fb11 	bl	405d6c <__aeabi_dmul>
  40574a:	4602      	mov	r2, r0
  40574c:	460b      	mov	r3, r1
  40574e:	4630      	mov	r0, r6
  405750:	4639      	mov	r1, r7
  405752:	f000 f959 	bl	405a08 <__adddf3>
  405756:	4602      	mov	r2, r0
  405758:	460b      	mov	r3, r1
  40575a:	4628      	mov	r0, r5
  40575c:	4621      	mov	r1, r4
  40575e:	f000 f951 	bl	405a04 <__aeabi_dsub>
  405762:	b005      	add	sp, #20
  405764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405768:	4602      	mov	r2, r0
  40576a:	460b      	mov	r3, r1
  40576c:	4630      	mov	r0, r6
  40576e:	4639      	mov	r1, r7
  405770:	f000 fafc 	bl	405d6c <__aeabi_dmul>
  405774:	a314      	add	r3, pc, #80	; (adr r3, 4057c8 <__kernel_sin+0x160>)
  405776:	e9d3 2300 	ldrd	r2, r3, [r3]
  40577a:	f000 f943 	bl	405a04 <__aeabi_dsub>
  40577e:	4652      	mov	r2, sl
  405780:	465b      	mov	r3, fp
  405782:	f000 faf3 	bl	405d6c <__aeabi_dmul>
  405786:	462a      	mov	r2, r5
  405788:	4623      	mov	r3, r4
  40578a:	f000 f93d 	bl	405a08 <__adddf3>
  40578e:	b005      	add	sp, #20
  405790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405794:	4628      	mov	r0, r5
  405796:	4621      	mov	r1, r4
  405798:	b005      	add	sp, #20
  40579a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40579e:	bf00      	nop
  4057a0:	5acfd57c 	.word	0x5acfd57c
  4057a4:	3de5d93a 	.word	0x3de5d93a
  4057a8:	8a2b9ceb 	.word	0x8a2b9ceb
  4057ac:	3e5ae5e6 	.word	0x3e5ae5e6
  4057b0:	57b1fe7d 	.word	0x57b1fe7d
  4057b4:	3ec71de3 	.word	0x3ec71de3
  4057b8:	19c161d5 	.word	0x19c161d5
  4057bc:	3f2a01a0 	.word	0x3f2a01a0
  4057c0:	1110f8a6 	.word	0x1110f8a6
  4057c4:	3f811111 	.word	0x3f811111
  4057c8:	55555549 	.word	0x55555549
  4057cc:	3fc55555 	.word	0x3fc55555
  4057d0:	3fe00000 	.word	0x3fe00000

004057d4 <fabs>:
  4057d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4057d8:	4770      	bx	lr
  4057da:	bf00      	nop
  4057dc:	0000      	movs	r0, r0
	...

004057e0 <floor>:
  4057e0:	f3c1 520a 	ubfx	r2, r1, #20, #11
  4057e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4057e8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  4057ec:	2e13      	cmp	r6, #19
  4057ee:	460b      	mov	r3, r1
  4057f0:	460d      	mov	r5, r1
  4057f2:	4604      	mov	r4, r0
  4057f4:	4688      	mov	r8, r1
  4057f6:	4607      	mov	r7, r0
  4057f8:	dc1c      	bgt.n	405834 <floor+0x54>
  4057fa:	2e00      	cmp	r6, #0
  4057fc:	db3f      	blt.n	40587e <floor+0x9e>
  4057fe:	4a3a      	ldr	r2, [pc, #232]	; (4058e8 <floor+0x108>)
  405800:	fa42 f906 	asr.w	r9, r2, r6
  405804:	ea01 0209 	and.w	r2, r1, r9
  405808:	4302      	orrs	r2, r0
  40580a:	4686      	mov	lr, r0
  40580c:	d017      	beq.n	40583e <floor+0x5e>
  40580e:	a334      	add	r3, pc, #208	; (adr r3, 4058e0 <floor+0x100>)
  405810:	e9d3 2300 	ldrd	r2, r3, [r3]
  405814:	f000 f8f8 	bl	405a08 <__adddf3>
  405818:	2200      	movs	r2, #0
  40581a:	2300      	movs	r3, #0
  40581c:	f000 fd36 	bl	40628c <__aeabi_dcmpgt>
  405820:	b120      	cbz	r0, 40582c <floor+0x4c>
  405822:	2d00      	cmp	r5, #0
  405824:	db40      	blt.n	4058a8 <floor+0xc8>
  405826:	ea28 0509 	bic.w	r5, r8, r9
  40582a:	2700      	movs	r7, #0
  40582c:	4638      	mov	r0, r7
  40582e:	4629      	mov	r1, r5
  405830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405834:	2e33      	cmp	r6, #51	; 0x33
  405836:	dd06      	ble.n	405846 <floor+0x66>
  405838:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  40583c:	d02f      	beq.n	40589e <floor+0xbe>
  40583e:	4620      	mov	r0, r4
  405840:	4619      	mov	r1, r3
  405842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405846:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  40584a:	f04f 39ff 	mov.w	r9, #4294967295
  40584e:	fa29 f902 	lsr.w	r9, r9, r2
  405852:	ea10 0f09 	tst.w	r0, r9
  405856:	d0f2      	beq.n	40583e <floor+0x5e>
  405858:	a321      	add	r3, pc, #132	; (adr r3, 4058e0 <floor+0x100>)
  40585a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40585e:	f000 f8d3 	bl	405a08 <__adddf3>
  405862:	2200      	movs	r2, #0
  405864:	2300      	movs	r3, #0
  405866:	f000 fd11 	bl	40628c <__aeabi_dcmpgt>
  40586a:	2800      	cmp	r0, #0
  40586c:	d0de      	beq.n	40582c <floor+0x4c>
  40586e:	2d00      	cmp	r5, #0
  405870:	db20      	blt.n	4058b4 <floor+0xd4>
  405872:	4645      	mov	r5, r8
  405874:	ea27 0709 	bic.w	r7, r7, r9
  405878:	4638      	mov	r0, r7
  40587a:	4629      	mov	r1, r5
  40587c:	e7d8      	b.n	405830 <floor+0x50>
  40587e:	a318      	add	r3, pc, #96	; (adr r3, 4058e0 <floor+0x100>)
  405880:	e9d3 2300 	ldrd	r2, r3, [r3]
  405884:	f000 f8c0 	bl	405a08 <__adddf3>
  405888:	2200      	movs	r2, #0
  40588a:	2300      	movs	r3, #0
  40588c:	f000 fcfe 	bl	40628c <__aeabi_dcmpgt>
  405890:	2800      	cmp	r0, #0
  405892:	d0cb      	beq.n	40582c <floor+0x4c>
  405894:	2d00      	cmp	r5, #0
  405896:	db18      	blt.n	4058ca <floor+0xea>
  405898:	2700      	movs	r7, #0
  40589a:	463d      	mov	r5, r7
  40589c:	e7c6      	b.n	40582c <floor+0x4c>
  40589e:	4602      	mov	r2, r0
  4058a0:	460b      	mov	r3, r1
  4058a2:	f000 f8b1 	bl	405a08 <__adddf3>
  4058a6:	e7cc      	b.n	405842 <floor+0x62>
  4058a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4058ac:	fa43 f606 	asr.w	r6, r3, r6
  4058b0:	44b0      	add	r8, r6
  4058b2:	e7b8      	b.n	405826 <floor+0x46>
  4058b4:	2e14      	cmp	r6, #20
  4058b6:	d010      	beq.n	4058da <floor+0xfa>
  4058b8:	2301      	movs	r3, #1
  4058ba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  4058be:	fa03 f606 	lsl.w	r6, r3, r6
  4058c2:	1937      	adds	r7, r6, r4
  4058c4:	bf28      	it	cs
  4058c6:	4498      	addcs	r8, r3
  4058c8:	e7d3      	b.n	405872 <floor+0x92>
  4058ca:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  4058ce:	4b07      	ldr	r3, [pc, #28]	; (4058ec <floor+0x10c>)
  4058d0:	4322      	orrs	r2, r4
  4058d2:	bf18      	it	ne
  4058d4:	461d      	movne	r5, r3
  4058d6:	2700      	movs	r7, #0
  4058d8:	e7a8      	b.n	40582c <floor+0x4c>
  4058da:	f105 0801 	add.w	r8, r5, #1
  4058de:	e7c8      	b.n	405872 <floor+0x92>
  4058e0:	8800759c 	.word	0x8800759c
  4058e4:	7e37e43c 	.word	0x7e37e43c
  4058e8:	000fffff 	.word	0x000fffff
  4058ec:	bff00000 	.word	0xbff00000

004058f0 <scalbn>:
  4058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058f2:	f3c1 560a 	ubfx	r6, r1, #20, #11
  4058f6:	4604      	mov	r4, r0
  4058f8:	460d      	mov	r5, r1
  4058fa:	460b      	mov	r3, r1
  4058fc:	4617      	mov	r7, r2
  4058fe:	bb06      	cbnz	r6, 405942 <scalbn+0x52>
  405900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  405904:	4303      	orrs	r3, r0
  405906:	d025      	beq.n	405954 <scalbn+0x64>
  405908:	2200      	movs	r2, #0
  40590a:	4b35      	ldr	r3, [pc, #212]	; (4059e0 <scalbn+0xf0>)
  40590c:	f000 fa2e 	bl	405d6c <__aeabi_dmul>
  405910:	4a34      	ldr	r2, [pc, #208]	; (4059e4 <scalbn+0xf4>)
  405912:	4297      	cmp	r7, r2
  405914:	4604      	mov	r4, r0
  405916:	460d      	mov	r5, r1
  405918:	460b      	mov	r3, r1
  40591a:	db2a      	blt.n	405972 <scalbn+0x82>
  40591c:	f3c1 560a 	ubfx	r6, r1, #20, #11
  405920:	3e36      	subs	r6, #54	; 0x36
  405922:	443e      	add	r6, r7
  405924:	f240 72fe 	movw	r2, #2046	; 0x7fe
  405928:	4296      	cmp	r6, r2
  40592a:	dc28      	bgt.n	40597e <scalbn+0x8e>
  40592c:	2e00      	cmp	r6, #0
  40592e:	dd12      	ble.n	405956 <scalbn+0x66>
  405930:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  405934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  405938:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  40593c:	4620      	mov	r0, r4
  40593e:	4629      	mov	r1, r5
  405940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405942:	f240 72ff 	movw	r2, #2047	; 0x7ff
  405946:	4296      	cmp	r6, r2
  405948:	d1eb      	bne.n	405922 <scalbn+0x32>
  40594a:	4602      	mov	r2, r0
  40594c:	460b      	mov	r3, r1
  40594e:	f000 f85b 	bl	405a08 <__adddf3>
  405952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405956:	f116 0f35 	cmn.w	r6, #53	; 0x35
  40595a:	da1d      	bge.n	405998 <scalbn+0xa8>
  40595c:	f24c 3350 	movw	r3, #50000	; 0xc350
  405960:	429f      	cmp	r7, r3
  405962:	4622      	mov	r2, r4
  405964:	462b      	mov	r3, r5
  405966:	dc25      	bgt.n	4059b4 <scalbn+0xc4>
  405968:	a119      	add	r1, pc, #100	; (adr r1, 4059d0 <scalbn+0xe0>)
  40596a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40596e:	f000 f83d 	bl	4059ec <copysign>
  405972:	a317      	add	r3, pc, #92	; (adr r3, 4059d0 <scalbn+0xe0>)
  405974:	e9d3 2300 	ldrd	r2, r3, [r3]
  405978:	f000 f9f8 	bl	405d6c <__aeabi_dmul>
  40597c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40597e:	4622      	mov	r2, r4
  405980:	462b      	mov	r3, r5
  405982:	a115      	add	r1, pc, #84	; (adr r1, 4059d8 <scalbn+0xe8>)
  405984:	e9d1 0100 	ldrd	r0, r1, [r1]
  405988:	f000 f830 	bl	4059ec <copysign>
  40598c:	a312      	add	r3, pc, #72	; (adr r3, 4059d8 <scalbn+0xe8>)
  40598e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405992:	f000 f9eb 	bl	405d6c <__aeabi_dmul>
  405996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405998:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  40599c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  4059a0:	3636      	adds	r6, #54	; 0x36
  4059a2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  4059a6:	4620      	mov	r0, r4
  4059a8:	4629      	mov	r1, r5
  4059aa:	2200      	movs	r2, #0
  4059ac:	4b0e      	ldr	r3, [pc, #56]	; (4059e8 <scalbn+0xf8>)
  4059ae:	f000 f9dd 	bl	405d6c <__aeabi_dmul>
  4059b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059b4:	a108      	add	r1, pc, #32	; (adr r1, 4059d8 <scalbn+0xe8>)
  4059b6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4059ba:	f000 f817 	bl	4059ec <copysign>
  4059be:	a306      	add	r3, pc, #24	; (adr r3, 4059d8 <scalbn+0xe8>)
  4059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4059c4:	f000 f9d2 	bl	405d6c <__aeabi_dmul>
  4059c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059ca:	bf00      	nop
  4059cc:	f3af 8000 	nop.w
  4059d0:	c2f8f359 	.word	0xc2f8f359
  4059d4:	01a56e1f 	.word	0x01a56e1f
  4059d8:	8800759c 	.word	0x8800759c
  4059dc:	7e37e43c 	.word	0x7e37e43c
  4059e0:	43500000 	.word	0x43500000
  4059e4:	ffff3cb0 	.word	0xffff3cb0
  4059e8:	3c900000 	.word	0x3c900000

004059ec <copysign>:
  4059ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  4059f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  4059f4:	ea42 0103 	orr.w	r1, r2, r3
  4059f8:	4770      	bx	lr
  4059fa:	bf00      	nop

004059fc <__aeabi_drsub>:
  4059fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405a00:	e002      	b.n	405a08 <__adddf3>
  405a02:	bf00      	nop

00405a04 <__aeabi_dsub>:
  405a04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405a08 <__adddf3>:
  405a08:	b530      	push	{r4, r5, lr}
  405a0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405a0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405a12:	ea94 0f05 	teq	r4, r5
  405a16:	bf08      	it	eq
  405a18:	ea90 0f02 	teqeq	r0, r2
  405a1c:	bf1f      	itttt	ne
  405a1e:	ea54 0c00 	orrsne.w	ip, r4, r0
  405a22:	ea55 0c02 	orrsne.w	ip, r5, r2
  405a26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405a2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405a2e:	f000 80e2 	beq.w	405bf6 <__adddf3+0x1ee>
  405a32:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405a36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405a3a:	bfb8      	it	lt
  405a3c:	426d      	neglt	r5, r5
  405a3e:	dd0c      	ble.n	405a5a <__adddf3+0x52>
  405a40:	442c      	add	r4, r5
  405a42:	ea80 0202 	eor.w	r2, r0, r2
  405a46:	ea81 0303 	eor.w	r3, r1, r3
  405a4a:	ea82 0000 	eor.w	r0, r2, r0
  405a4e:	ea83 0101 	eor.w	r1, r3, r1
  405a52:	ea80 0202 	eor.w	r2, r0, r2
  405a56:	ea81 0303 	eor.w	r3, r1, r3
  405a5a:	2d36      	cmp	r5, #54	; 0x36
  405a5c:	bf88      	it	hi
  405a5e:	bd30      	pophi	{r4, r5, pc}
  405a60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405a64:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405a68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405a6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405a70:	d002      	beq.n	405a78 <__adddf3+0x70>
  405a72:	4240      	negs	r0, r0
  405a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405a78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405a7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405a80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405a84:	d002      	beq.n	405a8c <__adddf3+0x84>
  405a86:	4252      	negs	r2, r2
  405a88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405a8c:	ea94 0f05 	teq	r4, r5
  405a90:	f000 80a7 	beq.w	405be2 <__adddf3+0x1da>
  405a94:	f1a4 0401 	sub.w	r4, r4, #1
  405a98:	f1d5 0e20 	rsbs	lr, r5, #32
  405a9c:	db0d      	blt.n	405aba <__adddf3+0xb2>
  405a9e:	fa02 fc0e 	lsl.w	ip, r2, lr
  405aa2:	fa22 f205 	lsr.w	r2, r2, r5
  405aa6:	1880      	adds	r0, r0, r2
  405aa8:	f141 0100 	adc.w	r1, r1, #0
  405aac:	fa03 f20e 	lsl.w	r2, r3, lr
  405ab0:	1880      	adds	r0, r0, r2
  405ab2:	fa43 f305 	asr.w	r3, r3, r5
  405ab6:	4159      	adcs	r1, r3
  405ab8:	e00e      	b.n	405ad8 <__adddf3+0xd0>
  405aba:	f1a5 0520 	sub.w	r5, r5, #32
  405abe:	f10e 0e20 	add.w	lr, lr, #32
  405ac2:	2a01      	cmp	r2, #1
  405ac4:	fa03 fc0e 	lsl.w	ip, r3, lr
  405ac8:	bf28      	it	cs
  405aca:	f04c 0c02 	orrcs.w	ip, ip, #2
  405ace:	fa43 f305 	asr.w	r3, r3, r5
  405ad2:	18c0      	adds	r0, r0, r3
  405ad4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405ad8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405adc:	d507      	bpl.n	405aee <__adddf3+0xe6>
  405ade:	f04f 0e00 	mov.w	lr, #0
  405ae2:	f1dc 0c00 	rsbs	ip, ip, #0
  405ae6:	eb7e 0000 	sbcs.w	r0, lr, r0
  405aea:	eb6e 0101 	sbc.w	r1, lr, r1
  405aee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405af2:	d31b      	bcc.n	405b2c <__adddf3+0x124>
  405af4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405af8:	d30c      	bcc.n	405b14 <__adddf3+0x10c>
  405afa:	0849      	lsrs	r1, r1, #1
  405afc:	ea5f 0030 	movs.w	r0, r0, rrx
  405b00:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405b04:	f104 0401 	add.w	r4, r4, #1
  405b08:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405b0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405b10:	f080 809a 	bcs.w	405c48 <__adddf3+0x240>
  405b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405b18:	bf08      	it	eq
  405b1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405b1e:	f150 0000 	adcs.w	r0, r0, #0
  405b22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405b26:	ea41 0105 	orr.w	r1, r1, r5
  405b2a:	bd30      	pop	{r4, r5, pc}
  405b2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405b30:	4140      	adcs	r0, r0
  405b32:	eb41 0101 	adc.w	r1, r1, r1
  405b36:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405b3a:	f1a4 0401 	sub.w	r4, r4, #1
  405b3e:	d1e9      	bne.n	405b14 <__adddf3+0x10c>
  405b40:	f091 0f00 	teq	r1, #0
  405b44:	bf04      	itt	eq
  405b46:	4601      	moveq	r1, r0
  405b48:	2000      	moveq	r0, #0
  405b4a:	fab1 f381 	clz	r3, r1
  405b4e:	bf08      	it	eq
  405b50:	3320      	addeq	r3, #32
  405b52:	f1a3 030b 	sub.w	r3, r3, #11
  405b56:	f1b3 0220 	subs.w	r2, r3, #32
  405b5a:	da0c      	bge.n	405b76 <__adddf3+0x16e>
  405b5c:	320c      	adds	r2, #12
  405b5e:	dd08      	ble.n	405b72 <__adddf3+0x16a>
  405b60:	f102 0c14 	add.w	ip, r2, #20
  405b64:	f1c2 020c 	rsb	r2, r2, #12
  405b68:	fa01 f00c 	lsl.w	r0, r1, ip
  405b6c:	fa21 f102 	lsr.w	r1, r1, r2
  405b70:	e00c      	b.n	405b8c <__adddf3+0x184>
  405b72:	f102 0214 	add.w	r2, r2, #20
  405b76:	bfd8      	it	le
  405b78:	f1c2 0c20 	rsble	ip, r2, #32
  405b7c:	fa01 f102 	lsl.w	r1, r1, r2
  405b80:	fa20 fc0c 	lsr.w	ip, r0, ip
  405b84:	bfdc      	itt	le
  405b86:	ea41 010c 	orrle.w	r1, r1, ip
  405b8a:	4090      	lslle	r0, r2
  405b8c:	1ae4      	subs	r4, r4, r3
  405b8e:	bfa2      	ittt	ge
  405b90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405b94:	4329      	orrge	r1, r5
  405b96:	bd30      	popge	{r4, r5, pc}
  405b98:	ea6f 0404 	mvn.w	r4, r4
  405b9c:	3c1f      	subs	r4, #31
  405b9e:	da1c      	bge.n	405bda <__adddf3+0x1d2>
  405ba0:	340c      	adds	r4, #12
  405ba2:	dc0e      	bgt.n	405bc2 <__adddf3+0x1ba>
  405ba4:	f104 0414 	add.w	r4, r4, #20
  405ba8:	f1c4 0220 	rsb	r2, r4, #32
  405bac:	fa20 f004 	lsr.w	r0, r0, r4
  405bb0:	fa01 f302 	lsl.w	r3, r1, r2
  405bb4:	ea40 0003 	orr.w	r0, r0, r3
  405bb8:	fa21 f304 	lsr.w	r3, r1, r4
  405bbc:	ea45 0103 	orr.w	r1, r5, r3
  405bc0:	bd30      	pop	{r4, r5, pc}
  405bc2:	f1c4 040c 	rsb	r4, r4, #12
  405bc6:	f1c4 0220 	rsb	r2, r4, #32
  405bca:	fa20 f002 	lsr.w	r0, r0, r2
  405bce:	fa01 f304 	lsl.w	r3, r1, r4
  405bd2:	ea40 0003 	orr.w	r0, r0, r3
  405bd6:	4629      	mov	r1, r5
  405bd8:	bd30      	pop	{r4, r5, pc}
  405bda:	fa21 f004 	lsr.w	r0, r1, r4
  405bde:	4629      	mov	r1, r5
  405be0:	bd30      	pop	{r4, r5, pc}
  405be2:	f094 0f00 	teq	r4, #0
  405be6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405bea:	bf06      	itte	eq
  405bec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405bf0:	3401      	addeq	r4, #1
  405bf2:	3d01      	subne	r5, #1
  405bf4:	e74e      	b.n	405a94 <__adddf3+0x8c>
  405bf6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405bfa:	bf18      	it	ne
  405bfc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405c00:	d029      	beq.n	405c56 <__adddf3+0x24e>
  405c02:	ea94 0f05 	teq	r4, r5
  405c06:	bf08      	it	eq
  405c08:	ea90 0f02 	teqeq	r0, r2
  405c0c:	d005      	beq.n	405c1a <__adddf3+0x212>
  405c0e:	ea54 0c00 	orrs.w	ip, r4, r0
  405c12:	bf04      	itt	eq
  405c14:	4619      	moveq	r1, r3
  405c16:	4610      	moveq	r0, r2
  405c18:	bd30      	pop	{r4, r5, pc}
  405c1a:	ea91 0f03 	teq	r1, r3
  405c1e:	bf1e      	ittt	ne
  405c20:	2100      	movne	r1, #0
  405c22:	2000      	movne	r0, #0
  405c24:	bd30      	popne	{r4, r5, pc}
  405c26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405c2a:	d105      	bne.n	405c38 <__adddf3+0x230>
  405c2c:	0040      	lsls	r0, r0, #1
  405c2e:	4149      	adcs	r1, r1
  405c30:	bf28      	it	cs
  405c32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405c36:	bd30      	pop	{r4, r5, pc}
  405c38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405c3c:	bf3c      	itt	cc
  405c3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405c42:	bd30      	popcc	{r4, r5, pc}
  405c44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405c48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405c4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405c50:	f04f 0000 	mov.w	r0, #0
  405c54:	bd30      	pop	{r4, r5, pc}
  405c56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405c5a:	bf1a      	itte	ne
  405c5c:	4619      	movne	r1, r3
  405c5e:	4610      	movne	r0, r2
  405c60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405c64:	bf1c      	itt	ne
  405c66:	460b      	movne	r3, r1
  405c68:	4602      	movne	r2, r0
  405c6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405c6e:	bf06      	itte	eq
  405c70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405c74:	ea91 0f03 	teqeq	r1, r3
  405c78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405c7c:	bd30      	pop	{r4, r5, pc}
  405c7e:	bf00      	nop

00405c80 <__aeabi_ui2d>:
  405c80:	f090 0f00 	teq	r0, #0
  405c84:	bf04      	itt	eq
  405c86:	2100      	moveq	r1, #0
  405c88:	4770      	bxeq	lr
  405c8a:	b530      	push	{r4, r5, lr}
  405c8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405c90:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405c94:	f04f 0500 	mov.w	r5, #0
  405c98:	f04f 0100 	mov.w	r1, #0
  405c9c:	e750      	b.n	405b40 <__adddf3+0x138>
  405c9e:	bf00      	nop

00405ca0 <__aeabi_i2d>:
  405ca0:	f090 0f00 	teq	r0, #0
  405ca4:	bf04      	itt	eq
  405ca6:	2100      	moveq	r1, #0
  405ca8:	4770      	bxeq	lr
  405caa:	b530      	push	{r4, r5, lr}
  405cac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405cb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405cb4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405cb8:	bf48      	it	mi
  405cba:	4240      	negmi	r0, r0
  405cbc:	f04f 0100 	mov.w	r1, #0
  405cc0:	e73e      	b.n	405b40 <__adddf3+0x138>
  405cc2:	bf00      	nop

00405cc4 <__aeabi_f2d>:
  405cc4:	0042      	lsls	r2, r0, #1
  405cc6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405cca:	ea4f 0131 	mov.w	r1, r1, rrx
  405cce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405cd2:	bf1f      	itttt	ne
  405cd4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405cd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405cdc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405ce0:	4770      	bxne	lr
  405ce2:	f092 0f00 	teq	r2, #0
  405ce6:	bf14      	ite	ne
  405ce8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405cec:	4770      	bxeq	lr
  405cee:	b530      	push	{r4, r5, lr}
  405cf0:	f44f 7460 	mov.w	r4, #896	; 0x380
  405cf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405cf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405cfc:	e720      	b.n	405b40 <__adddf3+0x138>
  405cfe:	bf00      	nop

00405d00 <__aeabi_ul2d>:
  405d00:	ea50 0201 	orrs.w	r2, r0, r1
  405d04:	bf08      	it	eq
  405d06:	4770      	bxeq	lr
  405d08:	b530      	push	{r4, r5, lr}
  405d0a:	f04f 0500 	mov.w	r5, #0
  405d0e:	e00a      	b.n	405d26 <__aeabi_l2d+0x16>

00405d10 <__aeabi_l2d>:
  405d10:	ea50 0201 	orrs.w	r2, r0, r1
  405d14:	bf08      	it	eq
  405d16:	4770      	bxeq	lr
  405d18:	b530      	push	{r4, r5, lr}
  405d1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405d1e:	d502      	bpl.n	405d26 <__aeabi_l2d+0x16>
  405d20:	4240      	negs	r0, r0
  405d22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405d26:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405d2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405d2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405d32:	f43f aedc 	beq.w	405aee <__adddf3+0xe6>
  405d36:	f04f 0203 	mov.w	r2, #3
  405d3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405d3e:	bf18      	it	ne
  405d40:	3203      	addne	r2, #3
  405d42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405d46:	bf18      	it	ne
  405d48:	3203      	addne	r2, #3
  405d4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405d4e:	f1c2 0320 	rsb	r3, r2, #32
  405d52:	fa00 fc03 	lsl.w	ip, r0, r3
  405d56:	fa20 f002 	lsr.w	r0, r0, r2
  405d5a:	fa01 fe03 	lsl.w	lr, r1, r3
  405d5e:	ea40 000e 	orr.w	r0, r0, lr
  405d62:	fa21 f102 	lsr.w	r1, r1, r2
  405d66:	4414      	add	r4, r2
  405d68:	e6c1      	b.n	405aee <__adddf3+0xe6>
  405d6a:	bf00      	nop

00405d6c <__aeabi_dmul>:
  405d6c:	b570      	push	{r4, r5, r6, lr}
  405d6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405d72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405d76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405d7a:	bf1d      	ittte	ne
  405d7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405d80:	ea94 0f0c 	teqne	r4, ip
  405d84:	ea95 0f0c 	teqne	r5, ip
  405d88:	f000 f8de 	bleq	405f48 <__aeabi_dmul+0x1dc>
  405d8c:	442c      	add	r4, r5
  405d8e:	ea81 0603 	eor.w	r6, r1, r3
  405d92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405d96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405d9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405d9e:	bf18      	it	ne
  405da0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405da4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405dac:	d038      	beq.n	405e20 <__aeabi_dmul+0xb4>
  405dae:	fba0 ce02 	umull	ip, lr, r0, r2
  405db2:	f04f 0500 	mov.w	r5, #0
  405db6:	fbe1 e502 	umlal	lr, r5, r1, r2
  405dba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405dbe:	fbe0 e503 	umlal	lr, r5, r0, r3
  405dc2:	f04f 0600 	mov.w	r6, #0
  405dc6:	fbe1 5603 	umlal	r5, r6, r1, r3
  405dca:	f09c 0f00 	teq	ip, #0
  405dce:	bf18      	it	ne
  405dd0:	f04e 0e01 	orrne.w	lr, lr, #1
  405dd4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405dd8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405ddc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405de0:	d204      	bcs.n	405dec <__aeabi_dmul+0x80>
  405de2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405de6:	416d      	adcs	r5, r5
  405de8:	eb46 0606 	adc.w	r6, r6, r6
  405dec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405df0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405df4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405df8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405dfc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405e00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405e04:	bf88      	it	hi
  405e06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405e0a:	d81e      	bhi.n	405e4a <__aeabi_dmul+0xde>
  405e0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405e10:	bf08      	it	eq
  405e12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405e16:	f150 0000 	adcs.w	r0, r0, #0
  405e1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405e1e:	bd70      	pop	{r4, r5, r6, pc}
  405e20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405e24:	ea46 0101 	orr.w	r1, r6, r1
  405e28:	ea40 0002 	orr.w	r0, r0, r2
  405e2c:	ea81 0103 	eor.w	r1, r1, r3
  405e30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405e34:	bfc2      	ittt	gt
  405e36:	ebd4 050c 	rsbsgt	r5, r4, ip
  405e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405e3e:	bd70      	popgt	{r4, r5, r6, pc}
  405e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405e44:	f04f 0e00 	mov.w	lr, #0
  405e48:	3c01      	subs	r4, #1
  405e4a:	f300 80ab 	bgt.w	405fa4 <__aeabi_dmul+0x238>
  405e4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405e52:	bfde      	ittt	le
  405e54:	2000      	movle	r0, #0
  405e56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405e5a:	bd70      	pople	{r4, r5, r6, pc}
  405e5c:	f1c4 0400 	rsb	r4, r4, #0
  405e60:	3c20      	subs	r4, #32
  405e62:	da35      	bge.n	405ed0 <__aeabi_dmul+0x164>
  405e64:	340c      	adds	r4, #12
  405e66:	dc1b      	bgt.n	405ea0 <__aeabi_dmul+0x134>
  405e68:	f104 0414 	add.w	r4, r4, #20
  405e6c:	f1c4 0520 	rsb	r5, r4, #32
  405e70:	fa00 f305 	lsl.w	r3, r0, r5
  405e74:	fa20 f004 	lsr.w	r0, r0, r4
  405e78:	fa01 f205 	lsl.w	r2, r1, r5
  405e7c:	ea40 0002 	orr.w	r0, r0, r2
  405e80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405e84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405e88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405e8c:	fa21 f604 	lsr.w	r6, r1, r4
  405e90:	eb42 0106 	adc.w	r1, r2, r6
  405e94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405e98:	bf08      	it	eq
  405e9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405e9e:	bd70      	pop	{r4, r5, r6, pc}
  405ea0:	f1c4 040c 	rsb	r4, r4, #12
  405ea4:	f1c4 0520 	rsb	r5, r4, #32
  405ea8:	fa00 f304 	lsl.w	r3, r0, r4
  405eac:	fa20 f005 	lsr.w	r0, r0, r5
  405eb0:	fa01 f204 	lsl.w	r2, r1, r4
  405eb4:	ea40 0002 	orr.w	r0, r0, r2
  405eb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ebc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405ec0:	f141 0100 	adc.w	r1, r1, #0
  405ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405ec8:	bf08      	it	eq
  405eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405ece:	bd70      	pop	{r4, r5, r6, pc}
  405ed0:	f1c4 0520 	rsb	r5, r4, #32
  405ed4:	fa00 f205 	lsl.w	r2, r0, r5
  405ed8:	ea4e 0e02 	orr.w	lr, lr, r2
  405edc:	fa20 f304 	lsr.w	r3, r0, r4
  405ee0:	fa01 f205 	lsl.w	r2, r1, r5
  405ee4:	ea43 0302 	orr.w	r3, r3, r2
  405ee8:	fa21 f004 	lsr.w	r0, r1, r4
  405eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ef0:	fa21 f204 	lsr.w	r2, r1, r4
  405ef4:	ea20 0002 	bic.w	r0, r0, r2
  405ef8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405efc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405f00:	bf08      	it	eq
  405f02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405f06:	bd70      	pop	{r4, r5, r6, pc}
  405f08:	f094 0f00 	teq	r4, #0
  405f0c:	d10f      	bne.n	405f2e <__aeabi_dmul+0x1c2>
  405f0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405f12:	0040      	lsls	r0, r0, #1
  405f14:	eb41 0101 	adc.w	r1, r1, r1
  405f18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405f1c:	bf08      	it	eq
  405f1e:	3c01      	subeq	r4, #1
  405f20:	d0f7      	beq.n	405f12 <__aeabi_dmul+0x1a6>
  405f22:	ea41 0106 	orr.w	r1, r1, r6
  405f26:	f095 0f00 	teq	r5, #0
  405f2a:	bf18      	it	ne
  405f2c:	4770      	bxne	lr
  405f2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405f32:	0052      	lsls	r2, r2, #1
  405f34:	eb43 0303 	adc.w	r3, r3, r3
  405f38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405f3c:	bf08      	it	eq
  405f3e:	3d01      	subeq	r5, #1
  405f40:	d0f7      	beq.n	405f32 <__aeabi_dmul+0x1c6>
  405f42:	ea43 0306 	orr.w	r3, r3, r6
  405f46:	4770      	bx	lr
  405f48:	ea94 0f0c 	teq	r4, ip
  405f4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405f50:	bf18      	it	ne
  405f52:	ea95 0f0c 	teqne	r5, ip
  405f56:	d00c      	beq.n	405f72 <__aeabi_dmul+0x206>
  405f58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405f5c:	bf18      	it	ne
  405f5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405f62:	d1d1      	bne.n	405f08 <__aeabi_dmul+0x19c>
  405f64:	ea81 0103 	eor.w	r1, r1, r3
  405f68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405f6c:	f04f 0000 	mov.w	r0, #0
  405f70:	bd70      	pop	{r4, r5, r6, pc}
  405f72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405f76:	bf06      	itte	eq
  405f78:	4610      	moveq	r0, r2
  405f7a:	4619      	moveq	r1, r3
  405f7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405f80:	d019      	beq.n	405fb6 <__aeabi_dmul+0x24a>
  405f82:	ea94 0f0c 	teq	r4, ip
  405f86:	d102      	bne.n	405f8e <__aeabi_dmul+0x222>
  405f88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405f8c:	d113      	bne.n	405fb6 <__aeabi_dmul+0x24a>
  405f8e:	ea95 0f0c 	teq	r5, ip
  405f92:	d105      	bne.n	405fa0 <__aeabi_dmul+0x234>
  405f94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405f98:	bf1c      	itt	ne
  405f9a:	4610      	movne	r0, r2
  405f9c:	4619      	movne	r1, r3
  405f9e:	d10a      	bne.n	405fb6 <__aeabi_dmul+0x24a>
  405fa0:	ea81 0103 	eor.w	r1, r1, r3
  405fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405fa8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405fac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405fb0:	f04f 0000 	mov.w	r0, #0
  405fb4:	bd70      	pop	{r4, r5, r6, pc}
  405fb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405fba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405fbe:	bd70      	pop	{r4, r5, r6, pc}

00405fc0 <__aeabi_ddiv>:
  405fc0:	b570      	push	{r4, r5, r6, lr}
  405fc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405fc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405fca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405fce:	bf1d      	ittte	ne
  405fd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405fd4:	ea94 0f0c 	teqne	r4, ip
  405fd8:	ea95 0f0c 	teqne	r5, ip
  405fdc:	f000 f8a7 	bleq	40612e <__aeabi_ddiv+0x16e>
  405fe0:	eba4 0405 	sub.w	r4, r4, r5
  405fe4:	ea81 0e03 	eor.w	lr, r1, r3
  405fe8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405fec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405ff0:	f000 8088 	beq.w	406104 <__aeabi_ddiv+0x144>
  405ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405ff8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405ffc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406000:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406004:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406008:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40600c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406010:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406014:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406018:	429d      	cmp	r5, r3
  40601a:	bf08      	it	eq
  40601c:	4296      	cmpeq	r6, r2
  40601e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  406022:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406026:	d202      	bcs.n	40602e <__aeabi_ddiv+0x6e>
  406028:	085b      	lsrs	r3, r3, #1
  40602a:	ea4f 0232 	mov.w	r2, r2, rrx
  40602e:	1ab6      	subs	r6, r6, r2
  406030:	eb65 0503 	sbc.w	r5, r5, r3
  406034:	085b      	lsrs	r3, r3, #1
  406036:	ea4f 0232 	mov.w	r2, r2, rrx
  40603a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40603e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  406042:	ebb6 0e02 	subs.w	lr, r6, r2
  406046:	eb75 0e03 	sbcs.w	lr, r5, r3
  40604a:	bf22      	ittt	cs
  40604c:	1ab6      	subcs	r6, r6, r2
  40604e:	4675      	movcs	r5, lr
  406050:	ea40 000c 	orrcs.w	r0, r0, ip
  406054:	085b      	lsrs	r3, r3, #1
  406056:	ea4f 0232 	mov.w	r2, r2, rrx
  40605a:	ebb6 0e02 	subs.w	lr, r6, r2
  40605e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406062:	bf22      	ittt	cs
  406064:	1ab6      	subcs	r6, r6, r2
  406066:	4675      	movcs	r5, lr
  406068:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40606c:	085b      	lsrs	r3, r3, #1
  40606e:	ea4f 0232 	mov.w	r2, r2, rrx
  406072:	ebb6 0e02 	subs.w	lr, r6, r2
  406076:	eb75 0e03 	sbcs.w	lr, r5, r3
  40607a:	bf22      	ittt	cs
  40607c:	1ab6      	subcs	r6, r6, r2
  40607e:	4675      	movcs	r5, lr
  406080:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406084:	085b      	lsrs	r3, r3, #1
  406086:	ea4f 0232 	mov.w	r2, r2, rrx
  40608a:	ebb6 0e02 	subs.w	lr, r6, r2
  40608e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406092:	bf22      	ittt	cs
  406094:	1ab6      	subcs	r6, r6, r2
  406096:	4675      	movcs	r5, lr
  406098:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40609c:	ea55 0e06 	orrs.w	lr, r5, r6
  4060a0:	d018      	beq.n	4060d4 <__aeabi_ddiv+0x114>
  4060a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4060a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4060aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4060ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4060b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4060b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4060ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4060be:	d1c0      	bne.n	406042 <__aeabi_ddiv+0x82>
  4060c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4060c4:	d10b      	bne.n	4060de <__aeabi_ddiv+0x11e>
  4060c6:	ea41 0100 	orr.w	r1, r1, r0
  4060ca:	f04f 0000 	mov.w	r0, #0
  4060ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4060d2:	e7b6      	b.n	406042 <__aeabi_ddiv+0x82>
  4060d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4060d8:	bf04      	itt	eq
  4060da:	4301      	orreq	r1, r0
  4060dc:	2000      	moveq	r0, #0
  4060de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4060e2:	bf88      	it	hi
  4060e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4060e8:	f63f aeaf 	bhi.w	405e4a <__aeabi_dmul+0xde>
  4060ec:	ebb5 0c03 	subs.w	ip, r5, r3
  4060f0:	bf04      	itt	eq
  4060f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4060f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4060fa:	f150 0000 	adcs.w	r0, r0, #0
  4060fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406102:	bd70      	pop	{r4, r5, r6, pc}
  406104:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406108:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40610c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406110:	bfc2      	ittt	gt
  406112:	ebd4 050c 	rsbsgt	r5, r4, ip
  406116:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40611a:	bd70      	popgt	{r4, r5, r6, pc}
  40611c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406120:	f04f 0e00 	mov.w	lr, #0
  406124:	3c01      	subs	r4, #1
  406126:	e690      	b.n	405e4a <__aeabi_dmul+0xde>
  406128:	ea45 0e06 	orr.w	lr, r5, r6
  40612c:	e68d      	b.n	405e4a <__aeabi_dmul+0xde>
  40612e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406132:	ea94 0f0c 	teq	r4, ip
  406136:	bf08      	it	eq
  406138:	ea95 0f0c 	teqeq	r5, ip
  40613c:	f43f af3b 	beq.w	405fb6 <__aeabi_dmul+0x24a>
  406140:	ea94 0f0c 	teq	r4, ip
  406144:	d10a      	bne.n	40615c <__aeabi_ddiv+0x19c>
  406146:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40614a:	f47f af34 	bne.w	405fb6 <__aeabi_dmul+0x24a>
  40614e:	ea95 0f0c 	teq	r5, ip
  406152:	f47f af25 	bne.w	405fa0 <__aeabi_dmul+0x234>
  406156:	4610      	mov	r0, r2
  406158:	4619      	mov	r1, r3
  40615a:	e72c      	b.n	405fb6 <__aeabi_dmul+0x24a>
  40615c:	ea95 0f0c 	teq	r5, ip
  406160:	d106      	bne.n	406170 <__aeabi_ddiv+0x1b0>
  406162:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406166:	f43f aefd 	beq.w	405f64 <__aeabi_dmul+0x1f8>
  40616a:	4610      	mov	r0, r2
  40616c:	4619      	mov	r1, r3
  40616e:	e722      	b.n	405fb6 <__aeabi_dmul+0x24a>
  406170:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406174:	bf18      	it	ne
  406176:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40617a:	f47f aec5 	bne.w	405f08 <__aeabi_dmul+0x19c>
  40617e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  406182:	f47f af0d 	bne.w	405fa0 <__aeabi_dmul+0x234>
  406186:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40618a:	f47f aeeb 	bne.w	405f64 <__aeabi_dmul+0x1f8>
  40618e:	e712      	b.n	405fb6 <__aeabi_dmul+0x24a>

00406190 <__gedf2>:
  406190:	f04f 3cff 	mov.w	ip, #4294967295
  406194:	e006      	b.n	4061a4 <__cmpdf2+0x4>
  406196:	bf00      	nop

00406198 <__ledf2>:
  406198:	f04f 0c01 	mov.w	ip, #1
  40619c:	e002      	b.n	4061a4 <__cmpdf2+0x4>
  40619e:	bf00      	nop

004061a0 <__cmpdf2>:
  4061a0:	f04f 0c01 	mov.w	ip, #1
  4061a4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4061a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4061ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4061b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4061b4:	bf18      	it	ne
  4061b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4061ba:	d01b      	beq.n	4061f4 <__cmpdf2+0x54>
  4061bc:	b001      	add	sp, #4
  4061be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4061c2:	bf0c      	ite	eq
  4061c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4061c8:	ea91 0f03 	teqne	r1, r3
  4061cc:	bf02      	ittt	eq
  4061ce:	ea90 0f02 	teqeq	r0, r2
  4061d2:	2000      	moveq	r0, #0
  4061d4:	4770      	bxeq	lr
  4061d6:	f110 0f00 	cmn.w	r0, #0
  4061da:	ea91 0f03 	teq	r1, r3
  4061de:	bf58      	it	pl
  4061e0:	4299      	cmppl	r1, r3
  4061e2:	bf08      	it	eq
  4061e4:	4290      	cmpeq	r0, r2
  4061e6:	bf2c      	ite	cs
  4061e8:	17d8      	asrcs	r0, r3, #31
  4061ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4061ee:	f040 0001 	orr.w	r0, r0, #1
  4061f2:	4770      	bx	lr
  4061f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4061f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4061fc:	d102      	bne.n	406204 <__cmpdf2+0x64>
  4061fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406202:	d107      	bne.n	406214 <__cmpdf2+0x74>
  406204:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40620c:	d1d6      	bne.n	4061bc <__cmpdf2+0x1c>
  40620e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406212:	d0d3      	beq.n	4061bc <__cmpdf2+0x1c>
  406214:	f85d 0b04 	ldr.w	r0, [sp], #4
  406218:	4770      	bx	lr
  40621a:	bf00      	nop

0040621c <__aeabi_cdrcmple>:
  40621c:	4684      	mov	ip, r0
  40621e:	4610      	mov	r0, r2
  406220:	4662      	mov	r2, ip
  406222:	468c      	mov	ip, r1
  406224:	4619      	mov	r1, r3
  406226:	4663      	mov	r3, ip
  406228:	e000      	b.n	40622c <__aeabi_cdcmpeq>
  40622a:	bf00      	nop

0040622c <__aeabi_cdcmpeq>:
  40622c:	b501      	push	{r0, lr}
  40622e:	f7ff ffb7 	bl	4061a0 <__cmpdf2>
  406232:	2800      	cmp	r0, #0
  406234:	bf48      	it	mi
  406236:	f110 0f00 	cmnmi.w	r0, #0
  40623a:	bd01      	pop	{r0, pc}

0040623c <__aeabi_dcmpeq>:
  40623c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406240:	f7ff fff4 	bl	40622c <__aeabi_cdcmpeq>
  406244:	bf0c      	ite	eq
  406246:	2001      	moveq	r0, #1
  406248:	2000      	movne	r0, #0
  40624a:	f85d fb08 	ldr.w	pc, [sp], #8
  40624e:	bf00      	nop

00406250 <__aeabi_dcmplt>:
  406250:	f84d ed08 	str.w	lr, [sp, #-8]!
  406254:	f7ff ffea 	bl	40622c <__aeabi_cdcmpeq>
  406258:	bf34      	ite	cc
  40625a:	2001      	movcc	r0, #1
  40625c:	2000      	movcs	r0, #0
  40625e:	f85d fb08 	ldr.w	pc, [sp], #8
  406262:	bf00      	nop

00406264 <__aeabi_dcmple>:
  406264:	f84d ed08 	str.w	lr, [sp, #-8]!
  406268:	f7ff ffe0 	bl	40622c <__aeabi_cdcmpeq>
  40626c:	bf94      	ite	ls
  40626e:	2001      	movls	r0, #1
  406270:	2000      	movhi	r0, #0
  406272:	f85d fb08 	ldr.w	pc, [sp], #8
  406276:	bf00      	nop

00406278 <__aeabi_dcmpge>:
  406278:	f84d ed08 	str.w	lr, [sp, #-8]!
  40627c:	f7ff ffce 	bl	40621c <__aeabi_cdrcmple>
  406280:	bf94      	ite	ls
  406282:	2001      	movls	r0, #1
  406284:	2000      	movhi	r0, #0
  406286:	f85d fb08 	ldr.w	pc, [sp], #8
  40628a:	bf00      	nop

0040628c <__aeabi_dcmpgt>:
  40628c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406290:	f7ff ffc4 	bl	40621c <__aeabi_cdrcmple>
  406294:	bf34      	ite	cc
  406296:	2001      	movcc	r0, #1
  406298:	2000      	movcs	r0, #0
  40629a:	f85d fb08 	ldr.w	pc, [sp], #8
  40629e:	bf00      	nop

004062a0 <__aeabi_d2iz>:
  4062a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4062a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4062a8:	d215      	bcs.n	4062d6 <__aeabi_d2iz+0x36>
  4062aa:	d511      	bpl.n	4062d0 <__aeabi_d2iz+0x30>
  4062ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4062b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4062b4:	d912      	bls.n	4062dc <__aeabi_d2iz+0x3c>
  4062b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4062ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4062be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4062c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4062c6:	fa23 f002 	lsr.w	r0, r3, r2
  4062ca:	bf18      	it	ne
  4062cc:	4240      	negne	r0, r0
  4062ce:	4770      	bx	lr
  4062d0:	f04f 0000 	mov.w	r0, #0
  4062d4:	4770      	bx	lr
  4062d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4062da:	d105      	bne.n	4062e8 <__aeabi_d2iz+0x48>
  4062dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4062e0:	bf08      	it	eq
  4062e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4062e6:	4770      	bx	lr
  4062e8:	f04f 0000 	mov.w	r0, #0
  4062ec:	4770      	bx	lr
  4062ee:	bf00      	nop

004062f0 <__aeabi_d2uiz>:
  4062f0:	004a      	lsls	r2, r1, #1
  4062f2:	d211      	bcs.n	406318 <__aeabi_d2uiz+0x28>
  4062f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4062f8:	d211      	bcs.n	40631e <__aeabi_d2uiz+0x2e>
  4062fa:	d50d      	bpl.n	406318 <__aeabi_d2uiz+0x28>
  4062fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406300:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406304:	d40e      	bmi.n	406324 <__aeabi_d2uiz+0x34>
  406306:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40630a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40630e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406312:	fa23 f002 	lsr.w	r0, r3, r2
  406316:	4770      	bx	lr
  406318:	f04f 0000 	mov.w	r0, #0
  40631c:	4770      	bx	lr
  40631e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406322:	d102      	bne.n	40632a <__aeabi_d2uiz+0x3a>
  406324:	f04f 30ff 	mov.w	r0, #4294967295
  406328:	4770      	bx	lr
  40632a:	f04f 0000 	mov.w	r0, #0
  40632e:	4770      	bx	lr

00406330 <__aeabi_d2f>:
  406330:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406334:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  406338:	bf24      	itt	cs
  40633a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40633e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  406342:	d90d      	bls.n	406360 <__aeabi_d2f+0x30>
  406344:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406348:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40634c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  406350:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  406354:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  406358:	bf08      	it	eq
  40635a:	f020 0001 	biceq.w	r0, r0, #1
  40635e:	4770      	bx	lr
  406360:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  406364:	d121      	bne.n	4063aa <__aeabi_d2f+0x7a>
  406366:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40636a:	bfbc      	itt	lt
  40636c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  406370:	4770      	bxlt	lr
  406372:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406376:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40637a:	f1c2 0218 	rsb	r2, r2, #24
  40637e:	f1c2 0c20 	rsb	ip, r2, #32
  406382:	fa10 f30c 	lsls.w	r3, r0, ip
  406386:	fa20 f002 	lsr.w	r0, r0, r2
  40638a:	bf18      	it	ne
  40638c:	f040 0001 	orrne.w	r0, r0, #1
  406390:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406394:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  406398:	fa03 fc0c 	lsl.w	ip, r3, ip
  40639c:	ea40 000c 	orr.w	r0, r0, ip
  4063a0:	fa23 f302 	lsr.w	r3, r3, r2
  4063a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4063a8:	e7cc      	b.n	406344 <__aeabi_d2f+0x14>
  4063aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4063ae:	d107      	bne.n	4063c0 <__aeabi_d2f+0x90>
  4063b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4063b4:	bf1e      	ittt	ne
  4063b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4063ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4063be:	4770      	bxne	lr
  4063c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4063c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4063c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4063cc:	4770      	bx	lr
  4063ce:	bf00      	nop

004063d0 <__aeabi_frsub>:
  4063d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4063d4:	e002      	b.n	4063dc <__addsf3>
  4063d6:	bf00      	nop

004063d8 <__aeabi_fsub>:
  4063d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004063dc <__addsf3>:
  4063dc:	0042      	lsls	r2, r0, #1
  4063de:	bf1f      	itttt	ne
  4063e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4063e4:	ea92 0f03 	teqne	r2, r3
  4063e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4063ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4063f0:	d06a      	beq.n	4064c8 <__addsf3+0xec>
  4063f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4063f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4063fa:	bfc1      	itttt	gt
  4063fc:	18d2      	addgt	r2, r2, r3
  4063fe:	4041      	eorgt	r1, r0
  406400:	4048      	eorgt	r0, r1
  406402:	4041      	eorgt	r1, r0
  406404:	bfb8      	it	lt
  406406:	425b      	neglt	r3, r3
  406408:	2b19      	cmp	r3, #25
  40640a:	bf88      	it	hi
  40640c:	4770      	bxhi	lr
  40640e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  406412:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406416:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40641a:	bf18      	it	ne
  40641c:	4240      	negne	r0, r0
  40641e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406422:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  406426:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40642a:	bf18      	it	ne
  40642c:	4249      	negne	r1, r1
  40642e:	ea92 0f03 	teq	r2, r3
  406432:	d03f      	beq.n	4064b4 <__addsf3+0xd8>
  406434:	f1a2 0201 	sub.w	r2, r2, #1
  406438:	fa41 fc03 	asr.w	ip, r1, r3
  40643c:	eb10 000c 	adds.w	r0, r0, ip
  406440:	f1c3 0320 	rsb	r3, r3, #32
  406444:	fa01 f103 	lsl.w	r1, r1, r3
  406448:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40644c:	d502      	bpl.n	406454 <__addsf3+0x78>
  40644e:	4249      	negs	r1, r1
  406450:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  406454:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  406458:	d313      	bcc.n	406482 <__addsf3+0xa6>
  40645a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40645e:	d306      	bcc.n	40646e <__addsf3+0x92>
  406460:	0840      	lsrs	r0, r0, #1
  406462:	ea4f 0131 	mov.w	r1, r1, rrx
  406466:	f102 0201 	add.w	r2, r2, #1
  40646a:	2afe      	cmp	r2, #254	; 0xfe
  40646c:	d251      	bcs.n	406512 <__addsf3+0x136>
  40646e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  406472:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406476:	bf08      	it	eq
  406478:	f020 0001 	biceq.w	r0, r0, #1
  40647c:	ea40 0003 	orr.w	r0, r0, r3
  406480:	4770      	bx	lr
  406482:	0049      	lsls	r1, r1, #1
  406484:	eb40 0000 	adc.w	r0, r0, r0
  406488:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40648c:	f1a2 0201 	sub.w	r2, r2, #1
  406490:	d1ed      	bne.n	40646e <__addsf3+0x92>
  406492:	fab0 fc80 	clz	ip, r0
  406496:	f1ac 0c08 	sub.w	ip, ip, #8
  40649a:	ebb2 020c 	subs.w	r2, r2, ip
  40649e:	fa00 f00c 	lsl.w	r0, r0, ip
  4064a2:	bfaa      	itet	ge
  4064a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4064a8:	4252      	neglt	r2, r2
  4064aa:	4318      	orrge	r0, r3
  4064ac:	bfbc      	itt	lt
  4064ae:	40d0      	lsrlt	r0, r2
  4064b0:	4318      	orrlt	r0, r3
  4064b2:	4770      	bx	lr
  4064b4:	f092 0f00 	teq	r2, #0
  4064b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4064bc:	bf06      	itte	eq
  4064be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4064c2:	3201      	addeq	r2, #1
  4064c4:	3b01      	subne	r3, #1
  4064c6:	e7b5      	b.n	406434 <__addsf3+0x58>
  4064c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4064cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4064d0:	bf18      	it	ne
  4064d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4064d6:	d021      	beq.n	40651c <__addsf3+0x140>
  4064d8:	ea92 0f03 	teq	r2, r3
  4064dc:	d004      	beq.n	4064e8 <__addsf3+0x10c>
  4064de:	f092 0f00 	teq	r2, #0
  4064e2:	bf08      	it	eq
  4064e4:	4608      	moveq	r0, r1
  4064e6:	4770      	bx	lr
  4064e8:	ea90 0f01 	teq	r0, r1
  4064ec:	bf1c      	itt	ne
  4064ee:	2000      	movne	r0, #0
  4064f0:	4770      	bxne	lr
  4064f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4064f6:	d104      	bne.n	406502 <__addsf3+0x126>
  4064f8:	0040      	lsls	r0, r0, #1
  4064fa:	bf28      	it	cs
  4064fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  406500:	4770      	bx	lr
  406502:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  406506:	bf3c      	itt	cc
  406508:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40650c:	4770      	bxcc	lr
  40650e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  406512:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  406516:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40651a:	4770      	bx	lr
  40651c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  406520:	bf16      	itet	ne
  406522:	4608      	movne	r0, r1
  406524:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  406528:	4601      	movne	r1, r0
  40652a:	0242      	lsls	r2, r0, #9
  40652c:	bf06      	itte	eq
  40652e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  406532:	ea90 0f01 	teqeq	r0, r1
  406536:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40653a:	4770      	bx	lr

0040653c <__aeabi_ui2f>:
  40653c:	f04f 0300 	mov.w	r3, #0
  406540:	e004      	b.n	40654c <__aeabi_i2f+0x8>
  406542:	bf00      	nop

00406544 <__aeabi_i2f>:
  406544:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  406548:	bf48      	it	mi
  40654a:	4240      	negmi	r0, r0
  40654c:	ea5f 0c00 	movs.w	ip, r0
  406550:	bf08      	it	eq
  406552:	4770      	bxeq	lr
  406554:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  406558:	4601      	mov	r1, r0
  40655a:	f04f 0000 	mov.w	r0, #0
  40655e:	e01c      	b.n	40659a <__aeabi_l2f+0x2a>

00406560 <__aeabi_ul2f>:
  406560:	ea50 0201 	orrs.w	r2, r0, r1
  406564:	bf08      	it	eq
  406566:	4770      	bxeq	lr
  406568:	f04f 0300 	mov.w	r3, #0
  40656c:	e00a      	b.n	406584 <__aeabi_l2f+0x14>
  40656e:	bf00      	nop

00406570 <__aeabi_l2f>:
  406570:	ea50 0201 	orrs.w	r2, r0, r1
  406574:	bf08      	it	eq
  406576:	4770      	bxeq	lr
  406578:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40657c:	d502      	bpl.n	406584 <__aeabi_l2f+0x14>
  40657e:	4240      	negs	r0, r0
  406580:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406584:	ea5f 0c01 	movs.w	ip, r1
  406588:	bf02      	ittt	eq
  40658a:	4684      	moveq	ip, r0
  40658c:	4601      	moveq	r1, r0
  40658e:	2000      	moveq	r0, #0
  406590:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  406594:	bf08      	it	eq
  406596:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40659a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40659e:	fabc f28c 	clz	r2, ip
  4065a2:	3a08      	subs	r2, #8
  4065a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4065a8:	db10      	blt.n	4065cc <__aeabi_l2f+0x5c>
  4065aa:	fa01 fc02 	lsl.w	ip, r1, r2
  4065ae:	4463      	add	r3, ip
  4065b0:	fa00 fc02 	lsl.w	ip, r0, r2
  4065b4:	f1c2 0220 	rsb	r2, r2, #32
  4065b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4065bc:	fa20 f202 	lsr.w	r2, r0, r2
  4065c0:	eb43 0002 	adc.w	r0, r3, r2
  4065c4:	bf08      	it	eq
  4065c6:	f020 0001 	biceq.w	r0, r0, #1
  4065ca:	4770      	bx	lr
  4065cc:	f102 0220 	add.w	r2, r2, #32
  4065d0:	fa01 fc02 	lsl.w	ip, r1, r2
  4065d4:	f1c2 0220 	rsb	r2, r2, #32
  4065d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4065dc:	fa21 f202 	lsr.w	r2, r1, r2
  4065e0:	eb43 0002 	adc.w	r0, r3, r2
  4065e4:	bf08      	it	eq
  4065e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4065ea:	4770      	bx	lr

004065ec <__aeabi_fmul>:
  4065ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4065f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4065f4:	bf1e      	ittt	ne
  4065f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4065fa:	ea92 0f0c 	teqne	r2, ip
  4065fe:	ea93 0f0c 	teqne	r3, ip
  406602:	d06f      	beq.n	4066e4 <__aeabi_fmul+0xf8>
  406604:	441a      	add	r2, r3
  406606:	ea80 0c01 	eor.w	ip, r0, r1
  40660a:	0240      	lsls	r0, r0, #9
  40660c:	bf18      	it	ne
  40660e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  406612:	d01e      	beq.n	406652 <__aeabi_fmul+0x66>
  406614:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  406618:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40661c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  406620:	fba0 3101 	umull	r3, r1, r0, r1
  406624:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406628:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40662c:	bf3e      	ittt	cc
  40662e:	0049      	lslcc	r1, r1, #1
  406630:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  406634:	005b      	lslcc	r3, r3, #1
  406636:	ea40 0001 	orr.w	r0, r0, r1
  40663a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40663e:	2afd      	cmp	r2, #253	; 0xfd
  406640:	d81d      	bhi.n	40667e <__aeabi_fmul+0x92>
  406642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  406646:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40664a:	bf08      	it	eq
  40664c:	f020 0001 	biceq.w	r0, r0, #1
  406650:	4770      	bx	lr
  406652:	f090 0f00 	teq	r0, #0
  406656:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40665a:	bf08      	it	eq
  40665c:	0249      	lsleq	r1, r1, #9
  40665e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406662:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  406666:	3a7f      	subs	r2, #127	; 0x7f
  406668:	bfc2      	ittt	gt
  40666a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40666e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406672:	4770      	bxgt	lr
  406674:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406678:	f04f 0300 	mov.w	r3, #0
  40667c:	3a01      	subs	r2, #1
  40667e:	dc5d      	bgt.n	40673c <__aeabi_fmul+0x150>
  406680:	f112 0f19 	cmn.w	r2, #25
  406684:	bfdc      	itt	le
  406686:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40668a:	4770      	bxle	lr
  40668c:	f1c2 0200 	rsb	r2, r2, #0
  406690:	0041      	lsls	r1, r0, #1
  406692:	fa21 f102 	lsr.w	r1, r1, r2
  406696:	f1c2 0220 	rsb	r2, r2, #32
  40669a:	fa00 fc02 	lsl.w	ip, r0, r2
  40669e:	ea5f 0031 	movs.w	r0, r1, rrx
  4066a2:	f140 0000 	adc.w	r0, r0, #0
  4066a6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4066aa:	bf08      	it	eq
  4066ac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4066b0:	4770      	bx	lr
  4066b2:	f092 0f00 	teq	r2, #0
  4066b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4066ba:	bf02      	ittt	eq
  4066bc:	0040      	lsleq	r0, r0, #1
  4066be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4066c2:	3a01      	subeq	r2, #1
  4066c4:	d0f9      	beq.n	4066ba <__aeabi_fmul+0xce>
  4066c6:	ea40 000c 	orr.w	r0, r0, ip
  4066ca:	f093 0f00 	teq	r3, #0
  4066ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4066d2:	bf02      	ittt	eq
  4066d4:	0049      	lsleq	r1, r1, #1
  4066d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4066da:	3b01      	subeq	r3, #1
  4066dc:	d0f9      	beq.n	4066d2 <__aeabi_fmul+0xe6>
  4066de:	ea41 010c 	orr.w	r1, r1, ip
  4066e2:	e78f      	b.n	406604 <__aeabi_fmul+0x18>
  4066e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4066e8:	ea92 0f0c 	teq	r2, ip
  4066ec:	bf18      	it	ne
  4066ee:	ea93 0f0c 	teqne	r3, ip
  4066f2:	d00a      	beq.n	40670a <__aeabi_fmul+0x11e>
  4066f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4066f8:	bf18      	it	ne
  4066fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4066fe:	d1d8      	bne.n	4066b2 <__aeabi_fmul+0xc6>
  406700:	ea80 0001 	eor.w	r0, r0, r1
  406704:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406708:	4770      	bx	lr
  40670a:	f090 0f00 	teq	r0, #0
  40670e:	bf17      	itett	ne
  406710:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  406714:	4608      	moveq	r0, r1
  406716:	f091 0f00 	teqne	r1, #0
  40671a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40671e:	d014      	beq.n	40674a <__aeabi_fmul+0x15e>
  406720:	ea92 0f0c 	teq	r2, ip
  406724:	d101      	bne.n	40672a <__aeabi_fmul+0x13e>
  406726:	0242      	lsls	r2, r0, #9
  406728:	d10f      	bne.n	40674a <__aeabi_fmul+0x15e>
  40672a:	ea93 0f0c 	teq	r3, ip
  40672e:	d103      	bne.n	406738 <__aeabi_fmul+0x14c>
  406730:	024b      	lsls	r3, r1, #9
  406732:	bf18      	it	ne
  406734:	4608      	movne	r0, r1
  406736:	d108      	bne.n	40674a <__aeabi_fmul+0x15e>
  406738:	ea80 0001 	eor.w	r0, r0, r1
  40673c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406740:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406744:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406748:	4770      	bx	lr
  40674a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40674e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  406752:	4770      	bx	lr

00406754 <__aeabi_fdiv>:
  406754:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406758:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40675c:	bf1e      	ittt	ne
  40675e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406762:	ea92 0f0c 	teqne	r2, ip
  406766:	ea93 0f0c 	teqne	r3, ip
  40676a:	d069      	beq.n	406840 <__aeabi_fdiv+0xec>
  40676c:	eba2 0203 	sub.w	r2, r2, r3
  406770:	ea80 0c01 	eor.w	ip, r0, r1
  406774:	0249      	lsls	r1, r1, #9
  406776:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40677a:	d037      	beq.n	4067ec <__aeabi_fdiv+0x98>
  40677c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  406780:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  406784:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  406788:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40678c:	428b      	cmp	r3, r1
  40678e:	bf38      	it	cc
  406790:	005b      	lslcc	r3, r3, #1
  406792:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  406796:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40679a:	428b      	cmp	r3, r1
  40679c:	bf24      	itt	cs
  40679e:	1a5b      	subcs	r3, r3, r1
  4067a0:	ea40 000c 	orrcs.w	r0, r0, ip
  4067a4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4067a8:	bf24      	itt	cs
  4067aa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4067ae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4067b2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4067b6:	bf24      	itt	cs
  4067b8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4067bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4067c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4067c4:	bf24      	itt	cs
  4067c6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4067ca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4067ce:	011b      	lsls	r3, r3, #4
  4067d0:	bf18      	it	ne
  4067d2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4067d6:	d1e0      	bne.n	40679a <__aeabi_fdiv+0x46>
  4067d8:	2afd      	cmp	r2, #253	; 0xfd
  4067da:	f63f af50 	bhi.w	40667e <__aeabi_fmul+0x92>
  4067de:	428b      	cmp	r3, r1
  4067e0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4067e4:	bf08      	it	eq
  4067e6:	f020 0001 	biceq.w	r0, r0, #1
  4067ea:	4770      	bx	lr
  4067ec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4067f0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4067f4:	327f      	adds	r2, #127	; 0x7f
  4067f6:	bfc2      	ittt	gt
  4067f8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4067fc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406800:	4770      	bxgt	lr
  406802:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406806:	f04f 0300 	mov.w	r3, #0
  40680a:	3a01      	subs	r2, #1
  40680c:	e737      	b.n	40667e <__aeabi_fmul+0x92>
  40680e:	f092 0f00 	teq	r2, #0
  406812:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406816:	bf02      	ittt	eq
  406818:	0040      	lsleq	r0, r0, #1
  40681a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40681e:	3a01      	subeq	r2, #1
  406820:	d0f9      	beq.n	406816 <__aeabi_fdiv+0xc2>
  406822:	ea40 000c 	orr.w	r0, r0, ip
  406826:	f093 0f00 	teq	r3, #0
  40682a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40682e:	bf02      	ittt	eq
  406830:	0049      	lsleq	r1, r1, #1
  406832:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406836:	3b01      	subeq	r3, #1
  406838:	d0f9      	beq.n	40682e <__aeabi_fdiv+0xda>
  40683a:	ea41 010c 	orr.w	r1, r1, ip
  40683e:	e795      	b.n	40676c <__aeabi_fdiv+0x18>
  406840:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406844:	ea92 0f0c 	teq	r2, ip
  406848:	d108      	bne.n	40685c <__aeabi_fdiv+0x108>
  40684a:	0242      	lsls	r2, r0, #9
  40684c:	f47f af7d 	bne.w	40674a <__aeabi_fmul+0x15e>
  406850:	ea93 0f0c 	teq	r3, ip
  406854:	f47f af70 	bne.w	406738 <__aeabi_fmul+0x14c>
  406858:	4608      	mov	r0, r1
  40685a:	e776      	b.n	40674a <__aeabi_fmul+0x15e>
  40685c:	ea93 0f0c 	teq	r3, ip
  406860:	d104      	bne.n	40686c <__aeabi_fdiv+0x118>
  406862:	024b      	lsls	r3, r1, #9
  406864:	f43f af4c 	beq.w	406700 <__aeabi_fmul+0x114>
  406868:	4608      	mov	r0, r1
  40686a:	e76e      	b.n	40674a <__aeabi_fmul+0x15e>
  40686c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406870:	bf18      	it	ne
  406872:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406876:	d1ca      	bne.n	40680e <__aeabi_fdiv+0xba>
  406878:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40687c:	f47f af5c 	bne.w	406738 <__aeabi_fmul+0x14c>
  406880:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406884:	f47f af3c 	bne.w	406700 <__aeabi_fmul+0x114>
  406888:	e75f      	b.n	40674a <__aeabi_fmul+0x15e>
  40688a:	bf00      	nop

0040688c <__gesf2>:
  40688c:	f04f 3cff 	mov.w	ip, #4294967295
  406890:	e006      	b.n	4068a0 <__cmpsf2+0x4>
  406892:	bf00      	nop

00406894 <__lesf2>:
  406894:	f04f 0c01 	mov.w	ip, #1
  406898:	e002      	b.n	4068a0 <__cmpsf2+0x4>
  40689a:	bf00      	nop

0040689c <__cmpsf2>:
  40689c:	f04f 0c01 	mov.w	ip, #1
  4068a0:	f84d cd04 	str.w	ip, [sp, #-4]!
  4068a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
  4068a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4068ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4068b0:	bf18      	it	ne
  4068b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4068b6:	d011      	beq.n	4068dc <__cmpsf2+0x40>
  4068b8:	b001      	add	sp, #4
  4068ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4068be:	bf18      	it	ne
  4068c0:	ea90 0f01 	teqne	r0, r1
  4068c4:	bf58      	it	pl
  4068c6:	ebb2 0003 	subspl.w	r0, r2, r3
  4068ca:	bf88      	it	hi
  4068cc:	17c8      	asrhi	r0, r1, #31
  4068ce:	bf38      	it	cc
  4068d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  4068d4:	bf18      	it	ne
  4068d6:	f040 0001 	orrne.w	r0, r0, #1
  4068da:	4770      	bx	lr
  4068dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4068e0:	d102      	bne.n	4068e8 <__cmpsf2+0x4c>
  4068e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4068e6:	d105      	bne.n	4068f4 <__cmpsf2+0x58>
  4068e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4068ec:	d1e4      	bne.n	4068b8 <__cmpsf2+0x1c>
  4068ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  4068f2:	d0e1      	beq.n	4068b8 <__cmpsf2+0x1c>
  4068f4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4068f8:	4770      	bx	lr
  4068fa:	bf00      	nop

004068fc <__aeabi_cfrcmple>:
  4068fc:	4684      	mov	ip, r0
  4068fe:	4608      	mov	r0, r1
  406900:	4661      	mov	r1, ip
  406902:	e7ff      	b.n	406904 <__aeabi_cfcmpeq>

00406904 <__aeabi_cfcmpeq>:
  406904:	b50f      	push	{r0, r1, r2, r3, lr}
  406906:	f7ff ffc9 	bl	40689c <__cmpsf2>
  40690a:	2800      	cmp	r0, #0
  40690c:	bf48      	it	mi
  40690e:	f110 0f00 	cmnmi.w	r0, #0
  406912:	bd0f      	pop	{r0, r1, r2, r3, pc}

00406914 <__aeabi_fcmpeq>:
  406914:	f84d ed08 	str.w	lr, [sp, #-8]!
  406918:	f7ff fff4 	bl	406904 <__aeabi_cfcmpeq>
  40691c:	bf0c      	ite	eq
  40691e:	2001      	moveq	r0, #1
  406920:	2000      	movne	r0, #0
  406922:	f85d fb08 	ldr.w	pc, [sp], #8
  406926:	bf00      	nop

00406928 <__aeabi_fcmplt>:
  406928:	f84d ed08 	str.w	lr, [sp, #-8]!
  40692c:	f7ff ffea 	bl	406904 <__aeabi_cfcmpeq>
  406930:	bf34      	ite	cc
  406932:	2001      	movcc	r0, #1
  406934:	2000      	movcs	r0, #0
  406936:	f85d fb08 	ldr.w	pc, [sp], #8
  40693a:	bf00      	nop

0040693c <__aeabi_fcmple>:
  40693c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406940:	f7ff ffe0 	bl	406904 <__aeabi_cfcmpeq>
  406944:	bf94      	ite	ls
  406946:	2001      	movls	r0, #1
  406948:	2000      	movhi	r0, #0
  40694a:	f85d fb08 	ldr.w	pc, [sp], #8
  40694e:	bf00      	nop

00406950 <__aeabi_fcmpge>:
  406950:	f84d ed08 	str.w	lr, [sp, #-8]!
  406954:	f7ff ffd2 	bl	4068fc <__aeabi_cfrcmple>
  406958:	bf94      	ite	ls
  40695a:	2001      	movls	r0, #1
  40695c:	2000      	movhi	r0, #0
  40695e:	f85d fb08 	ldr.w	pc, [sp], #8
  406962:	bf00      	nop

00406964 <__aeabi_fcmpgt>:
  406964:	f84d ed08 	str.w	lr, [sp, #-8]!
  406968:	f7ff ffc8 	bl	4068fc <__aeabi_cfrcmple>
  40696c:	bf34      	ite	cc
  40696e:	2001      	movcc	r0, #1
  406970:	2000      	movcs	r0, #0
  406972:	f85d fb08 	ldr.w	pc, [sp], #8
  406976:	bf00      	nop

00406978 <__aeabi_f2uiz>:
  406978:	0042      	lsls	r2, r0, #1
  40697a:	d20e      	bcs.n	40699a <__aeabi_f2uiz+0x22>
  40697c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  406980:	d30b      	bcc.n	40699a <__aeabi_f2uiz+0x22>
  406982:	f04f 039e 	mov.w	r3, #158	; 0x9e
  406986:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40698a:	d409      	bmi.n	4069a0 <__aeabi_f2uiz+0x28>
  40698c:	ea4f 2300 	mov.w	r3, r0, lsl #8
  406990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406994:	fa23 f002 	lsr.w	r0, r3, r2
  406998:	4770      	bx	lr
  40699a:	f04f 0000 	mov.w	r0, #0
  40699e:	4770      	bx	lr
  4069a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
  4069a4:	d101      	bne.n	4069aa <__aeabi_f2uiz+0x32>
  4069a6:	0242      	lsls	r2, r0, #9
  4069a8:	d102      	bne.n	4069b0 <__aeabi_f2uiz+0x38>
  4069aa:	f04f 30ff 	mov.w	r0, #4294967295
  4069ae:	4770      	bx	lr
  4069b0:	f04f 0000 	mov.w	r0, #0
  4069b4:	4770      	bx	lr
  4069b6:	bf00      	nop

004069b8 <__libc_init_array>:
  4069b8:	b570      	push	{r4, r5, r6, lr}
  4069ba:	4e0f      	ldr	r6, [pc, #60]	; (4069f8 <__libc_init_array+0x40>)
  4069bc:	4d0f      	ldr	r5, [pc, #60]	; (4069fc <__libc_init_array+0x44>)
  4069be:	1b76      	subs	r6, r6, r5
  4069c0:	10b6      	asrs	r6, r6, #2
  4069c2:	bf18      	it	ne
  4069c4:	2400      	movne	r4, #0
  4069c6:	d005      	beq.n	4069d4 <__libc_init_array+0x1c>
  4069c8:	3401      	adds	r4, #1
  4069ca:	f855 3b04 	ldr.w	r3, [r5], #4
  4069ce:	4798      	blx	r3
  4069d0:	42a6      	cmp	r6, r4
  4069d2:	d1f9      	bne.n	4069c8 <__libc_init_array+0x10>
  4069d4:	4e0a      	ldr	r6, [pc, #40]	; (406a00 <__libc_init_array+0x48>)
  4069d6:	4d0b      	ldr	r5, [pc, #44]	; (406a04 <__libc_init_array+0x4c>)
  4069d8:	1b76      	subs	r6, r6, r5
  4069da:	f001 f9ed 	bl	407db8 <_init>
  4069de:	10b6      	asrs	r6, r6, #2
  4069e0:	bf18      	it	ne
  4069e2:	2400      	movne	r4, #0
  4069e4:	d006      	beq.n	4069f4 <__libc_init_array+0x3c>
  4069e6:	3401      	adds	r4, #1
  4069e8:	f855 3b04 	ldr.w	r3, [r5], #4
  4069ec:	4798      	blx	r3
  4069ee:	42a6      	cmp	r6, r4
  4069f0:	d1f9      	bne.n	4069e6 <__libc_init_array+0x2e>
  4069f2:	bd70      	pop	{r4, r5, r6, pc}
  4069f4:	bd70      	pop	{r4, r5, r6, pc}
  4069f6:	bf00      	nop
  4069f8:	00407dc4 	.word	0x00407dc4
  4069fc:	00407dc4 	.word	0x00407dc4
  406a00:	00407dcc 	.word	0x00407dcc
  406a04:	00407dc4 	.word	0x00407dc4

00406a08 <memcmp>:
  406a08:	2a03      	cmp	r2, #3
  406a0a:	b470      	push	{r4, r5, r6}
  406a0c:	d926      	bls.n	406a5c <memcmp+0x54>
  406a0e:	ea40 0301 	orr.w	r3, r0, r1
  406a12:	079b      	lsls	r3, r3, #30
  406a14:	d011      	beq.n	406a3a <memcmp+0x32>
  406a16:	7804      	ldrb	r4, [r0, #0]
  406a18:	780d      	ldrb	r5, [r1, #0]
  406a1a:	42ac      	cmp	r4, r5
  406a1c:	d122      	bne.n	406a64 <memcmp+0x5c>
  406a1e:	4402      	add	r2, r0
  406a20:	1c43      	adds	r3, r0, #1
  406a22:	e005      	b.n	406a30 <memcmp+0x28>
  406a24:	f813 4b01 	ldrb.w	r4, [r3], #1
  406a28:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  406a2c:	42ac      	cmp	r4, r5
  406a2e:	d119      	bne.n	406a64 <memcmp+0x5c>
  406a30:	4293      	cmp	r3, r2
  406a32:	d1f7      	bne.n	406a24 <memcmp+0x1c>
  406a34:	2000      	movs	r0, #0
  406a36:	bc70      	pop	{r4, r5, r6}
  406a38:	4770      	bx	lr
  406a3a:	460c      	mov	r4, r1
  406a3c:	4603      	mov	r3, r0
  406a3e:	681e      	ldr	r6, [r3, #0]
  406a40:	6825      	ldr	r5, [r4, #0]
  406a42:	42ae      	cmp	r6, r5
  406a44:	4618      	mov	r0, r3
  406a46:	4621      	mov	r1, r4
  406a48:	f103 0304 	add.w	r3, r3, #4
  406a4c:	f104 0404 	add.w	r4, r4, #4
  406a50:	d1e1      	bne.n	406a16 <memcmp+0xe>
  406a52:	3a04      	subs	r2, #4
  406a54:	2a03      	cmp	r2, #3
  406a56:	4618      	mov	r0, r3
  406a58:	4621      	mov	r1, r4
  406a5a:	d8f0      	bhi.n	406a3e <memcmp+0x36>
  406a5c:	2a00      	cmp	r2, #0
  406a5e:	d1da      	bne.n	406a16 <memcmp+0xe>
  406a60:	4610      	mov	r0, r2
  406a62:	e7e8      	b.n	406a36 <memcmp+0x2e>
  406a64:	1b60      	subs	r0, r4, r5
  406a66:	bc70      	pop	{r4, r5, r6}
  406a68:	4770      	bx	lr
  406a6a:	bf00      	nop

00406a6c <memcpy>:
  406a6c:	4684      	mov	ip, r0
  406a6e:	ea41 0300 	orr.w	r3, r1, r0
  406a72:	f013 0303 	ands.w	r3, r3, #3
  406a76:	d16d      	bne.n	406b54 <memcpy+0xe8>
  406a78:	3a40      	subs	r2, #64	; 0x40
  406a7a:	d341      	bcc.n	406b00 <memcpy+0x94>
  406a7c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a80:	f840 3b04 	str.w	r3, [r0], #4
  406a84:	f851 3b04 	ldr.w	r3, [r1], #4
  406a88:	f840 3b04 	str.w	r3, [r0], #4
  406a8c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a90:	f840 3b04 	str.w	r3, [r0], #4
  406a94:	f851 3b04 	ldr.w	r3, [r1], #4
  406a98:	f840 3b04 	str.w	r3, [r0], #4
  406a9c:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa0:	f840 3b04 	str.w	r3, [r0], #4
  406aa4:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa8:	f840 3b04 	str.w	r3, [r0], #4
  406aac:	f851 3b04 	ldr.w	r3, [r1], #4
  406ab0:	f840 3b04 	str.w	r3, [r0], #4
  406ab4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ab8:	f840 3b04 	str.w	r3, [r0], #4
  406abc:	f851 3b04 	ldr.w	r3, [r1], #4
  406ac0:	f840 3b04 	str.w	r3, [r0], #4
  406ac4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ac8:	f840 3b04 	str.w	r3, [r0], #4
  406acc:	f851 3b04 	ldr.w	r3, [r1], #4
  406ad0:	f840 3b04 	str.w	r3, [r0], #4
  406ad4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ad8:	f840 3b04 	str.w	r3, [r0], #4
  406adc:	f851 3b04 	ldr.w	r3, [r1], #4
  406ae0:	f840 3b04 	str.w	r3, [r0], #4
  406ae4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ae8:	f840 3b04 	str.w	r3, [r0], #4
  406aec:	f851 3b04 	ldr.w	r3, [r1], #4
  406af0:	f840 3b04 	str.w	r3, [r0], #4
  406af4:	f851 3b04 	ldr.w	r3, [r1], #4
  406af8:	f840 3b04 	str.w	r3, [r0], #4
  406afc:	3a40      	subs	r2, #64	; 0x40
  406afe:	d2bd      	bcs.n	406a7c <memcpy+0x10>
  406b00:	3230      	adds	r2, #48	; 0x30
  406b02:	d311      	bcc.n	406b28 <memcpy+0xbc>
  406b04:	f851 3b04 	ldr.w	r3, [r1], #4
  406b08:	f840 3b04 	str.w	r3, [r0], #4
  406b0c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b10:	f840 3b04 	str.w	r3, [r0], #4
  406b14:	f851 3b04 	ldr.w	r3, [r1], #4
  406b18:	f840 3b04 	str.w	r3, [r0], #4
  406b1c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b20:	f840 3b04 	str.w	r3, [r0], #4
  406b24:	3a10      	subs	r2, #16
  406b26:	d2ed      	bcs.n	406b04 <memcpy+0x98>
  406b28:	320c      	adds	r2, #12
  406b2a:	d305      	bcc.n	406b38 <memcpy+0xcc>
  406b2c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b30:	f840 3b04 	str.w	r3, [r0], #4
  406b34:	3a04      	subs	r2, #4
  406b36:	d2f9      	bcs.n	406b2c <memcpy+0xc0>
  406b38:	3204      	adds	r2, #4
  406b3a:	d008      	beq.n	406b4e <memcpy+0xe2>
  406b3c:	07d2      	lsls	r2, r2, #31
  406b3e:	bf1c      	itt	ne
  406b40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b44:	f800 3b01 	strbne.w	r3, [r0], #1
  406b48:	d301      	bcc.n	406b4e <memcpy+0xe2>
  406b4a:	880b      	ldrh	r3, [r1, #0]
  406b4c:	8003      	strh	r3, [r0, #0]
  406b4e:	4660      	mov	r0, ip
  406b50:	4770      	bx	lr
  406b52:	bf00      	nop
  406b54:	2a08      	cmp	r2, #8
  406b56:	d313      	bcc.n	406b80 <memcpy+0x114>
  406b58:	078b      	lsls	r3, r1, #30
  406b5a:	d08d      	beq.n	406a78 <memcpy+0xc>
  406b5c:	f010 0303 	ands.w	r3, r0, #3
  406b60:	d08a      	beq.n	406a78 <memcpy+0xc>
  406b62:	f1c3 0304 	rsb	r3, r3, #4
  406b66:	1ad2      	subs	r2, r2, r3
  406b68:	07db      	lsls	r3, r3, #31
  406b6a:	bf1c      	itt	ne
  406b6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b70:	f800 3b01 	strbne.w	r3, [r0], #1
  406b74:	d380      	bcc.n	406a78 <memcpy+0xc>
  406b76:	f831 3b02 	ldrh.w	r3, [r1], #2
  406b7a:	f820 3b02 	strh.w	r3, [r0], #2
  406b7e:	e77b      	b.n	406a78 <memcpy+0xc>
  406b80:	3a04      	subs	r2, #4
  406b82:	d3d9      	bcc.n	406b38 <memcpy+0xcc>
  406b84:	3a01      	subs	r2, #1
  406b86:	f811 3b01 	ldrb.w	r3, [r1], #1
  406b8a:	f800 3b01 	strb.w	r3, [r0], #1
  406b8e:	d2f9      	bcs.n	406b84 <memcpy+0x118>
  406b90:	780b      	ldrb	r3, [r1, #0]
  406b92:	7003      	strb	r3, [r0, #0]
  406b94:	784b      	ldrb	r3, [r1, #1]
  406b96:	7043      	strb	r3, [r0, #1]
  406b98:	788b      	ldrb	r3, [r1, #2]
  406b9a:	7083      	strb	r3, [r0, #2]
  406b9c:	4660      	mov	r0, ip
  406b9e:	4770      	bx	lr

00406ba0 <memset>:
  406ba0:	b470      	push	{r4, r5, r6}
  406ba2:	0784      	lsls	r4, r0, #30
  406ba4:	d046      	beq.n	406c34 <memset+0x94>
  406ba6:	1e54      	subs	r4, r2, #1
  406ba8:	2a00      	cmp	r2, #0
  406baa:	d041      	beq.n	406c30 <memset+0x90>
  406bac:	b2cd      	uxtb	r5, r1
  406bae:	4603      	mov	r3, r0
  406bb0:	e002      	b.n	406bb8 <memset+0x18>
  406bb2:	1e62      	subs	r2, r4, #1
  406bb4:	b3e4      	cbz	r4, 406c30 <memset+0x90>
  406bb6:	4614      	mov	r4, r2
  406bb8:	f803 5b01 	strb.w	r5, [r3], #1
  406bbc:	079a      	lsls	r2, r3, #30
  406bbe:	d1f8      	bne.n	406bb2 <memset+0x12>
  406bc0:	2c03      	cmp	r4, #3
  406bc2:	d92e      	bls.n	406c22 <memset+0x82>
  406bc4:	b2cd      	uxtb	r5, r1
  406bc6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406bca:	2c0f      	cmp	r4, #15
  406bcc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406bd0:	d919      	bls.n	406c06 <memset+0x66>
  406bd2:	f103 0210 	add.w	r2, r3, #16
  406bd6:	4626      	mov	r6, r4
  406bd8:	3e10      	subs	r6, #16
  406bda:	2e0f      	cmp	r6, #15
  406bdc:	f842 5c10 	str.w	r5, [r2, #-16]
  406be0:	f842 5c0c 	str.w	r5, [r2, #-12]
  406be4:	f842 5c08 	str.w	r5, [r2, #-8]
  406be8:	f842 5c04 	str.w	r5, [r2, #-4]
  406bec:	f102 0210 	add.w	r2, r2, #16
  406bf0:	d8f2      	bhi.n	406bd8 <memset+0x38>
  406bf2:	f1a4 0210 	sub.w	r2, r4, #16
  406bf6:	f022 020f 	bic.w	r2, r2, #15
  406bfa:	f004 040f 	and.w	r4, r4, #15
  406bfe:	3210      	adds	r2, #16
  406c00:	2c03      	cmp	r4, #3
  406c02:	4413      	add	r3, r2
  406c04:	d90d      	bls.n	406c22 <memset+0x82>
  406c06:	461e      	mov	r6, r3
  406c08:	4622      	mov	r2, r4
  406c0a:	3a04      	subs	r2, #4
  406c0c:	2a03      	cmp	r2, #3
  406c0e:	f846 5b04 	str.w	r5, [r6], #4
  406c12:	d8fa      	bhi.n	406c0a <memset+0x6a>
  406c14:	1f22      	subs	r2, r4, #4
  406c16:	f022 0203 	bic.w	r2, r2, #3
  406c1a:	3204      	adds	r2, #4
  406c1c:	4413      	add	r3, r2
  406c1e:	f004 0403 	and.w	r4, r4, #3
  406c22:	b12c      	cbz	r4, 406c30 <memset+0x90>
  406c24:	b2c9      	uxtb	r1, r1
  406c26:	441c      	add	r4, r3
  406c28:	f803 1b01 	strb.w	r1, [r3], #1
  406c2c:	42a3      	cmp	r3, r4
  406c2e:	d1fb      	bne.n	406c28 <memset+0x88>
  406c30:	bc70      	pop	{r4, r5, r6}
  406c32:	4770      	bx	lr
  406c34:	4614      	mov	r4, r2
  406c36:	4603      	mov	r3, r0
  406c38:	e7c2      	b.n	406bc0 <memset+0x20>
  406c3a:	bf00      	nop

00406c3c <register_fini>:
  406c3c:	4b02      	ldr	r3, [pc, #8]	; (406c48 <register_fini+0xc>)
  406c3e:	b113      	cbz	r3, 406c46 <register_fini+0xa>
  406c40:	4802      	ldr	r0, [pc, #8]	; (406c4c <register_fini+0x10>)
  406c42:	f000 b805 	b.w	406c50 <atexit>
  406c46:	4770      	bx	lr
  406c48:	00000000 	.word	0x00000000
  406c4c:	00406c5d 	.word	0x00406c5d

00406c50 <atexit>:
  406c50:	2300      	movs	r3, #0
  406c52:	4601      	mov	r1, r0
  406c54:	461a      	mov	r2, r3
  406c56:	4618      	mov	r0, r3
  406c58:	f000 b814 	b.w	406c84 <__register_exitproc>

00406c5c <__libc_fini_array>:
  406c5c:	b538      	push	{r3, r4, r5, lr}
  406c5e:	4d07      	ldr	r5, [pc, #28]	; (406c7c <__libc_fini_array+0x20>)
  406c60:	4c07      	ldr	r4, [pc, #28]	; (406c80 <__libc_fini_array+0x24>)
  406c62:	1b2c      	subs	r4, r5, r4
  406c64:	10a4      	asrs	r4, r4, #2
  406c66:	d005      	beq.n	406c74 <__libc_fini_array+0x18>
  406c68:	3c01      	subs	r4, #1
  406c6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406c6e:	4798      	blx	r3
  406c70:	2c00      	cmp	r4, #0
  406c72:	d1f9      	bne.n	406c68 <__libc_fini_array+0xc>
  406c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406c78:	f001 b8a8 	b.w	407dcc <_fini>
  406c7c:	00407ddc 	.word	0x00407ddc
  406c80:	00407dd8 	.word	0x00407dd8

00406c84 <__register_exitproc>:
  406c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406c88:	4c25      	ldr	r4, [pc, #148]	; (406d20 <__register_exitproc+0x9c>)
  406c8a:	6825      	ldr	r5, [r4, #0]
  406c8c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406c90:	4606      	mov	r6, r0
  406c92:	4688      	mov	r8, r1
  406c94:	4692      	mov	sl, r2
  406c96:	4699      	mov	r9, r3
  406c98:	b3c4      	cbz	r4, 406d0c <__register_exitproc+0x88>
  406c9a:	6860      	ldr	r0, [r4, #4]
  406c9c:	281f      	cmp	r0, #31
  406c9e:	dc17      	bgt.n	406cd0 <__register_exitproc+0x4c>
  406ca0:	1c43      	adds	r3, r0, #1
  406ca2:	b176      	cbz	r6, 406cc2 <__register_exitproc+0x3e>
  406ca4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  406ca8:	2201      	movs	r2, #1
  406caa:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  406cae:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  406cb2:	4082      	lsls	r2, r0
  406cb4:	4311      	orrs	r1, r2
  406cb6:	2e02      	cmp	r6, #2
  406cb8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  406cbc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  406cc0:	d01e      	beq.n	406d00 <__register_exitproc+0x7c>
  406cc2:	3002      	adds	r0, #2
  406cc4:	6063      	str	r3, [r4, #4]
  406cc6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  406cca:	2000      	movs	r0, #0
  406ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406cd0:	4b14      	ldr	r3, [pc, #80]	; (406d24 <__register_exitproc+0xa0>)
  406cd2:	b303      	cbz	r3, 406d16 <__register_exitproc+0x92>
  406cd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406cd8:	f3af 8000 	nop.w
  406cdc:	4604      	mov	r4, r0
  406cde:	b1d0      	cbz	r0, 406d16 <__register_exitproc+0x92>
  406ce0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406ce4:	2700      	movs	r7, #0
  406ce6:	e880 0088 	stmia.w	r0, {r3, r7}
  406cea:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406cee:	4638      	mov	r0, r7
  406cf0:	2301      	movs	r3, #1
  406cf2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406cf6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  406cfa:	2e00      	cmp	r6, #0
  406cfc:	d0e1      	beq.n	406cc2 <__register_exitproc+0x3e>
  406cfe:	e7d1      	b.n	406ca4 <__register_exitproc+0x20>
  406d00:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406d04:	430a      	orrs	r2, r1
  406d06:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  406d0a:	e7da      	b.n	406cc2 <__register_exitproc+0x3e>
  406d0c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406d10:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406d14:	e7c1      	b.n	406c9a <__register_exitproc+0x16>
  406d16:	f04f 30ff 	mov.w	r0, #4294967295
  406d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406d1e:	bf00      	nop
  406d20:	00407db4 	.word	0x00407db4
  406d24:	00000000 	.word	0x00000000

00406d28 <reg>:
  406d28:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
  406d38:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
  406d48:	2a292827 67646334 00000049              '()*4cdgI...

00406d54 <hw>:
  406d54:	04000068 01410080 01000000 00001333     h.....A.....3...

00406d64 <test>:
  406d64:	00000083 00004000 00000200 00c800c8     .....@..........
  406d74:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
  406d84:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....

00406d94 <mpu_6500_st_tb>:
  406d94:	0a560a3c 0a8b0a70 0ac10aa6 0af80add     <.V.p...........
  406da4:	0b310b15 0b6b0b4e 0ba50b88 0be10bc3     ..1.N.k.........
  406db4:	0c1e0c00 0c5d0c3d 0c9c0c7c 0cdd0cbd     ....=.].|.......
  406dc4:	0d1f0cfe 0d630d41 0da80d85 0dee0dcb     ....A.c.........
  406dd4:	0e360e12 0e7f0e5a 0eca0ea4 0f160eef     ..6.Z...........
  406de4:	0f630f3c 0fb30f8b 10030fdb 1056102c     <.c.........,.V.
  406df4:	10aa1080 110010d4 1157112b 11b01183     ........+.W.....
  406e04:	120b11de 12681239 12c71297 132712f7     ....9.h.......'.
  406e14:	138a1359 13ef13bc 14551422 14be1489     Y.......".U.....
  406e24:	152914f3 1595155f 160415cd 1676163d     ..)._.......=.v.
  406e34:	16e916af 175f1724 17d8179b 18521815     ....$._.......R.
  406e44:	18cf1891 194f190f 19d11990 1a561a13     ......O.......V.
  406e54:	1ade1a9a 1b681b22 1bf51bae 1c851c3d     ....".h.....=...
  406e64:	1d181cce 1dad1d62 1e461df9 1ee21e94     ....b.....F.....
  406e74:	1f811f31 20231fd1 20c82075 2171211c     1.....# u . .!q!
  406e84:	221d21c7 22cd2274 23802326 243623da     .!."t"."&#.#.#6$
  406e94:	24f12493 25af254f 2671260f 273626d3     .$.$O%.%.&q&.&6'
  406ea4:	2800279b 28ce2867 29a02936 2a762a0b     .'.(g(.(6).).*v*
  406eb4:	2b512ae3 2c302bc0 2d132ca1 2dfb2d86     .*Q+.+0,.,.-.-.-
  406ec4:	2ee82e71 2fd92f60 30cf3053 31ca314c     q...`/./S0.0L1.1
  406ed4:	32ca324a 33d0334c 34da3454 35ea3562     J2.2L3.3T4.4b5.5
  406ee4:	37003674 381b378d 393c38aa 3a6239ce     t6.7.7.8.8<9.9b:
  406ef4:	3b8f3af8 3cc13c27 3dfa3d5d 3f383e98     .:.;'<.<]=.=.>8?
  406f04:	407e3fda 41ca4123 431c4272 447643c8     .?~@#A.ArB.C.CvD
  406f14:	45d64525 473d4689 48ac47f4 4a224966     %E.E.F=G.G.HfI"J
  406f24:	4b9f4adf 4d244c61 4eb14dea 50464f7b     .J.KaL$M.M.N{OFP
  406f34:	51e35114 538952b5 5536545e 56ed5611     .Q.Q.R.S^T6U.V.V
  406f44:	58ac57cb 5a74598f 5c465b5c 5e215d32     .W.X.YtZ\[F\2]!^
  406f54:	60055f12 61f360fb 63eb62ee 65ed64eb     ._.`.`.a.b.c.d.e
  406f64:	67fa66f2 6a116904 6c336b20 6e5f6d48     .f.g.i.j k3lHm_n
  406f74:	70976f7a 72db71b8 752a7401 77857656     zo.p.q.r.t*uVv.w
  406f84:	79ec78b7 7c5f7b24 7edf7d9d 816c8024     .x.y${_|.}.~$.l.

00406f94 <dmp_memory>:
  406f94:	00700000 24000000 02000000 00000300     ..p....$........
  406fa4:	54006500 0000efff 0b0080fa 01008212     .e.T............
  406fb4:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
  406fc4:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
  406fd4:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
  406fe4:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
  406ff4:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
  407004:	00000020 00000000 00000040 00000060      .......@...`...
  407014:	00000c00 6e180c00 92060000 dfc0160a     .......n........
  407024:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
  407034:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
  407044:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
  407054:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
  407064:	00000000 b5421900 a2390000 65b30000     ......B...9....e
  407074:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
  407084:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
  407094:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
  4070a4:	00000100 00003200 000046ff 0000d463     .....2...F..c...
  4070b4:	00000010 0000d604 0000cc04 0000cc04     ................
  4070c4:	72100000 40000000 00000000 00000000     ...r...@........
  4070d4:	02000600 07000500 00000000 00006400     .............d..
  4070e4:	00000000 05000000 64000500 00002000     ...........d. ..
	...
  4070fc:	00400000 00030000 32000000 000098f8     ..@........2....
  40710c:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
  407140:	00100000 00000040 06000000 6ab20000     ....@..........j
  407150:	00000200 83fb0100 00006800 00fcd900     .........h......
  407160:	83fff17c 00000000 00006500 e8036400     |........e...d..
  407170:	28006400 25000000 00000000 0000a016     .d.(...%........
  407180:	00100000 00100000 00002f00 f4010000     ........./......
  407190:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
  4071a8:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
  4071b8:	00000000 00060000 14000000 4d250000     ..............%M
  4071c8:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
  4071e4:	00001b00 00000000 00000000 00000000     ................
  4071f4:	00006400 00000800 00000000 00000000     .d..............
	...
  407254:	00001b00 00000000 00000000 0e000e00     ................
  407264:	c70a0000 00000400 32000000 9cffffff     ...........2....
  407274:	2b0b0000 02000000 01000000 64000000     ...+...........d
  407284:	0000e5ff 00000000 00000000 00000000     ................
  407294:	01000000 00000000 00000100 00000000     ................
  4072a4:	00800100 00800100 00800100 d3262400     .............$&.
	...
  4072bc:	10000600 3c009600 00000000 00000000     .......<........
	...
  4072d4:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
  4072fc:	0084d717 00000003 00000000 00000000     ................
  40730c:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
  40732c:	85180302 00400000 03000000 03000000     ......@.........
	...
  407344:	00000040 00000000 00000000 00000000     @...............
	...
  407378:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
  407394:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
  4073a4:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
  4073b4:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
  4073c4:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
  4073d4:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
  4073e4:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
  4073f4:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
  407404:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
  407414:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
  407424:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
  407434:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
  407444:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
  407454:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
  407464:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
  407474:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
  407484:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
  407494:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
  4074a4:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
  4074b4:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
  4074c4:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
  4074d4:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
  4074e4:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
  4074f4:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
  407504:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
  407514:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
  407524:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
  407534:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
  407544:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
  407554:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
  407564:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
  407574:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
  407584:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
  407594:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
  4075a4:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
  4075b4:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
  4075c4:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
  4075d4:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
  4075e4:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
  4075f4:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
  407604:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
  407614:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
  407624:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
  407634:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
  407644:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
  407654:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
  407664:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
  407674:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
  407684:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
  407694:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
  4076a4:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
  4076b4:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
  4076c4:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
  4076d4:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
  4076e4:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
  4076f4:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
  407704:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
  407714:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
  407724:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
  407734:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
  407744:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
  407754:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
  407764:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
  407774:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
  407784:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
  407794:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
  4077a4:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
  4077b4:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
  4077c4:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
  4077d4:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
  4077e4:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
  4077f4:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
  407804:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
  407814:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
  407824:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
  407834:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
  407844:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
  407854:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
  407864:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
  407874:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
  407884:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
  407894:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
  4078a4:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
  4078b4:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
  4078c4:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
  4078d4:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
  4078e4:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
  4078f4:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
  407904:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
  407914:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
  407924:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
  407934:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
  407944:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
  407954:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
  407964:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
  407974:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
  407984:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
  407994:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
  4079a4:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
  4079b4:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
  4079c4:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
  4079d4:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
  4079e4:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
  4079f4:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
  407a04:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
  407a14:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
  407a24:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
  407a34:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
  407a44:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
  407a54:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
  407a64:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
  407a74:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
  407a84:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
  407a94:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
  407aa4:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
  407ab4:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
  407ac4:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
  407ad4:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
  407ae4:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
  407af4:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
  407b04:	a890d8ff a899890d 21988010 89d82eda     ...........!....
  407b14:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
  407b24:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
  407b34:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
  407b44:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
  407b54:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
  407b64:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
  407b74:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
  407b84:	d800d9a6 0400fff1                                ......

00407b8a <sStartAddress>:
  407b8a:	cd4c0400 c90c006c 5636002c 46260076     ..L.l...,.6Vv.&F
  407b9a:	f2fe0066 f1aac4ab afbbdfdf aab8dfdf     f...............
  407baa:	98b48db3 005d350d aab80000 88b0aaaa     .....5].........
  407bba:	00c7c5c3 b1d80000 a38bf3b9 b409b691     ................
  407bca:	b1da00d9 a38bf3b9 b4dab691 21fb00da              ..............

00407bd8 <npio2_hw>:
  407bd8:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  407be8:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  407bf8:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  407c08:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  407c18:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  407c28:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  407c38:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  407c48:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00407c58 <two_over_pi>:
  407c58:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  407c68:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  407c78:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  407c88:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  407c98:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  407ca8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  407cb8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  407cc8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  407cd8:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  407ce8:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  407cf8:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  407d08:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  407d18:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  407d28:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  407d38:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  407d48:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  407d58:	0060e27b 00c08c6b                       {.`.k...

00407d60 <init_jk>:
  407d60:	00000002 00000003 00000004 00000006     ................

00407d70 <PIo2>:
  407d70:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  407d80:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  407d90:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  407da0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5
  407db0:	00000043                                C...

00407db4 <_global_impure_ptr>:
  407db4:	20000048                                H.. 

00407db8 <_init>:
  407db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407dba:	bf00      	nop
  407dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407dbe:	bc08      	pop	{r3}
  407dc0:	469e      	mov	lr, r3
  407dc2:	4770      	bx	lr

00407dc4 <__init_array_start>:
  407dc4:	00406c3d 	.word	0x00406c3d

00407dc8 <__frame_dummy_init_array_entry>:
  407dc8:	004000e5                                ..@.

00407dcc <_fini>:
  407dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407dce:	bf00      	nop
  407dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407dd2:	bc08      	pop	{r3}
  407dd4:	469e      	mov	lr, r3
  407dd6:	4770      	bx	lr

00407dd8 <__fini_array_start>:
  407dd8:	004000c1 	.word	0x004000c1
