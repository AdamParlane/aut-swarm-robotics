
RobotNoASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007dcc  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000470  20000000  00407dcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b60  20000470  0040823c  00020470  2**2
                  ALLOC
  3 .stack        00000400  20000fd0  00408d9c  00020470  2**0
                  ALLOC
  4 .heap         00000200  200013d0  0040919c  00020470  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002049a  2**0
                  CONTENTS, READONLY
  7 .debug_info   000053c7  00000000  00000000  000204f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000105a  00000000  00000000  000258ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002d7c  00000000  00000000  00026914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005b0  00000000  00000000  00029690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000510  00000000  00000000  00029c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000f4b9  00000000  00000000  0002a150  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007710  00000000  00000000  00039609  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003a107  00000000  00000000  00040d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000019e4  00000000  00000000  0007ae20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200013d0 	.word	0x200013d0
  400004:	00404309 	.word	0x00404309
  400008:	0040438d 	.word	0x0040438d
  40000c:	0040438d 	.word	0x0040438d
  400010:	0040438d 	.word	0x0040438d
  400014:	0040438d 	.word	0x0040438d
  400018:	0040438d 	.word	0x0040438d
	...
  40002c:	0040438d 	.word	0x0040438d
  400030:	0040438d 	.word	0x0040438d
  400034:	00000000 	.word	0x00000000
  400038:	0040438d 	.word	0x0040438d
  40003c:	0040438d 	.word	0x0040438d
  400040:	0040438d 	.word	0x0040438d
  400044:	0040438d 	.word	0x0040438d
  400048:	0040438d 	.word	0x0040438d
  40004c:	0040438d 	.word	0x0040438d
  400050:	0040438d 	.word	0x0040438d
  400054:	0040438d 	.word	0x0040438d
  400058:	0040438d 	.word	0x0040438d
  40005c:	00000000 	.word	0x00000000
  400060:	0040438d 	.word	0x0040438d
  400064:	0040438d 	.word	0x0040438d
  400068:	0040438d 	.word	0x0040438d
  40006c:	0040438d 	.word	0x0040438d
  400070:	0040438d 	.word	0x0040438d
  400074:	0040438d 	.word	0x0040438d
  400078:	0040438d 	.word	0x0040438d
  40007c:	0040438d 	.word	0x0040438d
  400080:	00400399 	.word	0x00400399
  400084:	0040438d 	.word	0x0040438d
  400088:	00000000 	.word	0x00000000
  40008c:	0040438d 	.word	0x0040438d
  400090:	0040438d 	.word	0x0040438d
  400094:	0040438d 	.word	0x0040438d
  400098:	0040438d 	.word	0x0040438d
  40009c:	00403d8d 	.word	0x00403d8d
  4000a0:	0040438d 	.word	0x0040438d
  4000a4:	0040438d 	.word	0x0040438d
  4000a8:	0040438d 	.word	0x0040438d
  4000ac:	0040438d 	.word	0x0040438d
  4000b0:	0040438d 	.word	0x0040438d
  4000b4:	0040438d 	.word	0x0040438d
  4000b8:	0040438d 	.word	0x0040438d
  4000bc:	0040438d 	.word	0x0040438d

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000470 	.word	0x20000470
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00407dcc 	.word	0x00407dcc

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	20000474 	.word	0x20000474
  400110:	00407dcc 	.word	0x00407dcc
  400114:	00407dcc 	.word	0x00407dcc
  400118:	00000000 	.word	0x00000000

0040011c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40011c:	b480      	push	{r7}
  40011e:	b083      	sub	sp, #12
  400120:	af00      	add	r7, sp, #0
  400122:	4603      	mov	r3, r0
  400124:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400126:	4908      	ldr	r1, [pc, #32]	; (400148 <NVIC_EnableIRQ+0x2c>)
  400128:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40012c:	095b      	lsrs	r3, r3, #5
  40012e:	79fa      	ldrb	r2, [r7, #7]
  400130:	f002 021f 	and.w	r2, r2, #31
  400134:	2001      	movs	r0, #1
  400136:	fa00 f202 	lsl.w	r2, r0, r2
  40013a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40013e:	bf00      	nop
  400140:	370c      	adds	r7, #12
  400142:	46bd      	mov	sp, r7
  400144:	bc80      	pop	{r7}
  400146:	4770      	bx	lr
  400148:	e000e100 	.word	0xe000e100

0040014c <InterpretSwarmMessage>:
void UART3_Write(uint8_t data);								//Writes a byte to UART3
void SendXbeeAPIFrame(uint8_t * frame_data, int len);		//Sends an XBee API Frame


void InterpretSwarmMessage(struct message_info message)
{
  40014c:	b480      	push	{r7}
  40014e:	b087      	sub	sp, #28
  400150:	af00      	add	r7, sp, #0
  400152:	1d3b      	adds	r3, r7, #4
  400154:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//copy information from the message info structure to local variables
	int index = message.index;
  400158:	687b      	ldr	r3, [r7, #4]
  40015a:	617b      	str	r3, [r7, #20]
	int length = message.length;
  40015c:	68fb      	ldr	r3, [r7, #12]
  40015e:	613b      	str	r3, [r7, #16]
	newDataFlag = 1;
  400160:	4b06      	ldr	r3, [pc, #24]	; (40017c <InterpretSwarmMessage+0x30>)
  400162:	2201      	movs	r2, #1
  400164:	701a      	strb	r2, [r3, #0]
	if(message.command >= 0xE0)
  400166:	7a3b      	ldrb	r3, [r7, #8]
  400168:	2bdf      	cmp	r3, #223	; 0xdf
  40016a:	d902      	bls.n	400172 <InterpretSwarmMessage+0x26>
		robotState = TEST;
  40016c:	4b04      	ldr	r3, [pc, #16]	; (400180 <InterpretSwarmMessage+0x34>)
  40016e:	2200      	movs	r2, #0
  400170:	701a      	strb	r2, [r3, #0]
}
  400172:	bf00      	nop
  400174:	371c      	adds	r7, #28
  400176:	46bd      	mov	sp, r7
  400178:	bc80      	pop	{r7}
  40017a:	4770      	bx	lr
  40017c:	20000fc8 	.word	0x20000fc8
  400180:	20000fc9 	.word	0x20000fc9

00400184 <InterpretXbeeAPIFrame>:



void InterpretXbeeAPIFrame(struct frame_info frame)
{
  400184:	b580      	push	{r7, lr}
  400186:	b08a      	sub	sp, #40	; 0x28
  400188:	af00      	add	r7, sp, #0
  40018a:	1d3b      	adds	r3, r7, #4
  40018c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//copy information from the frame info structure to local variables
	int index = frame.index;
  400190:	687b      	ldr	r3, [r7, #4]
  400192:	623b      	str	r3, [r7, #32]
	uint8_t frame_type = frame.type;
  400194:	7a3b      	ldrb	r3, [r7, #8]
  400196:	77fb      	strb	r3, [r7, #31]
	int length = frame.length;
  400198:	68fb      	ldr	r3, [r7, #12]
  40019a:	61bb      	str	r3, [r7, #24]

	//Temporary variable to store value from buffer
	uint8_t temp;

	//Behaviour depends on type of frame received
	switch(frame_type)
  40019c:	7ffb      	ldrb	r3, [r7, #31]
  40019e:	3b88      	subs	r3, #136	; 0x88
  4001a0:	2b1b      	cmp	r3, #27
  4001a2:	f200 809a 	bhi.w	4002da <InterpretXbeeAPIFrame+0x156>
  4001a6:	a201      	add	r2, pc, #4	; (adr r2, 4001ac <InterpretXbeeAPIFrame+0x28>)
  4001a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001ac:	004002db 	.word	0x004002db
  4001b0:	004002db 	.word	0x004002db
  4001b4:	004002db 	.word	0x004002db
  4001b8:	004002db 	.word	0x004002db
  4001bc:	004002db 	.word	0x004002db
  4001c0:	004002db 	.word	0x004002db
  4001c4:	004002db 	.word	0x004002db
  4001c8:	004002db 	.word	0x004002db
  4001cc:	0040021d 	.word	0x0040021d
  4001d0:	004002db 	.word	0x004002db
  4001d4:	004002db 	.word	0x004002db
  4001d8:	004002db 	.word	0x004002db
  4001dc:	004002db 	.word	0x004002db
  4001e0:	004002db 	.word	0x004002db
  4001e4:	004002db 	.word	0x004002db
  4001e8:	004002db 	.word	0x004002db
  4001ec:	004002db 	.word	0x004002db
  4001f0:	004002db 	.word	0x004002db
  4001f4:	004002db 	.word	0x004002db
  4001f8:	004002db 	.word	0x004002db
  4001fc:	004002db 	.word	0x004002db
  400200:	004002db 	.word	0x004002db
  400204:	004002db 	.word	0x004002db
  400208:	004002db 	.word	0x004002db
  40020c:	004002db 	.word	0x004002db
  400210:	004002db 	.word	0x004002db
  400214:	004002db 	.word	0x004002db
  400218:	004002db 	.word	0x004002db
			//XBEE: Transmit Status Received (N/H)
			break;
		
		case ZIGBEE_RECEIVE_PACKET:
			//XBEE: Data Packet Received
			FrameBufferOut = index;	//Update the location we read from within the FrameBuffer
  40021c:	4a32      	ldr	r2, [pc, #200]	; (4002e8 <InterpretXbeeAPIFrame+0x164>)
  40021e:	6a3b      	ldr	r3, [r7, #32]
  400220:	6013      	str	r3, [r2, #0]

			//The source's 64-Bit address
			FrameBufferGet(&temp);		
  400222:	f107 0317 	add.w	r3, r7, #23
  400226:	4618      	mov	r0, r3
  400228:	4b30      	ldr	r3, [pc, #192]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  40022a:	4798      	blx	r3
			FrameBufferGet(&temp);
  40022c:	f107 0317 	add.w	r3, r7, #23
  400230:	4618      	mov	r0, r3
  400232:	4b2e      	ldr	r3, [pc, #184]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  400234:	4798      	blx	r3
			FrameBufferGet(&temp);
  400236:	f107 0317 	add.w	r3, r7, #23
  40023a:	4618      	mov	r0, r3
  40023c:	4b2b      	ldr	r3, [pc, #172]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  40023e:	4798      	blx	r3
			FrameBufferGet(&temp);
  400240:	f107 0317 	add.w	r3, r7, #23
  400244:	4618      	mov	r0, r3
  400246:	4b29      	ldr	r3, [pc, #164]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  400248:	4798      	blx	r3
			FrameBufferGet(&temp);
  40024a:	f107 0317 	add.w	r3, r7, #23
  40024e:	4618      	mov	r0, r3
  400250:	4b26      	ldr	r3, [pc, #152]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  400252:	4798      	blx	r3
			FrameBufferGet(&temp);
  400254:	f107 0317 	add.w	r3, r7, #23
  400258:	4618      	mov	r0, r3
  40025a:	4b24      	ldr	r3, [pc, #144]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  40025c:	4798      	blx	r3
			FrameBufferGet(&temp);
  40025e:	f107 0317 	add.w	r3, r7, #23
  400262:	4618      	mov	r0, r3
  400264:	4b21      	ldr	r3, [pc, #132]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  400266:	4798      	blx	r3
			FrameBufferGet(&temp);
  400268:	f107 0317 	add.w	r3, r7, #23
  40026c:	4618      	mov	r0, r3
  40026e:	4b1f      	ldr	r3, [pc, #124]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  400270:	4798      	blx	r3
			
			//The source's 16-Bit address
			FrameBufferGet(&temp);
  400272:	f107 0317 	add.w	r3, r7, #23
  400276:	4618      	mov	r0, r3
  400278:	4b1c      	ldr	r3, [pc, #112]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  40027a:	4798      	blx	r3
			FrameBufferGet(&temp);
  40027c:	f107 0317 	add.w	r3, r7, #23
  400280:	4618      	mov	r0, r3
  400282:	4b1a      	ldr	r3, [pc, #104]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  400284:	4798      	blx	r3
			
			//Receive options
			FrameBufferGet(&temp);	
  400286:	f107 0317 	add.w	r3, r7, #23
  40028a:	4618      	mov	r0, r3
  40028c:	4b17      	ldr	r3, [pc, #92]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  40028e:	4798      	blx	r3
			
			//Received Data
			if(FrameBufferGet(&temp) == 0)
  400290:	f107 0317 	add.w	r3, r7, #23
  400294:	4618      	mov	r0, r3
  400296:	4b15      	ldr	r3, [pc, #84]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  400298:	4798      	blx	r3
  40029a:	4603      	mov	r3, r0
  40029c:	2b00      	cmp	r3, #0
  40029e:	d11e      	bne.n	4002de <InterpretXbeeAPIFrame+0x15a>
			{
				MessageBufferInfoPut(MessageBufferIn,temp,1); //Store information about received message
  4002a0:	4b13      	ldr	r3, [pc, #76]	; (4002f0 <InterpretXbeeAPIFrame+0x16c>)
  4002a2:	681b      	ldr	r3, [r3, #0]
  4002a4:	7df9      	ldrb	r1, [r7, #23]
  4002a6:	2201      	movs	r2, #1
  4002a8:	4618      	mov	r0, r3
  4002aa:	4b12      	ldr	r3, [pc, #72]	; (4002f4 <InterpretXbeeAPIFrame+0x170>)
  4002ac:	4798      	blx	r3
				for(int i = 1; i <= length-12; i++)
  4002ae:	2301      	movs	r3, #1
  4002b0:	627b      	str	r3, [r7, #36]	; 0x24
  4002b2:	e00b      	b.n	4002cc <InterpretXbeeAPIFrame+0x148>
				{
					//Take data from FrameBuffer and put it into the MessageBuffer 
					FrameBufferGet(&temp);
  4002b4:	f107 0317 	add.w	r3, r7, #23
  4002b8:	4618      	mov	r0, r3
  4002ba:	4b0c      	ldr	r3, [pc, #48]	; (4002ec <InterpretXbeeAPIFrame+0x168>)
  4002bc:	4798      	blx	r3
					MessageBufferPut(temp);
  4002be:	7dfb      	ldrb	r3, [r7, #23]
  4002c0:	4618      	mov	r0, r3
  4002c2:	4b0d      	ldr	r3, [pc, #52]	; (4002f8 <InterpretXbeeAPIFrame+0x174>)
  4002c4:	4798      	blx	r3
			
			//Received Data
			if(FrameBufferGet(&temp) == 0)
			{
				MessageBufferInfoPut(MessageBufferIn,temp,1); //Store information about received message
				for(int i = 1; i <= length-12; i++)
  4002c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4002c8:	3301      	adds	r3, #1
  4002ca:	627b      	str	r3, [r7, #36]	; 0x24
  4002cc:	69bb      	ldr	r3, [r7, #24]
  4002ce:	f1a3 020c 	sub.w	r2, r3, #12
  4002d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4002d4:	429a      	cmp	r2, r3
  4002d6:	daed      	bge.n	4002b4 <InterpretXbeeAPIFrame+0x130>
					//Take data from FrameBuffer and put it into the MessageBuffer 
					FrameBufferGet(&temp);
					MessageBufferPut(temp);
				}
			}
			break;
  4002d8:	e001      	b.n	4002de <InterpretXbeeAPIFrame+0x15a>
			//XBEE: Many To One Route Request Indicator Received (N/H);
			break;

		default:
			//WARNING ERROR XBEE: unhandled message received;
			break;
  4002da:	bf00      	nop
  4002dc:	e000      	b.n	4002e0 <InterpretXbeeAPIFrame+0x15c>
					//Take data from FrameBuffer and put it into the MessageBuffer 
					FrameBufferGet(&temp);
					MessageBufferPut(temp);
				}
			}
			break;
  4002de:	bf00      	nop

		default:
			//WARNING ERROR XBEE: unhandled message received;
			break;
	}
}
  4002e0:	bf00      	nop
  4002e2:	3728      	adds	r7, #40	; 0x28
  4002e4:	46bd      	mov	sp, r7
  4002e6:	bd80      	pop	{r7, pc}
  4002e8:	20000fb8 	.word	0x20000fb8
  4002ec:	004008c1 	.word	0x004008c1
  4002f0:	200004fc 	.word	0x200004fc
  4002f4:	00400c01 	.word	0x00400c01
  4002f8:	00400ad9 	.word	0x00400ad9

004002fc <CommunicationSetup>:

void CommunicationSetup(void)
{
  4002fc:	b580      	push	{r7, lr}
  4002fe:	af00      	add	r7, sp, #0
	REG_PMC_PCER0 |= (1 << 16);				//Enable clock access to UART3
  400300:	4a1a      	ldr	r2, [pc, #104]	; (40036c <CommunicationSetup+0x70>)
  400302:	4b1a      	ldr	r3, [pc, #104]	; (40036c <CommunicationSetup+0x70>)
  400304:	681b      	ldr	r3, [r3, #0]
  400306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40030a:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR |= (1<<11)|(1<<10);		//Enable peripheral control of PB10 (URXD3) and PB11 (UTXD3) both connected to peripheral B
  40030c:	4a18      	ldr	r2, [pc, #96]	; (400370 <CommunicationSetup+0x74>)
  40030e:	4b18      	ldr	r3, [pc, #96]	; (400370 <CommunicationSetup+0x74>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
  400316:	6013      	str	r3, [r2, #0]
	REG_UART3_MR |= (0<<14) | (0x4<<9);		//set as no parity, normal mode
  400318:	4a16      	ldr	r2, [pc, #88]	; (400374 <CommunicationSetup+0x78>)
  40031a:	4b16      	ldr	r3, [pc, #88]	; (400374 <CommunicationSetup+0x78>)
  40031c:	681b      	ldr	r3, [r3, #0]
  40031e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400322:	6013      	str	r3, [r2, #0]
	REG_UART3_BRGR = 651;					//Set Baud rate for 9600 from a 100MHZ clock
  400324:	4b14      	ldr	r3, [pc, #80]	; (400378 <CommunicationSetup+0x7c>)
  400326:	f240 228b 	movw	r2, #651	; 0x28b
  40032a:	601a      	str	r2, [r3, #0]
	REG_UART3_CR |= (1<<2)|(1<<3)|(1<<8);	//Reset receiver, transmitter and status bits
  40032c:	4a13      	ldr	r2, [pc, #76]	; (40037c <CommunicationSetup+0x80>)
  40032e:	4b13      	ldr	r3, [pc, #76]	; (40037c <CommunicationSetup+0x80>)
  400330:	681b      	ldr	r3, [r3, #0]
  400332:	f443 7386 	orr.w	r3, r3, #268	; 0x10c
  400336:	6013      	str	r3, [r2, #0]
	REG_UART3_CR |= (1<<4)|(1<<6);			//Enable receiver and transmitter
  400338:	4a10      	ldr	r2, [pc, #64]	; (40037c <CommunicationSetup+0x80>)
  40033a:	4b10      	ldr	r3, [pc, #64]	; (40037c <CommunicationSetup+0x80>)
  40033c:	681b      	ldr	r3, [r3, #0]
  40033e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  400342:	6013      	str	r3, [r2, #0]
	REG_UART3_IER |= (1<<0);				//ENABLE UART RXRDY interrupt
  400344:	4a0e      	ldr	r2, [pc, #56]	; (400380 <CommunicationSetup+0x84>)
  400346:	4b0e      	ldr	r3, [pc, #56]	; (400380 <CommunicationSetup+0x84>)
  400348:	681b      	ldr	r3, [r3, #0]
  40034a:	f043 0301 	orr.w	r3, r3, #1
  40034e:	6013      	str	r3, [r2, #0]
	
	NVIC_EnableIRQ(16);						//ENABLE the UART3 system interrupts
  400350:	2010      	movs	r0, #16
  400352:	4b0c      	ldr	r3, [pc, #48]	; (400384 <CommunicationSetup+0x88>)
  400354:	4798      	blx	r3

	//Initializes buffers to beginning of arrays
	FrameBufferInit();
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <CommunicationSetup+0x8c>)
  400358:	4798      	blx	r3
	FrameBufferInfoInit();
  40035a:	4b0c      	ldr	r3, [pc, #48]	; (40038c <CommunicationSetup+0x90>)
  40035c:	4798      	blx	r3
	MessageBufferInit();
  40035e:	4b0c      	ldr	r3, [pc, #48]	; (400390 <CommunicationSetup+0x94>)
  400360:	4798      	blx	r3
	MessageBufferInfoInit();
  400362:	4b0c      	ldr	r3, [pc, #48]	; (400394 <CommunicationSetup+0x98>)
  400364:	4798      	blx	r3
}
  400366:	bf00      	nop
  400368:	bd80      	pop	{r7, pc}
  40036a:	bf00      	nop
  40036c:	400e0410 	.word	0x400e0410
  400370:	400e1004 	.word	0x400e1004
  400374:	40048004 	.word	0x40048004
  400378:	40048020 	.word	0x40048020
  40037c:	40048000 	.word	0x40048000
  400380:	40048008 	.word	0x40048008
  400384:	0040011d 	.word	0x0040011d
  400388:	00400809 	.word	0x00400809
  40038c:	00400931 	.word	0x00400931
  400390:	00400aad 	.word	0x00400aad
  400394:	00400bd5 	.word	0x00400bd5

00400398 <UART3_Handler>:


/******** UART3 Interrupt Handler ********/
void UART3_Handler(void)
{
  400398:	b580      	push	{r7, lr}
  40039a:	b082      	sub	sp, #8
  40039c:	af00      	add	r7, sp, #0
	static int check;				//Checksum calculation
	static int frame_start_index;	//The position in the FrameBuffer where the data of this XBee Frame is stored
	static int frame_type;			//The type of received XBee Frame
	

	if(REG_UART3_IMR == UART_IMR_RXRDY)	//if we receive data
  40039e:	4b5a      	ldr	r3, [pc, #360]	; (400508 <UART3_Handler+0x170>)
  4003a0:	681b      	ldr	r3, [r3, #0]
  4003a2:	2b01      	cmp	r3, #1
  4003a4:	f040 80ab 	bne.w	4004fe <UART3_Handler+0x166>
	{
		temp = REG_UART3_RHR;	//store the incoming data in a temporary variable 
  4003a8:	4b58      	ldr	r3, [pc, #352]	; (40050c <UART3_Handler+0x174>)
  4003aa:	681b      	ldr	r3, [r3, #0]
  4003ac:	71fb      	strb	r3, [r7, #7]

		if(temp == FRAME_DELIMITER && receiveState != CASE_START ) //if we receive a start byte out of sequence
  4003ae:	79fb      	ldrb	r3, [r7, #7]
  4003b0:	2b7e      	cmp	r3, #126	; 0x7e
  4003b2:	d107      	bne.n	4003c4 <UART3_Handler+0x2c>
  4003b4:	4b56      	ldr	r3, [pc, #344]	; (400510 <UART3_Handler+0x178>)
  4003b6:	781b      	ldrb	r3, [r3, #0]
  4003b8:	2b00      	cmp	r3, #0
  4003ba:	d003      	beq.n	4003c4 <UART3_Handler+0x2c>
		{
			receiveState = CASE_START;	//reset back to the start state	
  4003bc:	4b54      	ldr	r3, [pc, #336]	; (400510 <UART3_Handler+0x178>)
  4003be:	2200      	movs	r2, #0
  4003c0:	701a      	strb	r2, [r3, #0]
  4003c2:	e011      	b.n	4003e8 <UART3_Handler+0x50>
		}
		else if(temp == ESCAPE_BYTE) //if the next byte needs to be escaped
  4003c4:	79fb      	ldrb	r3, [r7, #7]
  4003c6:	2b7d      	cmp	r3, #125	; 0x7d
  4003c8:	d103      	bne.n	4003d2 <UART3_Handler+0x3a>
		{
			escape = true;	//set the flag
  4003ca:	4b52      	ldr	r3, [pc, #328]	; (400514 <UART3_Handler+0x17c>)
  4003cc:	2201      	movs	r2, #1
  4003ce:	701a      	strb	r2, [r3, #0]
  4003d0:	e00a      	b.n	4003e8 <UART3_Handler+0x50>
		}
		else if(escape) //if the current byte needs to be escaped
  4003d2:	4b50      	ldr	r3, [pc, #320]	; (400514 <UART3_Handler+0x17c>)
  4003d4:	781b      	ldrb	r3, [r3, #0]
  4003d6:	2b00      	cmp	r3, #0
  4003d8:	d006      	beq.n	4003e8 <UART3_Handler+0x50>
		{
			temp ^= 0x20;	//reverse the escape procedure
  4003da:	79fb      	ldrb	r3, [r7, #7]
  4003dc:	f083 0320 	eor.w	r3, r3, #32
  4003e0:	71fb      	strb	r3, [r7, #7]
			escape = false;	//reset the flag
  4003e2:	4b4c      	ldr	r3, [pc, #304]	; (400514 <UART3_Handler+0x17c>)
  4003e4:	2200      	movs	r2, #0
  4003e6:	701a      	strb	r2, [r3, #0]
		}

		if(escape == false)	//we only go through the receive states if the data has been escaped
  4003e8:	4b4a      	ldr	r3, [pc, #296]	; (400514 <UART3_Handler+0x17c>)
  4003ea:	781b      	ldrb	r3, [r3, #0]
  4003ec:	f083 0301 	eor.w	r3, r3, #1
  4003f0:	b2db      	uxtb	r3, r3
  4003f2:	2b00      	cmp	r3, #0
  4003f4:	f000 8083 	beq.w	4004fe <UART3_Handler+0x166>
		{
			switch(receiveState)
  4003f8:	4b45      	ldr	r3, [pc, #276]	; (400510 <UART3_Handler+0x178>)
  4003fa:	781b      	ldrb	r3, [r3, #0]
  4003fc:	2b05      	cmp	r3, #5
  4003fe:	d87e      	bhi.n	4004fe <UART3_Handler+0x166>
  400400:	a201      	add	r2, pc, #4	; (adr r2, 400408 <UART3_Handler+0x70>)
  400402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400406:	bf00      	nop
  400408:	00400421 	.word	0x00400421
  40040c:	00400441 	.word	0x00400441
  400410:	00400451 	.word	0x00400451
  400414:	0040045f 	.word	0x0040045f
  400418:	0040048b 	.word	0x0040048b
  40041c:	004004bd 	.word	0x004004bd
			{
				case CASE_START:
					if(temp == FRAME_DELIMITER)
  400420:	79fb      	ldrb	r3, [r7, #7]
  400422:	2b7e      	cmp	r3, #126	; 0x7e
  400424:	d168      	bne.n	4004f8 <UART3_Handler+0x160>
					{
						//reset our book-keeping variables and updates the receive state
						length = 0;
  400426:	4b3c      	ldr	r3, [pc, #240]	; (400518 <UART3_Handler+0x180>)
  400428:	2200      	movs	r2, #0
  40042a:	601a      	str	r2, [r3, #0]
						index = 0;
  40042c:	4b3b      	ldr	r3, [pc, #236]	; (40051c <UART3_Handler+0x184>)
  40042e:	2200      	movs	r2, #0
  400430:	601a      	str	r2, [r3, #0]
						check = 0;
  400432:	4b3b      	ldr	r3, [pc, #236]	; (400520 <UART3_Handler+0x188>)
  400434:	2200      	movs	r2, #0
  400436:	601a      	str	r2, [r3, #0]
						receiveState = CASE_LENGTH_MSB;
  400438:	4b35      	ldr	r3, [pc, #212]	; (400510 <UART3_Handler+0x178>)
  40043a:	2201      	movs	r2, #1
  40043c:	701a      	strb	r2, [r3, #0]
					}
					break;
  40043e:	e05b      	b.n	4004f8 <UART3_Handler+0x160>

				case CASE_LENGTH_MSB:
					//Calculates the length using the first length byte and updates the receive state
					length = temp*256;
  400440:	79fb      	ldrb	r3, [r7, #7]
  400442:	021b      	lsls	r3, r3, #8
  400444:	4a34      	ldr	r2, [pc, #208]	; (400518 <UART3_Handler+0x180>)
  400446:	6013      	str	r3, [r2, #0]
					receiveState = CASE_LENGTH_LSB;
  400448:	4b31      	ldr	r3, [pc, #196]	; (400510 <UART3_Handler+0x178>)
  40044a:	2202      	movs	r2, #2
  40044c:	701a      	strb	r2, [r3, #0]
					break;
  40044e:	e056      	b.n	4004fe <UART3_Handler+0x166>

				case CASE_LENGTH_LSB:
					//Calculates the length using the second length byte and updates the receive state
					length =+ temp;
  400450:	79fb      	ldrb	r3, [r7, #7]
  400452:	4a31      	ldr	r2, [pc, #196]	; (400518 <UART3_Handler+0x180>)
  400454:	6013      	str	r3, [r2, #0]
					receiveState = CASE_FRAME_TYPE;
  400456:	4b2e      	ldr	r3, [pc, #184]	; (400510 <UART3_Handler+0x178>)
  400458:	2203      	movs	r2, #3
  40045a:	701a      	strb	r2, [r3, #0]
					break;
  40045c:	e04f      	b.n	4004fe <UART3_Handler+0x166>

				case CASE_FRAME_TYPE:
					frame_type = temp;					//Receives and stores the Frame type
  40045e:	79fb      	ldrb	r3, [r7, #7]
  400460:	4a30      	ldr	r2, [pc, #192]	; (400524 <UART3_Handler+0x18c>)
  400462:	6013      	str	r3, [r2, #0]
					check += temp;						//Calculates the checksum over the received byte
  400464:	79fa      	ldrb	r2, [r7, #7]
  400466:	4b2e      	ldr	r3, [pc, #184]	; (400520 <UART3_Handler+0x188>)
  400468:	681b      	ldr	r3, [r3, #0]
  40046a:	4413      	add	r3, r2
  40046c:	4a2c      	ldr	r2, [pc, #176]	; (400520 <UART3_Handler+0x188>)
  40046e:	6013      	str	r3, [r2, #0]
					index++;							//Updates the number of received bytes that count towards the XBee frame length
  400470:	4b2a      	ldr	r3, [pc, #168]	; (40051c <UART3_Handler+0x184>)
  400472:	681b      	ldr	r3, [r3, #0]
  400474:	3301      	adds	r3, #1
  400476:	4a29      	ldr	r2, [pc, #164]	; (40051c <UART3_Handler+0x184>)
  400478:	6013      	str	r3, [r2, #0]
					frame_start_index = FrameBufferIn;	//Stores the location of the Frame Data in the FrameBuffer
  40047a:	4b2b      	ldr	r3, [pc, #172]	; (400528 <UART3_Handler+0x190>)
  40047c:	681b      	ldr	r3, [r3, #0]
  40047e:	4a2b      	ldr	r2, [pc, #172]	; (40052c <UART3_Handler+0x194>)
  400480:	6013      	str	r3, [r2, #0]
					receiveState = CASE_DATA;			//Updates the receive state
  400482:	4b23      	ldr	r3, [pc, #140]	; (400510 <UART3_Handler+0x178>)
  400484:	2204      	movs	r2, #4
  400486:	701a      	strb	r2, [r3, #0]
					break;
  400488:	e039      	b.n	4004fe <UART3_Handler+0x166>

				case CASE_DATA:	
					FrameBufferPut(temp); //Stores the Received data into the FrameBuffer
  40048a:	79fb      	ldrb	r3, [r7, #7]
  40048c:	4618      	mov	r0, r3
  40048e:	4b28      	ldr	r3, [pc, #160]	; (400530 <UART3_Handler+0x198>)
  400490:	4798      	blx	r3
					check += temp; //Calculates the checksum over the received byte
  400492:	79fa      	ldrb	r2, [r7, #7]
  400494:	4b22      	ldr	r3, [pc, #136]	; (400520 <UART3_Handler+0x188>)
  400496:	681b      	ldr	r3, [r3, #0]
  400498:	4413      	add	r3, r2
  40049a:	4a21      	ldr	r2, [pc, #132]	; (400520 <UART3_Handler+0x188>)
  40049c:	6013      	str	r3, [r2, #0]
					index++; //Updates the number of received bytes that count towards the XBee frame length
  40049e:	4b1f      	ldr	r3, [pc, #124]	; (40051c <UART3_Handler+0x184>)
  4004a0:	681b      	ldr	r3, [r3, #0]
  4004a2:	3301      	adds	r3, #1
  4004a4:	4a1d      	ldr	r2, [pc, #116]	; (40051c <UART3_Handler+0x184>)
  4004a6:	6013      	str	r3, [r2, #0]

					if(index == length) //Checks if we have received all the data and if we have updates the receive state
  4004a8:	4b1c      	ldr	r3, [pc, #112]	; (40051c <UART3_Handler+0x184>)
  4004aa:	681a      	ldr	r2, [r3, #0]
  4004ac:	4b1a      	ldr	r3, [pc, #104]	; (400518 <UART3_Handler+0x180>)
  4004ae:	681b      	ldr	r3, [r3, #0]
  4004b0:	429a      	cmp	r2, r3
  4004b2:	d123      	bne.n	4004fc <UART3_Handler+0x164>
					{
						receiveState = CASE_CHECKSUM;
  4004b4:	4b16      	ldr	r3, [pc, #88]	; (400510 <UART3_Handler+0x178>)
  4004b6:	2205      	movs	r2, #5
  4004b8:	701a      	strb	r2, [r3, #0]
					}
					
					break;
  4004ba:	e01f      	b.n	4004fc <UART3_Handler+0x164>
				
				case CASE_CHECKSUM:
					check += temp;		//Calculates the checksum over the received byte
  4004bc:	79fa      	ldrb	r2, [r7, #7]
  4004be:	4b18      	ldr	r3, [pc, #96]	; (400520 <UART3_Handler+0x188>)
  4004c0:	681b      	ldr	r3, [r3, #0]
  4004c2:	4413      	add	r3, r2
  4004c4:	4a16      	ldr	r2, [pc, #88]	; (400520 <UART3_Handler+0x188>)
  4004c6:	6013      	str	r3, [r2, #0]
					check &= 0xFF;		//Final Step of checksum calculation for XBee Frame
  4004c8:	4b15      	ldr	r3, [pc, #84]	; (400520 <UART3_Handler+0x188>)
  4004ca:	681b      	ldr	r3, [r3, #0]
  4004cc:	b2db      	uxtb	r3, r3
  4004ce:	4a14      	ldr	r2, [pc, #80]	; (400520 <UART3_Handler+0x188>)
  4004d0:	6013      	str	r3, [r2, #0]
					if(check == 0xFF)	//Verifies the calculated checksum value
  4004d2:	4b13      	ldr	r3, [pc, #76]	; (400520 <UART3_Handler+0x188>)
  4004d4:	681b      	ldr	r3, [r3, #0]
  4004d6:	2bff      	cmp	r3, #255	; 0xff
  4004d8:	d10a      	bne.n	4004f0 <UART3_Handler+0x158>
					{
						FrameBufferInfoPut(frame_start_index, frame_type, index -1); //Stores Frame info in buffer
  4004da:	4b14      	ldr	r3, [pc, #80]	; (40052c <UART3_Handler+0x194>)
  4004dc:	6818      	ldr	r0, [r3, #0]
  4004de:	4b11      	ldr	r3, [pc, #68]	; (400524 <UART3_Handler+0x18c>)
  4004e0:	681b      	ldr	r3, [r3, #0]
  4004e2:	b2d9      	uxtb	r1, r3
  4004e4:	4b0d      	ldr	r3, [pc, #52]	; (40051c <UART3_Handler+0x184>)
  4004e6:	681b      	ldr	r3, [r3, #0]
  4004e8:	3b01      	subs	r3, #1
  4004ea:	461a      	mov	r2, r3
  4004ec:	4b11      	ldr	r3, [pc, #68]	; (400534 <UART3_Handler+0x19c>)
  4004ee:	4798      	blx	r3
					}
					receiveState = CASE_START; //Resets receive state d
  4004f0:	4b07      	ldr	r3, [pc, #28]	; (400510 <UART3_Handler+0x178>)
  4004f2:	2200      	movs	r2, #0
  4004f4:	701a      	strb	r2, [r3, #0]
				break;
  4004f6:	e002      	b.n	4004fe <UART3_Handler+0x166>
						length = 0;
						index = 0;
						check = 0;
						receiveState = CASE_LENGTH_MSB;
					}
					break;
  4004f8:	bf00      	nop
  4004fa:	e000      	b.n	4004fe <UART3_Handler+0x166>
					if(index == length) //Checks if we have received all the data and if we have updates the receive state
					{
						receiveState = CASE_CHECKSUM;
					}
					
					break;
  4004fc:	bf00      	nop
					receiveState = CASE_START; //Resets receive state d
				break;
			}
		}
	}
}
  4004fe:	bf00      	nop
  400500:	3708      	adds	r7, #8
  400502:	46bd      	mov	sp, r7
  400504:	bd80      	pop	{r7, pc}
  400506:	bf00      	nop
  400508:	40048010 	.word	0x40048010
  40050c:	40048018 	.word	0x40048018
  400510:	2000048c 	.word	0x2000048c
  400514:	2000048d 	.word	0x2000048d
  400518:	20000490 	.word	0x20000490
  40051c:	20000494 	.word	0x20000494
  400520:	20000498 	.word	0x20000498
  400524:	2000049c 	.word	0x2000049c
  400528:	20000fc4 	.word	0x20000fc4
  40052c:	200004a0 	.word	0x200004a0
  400530:	00400835 	.word	0x00400835
  400534:	0040095d 	.word	0x0040095d

00400538 <UART3_Write>:

void UART3_Write(uint8_t data)
{
  400538:	b480      	push	{r7}
  40053a:	b083      	sub	sp, #12
  40053c:	af00      	add	r7, sp, #0
  40053e:	4603      	mov	r3, r0
  400540:	71fb      	strb	r3, [r7, #7]
	while(!(REG_UART3_SR & (1<<1)));	//wait till TXRDY
  400542:	bf00      	nop
  400544:	4b06      	ldr	r3, [pc, #24]	; (400560 <UART3_Write+0x28>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	f003 0302 	and.w	r3, r3, #2
  40054c:	2b00      	cmp	r3, #0
  40054e:	d0f9      	beq.n	400544 <UART3_Write+0xc>
	REG_UART3_THR = data;				//place data in TX register
  400550:	4a04      	ldr	r2, [pc, #16]	; (400564 <UART3_Write+0x2c>)
  400552:	79fb      	ldrb	r3, [r7, #7]
  400554:	6013      	str	r3, [r2, #0]
}
  400556:	bf00      	nop
  400558:	370c      	adds	r7, #12
  40055a:	46bd      	mov	sp, r7
  40055c:	bc80      	pop	{r7}
  40055e:	4770      	bx	lr
  400560:	40048014 	.word	0x40048014
  400564:	4004801c 	.word	0x4004801c

00400568 <SendXbeeAPIFrame>:

void SendXbeeAPIFrame(uint8_t * frame_data, int len)
{
  400568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40056c:	b08b      	sub	sp, #44	; 0x2c
  40056e:	af00      	add	r7, sp, #0
  400570:	6078      	str	r0, [r7, #4]
  400572:	6039      	str	r1, [r7, #0]
  400574:	466a      	mov	r2, sp
  400576:	4691      	mov	r9, r2
	uint16_t length = len;		//length of API Frame Data
  400578:	683a      	ldr	r2, [r7, #0]
  40057a:	837a      	strh	r2, [r7, #26]
	uint8_t data[length + 4];	//Array to store the full Frame
  40057c:	8b7a      	ldrh	r2, [r7, #26]
  40057e:	f102 0804 	add.w	r8, r2, #4
  400582:	f108 32ff 	add.w	r2, r8, #4294967295
  400586:	617a      	str	r2, [r7, #20]
  400588:	4642      	mov	r2, r8
  40058a:	4611      	mov	r1, r2
  40058c:	f04f 0200 	mov.w	r2, #0
  400590:	00d6      	lsls	r6, r2, #3
  400592:	ea46 7651 	orr.w	r6, r6, r1, lsr #29
  400596:	00cd      	lsls	r5, r1, #3
  400598:	4642      	mov	r2, r8
  40059a:	4611      	mov	r1, r2
  40059c:	f04f 0200 	mov.w	r2, #0
  4005a0:	00d4      	lsls	r4, r2, #3
  4005a2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
  4005a6:	00cb      	lsls	r3, r1, #3
  4005a8:	4643      	mov	r3, r8
  4005aa:	3307      	adds	r3, #7
  4005ac:	08db      	lsrs	r3, r3, #3
  4005ae:	00db      	lsls	r3, r3, #3
  4005b0:	ebad 0d03 	sub.w	sp, sp, r3
  4005b4:	466b      	mov	r3, sp
  4005b6:	3300      	adds	r3, #0
  4005b8:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;		//Variable to store checksum calculation
  4005ba:	2300      	movs	r3, #0
  4005bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t data_length;

	//Forms XBee Frame Header with start delimiter and length
	data[0] = FRAME_DELIMITER;
  4005c0:	693b      	ldr	r3, [r7, #16]
  4005c2:	227e      	movs	r2, #126	; 0x7e
  4005c4:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t) (length >> 7) & 0xFF;
  4005c6:	8b7b      	ldrh	r3, [r7, #26]
  4005c8:	09db      	lsrs	r3, r3, #7
  4005ca:	b29b      	uxth	r3, r3
  4005cc:	b2da      	uxtb	r2, r3
  4005ce:	693b      	ldr	r3, [r7, #16]
  4005d0:	705a      	strb	r2, [r3, #1]
	data[2] = length & 0xFF;
  4005d2:	8b7b      	ldrh	r3, [r7, #26]
  4005d4:	b2da      	uxtb	r2, r3
  4005d6:	693b      	ldr	r3, [r7, #16]
  4005d8:	709a      	strb	r2, [r3, #2]

	//Copies frame data into the full frame array
	memcpy(data + 3, frame_data, length);
  4005da:	693b      	ldr	r3, [r7, #16]
  4005dc:	3303      	adds	r3, #3
  4005de:	8b7a      	ldrh	r2, [r7, #26]
  4005e0:	6879      	ldr	r1, [r7, #4]
  4005e2:	4618      	mov	r0, r3
  4005e4:	4b30      	ldr	r3, [pc, #192]	; (4006a8 <SendXbeeAPIFrame+0x140>)
  4005e6:	4798      	blx	r3
	
	//Calculates the checksum over the frame data array
	for(int i = 0; i < length; i++)
  4005e8:	2300      	movs	r3, #0
  4005ea:	623b      	str	r3, [r7, #32]
  4005ec:	e00b      	b.n	400606 <SendXbeeAPIFrame+0x9e>
	{
		checksum += frame_data[i];
  4005ee:	6a3b      	ldr	r3, [r7, #32]
  4005f0:	687a      	ldr	r2, [r7, #4]
  4005f2:	4413      	add	r3, r2
  4005f4:	781a      	ldrb	r2, [r3, #0]
  4005f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4005fa:	4413      	add	r3, r2
  4005fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Copies frame data into the full frame array
	memcpy(data + 3, frame_data, length);
	
	//Calculates the checksum over the frame data array
	for(int i = 0; i < length; i++)
  400600:	6a3b      	ldr	r3, [r7, #32]
  400602:	3301      	adds	r3, #1
  400604:	623b      	str	r3, [r7, #32]
  400606:	8b7a      	ldrh	r2, [r7, #26]
  400608:	6a3b      	ldr	r3, [r7, #32]
  40060a:	429a      	cmp	r2, r3
  40060c:	dcef      	bgt.n	4005ee <SendXbeeAPIFrame+0x86>
	{
		checksum += frame_data[i];
	}
	
	data[length+3] = 0xFF - checksum;	//Completes final step in checksum calculation and copies it to the full frame array
  40060e:	8b7b      	ldrh	r3, [r7, #26]
  400610:	3303      	adds	r3, #3
  400612:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  400616:	43d2      	mvns	r2, r2
  400618:	b2d1      	uxtb	r1, r2
  40061a:	693a      	ldr	r2, [r7, #16]
  40061c:	54d1      	strb	r1, [r2, r3]
	data_length = sizeof(data);			//Gets the length of full message
  40061e:	4643      	mov	r3, r8
  400620:	73fb      	strb	r3, [r7, #15]
	UART3_Write(data[0]);				//Writes the Frame Delimiter as this shouldn't be escaped
  400622:	693b      	ldr	r3, [r7, #16]
  400624:	781b      	ldrb	r3, [r3, #0]
  400626:	4618      	mov	r0, r3
  400628:	4b20      	ldr	r3, [pc, #128]	; (4006ac <SendXbeeAPIFrame+0x144>)
  40062a:	4798      	blx	r3

	//Sends the message out the UART, escaping characters on the fly as needed
	for(int i = 1; i <data_length; i++)
  40062c:	2301      	movs	r3, #1
  40062e:	61fb      	str	r3, [r7, #28]
  400630:	e02f      	b.n	400692 <SendXbeeAPIFrame+0x12a>
	{
		//Checks for bytes that need to be escaped
		if(data[i] == 0x7E || data[i] == 0x7D || data[i] == 0x11 || data[i] == 0x13) 
  400632:	693a      	ldr	r2, [r7, #16]
  400634:	69fb      	ldr	r3, [r7, #28]
  400636:	4413      	add	r3, r2
  400638:	781b      	ldrb	r3, [r3, #0]
  40063a:	2b7e      	cmp	r3, #126	; 0x7e
  40063c:	d011      	beq.n	400662 <SendXbeeAPIFrame+0xfa>
  40063e:	693a      	ldr	r2, [r7, #16]
  400640:	69fb      	ldr	r3, [r7, #28]
  400642:	4413      	add	r3, r2
  400644:	781b      	ldrb	r3, [r3, #0]
  400646:	2b7d      	cmp	r3, #125	; 0x7d
  400648:	d00b      	beq.n	400662 <SendXbeeAPIFrame+0xfa>
  40064a:	693a      	ldr	r2, [r7, #16]
  40064c:	69fb      	ldr	r3, [r7, #28]
  40064e:	4413      	add	r3, r2
  400650:	781b      	ldrb	r3, [r3, #0]
  400652:	2b11      	cmp	r3, #17
  400654:	d005      	beq.n	400662 <SendXbeeAPIFrame+0xfa>
  400656:	693a      	ldr	r2, [r7, #16]
  400658:	69fb      	ldr	r3, [r7, #28]
  40065a:	4413      	add	r3, r2
  40065c:	781b      	ldrb	r3, [r3, #0]
  40065e:	2b13      	cmp	r3, #19
  400660:	d10d      	bne.n	40067e <SendXbeeAPIFrame+0x116>
		{
			UART3_Write(ESCAPE_BYTE);	//Writes the escape byte
  400662:	207d      	movs	r0, #125	; 0x7d
  400664:	4b11      	ldr	r3, [pc, #68]	; (4006ac <SendXbeeAPIFrame+0x144>)
  400666:	4798      	blx	r3
			UART3_Write(data[i]^0x20);	//Writes the escaped byte
  400668:	693a      	ldr	r2, [r7, #16]
  40066a:	69fb      	ldr	r3, [r7, #28]
  40066c:	4413      	add	r3, r2
  40066e:	781b      	ldrb	r3, [r3, #0]
  400670:	f083 0320 	eor.w	r3, r3, #32
  400674:	b2db      	uxtb	r3, r3
  400676:	4618      	mov	r0, r3
  400678:	4b0c      	ldr	r3, [pc, #48]	; (4006ac <SendXbeeAPIFrame+0x144>)
  40067a:	4798      	blx	r3
  40067c:	e006      	b.n	40068c <SendXbeeAPIFrame+0x124>
		}
		else
		{
			UART3_Write(data[i]);	//Writes the byte
  40067e:	693a      	ldr	r2, [r7, #16]
  400680:	69fb      	ldr	r3, [r7, #28]
  400682:	4413      	add	r3, r2
  400684:	781b      	ldrb	r3, [r3, #0]
  400686:	4618      	mov	r0, r3
  400688:	4b08      	ldr	r3, [pc, #32]	; (4006ac <SendXbeeAPIFrame+0x144>)
  40068a:	4798      	blx	r3
	data[length+3] = 0xFF - checksum;	//Completes final step in checksum calculation and copies it to the full frame array
	data_length = sizeof(data);			//Gets the length of full message
	UART3_Write(data[0]);				//Writes the Frame Delimiter as this shouldn't be escaped

	//Sends the message out the UART, escaping characters on the fly as needed
	for(int i = 1; i <data_length; i++)
  40068c:	69fb      	ldr	r3, [r7, #28]
  40068e:	3301      	adds	r3, #1
  400690:	61fb      	str	r3, [r7, #28]
  400692:	7bfa      	ldrb	r2, [r7, #15]
  400694:	69fb      	ldr	r3, [r7, #28]
  400696:	429a      	cmp	r2, r3
  400698:	dccb      	bgt.n	400632 <SendXbeeAPIFrame+0xca>
  40069a:	46cd      	mov	sp, r9
		else
		{
			UART3_Write(data[i]);	//Writes the byte
		}
	}
}
  40069c:	bf00      	nop
  40069e:	372c      	adds	r7, #44	; 0x2c
  4006a0:	46bd      	mov	sp, r7
  4006a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4006a6:	bf00      	nop
  4006a8:	00406a5d 	.word	0x00406a5d
  4006ac:	00400539 	.word	0x00400539

004006b0 <SendXbeeAPITransmitRequest>:

//Sends an XBee Transmit Request Frame
void SendXbeeAPITransmitRequest(uint64_t destination_64, uint16_t destination_16, uint8_t *data, uint8_t  bytes)
{
  4006b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006b4:	b095      	sub	sp, #84	; 0x54
  4006b6:	af00      	add	r7, sp, #0
  4006b8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
  4006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  4006be:	4613      	mov	r3, r2
  4006c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  4006c2:	466b      	mov	r3, sp
  4006c4:	607b      	str	r3, [r7, #4]
	//array to store message
	uint8_t frame_data[bytes + 14];
  4006c6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
  4006ca:	f103 020e 	add.w	r2, r3, #14
  4006ce:	1e53      	subs	r3, r2, #1
  4006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  4006d2:	4613      	mov	r3, r2
  4006d4:	f04f 0400 	mov.w	r4, #0
  4006d8:	00e6      	lsls	r6, r4, #3
  4006da:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  4006de:	00dd      	lsls	r5, r3, #3
  4006e0:	4613      	mov	r3, r2
  4006e2:	f04f 0400 	mov.w	r4, #0
  4006e6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  4006ea:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  4006ee:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  4006f2:	4613      	mov	r3, r2
  4006f4:	3307      	adds	r3, #7
  4006f6:	08db      	lsrs	r3, r3, #3
  4006f8:	00db      	lsls	r3, r3, #3
  4006fa:	ebad 0d03 	sub.w	sp, sp, r3
  4006fe:	466b      	mov	r3, sp
  400700:	3300      	adds	r3, #0
  400702:	64bb      	str	r3, [r7, #72]	; 0x48

	frame_data[0] = ZIGBEE_TRANSMIT_REQUEST;	//Frame type
  400704:	6cba      	ldr	r2, [r7, #72]	; 0x48
  400706:	2310      	movs	r3, #16
  400708:	7013      	strb	r3, [r2, #0]
	frame_data[1] = 150;						//frame ID (assigned arbitrary at the moment)
  40070a:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40070c:	2396      	movs	r3, #150	; 0x96
  40070e:	7053      	strb	r3, [r2, #1]

	//Destination 64-Bit Address
	frame_data[2] = (destination_64 & (0xFF00000000000000)) >> 56;
  400710:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400714:	0e22      	lsrs	r2, r4, #24
  400716:	623a      	str	r2, [r7, #32]
  400718:	2200      	movs	r2, #0
  40071a:	627a      	str	r2, [r7, #36]	; 0x24
  40071c:	f897 3020 	ldrb.w	r3, [r7, #32]
  400720:	6cba      	ldr	r2, [r7, #72]	; 0x48
  400722:	7093      	strb	r3, [r2, #2]
	frame_data[3] = (destination_64 & (0xFF000000000000)) >> 48;
  400724:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400728:	0c22      	lsrs	r2, r4, #16
  40072a:	61ba      	str	r2, [r7, #24]
  40072c:	2200      	movs	r2, #0
  40072e:	61fa      	str	r2, [r7, #28]
  400730:	7e3a      	ldrb	r2, [r7, #24]
  400732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400734:	70da      	strb	r2, [r3, #3]
	frame_data[4] = (destination_64 & (0xFF0000000000)) >> 40;
  400736:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  40073a:	0a22      	lsrs	r2, r4, #8
  40073c:	613a      	str	r2, [r7, #16]
  40073e:	2200      	movs	r2, #0
  400740:	617a      	str	r2, [r7, #20]
  400742:	7c3a      	ldrb	r2, [r7, #16]
  400744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400746:	711a      	strb	r2, [r3, #4]
	frame_data[5] = (destination_64 & (0xFF00000000)) >> 32;
  400748:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  40074c:	0022      	movs	r2, r4
  40074e:	60ba      	str	r2, [r7, #8]
  400750:	2200      	movs	r2, #0
  400752:	60fa      	str	r2, [r7, #12]
  400754:	7a3a      	ldrb	r2, [r7, #8]
  400756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400758:	715a      	strb	r2, [r3, #5]
	frame_data[6] = (destination_64 & (0xFF000000)) >> 24;
  40075a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  40075e:	0e1a      	lsrs	r2, r3, #24
  400760:	633a      	str	r2, [r7, #48]	; 0x30
  400762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  400764:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400768:	633a      	str	r2, [r7, #48]	; 0x30
  40076a:	0e22      	lsrs	r2, r4, #24
  40076c:	637a      	str	r2, [r7, #52]	; 0x34
  40076e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
  400772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400774:	719a      	strb	r2, [r3, #6]
	frame_data[7] = (destination_64 & (0xFF0000)) >> 16;
  400776:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  40077a:	0c1a      	lsrs	r2, r3, #16
  40077c:	62ba      	str	r2, [r7, #40]	; 0x28
  40077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  400780:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  400784:	62ba      	str	r2, [r7, #40]	; 0x28
  400786:	0c22      	lsrs	r2, r4, #16
  400788:	62fa      	str	r2, [r7, #44]	; 0x2c
  40078a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  40078e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400790:	71da      	strb	r2, [r3, #7]
	frame_data[8] = (destination_64 & (0xFF00)) >> 8;
  400792:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  400796:	ea4f 2a13 	mov.w	sl, r3, lsr #8
  40079a:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
  40079e:	ea4f 2b14 	mov.w	fp, r4, lsr #8
  4007a2:	fa5f f28a 	uxtb.w	r2, sl
  4007a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007a8:	721a      	strb	r2, [r3, #8]
	frame_data[9] = destination_64 & (0xFF);
  4007aa:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
  4007ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007b0:	725a      	strb	r2, [r3, #9]

	//Destination 16-Bit Address
	frame_data[10] = (destination_16 & (0xFF00)) >> 8;
  4007b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
  4007b4:	0a1b      	lsrs	r3, r3, #8
  4007b6:	b29b      	uxth	r3, r3
  4007b8:	b2da      	uxtb	r2, r3
  4007ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007bc:	729a      	strb	r2, [r3, #10]
	frame_data[11] = destination_16 & (0xFF);
  4007be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
  4007c0:	b2da      	uxtb	r2, r3
  4007c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007c4:	72da      	strb	r2, [r3, #11]

	//Broadcast radius
	frame_data[12] = 0x00;  
  4007c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007c8:	2200      	movs	r2, #0
  4007ca:	731a      	strb	r2, [r3, #12]

	//Options
	frame_data[13] = 0x00;  
  4007cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007ce:	2200      	movs	r2, #0
  4007d0:	735a      	strb	r2, [r3, #13]

	//Copies message data to frame array
	memcpy(frame_data + 14, data, bytes);
  4007d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007d4:	330e      	adds	r3, #14
  4007d6:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
  4007da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4007dc:	4618      	mov	r0, r3
  4007de:	4b08      	ldr	r3, [pc, #32]	; (400800 <SendXbeeAPITransmitRequest+0x150>)
  4007e0:	4798      	blx	r3

	//Sends the message
	SendXbeeAPIFrame(frame_data,bytes+14);
  4007e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
  4007e4:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
  4007e8:	330e      	adds	r3, #14
  4007ea:	4619      	mov	r1, r3
  4007ec:	4610      	mov	r0, r2
  4007ee:	4b05      	ldr	r3, [pc, #20]	; (400804 <SendXbeeAPITransmitRequest+0x154>)
  4007f0:	4798      	blx	r3
  4007f2:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
  4007f6:	bf00      	nop
  4007f8:	3754      	adds	r7, #84	; 0x54
  4007fa:	46bd      	mov	sp, r7
  4007fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400800:	00406a5d 	.word	0x00406a5d
  400804:	00400569 	.word	0x00400569

00400808 <FrameBufferInit>:


/****** Buffer functions *******/

void FrameBufferInit(void)
{
  400808:	b480      	push	{r7}
  40080a:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	FrameBufferIn = 0;
  40080c:	4b06      	ldr	r3, [pc, #24]	; (400828 <FrameBufferInit+0x20>)
  40080e:	2200      	movs	r2, #0
  400810:	601a      	str	r2, [r3, #0]
	FrameBufferOut = 0;
  400812:	4b06      	ldr	r3, [pc, #24]	; (40082c <FrameBufferInit+0x24>)
  400814:	2200      	movs	r2, #0
  400816:	601a      	str	r2, [r3, #0]
	FrameBufferUse = 0;
  400818:	4b05      	ldr	r3, [pc, #20]	; (400830 <FrameBufferInit+0x28>)
  40081a:	2200      	movs	r2, #0
  40081c:	601a      	str	r2, [r3, #0]
}
  40081e:	bf00      	nop
  400820:	46bd      	mov	sp, r7
  400822:	bc80      	pop	{r7}
  400824:	4770      	bx	lr
  400826:	bf00      	nop
  400828:	20000fc4 	.word	0x20000fc4
  40082c:	20000fb8 	.word	0x20000fb8
  400830:	20000fcc 	.word	0x20000fcc

00400834 <FrameBufferPut>:

int FrameBufferPut(uint8_t new)
{
  400834:	b480      	push	{r7}
  400836:	b083      	sub	sp, #12
  400838:	af00      	add	r7, sp, #0
  40083a:	4603      	mov	r3, r0
  40083c:	71fb      	strb	r3, [r7, #7]
	//Check if the Buffer is full
	if(FrameBufferIn == (( FrameBufferOut - 1 + FRAME_BUFFER_SIZE) % FRAME_BUFFER_SIZE))
  40083e:	4b1b      	ldr	r3, [pc, #108]	; (4008ac <FrameBufferPut+0x78>)
  400840:	681b      	ldr	r3, [r3, #0]
  400842:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
  400846:	4b1a      	ldr	r3, [pc, #104]	; (4008b0 <FrameBufferPut+0x7c>)
  400848:	fb83 1302 	smull	r1, r3, r3, r2
  40084c:	1219      	asrs	r1, r3, #8
  40084e:	17d3      	asrs	r3, r2, #31
  400850:	1acb      	subs	r3, r1, r3
  400852:	f240 31e9 	movw	r1, #1001	; 0x3e9
  400856:	fb01 f303 	mul.w	r3, r1, r3
  40085a:	1ad3      	subs	r3, r2, r3
  40085c:	4a15      	ldr	r2, [pc, #84]	; (4008b4 <FrameBufferPut+0x80>)
  40085e:	6812      	ldr	r2, [r2, #0]
  400860:	4293      	cmp	r3, r2
  400862:	d102      	bne.n	40086a <FrameBufferPut+0x36>
	{
		return -1; // FrameBuffer Full
  400864:	f04f 33ff 	mov.w	r3, #4294967295
  400868:	e01a      	b.n	4008a0 <FrameBufferPut+0x6c>
	}

	//Put the new byte in to the buffer
	FrameBuffer[FrameBufferIn] = new;
  40086a:	4b12      	ldr	r3, [pc, #72]	; (4008b4 <FrameBufferPut+0x80>)
  40086c:	681b      	ldr	r3, [r3, #0]
  40086e:	4912      	ldr	r1, [pc, #72]	; (4008b8 <FrameBufferPut+0x84>)
  400870:	79fa      	ldrb	r2, [r7, #7]
  400872:	54ca      	strb	r2, [r1, r3]

	//Update our buffer variables
	FrameBufferIn = (FrameBufferIn + 1) % FRAME_BUFFER_SIZE;
  400874:	4b0f      	ldr	r3, [pc, #60]	; (4008b4 <FrameBufferPut+0x80>)
  400876:	681b      	ldr	r3, [r3, #0]
  400878:	1c5a      	adds	r2, r3, #1
  40087a:	4b0d      	ldr	r3, [pc, #52]	; (4008b0 <FrameBufferPut+0x7c>)
  40087c:	fb83 1302 	smull	r1, r3, r3, r2
  400880:	1219      	asrs	r1, r3, #8
  400882:	17d3      	asrs	r3, r2, #31
  400884:	1acb      	subs	r3, r1, r3
  400886:	f240 31e9 	movw	r1, #1001	; 0x3e9
  40088a:	fb01 f303 	mul.w	r3, r1, r3
  40088e:	1ad3      	subs	r3, r2, r3
  400890:	4a08      	ldr	r2, [pc, #32]	; (4008b4 <FrameBufferPut+0x80>)
  400892:	6013      	str	r3, [r2, #0]
	FrameBufferUse++;
  400894:	4b09      	ldr	r3, [pc, #36]	; (4008bc <FrameBufferPut+0x88>)
  400896:	681b      	ldr	r3, [r3, #0]
  400898:	3301      	adds	r3, #1
  40089a:	4a08      	ldr	r2, [pc, #32]	; (4008bc <FrameBufferPut+0x88>)
  40089c:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  40089e:	2300      	movs	r3, #0
}
  4008a0:	4618      	mov	r0, r3
  4008a2:	370c      	adds	r7, #12
  4008a4:	46bd      	mov	sp, r7
  4008a6:	bc80      	pop	{r7}
  4008a8:	4770      	bx	lr
  4008aa:	bf00      	nop
  4008ac:	20000fb8 	.word	0x20000fb8
  4008b0:	4178749f 	.word	0x4178749f
  4008b4:	20000fc4 	.word	0x20000fc4
  4008b8:	20000504 	.word	0x20000504
  4008bc:	20000fcc 	.word	0x20000fcc

004008c0 <FrameBufferGet>:

int FrameBufferGet(uint8_t *old)
{
  4008c0:	b480      	push	{r7}
  4008c2:	b083      	sub	sp, #12
  4008c4:	af00      	add	r7, sp, #0
  4008c6:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(FrameBufferIn == FrameBufferOut)
  4008c8:	4b14      	ldr	r3, [pc, #80]	; (40091c <FrameBufferGet+0x5c>)
  4008ca:	681a      	ldr	r2, [r3, #0]
  4008cc:	4b14      	ldr	r3, [pc, #80]	; (400920 <FrameBufferGet+0x60>)
  4008ce:	681b      	ldr	r3, [r3, #0]
  4008d0:	429a      	cmp	r2, r3
  4008d2:	d102      	bne.n	4008da <FrameBufferGet+0x1a>
	{
		return -1; // FrameBuffer Empty - nothing to get
  4008d4:	f04f 33ff 	mov.w	r3, #4294967295
  4008d8:	e01b      	b.n	400912 <FrameBufferGet+0x52>
	}
	
	//fetch the info struct from the buffer
	*old = FrameBuffer[FrameBufferOut];
  4008da:	4b11      	ldr	r3, [pc, #68]	; (400920 <FrameBufferGet+0x60>)
  4008dc:	681b      	ldr	r3, [r3, #0]
  4008de:	4a11      	ldr	r2, [pc, #68]	; (400924 <FrameBufferGet+0x64>)
  4008e0:	5cd2      	ldrb	r2, [r2, r3]
  4008e2:	687b      	ldr	r3, [r7, #4]
  4008e4:	701a      	strb	r2, [r3, #0]

	//Update our buffer variables
	FrameBufferOut = (FrameBufferOut + 1) % FRAME_BUFFER_SIZE;
  4008e6:	4b0e      	ldr	r3, [pc, #56]	; (400920 <FrameBufferGet+0x60>)
  4008e8:	681b      	ldr	r3, [r3, #0]
  4008ea:	1c5a      	adds	r2, r3, #1
  4008ec:	4b0e      	ldr	r3, [pc, #56]	; (400928 <FrameBufferGet+0x68>)
  4008ee:	fb83 1302 	smull	r1, r3, r3, r2
  4008f2:	1219      	asrs	r1, r3, #8
  4008f4:	17d3      	asrs	r3, r2, #31
  4008f6:	1acb      	subs	r3, r1, r3
  4008f8:	f240 31e9 	movw	r1, #1001	; 0x3e9
  4008fc:	fb01 f303 	mul.w	r3, r1, r3
  400900:	1ad3      	subs	r3, r2, r3
  400902:	4a07      	ldr	r2, [pc, #28]	; (400920 <FrameBufferGet+0x60>)
  400904:	6013      	str	r3, [r2, #0]
	FrameBufferUse--;
  400906:	4b09      	ldr	r3, [pc, #36]	; (40092c <FrameBufferGet+0x6c>)
  400908:	681b      	ldr	r3, [r3, #0]
  40090a:	3b01      	subs	r3, #1
  40090c:	4a07      	ldr	r2, [pc, #28]	; (40092c <FrameBufferGet+0x6c>)
  40090e:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400910:	2300      	movs	r3, #0
}
  400912:	4618      	mov	r0, r3
  400914:	370c      	adds	r7, #12
  400916:	46bd      	mov	sp, r7
  400918:	bc80      	pop	{r7}
  40091a:	4770      	bx	lr
  40091c:	20000fc4 	.word	0x20000fc4
  400920:	20000fb8 	.word	0x20000fb8
  400924:	20000504 	.word	0x20000504
  400928:	4178749f 	.word	0x4178749f
  40092c:	20000fcc 	.word	0x20000fcc

00400930 <FrameBufferInfoInit>:

void FrameBufferInfoInit(void)
{
  400930:	b480      	push	{r7}
  400932:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	FrameBufferInfoIn = 0;
  400934:	4b06      	ldr	r3, [pc, #24]	; (400950 <FrameBufferInfoInit+0x20>)
  400936:	2200      	movs	r2, #0
  400938:	601a      	str	r2, [r3, #0]
	FrameBufferInfoOut = 0;
  40093a:	4b06      	ldr	r3, [pc, #24]	; (400954 <FrameBufferInfoInit+0x24>)
  40093c:	2200      	movs	r2, #0
  40093e:	601a      	str	r2, [r3, #0]
	FrameBufferInfoUse = 0;
  400940:	4b05      	ldr	r3, [pc, #20]	; (400958 <FrameBufferInfoInit+0x28>)
  400942:	2200      	movs	r2, #0
  400944:	601a      	str	r2, [r3, #0]
}
  400946:	bf00      	nop
  400948:	46bd      	mov	sp, r7
  40094a:	bc80      	pop	{r7}
  40094c:	4770      	bx	lr
  40094e:	bf00      	nop
  400950:	20000fbc 	.word	0x20000fbc
  400954:	20000fc0 	.word	0x20000fc0
  400958:	200004f4 	.word	0x200004f4

0040095c <FrameBufferInfoPut>:

int FrameBufferInfoPut(int ind, uint8_t typ, int len)
{
  40095c:	b490      	push	{r4, r7}
  40095e:	b084      	sub	sp, #16
  400960:	af00      	add	r7, sp, #0
  400962:	60f8      	str	r0, [r7, #12]
  400964:	460b      	mov	r3, r1
  400966:	607a      	str	r2, [r7, #4]
  400968:	72fb      	strb	r3, [r7, #11]
	//Check if the Buffer is full
	if(FrameBufferInfoIn == (( FrameBufferInfoOut -1 + FRAME_BUFFER_INFO_SIZE) % FRAME_BUFFER_INFO_SIZE))
  40096a:	4b2a      	ldr	r3, [pc, #168]	; (400a14 <FrameBufferInfoPut+0xb8>)
  40096c:	681b      	ldr	r3, [r3, #0]
  40096e:	f103 0232 	add.w	r2, r3, #50	; 0x32
  400972:	4b29      	ldr	r3, [pc, #164]	; (400a18 <FrameBufferInfoPut+0xbc>)
  400974:	fb82 3403 	smull	r3, r4, r2, r3
  400978:	1913      	adds	r3, r2, r4
  40097a:	1159      	asrs	r1, r3, #5
  40097c:	17d3      	asrs	r3, r2, #31
  40097e:	1ac9      	subs	r1, r1, r3
  400980:	460b      	mov	r3, r1
  400982:	005b      	lsls	r3, r3, #1
  400984:	440b      	add	r3, r1
  400986:	0119      	lsls	r1, r3, #4
  400988:	440b      	add	r3, r1
  40098a:	1ad1      	subs	r1, r2, r3
  40098c:	4b23      	ldr	r3, [pc, #140]	; (400a1c <FrameBufferInfoPut+0xc0>)
  40098e:	681b      	ldr	r3, [r3, #0]
  400990:	4299      	cmp	r1, r3
  400992:	d102      	bne.n	40099a <FrameBufferInfoPut+0x3e>
	{
		return -1; // FrameBufferInfo Full
  400994:	f04f 33ff 	mov.w	r3, #4294967295
  400998:	e037      	b.n	400a0a <FrameBufferInfoPut+0xae>
	}

	//Put the new data in to the buffer
	FrameBufferInfo[FrameBufferInfoIn].index = ind;
  40099a:	4b20      	ldr	r3, [pc, #128]	; (400a1c <FrameBufferInfoPut+0xc0>)
  40099c:	681a      	ldr	r2, [r3, #0]
  40099e:	4920      	ldr	r1, [pc, #128]	; (400a20 <FrameBufferInfoPut+0xc4>)
  4009a0:	4613      	mov	r3, r2
  4009a2:	005b      	lsls	r3, r3, #1
  4009a4:	4413      	add	r3, r2
  4009a6:	009b      	lsls	r3, r3, #2
  4009a8:	440b      	add	r3, r1
  4009aa:	68fa      	ldr	r2, [r7, #12]
  4009ac:	601a      	str	r2, [r3, #0]
	FrameBufferInfo[FrameBufferInfoIn].type = typ;
  4009ae:	4b1b      	ldr	r3, [pc, #108]	; (400a1c <FrameBufferInfoPut+0xc0>)
  4009b0:	681a      	ldr	r2, [r3, #0]
  4009b2:	491b      	ldr	r1, [pc, #108]	; (400a20 <FrameBufferInfoPut+0xc4>)
  4009b4:	4613      	mov	r3, r2
  4009b6:	005b      	lsls	r3, r3, #1
  4009b8:	4413      	add	r3, r2
  4009ba:	009b      	lsls	r3, r3, #2
  4009bc:	440b      	add	r3, r1
  4009be:	3304      	adds	r3, #4
  4009c0:	7afa      	ldrb	r2, [r7, #11]
  4009c2:	701a      	strb	r2, [r3, #0]
	FrameBufferInfo[FrameBufferInfoIn].length = len;
  4009c4:	4b15      	ldr	r3, [pc, #84]	; (400a1c <FrameBufferInfoPut+0xc0>)
  4009c6:	681a      	ldr	r2, [r3, #0]
  4009c8:	4915      	ldr	r1, [pc, #84]	; (400a20 <FrameBufferInfoPut+0xc4>)
  4009ca:	4613      	mov	r3, r2
  4009cc:	005b      	lsls	r3, r3, #1
  4009ce:	4413      	add	r3, r2
  4009d0:	009b      	lsls	r3, r3, #2
  4009d2:	440b      	add	r3, r1
  4009d4:	3308      	adds	r3, #8
  4009d6:	687a      	ldr	r2, [r7, #4]
  4009d8:	601a      	str	r2, [r3, #0]

	//Update our buffer variables
	FrameBufferInfoIn = (FrameBufferInfoIn + 1) % FRAME_BUFFER_INFO_SIZE;
  4009da:	4b10      	ldr	r3, [pc, #64]	; (400a1c <FrameBufferInfoPut+0xc0>)
  4009dc:	681b      	ldr	r3, [r3, #0]
  4009de:	1c5a      	adds	r2, r3, #1
  4009e0:	4b0d      	ldr	r3, [pc, #52]	; (400a18 <FrameBufferInfoPut+0xbc>)
  4009e2:	fb82 3403 	smull	r3, r4, r2, r3
  4009e6:	1913      	adds	r3, r2, r4
  4009e8:	1159      	asrs	r1, r3, #5
  4009ea:	17d3      	asrs	r3, r2, #31
  4009ec:	1ac9      	subs	r1, r1, r3
  4009ee:	460b      	mov	r3, r1
  4009f0:	005b      	lsls	r3, r3, #1
  4009f2:	440b      	add	r3, r1
  4009f4:	0119      	lsls	r1, r3, #4
  4009f6:	440b      	add	r3, r1
  4009f8:	1ad1      	subs	r1, r2, r3
  4009fa:	4b08      	ldr	r3, [pc, #32]	; (400a1c <FrameBufferInfoPut+0xc0>)
  4009fc:	6019      	str	r1, [r3, #0]
	FrameBufferInfoUse++;
  4009fe:	4b09      	ldr	r3, [pc, #36]	; (400a24 <FrameBufferInfoPut+0xc8>)
  400a00:	681b      	ldr	r3, [r3, #0]
  400a02:	3301      	adds	r3, #1
  400a04:	4a07      	ldr	r2, [pc, #28]	; (400a24 <FrameBufferInfoPut+0xc8>)
  400a06:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400a08:	2300      	movs	r3, #0
}
  400a0a:	4618      	mov	r0, r3
  400a0c:	3710      	adds	r7, #16
  400a0e:	46bd      	mov	sp, r7
  400a10:	bc90      	pop	{r4, r7}
  400a12:	4770      	bx	lr
  400a14:	20000fc0 	.word	0x20000fc0
  400a18:	a0a0a0a1 	.word	0xa0a0a0a1
  400a1c:	20000fbc 	.word	0x20000fbc
  400a20:	200008f0 	.word	0x200008f0
  400a24:	200004f4 	.word	0x200004f4

00400a28 <FrameBufferInfoGetFull>:

int FrameBufferInfoGetFull(struct frame_info * info)
{
  400a28:	b490      	push	{r4, r7}
  400a2a:	b082      	sub	sp, #8
  400a2c:	af00      	add	r7, sp, #0
  400a2e:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(FrameBufferInfoIn == FrameBufferInfoOut)
  400a30:	4b19      	ldr	r3, [pc, #100]	; (400a98 <FrameBufferInfoGetFull+0x70>)
  400a32:	681a      	ldr	r2, [r3, #0]
  400a34:	4b19      	ldr	r3, [pc, #100]	; (400a9c <FrameBufferInfoGetFull+0x74>)
  400a36:	681b      	ldr	r3, [r3, #0]
  400a38:	429a      	cmp	r2, r3
  400a3a:	d102      	bne.n	400a42 <FrameBufferInfoGetFull+0x1a>
	{
		return -1; // FrameBufferInfo Empty - nothing to get
  400a3c:	f04f 33ff 	mov.w	r3, #4294967295
  400a40:	e024      	b.n	400a8c <FrameBufferInfoGetFull+0x64>
	}

	//fetch the info struct from the buffer
	*info = FrameBufferInfo[FrameBufferInfoOut];
  400a42:	4b16      	ldr	r3, [pc, #88]	; (400a9c <FrameBufferInfoGetFull+0x74>)
  400a44:	681a      	ldr	r2, [r3, #0]
  400a46:	6878      	ldr	r0, [r7, #4]
  400a48:	4915      	ldr	r1, [pc, #84]	; (400aa0 <FrameBufferInfoGetFull+0x78>)
  400a4a:	4613      	mov	r3, r2
  400a4c:	005b      	lsls	r3, r3, #1
  400a4e:	4413      	add	r3, r2
  400a50:	009b      	lsls	r3, r3, #2
  400a52:	18ca      	adds	r2, r1, r3
  400a54:	4603      	mov	r3, r0
  400a56:	ca07      	ldmia	r2, {r0, r1, r2}
  400a58:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Update our buffer variables
	FrameBufferInfoOut = (FrameBufferInfoOut + 1) % FRAME_BUFFER_INFO_SIZE;
  400a5c:	4b0f      	ldr	r3, [pc, #60]	; (400a9c <FrameBufferInfoGetFull+0x74>)
  400a5e:	681b      	ldr	r3, [r3, #0]
  400a60:	1c5a      	adds	r2, r3, #1
  400a62:	4b10      	ldr	r3, [pc, #64]	; (400aa4 <FrameBufferInfoGetFull+0x7c>)
  400a64:	fb82 3403 	smull	r3, r4, r2, r3
  400a68:	1913      	adds	r3, r2, r4
  400a6a:	1159      	asrs	r1, r3, #5
  400a6c:	17d3      	asrs	r3, r2, #31
  400a6e:	1ac9      	subs	r1, r1, r3
  400a70:	460b      	mov	r3, r1
  400a72:	005b      	lsls	r3, r3, #1
  400a74:	440b      	add	r3, r1
  400a76:	0119      	lsls	r1, r3, #4
  400a78:	440b      	add	r3, r1
  400a7a:	1ad1      	subs	r1, r2, r3
  400a7c:	4b07      	ldr	r3, [pc, #28]	; (400a9c <FrameBufferInfoGetFull+0x74>)
  400a7e:	6019      	str	r1, [r3, #0]
	FrameBufferInfoUse--;
  400a80:	4b09      	ldr	r3, [pc, #36]	; (400aa8 <FrameBufferInfoGetFull+0x80>)
  400a82:	681b      	ldr	r3, [r3, #0]
  400a84:	3b01      	subs	r3, #1
  400a86:	4a08      	ldr	r2, [pc, #32]	; (400aa8 <FrameBufferInfoGetFull+0x80>)
  400a88:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400a8a:	2300      	movs	r3, #0
}
  400a8c:	4618      	mov	r0, r3
  400a8e:	3708      	adds	r7, #8
  400a90:	46bd      	mov	sp, r7
  400a92:	bc90      	pop	{r4, r7}
  400a94:	4770      	bx	lr
  400a96:	bf00      	nop
  400a98:	20000fbc 	.word	0x20000fbc
  400a9c:	20000fc0 	.word	0x20000fc0
  400aa0:	200008f0 	.word	0x200008f0
  400aa4:	a0a0a0a1 	.word	0xa0a0a0a1
  400aa8:	200004f4 	.word	0x200004f4

00400aac <MessageBufferInit>:

void MessageBufferInit(void)
{
  400aac:	b480      	push	{r7}
  400aae:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	MessageBufferIn = 0;
  400ab0:	4b06      	ldr	r3, [pc, #24]	; (400acc <MessageBufferInit+0x20>)
  400ab2:	2200      	movs	r2, #0
  400ab4:	601a      	str	r2, [r3, #0]
	MessageBufferOut = 0;
  400ab6:	4b06      	ldr	r3, [pc, #24]	; (400ad0 <MessageBufferInit+0x24>)
  400ab8:	2200      	movs	r2, #0
  400aba:	601a      	str	r2, [r3, #0]
	MessageBufferUse = 0;
  400abc:	4b05      	ldr	r3, [pc, #20]	; (400ad4 <MessageBufferInit+0x28>)
  400abe:	2200      	movs	r2, #0
  400ac0:	601a      	str	r2, [r3, #0]
}
  400ac2:	bf00      	nop
  400ac4:	46bd      	mov	sp, r7
  400ac6:	bc80      	pop	{r7}
  400ac8:	4770      	bx	lr
  400aca:	bf00      	nop
  400acc:	200004fc 	.word	0x200004fc
  400ad0:	20000b58 	.word	0x20000b58
  400ad4:	200004f8 	.word	0x200004f8

00400ad8 <MessageBufferPut>:

int MessageBufferPut(uint8_t new)
{
  400ad8:	b480      	push	{r7}
  400ada:	b083      	sub	sp, #12
  400adc:	af00      	add	r7, sp, #0
  400ade:	4603      	mov	r3, r0
  400ae0:	71fb      	strb	r3, [r7, #7]
	//Check if the Buffer is full
	if(MessageBufferIn == (( MessageBufferOut - 1 + MESSAGE_BUFFER_SIZE) % MESSAGE_BUFFER_SIZE))
  400ae2:	4b1b      	ldr	r3, [pc, #108]	; (400b50 <MessageBufferPut+0x78>)
  400ae4:	681b      	ldr	r3, [r3, #0]
  400ae6:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
  400aea:	4b1a      	ldr	r3, [pc, #104]	; (400b54 <MessageBufferPut+0x7c>)
  400aec:	fb83 1302 	smull	r1, r3, r3, r2
  400af0:	1199      	asrs	r1, r3, #6
  400af2:	17d3      	asrs	r3, r2, #31
  400af4:	1acb      	subs	r3, r1, r3
  400af6:	f240 11f5 	movw	r1, #501	; 0x1f5
  400afa:	fb01 f303 	mul.w	r3, r1, r3
  400afe:	1ad3      	subs	r3, r2, r3
  400b00:	4a15      	ldr	r2, [pc, #84]	; (400b58 <MessageBufferPut+0x80>)
  400b02:	6812      	ldr	r2, [r2, #0]
  400b04:	4293      	cmp	r3, r2
  400b06:	d102      	bne.n	400b0e <MessageBufferPut+0x36>
	{
		return -1; // MessageBuffer Full
  400b08:	f04f 33ff 	mov.w	r3, #4294967295
  400b0c:	e01a      	b.n	400b44 <MessageBufferPut+0x6c>
	}

	//Put the new byte in to the buffer
	MessageBuffer[MessageBufferIn] = new;
  400b0e:	4b12      	ldr	r3, [pc, #72]	; (400b58 <MessageBufferPut+0x80>)
  400b10:	681b      	ldr	r3, [r3, #0]
  400b12:	4912      	ldr	r1, [pc, #72]	; (400b5c <MessageBufferPut+0x84>)
  400b14:	79fa      	ldrb	r2, [r7, #7]
  400b16:	54ca      	strb	r2, [r1, r3]

	//Update our buffer variables
	MessageBufferIn = (MessageBufferIn + 1) % MESSAGE_BUFFER_SIZE;
  400b18:	4b0f      	ldr	r3, [pc, #60]	; (400b58 <MessageBufferPut+0x80>)
  400b1a:	681b      	ldr	r3, [r3, #0]
  400b1c:	1c5a      	adds	r2, r3, #1
  400b1e:	4b0d      	ldr	r3, [pc, #52]	; (400b54 <MessageBufferPut+0x7c>)
  400b20:	fb83 1302 	smull	r1, r3, r3, r2
  400b24:	1199      	asrs	r1, r3, #6
  400b26:	17d3      	asrs	r3, r2, #31
  400b28:	1acb      	subs	r3, r1, r3
  400b2a:	f240 11f5 	movw	r1, #501	; 0x1f5
  400b2e:	fb01 f303 	mul.w	r3, r1, r3
  400b32:	1ad3      	subs	r3, r2, r3
  400b34:	4a08      	ldr	r2, [pc, #32]	; (400b58 <MessageBufferPut+0x80>)
  400b36:	6013      	str	r3, [r2, #0]
	MessageBufferUse++;
  400b38:	4b09      	ldr	r3, [pc, #36]	; (400b60 <MessageBufferPut+0x88>)
  400b3a:	681b      	ldr	r3, [r3, #0]
  400b3c:	3301      	adds	r3, #1
  400b3e:	4a08      	ldr	r2, [pc, #32]	; (400b60 <MessageBufferPut+0x88>)
  400b40:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400b42:	2300      	movs	r3, #0
}
  400b44:	4618      	mov	r0, r3
  400b46:	370c      	adds	r7, #12
  400b48:	46bd      	mov	sp, r7
  400b4a:	bc80      	pop	{r7}
  400b4c:	4770      	bx	lr
  400b4e:	bf00      	nop
  400b50:	20000b58 	.word	0x20000b58
  400b54:	20b3dd41 	.word	0x20b3dd41
  400b58:	200004fc 	.word	0x200004fc
  400b5c:	20000dc0 	.word	0x20000dc0
  400b60:	200004f8 	.word	0x200004f8

00400b64 <MessageBufferGet>:

int MessageBufferGet(uint8_t *old)
{
  400b64:	b480      	push	{r7}
  400b66:	b083      	sub	sp, #12
  400b68:	af00      	add	r7, sp, #0
  400b6a:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(MessageBufferIn == MessageBufferOut)
  400b6c:	4b14      	ldr	r3, [pc, #80]	; (400bc0 <MessageBufferGet+0x5c>)
  400b6e:	681a      	ldr	r2, [r3, #0]
  400b70:	4b14      	ldr	r3, [pc, #80]	; (400bc4 <MessageBufferGet+0x60>)
  400b72:	681b      	ldr	r3, [r3, #0]
  400b74:	429a      	cmp	r2, r3
  400b76:	d102      	bne.n	400b7e <MessageBufferGet+0x1a>
	{
		return -1; // MessageBuffer Empty - nothing to get
  400b78:	f04f 33ff 	mov.w	r3, #4294967295
  400b7c:	e01b      	b.n	400bb6 <MessageBufferGet+0x52>
	}

	//fetch the byte from the buffer
	*old = MessageBuffer[MessageBufferOut];
  400b7e:	4b11      	ldr	r3, [pc, #68]	; (400bc4 <MessageBufferGet+0x60>)
  400b80:	681b      	ldr	r3, [r3, #0]
  400b82:	4a11      	ldr	r2, [pc, #68]	; (400bc8 <MessageBufferGet+0x64>)
  400b84:	5cd2      	ldrb	r2, [r2, r3]
  400b86:	687b      	ldr	r3, [r7, #4]
  400b88:	701a      	strb	r2, [r3, #0]

	//Update our buffer variables
	MessageBufferOut = (MessageBufferOut + 1) % MESSAGE_BUFFER_SIZE;
  400b8a:	4b0e      	ldr	r3, [pc, #56]	; (400bc4 <MessageBufferGet+0x60>)
  400b8c:	681b      	ldr	r3, [r3, #0]
  400b8e:	1c5a      	adds	r2, r3, #1
  400b90:	4b0e      	ldr	r3, [pc, #56]	; (400bcc <MessageBufferGet+0x68>)
  400b92:	fb83 1302 	smull	r1, r3, r3, r2
  400b96:	1199      	asrs	r1, r3, #6
  400b98:	17d3      	asrs	r3, r2, #31
  400b9a:	1acb      	subs	r3, r1, r3
  400b9c:	f240 11f5 	movw	r1, #501	; 0x1f5
  400ba0:	fb01 f303 	mul.w	r3, r1, r3
  400ba4:	1ad3      	subs	r3, r2, r3
  400ba6:	4a07      	ldr	r2, [pc, #28]	; (400bc4 <MessageBufferGet+0x60>)
  400ba8:	6013      	str	r3, [r2, #0]
	MessageBufferUse--;
  400baa:	4b09      	ldr	r3, [pc, #36]	; (400bd0 <MessageBufferGet+0x6c>)
  400bac:	681b      	ldr	r3, [r3, #0]
  400bae:	3b01      	subs	r3, #1
  400bb0:	4a07      	ldr	r2, [pc, #28]	; (400bd0 <MessageBufferGet+0x6c>)
  400bb2:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400bb4:	2300      	movs	r3, #0
}
  400bb6:	4618      	mov	r0, r3
  400bb8:	370c      	adds	r7, #12
  400bba:	46bd      	mov	sp, r7
  400bbc:	bc80      	pop	{r7}
  400bbe:	4770      	bx	lr
  400bc0:	200004fc 	.word	0x200004fc
  400bc4:	20000b58 	.word	0x20000b58
  400bc8:	20000dc0 	.word	0x20000dc0
  400bcc:	20b3dd41 	.word	0x20b3dd41
  400bd0:	200004f8 	.word	0x200004f8

00400bd4 <MessageBufferInfoInit>:

void MessageBufferInfoInit(void)
{
  400bd4:	b480      	push	{r7}
  400bd6:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	MessageBufferInfoIn = 0;
  400bd8:	4b06      	ldr	r3, [pc, #24]	; (400bf4 <MessageBufferInfoInit+0x20>)
  400bda:	2200      	movs	r2, #0
  400bdc:	601a      	str	r2, [r3, #0]
	MessageBufferInfoOut = 0;
  400bde:	4b06      	ldr	r3, [pc, #24]	; (400bf8 <MessageBufferInfoInit+0x24>)
  400be0:	2200      	movs	r2, #0
  400be2:	601a      	str	r2, [r3, #0]
	MessageBufferInfoUse = 0;
  400be4:	4b05      	ldr	r3, [pc, #20]	; (400bfc <MessageBufferInfoInit+0x28>)
  400be6:	2200      	movs	r2, #0
  400be8:	601a      	str	r2, [r3, #0]
}
  400bea:	bf00      	nop
  400bec:	46bd      	mov	sp, r7
  400bee:	bc80      	pop	{r7}
  400bf0:	4770      	bx	lr
  400bf2:	bf00      	nop
  400bf4:	20000b54 	.word	0x20000b54
  400bf8:	20000500 	.word	0x20000500
  400bfc:	200004f0 	.word	0x200004f0

00400c00 <MessageBufferInfoPut>:

int MessageBufferInfoPut(int ind, uint8_t cmd, int len)
{
  400c00:	b490      	push	{r4, r7}
  400c02:	b084      	sub	sp, #16
  400c04:	af00      	add	r7, sp, #0
  400c06:	60f8      	str	r0, [r7, #12]
  400c08:	460b      	mov	r3, r1
  400c0a:	607a      	str	r2, [r7, #4]
  400c0c:	72fb      	strb	r3, [r7, #11]
	//Check if the Buffer is full
	if(MessageBufferInfoIn == (( MessageBufferInfoOut - 1 + MESSAGE_BUFFER_INFO_SIZE) % MESSAGE_BUFFER_INFO_SIZE))
  400c0e:	4b2a      	ldr	r3, [pc, #168]	; (400cb8 <MessageBufferInfoPut+0xb8>)
  400c10:	681b      	ldr	r3, [r3, #0]
  400c12:	f103 0232 	add.w	r2, r3, #50	; 0x32
  400c16:	4b29      	ldr	r3, [pc, #164]	; (400cbc <MessageBufferInfoPut+0xbc>)
  400c18:	fb82 3403 	smull	r3, r4, r2, r3
  400c1c:	1913      	adds	r3, r2, r4
  400c1e:	1159      	asrs	r1, r3, #5
  400c20:	17d3      	asrs	r3, r2, #31
  400c22:	1ac9      	subs	r1, r1, r3
  400c24:	460b      	mov	r3, r1
  400c26:	005b      	lsls	r3, r3, #1
  400c28:	440b      	add	r3, r1
  400c2a:	0119      	lsls	r1, r3, #4
  400c2c:	440b      	add	r3, r1
  400c2e:	1ad1      	subs	r1, r2, r3
  400c30:	4b23      	ldr	r3, [pc, #140]	; (400cc0 <MessageBufferInfoPut+0xc0>)
  400c32:	681b      	ldr	r3, [r3, #0]
  400c34:	4299      	cmp	r1, r3
  400c36:	d102      	bne.n	400c3e <MessageBufferInfoPut+0x3e>
	{
		return -1; // MessageBufferInfo Full
  400c38:	f04f 33ff 	mov.w	r3, #4294967295
  400c3c:	e037      	b.n	400cae <MessageBufferInfoPut+0xae>
	}
	
	//Put the new data in to the buffer
	MessageBufferInfo[MessageBufferInfoIn].index = ind;
  400c3e:	4b20      	ldr	r3, [pc, #128]	; (400cc0 <MessageBufferInfoPut+0xc0>)
  400c40:	681a      	ldr	r2, [r3, #0]
  400c42:	4920      	ldr	r1, [pc, #128]	; (400cc4 <MessageBufferInfoPut+0xc4>)
  400c44:	4613      	mov	r3, r2
  400c46:	005b      	lsls	r3, r3, #1
  400c48:	4413      	add	r3, r2
  400c4a:	009b      	lsls	r3, r3, #2
  400c4c:	440b      	add	r3, r1
  400c4e:	68fa      	ldr	r2, [r7, #12]
  400c50:	601a      	str	r2, [r3, #0]
	MessageBufferInfo[MessageBufferInfoIn].command = cmd;
  400c52:	4b1b      	ldr	r3, [pc, #108]	; (400cc0 <MessageBufferInfoPut+0xc0>)
  400c54:	681a      	ldr	r2, [r3, #0]
  400c56:	491b      	ldr	r1, [pc, #108]	; (400cc4 <MessageBufferInfoPut+0xc4>)
  400c58:	4613      	mov	r3, r2
  400c5a:	005b      	lsls	r3, r3, #1
  400c5c:	4413      	add	r3, r2
  400c5e:	009b      	lsls	r3, r3, #2
  400c60:	440b      	add	r3, r1
  400c62:	3304      	adds	r3, #4
  400c64:	7afa      	ldrb	r2, [r7, #11]
  400c66:	701a      	strb	r2, [r3, #0]
	MessageBufferInfo[MessageBufferInfoIn].length = len;
  400c68:	4b15      	ldr	r3, [pc, #84]	; (400cc0 <MessageBufferInfoPut+0xc0>)
  400c6a:	681a      	ldr	r2, [r3, #0]
  400c6c:	4915      	ldr	r1, [pc, #84]	; (400cc4 <MessageBufferInfoPut+0xc4>)
  400c6e:	4613      	mov	r3, r2
  400c70:	005b      	lsls	r3, r3, #1
  400c72:	4413      	add	r3, r2
  400c74:	009b      	lsls	r3, r3, #2
  400c76:	440b      	add	r3, r1
  400c78:	3308      	adds	r3, #8
  400c7a:	687a      	ldr	r2, [r7, #4]
  400c7c:	601a      	str	r2, [r3, #0]

	//Update our buffer variables
	MessageBufferInfoIn = (MessageBufferInfoIn + 1) % MESSAGE_BUFFER_INFO_SIZE;
  400c7e:	4b10      	ldr	r3, [pc, #64]	; (400cc0 <MessageBufferInfoPut+0xc0>)
  400c80:	681b      	ldr	r3, [r3, #0]
  400c82:	1c5a      	adds	r2, r3, #1
  400c84:	4b0d      	ldr	r3, [pc, #52]	; (400cbc <MessageBufferInfoPut+0xbc>)
  400c86:	fb82 3403 	smull	r3, r4, r2, r3
  400c8a:	1913      	adds	r3, r2, r4
  400c8c:	1159      	asrs	r1, r3, #5
  400c8e:	17d3      	asrs	r3, r2, #31
  400c90:	1ac9      	subs	r1, r1, r3
  400c92:	460b      	mov	r3, r1
  400c94:	005b      	lsls	r3, r3, #1
  400c96:	440b      	add	r3, r1
  400c98:	0119      	lsls	r1, r3, #4
  400c9a:	440b      	add	r3, r1
  400c9c:	1ad1      	subs	r1, r2, r3
  400c9e:	4b08      	ldr	r3, [pc, #32]	; (400cc0 <MessageBufferInfoPut+0xc0>)
  400ca0:	6019      	str	r1, [r3, #0]
	MessageBufferInfoUse++;
  400ca2:	4b09      	ldr	r3, [pc, #36]	; (400cc8 <MessageBufferInfoPut+0xc8>)
  400ca4:	681b      	ldr	r3, [r3, #0]
  400ca6:	3301      	adds	r3, #1
  400ca8:	4a07      	ldr	r2, [pc, #28]	; (400cc8 <MessageBufferInfoPut+0xc8>)
  400caa:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400cac:	2300      	movs	r3, #0
}
  400cae:	4618      	mov	r0, r3
  400cb0:	3710      	adds	r7, #16
  400cb2:	46bd      	mov	sp, r7
  400cb4:	bc90      	pop	{r4, r7}
  400cb6:	4770      	bx	lr
  400cb8:	20000500 	.word	0x20000500
  400cbc:	a0a0a0a1 	.word	0xa0a0a0a1
  400cc0:	20000b54 	.word	0x20000b54
  400cc4:	20000b5c 	.word	0x20000b5c
  400cc8:	200004f0 	.word	0x200004f0

00400ccc <MessageBufferInfoGetFull>:

int MessageBufferInfoGetFull(struct message_info * info)
{
  400ccc:	b490      	push	{r4, r7}
  400cce:	b082      	sub	sp, #8
  400cd0:	af00      	add	r7, sp, #0
  400cd2:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(MessageBufferInfoIn == MessageBufferInfoOut)
  400cd4:	4b19      	ldr	r3, [pc, #100]	; (400d3c <MessageBufferInfoGetFull+0x70>)
  400cd6:	681a      	ldr	r2, [r3, #0]
  400cd8:	4b19      	ldr	r3, [pc, #100]	; (400d40 <MessageBufferInfoGetFull+0x74>)
  400cda:	681b      	ldr	r3, [r3, #0]
  400cdc:	429a      	cmp	r2, r3
  400cde:	d102      	bne.n	400ce6 <MessageBufferInfoGetFull+0x1a>
	{
		return -1; // MessageBufferInfo Empty - nothing to get
  400ce0:	f04f 33ff 	mov.w	r3, #4294967295
  400ce4:	e024      	b.n	400d30 <MessageBufferInfoGetFull+0x64>
	}

	//fetch the info struct from the buffer
	*info = MessageBufferInfo[MessageBufferInfoOut];
  400ce6:	4b16      	ldr	r3, [pc, #88]	; (400d40 <MessageBufferInfoGetFull+0x74>)
  400ce8:	681a      	ldr	r2, [r3, #0]
  400cea:	6878      	ldr	r0, [r7, #4]
  400cec:	4915      	ldr	r1, [pc, #84]	; (400d44 <MessageBufferInfoGetFull+0x78>)
  400cee:	4613      	mov	r3, r2
  400cf0:	005b      	lsls	r3, r3, #1
  400cf2:	4413      	add	r3, r2
  400cf4:	009b      	lsls	r3, r3, #2
  400cf6:	18ca      	adds	r2, r1, r3
  400cf8:	4603      	mov	r3, r0
  400cfa:	ca07      	ldmia	r2, {r0, r1, r2}
  400cfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Update our buffer variables
	MessageBufferInfoOut = (MessageBufferInfoOut + 1) % MESSAGE_BUFFER_INFO_SIZE;
  400d00:	4b0f      	ldr	r3, [pc, #60]	; (400d40 <MessageBufferInfoGetFull+0x74>)
  400d02:	681b      	ldr	r3, [r3, #0]
  400d04:	1c5a      	adds	r2, r3, #1
  400d06:	4b10      	ldr	r3, [pc, #64]	; (400d48 <MessageBufferInfoGetFull+0x7c>)
  400d08:	fb82 3403 	smull	r3, r4, r2, r3
  400d0c:	1913      	adds	r3, r2, r4
  400d0e:	1159      	asrs	r1, r3, #5
  400d10:	17d3      	asrs	r3, r2, #31
  400d12:	1ac9      	subs	r1, r1, r3
  400d14:	460b      	mov	r3, r1
  400d16:	005b      	lsls	r3, r3, #1
  400d18:	440b      	add	r3, r1
  400d1a:	0119      	lsls	r1, r3, #4
  400d1c:	440b      	add	r3, r1
  400d1e:	1ad1      	subs	r1, r2, r3
  400d20:	4b07      	ldr	r3, [pc, #28]	; (400d40 <MessageBufferInfoGetFull+0x74>)
  400d22:	6019      	str	r1, [r3, #0]
	MessageBufferInfoUse--;
  400d24:	4b09      	ldr	r3, [pc, #36]	; (400d4c <MessageBufferInfoGetFull+0x80>)
  400d26:	681b      	ldr	r3, [r3, #0]
  400d28:	3b01      	subs	r3, #1
  400d2a:	4a08      	ldr	r2, [pc, #32]	; (400d4c <MessageBufferInfoGetFull+0x80>)
  400d2c:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400d2e:	2300      	movs	r3, #0
}
  400d30:	4618      	mov	r0, r3
  400d32:	3708      	adds	r7, #8
  400d34:	46bd      	mov	sp, r7
  400d36:	bc90      	pop	{r4, r7}
  400d38:	4770      	bx	lr
  400d3a:	bf00      	nop
  400d3c:	20000b54 	.word	0x20000b54
  400d40:	20000500 	.word	0x20000500
  400d44:	20000b5c 	.word	0x20000b5c
  400d48:	a0a0a0a1 	.word	0xa0a0a0a1
  400d4c:	200004f0 	.word	0x200004f0

00400d50 <FastChargeController_Setup>:
#include "twimux_interface.h"


/******** Fast Charge Controller Registry Setup ********/
void FastChargeController_Setup(void)
{
  400d50:	b580      	push	{r7, lr}
  400d52:	af00      	add	r7, sp, #0
	//Chip disable (CD) line on PB2 set to enable
	REG_PIOB_PER |= (1<<2);		//Give control of PB2 to PIOB controller
  400d54:	4a11      	ldr	r2, [pc, #68]	; (400d9c <FastChargeController_Setup+0x4c>)
  400d56:	4b11      	ldr	r3, [pc, #68]	; (400d9c <FastChargeController_Setup+0x4c>)
  400d58:	681b      	ldr	r3, [r3, #0]
  400d5a:	f043 0304 	orr.w	r3, r3, #4
  400d5e:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<2);		//Set PB2 as an output
  400d60:	4a0f      	ldr	r2, [pc, #60]	; (400da0 <FastChargeController_Setup+0x50>)
  400d62:	4b0f      	ldr	r3, [pc, #60]	; (400da0 <FastChargeController_Setup+0x50>)
  400d64:	681b      	ldr	r3, [r3, #0]
  400d66:	f043 0304 	orr.w	r3, r3, #4
  400d6a:	6013      	str	r3, [r2, #0]
	REG_PIOB_CODR |= (1<<2);	//Set PB2 to low
  400d6c:	4a0d      	ldr	r2, [pc, #52]	; (400da4 <FastChargeController_Setup+0x54>)
  400d6e:	4b0d      	ldr	r3, [pc, #52]	; (400da4 <FastChargeController_Setup+0x54>)
  400d70:	681b      	ldr	r3, [r3, #0]
  400d72:	f043 0304 	orr.w	r3, r3, #4
  400d76:	6013      	str	r3, [r2, #0]
	TWI0_Write(TWI0_FastChargeChipAddress, controlReg, initControl);	// Ensures that CE bit is clear in case safety timer has gone off in previous charge.
  400d78:	2204      	movs	r2, #4
  400d7a:	2102      	movs	r1, #2
  400d7c:	206b      	movs	r0, #107	; 0x6b
  400d7e:	4b0a      	ldr	r3, [pc, #40]	; (400da8 <FastChargeController_Setup+0x58>)
  400d80:	4798      	blx	r3
	TWI0_Write(TWI0_FastChargeChipAddress, battVReg, initBattV);		// Vreg = 4.0v, input current = 2.5A
  400d82:	2266      	movs	r2, #102	; 0x66
  400d84:	2103      	movs	r1, #3
  400d86:	206b      	movs	r0, #107	; 0x6b
  400d88:	4b07      	ldr	r3, [pc, #28]	; (400da8 <FastChargeController_Setup+0x58>)
  400d8a:	4798      	blx	r3
	TWI0_Write(TWI0_FastChargeChipAddress, chargeReg, initCharge);		// charge current set to max Ic=2875mA, termination current Iterm=100mA (default)
  400d8c:	22fa      	movs	r2, #250	; 0xfa
  400d8e:	2105      	movs	r1, #5
  400d90:	206b      	movs	r0, #107	; 0x6b
  400d92:	4b05      	ldr	r3, [pc, #20]	; (400da8 <FastChargeController_Setup+0x58>)
  400d94:	4798      	blx	r3
}
  400d96:	bf00      	nop
  400d98:	bd80      	pop	{r7, pc}
  400d9a:	bf00      	nop
  400d9c:	400e1000 	.word	0x400e1000
  400da0:	400e1010 	.word	0x400e1010
  400da4:	400e1034 	.word	0x400e1034
  400da8:	004041c5 	.word	0x004041c5

00400dac <reg_int_cb>:
//SWARM ROBOT CONFIGURATION/////////////////////////////////////////////

extern uint32_t systemTimestamp;

static inline int reg_int_cb(struct int_param_s *int_param)
{
  400dac:	b480      	push	{r7}
  400dae:	b083      	sub	sp, #12
  400db0:	af00      	add	r7, sp, #0
  400db2:	6078      	str	r0, [r7, #4]
	//I guess we aren't using interrupt callback
	return 0;
  400db4:	2300      	movs	r3, #0
}
  400db6:	4618      	mov	r0, r3
  400db8:	370c      	adds	r7, #12
  400dba:	46bd      	mov	sp, r7
  400dbc:	bc80      	pop	{r7}
  400dbe:	4770      	bx	lr

00400dc0 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
  400dc0:	b590      	push	{r4, r7, lr}
  400dc2:	b085      	sub	sp, #20
  400dc4:	af00      	add	r7, sp, #0
  400dc6:	4603      	mov	r3, r0
  400dc8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
  400dca:	4b29      	ldr	r3, [pc, #164]	; (400e70 <set_int_enable+0xb0>)
  400dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  400dd0:	2b00      	cmp	r3, #0
  400dd2:	d01c      	beq.n	400e0e <set_int_enable+0x4e>
        if (enable)
  400dd4:	79fb      	ldrb	r3, [r7, #7]
  400dd6:	2b00      	cmp	r3, #0
  400dd8:	d002      	beq.n	400de0 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
  400dda:	2302      	movs	r3, #2
  400ddc:	73fb      	strb	r3, [r7, #15]
  400dde:	e001      	b.n	400de4 <set_int_enable+0x24>
        else
            tmp = 0x00;
  400de0:	2300      	movs	r3, #0
  400de2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
  400de4:	4b22      	ldr	r3, [pc, #136]	; (400e70 <set_int_enable+0xb0>)
  400de6:	685b      	ldr	r3, [r3, #4]
  400de8:	7818      	ldrb	r0, [r3, #0]
  400dea:	4b21      	ldr	r3, [pc, #132]	; (400e70 <set_int_enable+0xb0>)
  400dec:	681b      	ldr	r3, [r3, #0]
  400dee:	7c59      	ldrb	r1, [r3, #17]
  400df0:	f107 030f 	add.w	r3, r7, #15
  400df4:	2201      	movs	r2, #1
  400df6:	4c1f      	ldr	r4, [pc, #124]	; (400e74 <set_int_enable+0xb4>)
  400df8:	47a0      	blx	r4
  400dfa:	4603      	mov	r3, r0
  400dfc:	2b00      	cmp	r3, #0
  400dfe:	d002      	beq.n	400e06 <set_int_enable+0x46>
            return -1;
  400e00:	f04f 33ff 	mov.w	r3, #4294967295
  400e04:	e030      	b.n	400e68 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
  400e06:	7bfa      	ldrb	r2, [r7, #15]
  400e08:	4b19      	ldr	r3, [pc, #100]	; (400e70 <set_int_enable+0xb0>)
  400e0a:	745a      	strb	r2, [r3, #17]
  400e0c:	e02b      	b.n	400e66 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
  400e0e:	4b18      	ldr	r3, [pc, #96]	; (400e70 <set_int_enable+0xb0>)
  400e10:	7a9b      	ldrb	r3, [r3, #10]
  400e12:	2b00      	cmp	r3, #0
  400e14:	d102      	bne.n	400e1c <set_int_enable+0x5c>
            return -1;
  400e16:	f04f 33ff 	mov.w	r3, #4294967295
  400e1a:	e025      	b.n	400e68 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
  400e1c:	79fb      	ldrb	r3, [r7, #7]
  400e1e:	2b00      	cmp	r3, #0
  400e20:	d005      	beq.n	400e2e <set_int_enable+0x6e>
  400e22:	4b13      	ldr	r3, [pc, #76]	; (400e70 <set_int_enable+0xb0>)
  400e24:	7c5b      	ldrb	r3, [r3, #17]
  400e26:	2b00      	cmp	r3, #0
  400e28:	d001      	beq.n	400e2e <set_int_enable+0x6e>
            return 0;
  400e2a:	2300      	movs	r3, #0
  400e2c:	e01c      	b.n	400e68 <set_int_enable+0xa8>
        if (enable)
  400e2e:	79fb      	ldrb	r3, [r7, #7]
  400e30:	2b00      	cmp	r3, #0
  400e32:	d002      	beq.n	400e3a <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
  400e34:	2301      	movs	r3, #1
  400e36:	73fb      	strb	r3, [r7, #15]
  400e38:	e001      	b.n	400e3e <set_int_enable+0x7e>
        else
            tmp = 0x00;
  400e3a:	2300      	movs	r3, #0
  400e3c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
  400e3e:	4b0c      	ldr	r3, [pc, #48]	; (400e70 <set_int_enable+0xb0>)
  400e40:	685b      	ldr	r3, [r3, #4]
  400e42:	7818      	ldrb	r0, [r3, #0]
  400e44:	4b0a      	ldr	r3, [pc, #40]	; (400e70 <set_int_enable+0xb0>)
  400e46:	681b      	ldr	r3, [r3, #0]
  400e48:	7c59      	ldrb	r1, [r3, #17]
  400e4a:	f107 030f 	add.w	r3, r7, #15
  400e4e:	2201      	movs	r2, #1
  400e50:	4c08      	ldr	r4, [pc, #32]	; (400e74 <set_int_enable+0xb4>)
  400e52:	47a0      	blx	r4
  400e54:	4603      	mov	r3, r0
  400e56:	2b00      	cmp	r3, #0
  400e58:	d002      	beq.n	400e60 <set_int_enable+0xa0>
            return -1;
  400e5a:	f04f 33ff 	mov.w	r3, #4294967295
  400e5e:	e003      	b.n	400e68 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
  400e60:	7bfa      	ldrb	r2, [r7, #15]
  400e62:	4b03      	ldr	r3, [pc, #12]	; (400e70 <set_int_enable+0xb0>)
  400e64:	745a      	strb	r2, [r3, #17]
    }
    return 0;
  400e66:	2300      	movs	r3, #0
}
  400e68:	4618      	mov	r0, r3
  400e6a:	3714      	adds	r7, #20
  400e6c:	46bd      	mov	sp, r7
  400e6e:	bd90      	pop	{r4, r7, pc}
  400e70:	20000000 	.word	0x20000000
  400e74:	00403bf1 	.word	0x00403bf1

00400e78 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
  400e78:	b590      	push	{r4, r7, lr}
  400e7a:	b085      	sub	sp, #20
  400e7c:	af00      	add	r7, sp, #0
  400e7e:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
  400e80:	2380      	movs	r3, #128	; 0x80
  400e82:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
  400e84:	4b5f      	ldr	r3, [pc, #380]	; (401004 <mpu_init+0x18c>)
  400e86:	685b      	ldr	r3, [r3, #4]
  400e88:	7818      	ldrb	r0, [r3, #0]
  400e8a:	4b5e      	ldr	r3, [pc, #376]	; (401004 <mpu_init+0x18c>)
  400e8c:	681b      	ldr	r3, [r3, #0]
  400e8e:	7d59      	ldrb	r1, [r3, #21]
  400e90:	f107 0308 	add.w	r3, r7, #8
  400e94:	2201      	movs	r2, #1
  400e96:	4c5c      	ldr	r4, [pc, #368]	; (401008 <mpu_init+0x190>)
  400e98:	47a0      	blx	r4
  400e9a:	4603      	mov	r3, r0
  400e9c:	2b00      	cmp	r3, #0
  400e9e:	d002      	beq.n	400ea6 <mpu_init+0x2e>
        return -1;
  400ea0:	f04f 33ff 	mov.w	r3, #4294967295
  400ea4:	e0a9      	b.n	400ffa <mpu_init+0x182>
    delay_ms(100);
  400ea6:	2064      	movs	r0, #100	; 0x64
  400ea8:	4b58      	ldr	r3, [pc, #352]	; (40100c <mpu_init+0x194>)
  400eaa:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
  400eac:	2300      	movs	r3, #0
  400eae:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
  400eb0:	4b54      	ldr	r3, [pc, #336]	; (401004 <mpu_init+0x18c>)
  400eb2:	685b      	ldr	r3, [r3, #4]
  400eb4:	7818      	ldrb	r0, [r3, #0]
  400eb6:	4b53      	ldr	r3, [pc, #332]	; (401004 <mpu_init+0x18c>)
  400eb8:	681b      	ldr	r3, [r3, #0]
  400eba:	7d59      	ldrb	r1, [r3, #21]
  400ebc:	f107 0308 	add.w	r3, r7, #8
  400ec0:	2201      	movs	r2, #1
  400ec2:	4c51      	ldr	r4, [pc, #324]	; (401008 <mpu_init+0x190>)
  400ec4:	47a0      	blx	r4
  400ec6:	4603      	mov	r3, r0
  400ec8:	2b00      	cmp	r3, #0
  400eca:	d002      	beq.n	400ed2 <mpu_init+0x5a>
        return -1;
  400ecc:	f04f 33ff 	mov.w	r3, #4294967295
  400ed0:	e093      	b.n	400ffa <mpu_init+0x182>

   st.chip_cfg.accel_half = 0;
  400ed2:	4b4c      	ldr	r3, [pc, #304]	; (401004 <mpu_init+0x18c>)
  400ed4:	2200      	movs	r2, #0
  400ed6:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
  400ed8:	2348      	movs	r3, #72	; 0x48
  400eda:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
  400edc:	4b49      	ldr	r3, [pc, #292]	; (401004 <mpu_init+0x18c>)
  400ede:	685b      	ldr	r3, [r3, #4]
  400ee0:	7818      	ldrb	r0, [r3, #0]
  400ee2:	4b48      	ldr	r3, [pc, #288]	; (401004 <mpu_init+0x18c>)
  400ee4:	681b      	ldr	r3, [r3, #0]
  400ee6:	7a19      	ldrb	r1, [r3, #8]
  400ee8:	f107 0308 	add.w	r3, r7, #8
  400eec:	2201      	movs	r2, #1
  400eee:	4c46      	ldr	r4, [pc, #280]	; (401008 <mpu_init+0x190>)
  400ef0:	47a0      	blx	r4
  400ef2:	4603      	mov	r3, r0
  400ef4:	2b00      	cmp	r3, #0
  400ef6:	d002      	beq.n	400efe <mpu_init+0x86>
        return -1;
  400ef8:	f04f 33ff 	mov.w	r3, #4294967295
  400efc:	e07d      	b.n	400ffa <mpu_init+0x182>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
  400efe:	4b41      	ldr	r3, [pc, #260]	; (401004 <mpu_init+0x18c>)
  400f00:	22ff      	movs	r2, #255	; 0xff
  400f02:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
  400f04:	4b3f      	ldr	r3, [pc, #252]	; (401004 <mpu_init+0x18c>)
  400f06:	22ff      	movs	r2, #255	; 0xff
  400f08:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
  400f0a:	4b3e      	ldr	r3, [pc, #248]	; (401004 <mpu_init+0x18c>)
  400f0c:	22ff      	movs	r2, #255	; 0xff
  400f0e:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
  400f10:	4b3c      	ldr	r3, [pc, #240]	; (401004 <mpu_init+0x18c>)
  400f12:	22ff      	movs	r2, #255	; 0xff
  400f14:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
  400f16:	4b3b      	ldr	r3, [pc, #236]	; (401004 <mpu_init+0x18c>)
  400f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400f1c:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
  400f1e:	4b39      	ldr	r3, [pc, #228]	; (401004 <mpu_init+0x18c>)
  400f20:	22ff      	movs	r2, #255	; 0xff
  400f22:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
  400f24:	4b37      	ldr	r3, [pc, #220]	; (401004 <mpu_init+0x18c>)
  400f26:	22ff      	movs	r2, #255	; 0xff
  400f28:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
  400f2a:	4b36      	ldr	r3, [pc, #216]	; (401004 <mpu_init+0x18c>)
  400f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400f30:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
  400f32:	4b34      	ldr	r3, [pc, #208]	; (401004 <mpu_init+0x18c>)
  400f34:	2201      	movs	r2, #1
  400f36:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
  400f38:	4b32      	ldr	r3, [pc, #200]	; (401004 <mpu_init+0x18c>)
  400f3a:	2201      	movs	r2, #1
  400f3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
  400f40:	4b30      	ldr	r3, [pc, #192]	; (401004 <mpu_init+0x18c>)
  400f42:	2200      	movs	r2, #0
  400f44:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
  400f48:	4b2e      	ldr	r3, [pc, #184]	; (401004 <mpu_init+0x18c>)
  400f4a:	2200      	movs	r2, #0
  400f4c:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
  400f4e:	4b2d      	ldr	r3, [pc, #180]	; (401004 <mpu_init+0x18c>)
  400f50:	2200      	movs	r2, #0
  400f52:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
  400f54:	220c      	movs	r2, #12
  400f56:	2100      	movs	r1, #0
  400f58:	482d      	ldr	r0, [pc, #180]	; (401010 <mpu_init+0x198>)
  400f5a:	4b2e      	ldr	r3, [pc, #184]	; (401014 <mpu_init+0x19c>)
  400f5c:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
  400f5e:	4b29      	ldr	r3, [pc, #164]	; (401004 <mpu_init+0x18c>)
  400f60:	2200      	movs	r2, #0
  400f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
  400f66:	4b27      	ldr	r3, [pc, #156]	; (401004 <mpu_init+0x18c>)
  400f68:	2200      	movs	r2, #0
  400f6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
  400f6e:	4b25      	ldr	r3, [pc, #148]	; (401004 <mpu_init+0x18c>)
  400f70:	2200      	movs	r2, #0
  400f72:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
  400f74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400f78:	4b27      	ldr	r3, [pc, #156]	; (401018 <mpu_init+0x1a0>)
  400f7a:	4798      	blx	r3
  400f7c:	4603      	mov	r3, r0
  400f7e:	2b00      	cmp	r3, #0
  400f80:	d002      	beq.n	400f88 <mpu_init+0x110>
        return -1;
  400f82:	f04f 33ff 	mov.w	r3, #4294967295
  400f86:	e038      	b.n	400ffa <mpu_init+0x182>
    if (mpu_set_accel_fsr(2))
  400f88:	2002      	movs	r0, #2
  400f8a:	4b24      	ldr	r3, [pc, #144]	; (40101c <mpu_init+0x1a4>)
  400f8c:	4798      	blx	r3
  400f8e:	4603      	mov	r3, r0
  400f90:	2b00      	cmp	r3, #0
  400f92:	d002      	beq.n	400f9a <mpu_init+0x122>
        return -1;
  400f94:	f04f 33ff 	mov.w	r3, #4294967295
  400f98:	e02f      	b.n	400ffa <mpu_init+0x182>
    if (mpu_set_lpf(42))
  400f9a:	202a      	movs	r0, #42	; 0x2a
  400f9c:	4b20      	ldr	r3, [pc, #128]	; (401020 <mpu_init+0x1a8>)
  400f9e:	4798      	blx	r3
  400fa0:	4603      	mov	r3, r0
  400fa2:	2b00      	cmp	r3, #0
  400fa4:	d002      	beq.n	400fac <mpu_init+0x134>
        return -1;
  400fa6:	f04f 33ff 	mov.w	r3, #4294967295
  400faa:	e026      	b.n	400ffa <mpu_init+0x182>
    if (mpu_set_sample_rate(50))
  400fac:	2032      	movs	r0, #50	; 0x32
  400fae:	4b1d      	ldr	r3, [pc, #116]	; (401024 <mpu_init+0x1ac>)
  400fb0:	4798      	blx	r3
  400fb2:	4603      	mov	r3, r0
  400fb4:	2b00      	cmp	r3, #0
  400fb6:	d002      	beq.n	400fbe <mpu_init+0x146>
        return -1;
  400fb8:	f04f 33ff 	mov.w	r3, #4294967295
  400fbc:	e01d      	b.n	400ffa <mpu_init+0x182>
    if (mpu_configure_fifo(0))
  400fbe:	2000      	movs	r0, #0
  400fc0:	4b19      	ldr	r3, [pc, #100]	; (401028 <mpu_init+0x1b0>)
  400fc2:	4798      	blx	r3
  400fc4:	4603      	mov	r3, r0
  400fc6:	2b00      	cmp	r3, #0
  400fc8:	d002      	beq.n	400fd0 <mpu_init+0x158>
        return -1;
  400fca:	f04f 33ff 	mov.w	r3, #4294967295
  400fce:	e014      	b.n	400ffa <mpu_init+0x182>

    if (int_param)
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	2b00      	cmp	r3, #0
  400fd4:	d002      	beq.n	400fdc <mpu_init+0x164>
        reg_int_cb(int_param);
  400fd6:	6878      	ldr	r0, [r7, #4]
  400fd8:	4b14      	ldr	r3, [pc, #80]	; (40102c <mpu_init+0x1b4>)
  400fda:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
    setup_compass();
  400fdc:	4b14      	ldr	r3, [pc, #80]	; (401030 <mpu_init+0x1b8>)
  400fde:	4798      	blx	r3
    if (mpu_set_compass_sample_rate(10))
  400fe0:	200a      	movs	r0, #10
  400fe2:	4b14      	ldr	r3, [pc, #80]	; (401034 <mpu_init+0x1bc>)
  400fe4:	4798      	blx	r3
  400fe6:	4603      	mov	r3, r0
  400fe8:	2b00      	cmp	r3, #0
  400fea:	d002      	beq.n	400ff2 <mpu_init+0x17a>
        return -1;
  400fec:	f04f 33ff 	mov.w	r3, #4294967295
  400ff0:	e003      	b.n	400ffa <mpu_init+0x182>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
  400ff2:	2000      	movs	r0, #0
  400ff4:	4b10      	ldr	r3, [pc, #64]	; (401038 <mpu_init+0x1c0>)
  400ff6:	4798      	blx	r3
    return 0;
  400ff8:	2300      	movs	r3, #0
}
  400ffa:	4618      	mov	r0, r3
  400ffc:	3714      	adds	r7, #20
  400ffe:	46bd      	mov	sp, r7
  401000:	bd90      	pop	{r4, r7, pc}
  401002:	bf00      	nop
  401004:	20000000 	.word	0x20000000
  401008:	00403bf1 	.word	0x00403bf1
  40100c:	00403bc1 	.word	0x00403bc1
  401010:	20000016 	.word	0x20000016
  401014:	00406b91 	.word	0x00406b91
  401018:	004013f1 	.word	0x004013f1
  40101c:	0040150d 	.word	0x0040150d
  401020:	004015e1 	.word	0x004015e1
  401024:	004016b1 	.word	0x004016b1
  401028:	00401825 	.word	0x00401825
  40102c:	00400dad 	.word	0x00400dad
  401030:	00401fdd 	.word	0x00401fdd
  401034:	004017a1 	.word	0x004017a1
  401038:	004018d1 	.word	0x004018d1

0040103c <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
  40103c:	b590      	push	{r4, r7, lr}
  40103e:	b085      	sub	sp, #20
  401040:	af00      	add	r7, sp, #0
  401042:	4603      	mov	r3, r0
  401044:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
  401046:	79fb      	ldrb	r3, [r7, #7]
  401048:	2b28      	cmp	r3, #40	; 0x28
  40104a:	d902      	bls.n	401052 <mpu_lp_accel_mode+0x16>
        return -1;
  40104c:	f04f 33ff 	mov.w	r3, #4294967295
  401050:	e085      	b.n	40115e <mpu_lp_accel_mode+0x122>

    if (!rate) {
  401052:	79fb      	ldrb	r3, [r7, #7]
  401054:	2b00      	cmp	r3, #0
  401056:	d11c      	bne.n	401092 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
  401058:	2000      	movs	r0, #0
  40105a:	4b43      	ldr	r3, [pc, #268]	; (401168 <mpu_lp_accel_mode+0x12c>)
  40105c:	4798      	blx	r3
        tmp[0] = 0;
  40105e:	2300      	movs	r3, #0
  401060:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
  401062:	2307      	movs	r3, #7
  401064:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
  401066:	4b41      	ldr	r3, [pc, #260]	; (40116c <mpu_lp_accel_mode+0x130>)
  401068:	685b      	ldr	r3, [r3, #4]
  40106a:	7818      	ldrb	r0, [r3, #0]
  40106c:	4b3f      	ldr	r3, [pc, #252]	; (40116c <mpu_lp_accel_mode+0x130>)
  40106e:	681b      	ldr	r3, [r3, #0]
  401070:	7d59      	ldrb	r1, [r3, #21]
  401072:	f107 030c 	add.w	r3, r7, #12
  401076:	2202      	movs	r2, #2
  401078:	4c3d      	ldr	r4, [pc, #244]	; (401170 <mpu_lp_accel_mode+0x134>)
  40107a:	47a0      	blx	r4
  40107c:	4603      	mov	r3, r0
  40107e:	2b00      	cmp	r3, #0
  401080:	d002      	beq.n	401088 <mpu_lp_accel_mode+0x4c>
            return -1;
  401082:	f04f 33ff 	mov.w	r3, #4294967295
  401086:	e06a      	b.n	40115e <mpu_lp_accel_mode+0x122>
        st.chip_cfg.lp_accel_mode = 0;
  401088:	4b38      	ldr	r3, [pc, #224]	; (40116c <mpu_lp_accel_mode+0x130>)
  40108a:	2200      	movs	r2, #0
  40108c:	751a      	strb	r2, [r3, #20]
        return 0;
  40108e:	2300      	movs	r3, #0
  401090:	e065      	b.n	40115e <mpu_lp_accel_mode+0x122>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
  401092:	2001      	movs	r0, #1
  401094:	4b34      	ldr	r3, [pc, #208]	; (401168 <mpu_lp_accel_mode+0x12c>)
  401096:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
  401098:	79fb      	ldrb	r3, [r7, #7]
  40109a:	2b01      	cmp	r3, #1
  40109c:	d102      	bne.n	4010a4 <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
  40109e:	2302      	movs	r3, #2
  4010a0:	733b      	strb	r3, [r7, #12]
  4010a2:	e02b      	b.n	4010fc <mpu_lp_accel_mode+0xc0>
    else if (rate == 2)
  4010a4:	79fb      	ldrb	r3, [r7, #7]
  4010a6:	2b02      	cmp	r3, #2
  4010a8:	d102      	bne.n	4010b0 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
  4010aa:	2303      	movs	r3, #3
  4010ac:	733b      	strb	r3, [r7, #12]
  4010ae:	e025      	b.n	4010fc <mpu_lp_accel_mode+0xc0>
    else if (rate <= 5)
  4010b0:	79fb      	ldrb	r3, [r7, #7]
  4010b2:	2b05      	cmp	r3, #5
  4010b4:	d802      	bhi.n	4010bc <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
  4010b6:	2304      	movs	r3, #4
  4010b8:	733b      	strb	r3, [r7, #12]
  4010ba:	e01f      	b.n	4010fc <mpu_lp_accel_mode+0xc0>
    else if (rate <= 10)
  4010bc:	79fb      	ldrb	r3, [r7, #7]
  4010be:	2b0a      	cmp	r3, #10
  4010c0:	d802      	bhi.n	4010c8 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
  4010c2:	2305      	movs	r3, #5
  4010c4:	733b      	strb	r3, [r7, #12]
  4010c6:	e019      	b.n	4010fc <mpu_lp_accel_mode+0xc0>
    else if (rate <= 20)
  4010c8:	79fb      	ldrb	r3, [r7, #7]
  4010ca:	2b14      	cmp	r3, #20
  4010cc:	d802      	bhi.n	4010d4 <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
  4010ce:	2306      	movs	r3, #6
  4010d0:	733b      	strb	r3, [r7, #12]
  4010d2:	e013      	b.n	4010fc <mpu_lp_accel_mode+0xc0>
    else if (rate <= 40)
  4010d4:	79fb      	ldrb	r3, [r7, #7]
  4010d6:	2b28      	cmp	r3, #40	; 0x28
  4010d8:	d802      	bhi.n	4010e0 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
  4010da:	2307      	movs	r3, #7
  4010dc:	733b      	strb	r3, [r7, #12]
  4010de:	e00d      	b.n	4010fc <mpu_lp_accel_mode+0xc0>
    else if (rate <= 80)
  4010e0:	79fb      	ldrb	r3, [r7, #7]
  4010e2:	2b50      	cmp	r3, #80	; 0x50
  4010e4:	d802      	bhi.n	4010ec <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
  4010e6:	2308      	movs	r3, #8
  4010e8:	733b      	strb	r3, [r7, #12]
  4010ea:	e007      	b.n	4010fc <mpu_lp_accel_mode+0xc0>
    else if (rate <= 160)
  4010ec:	79fb      	ldrb	r3, [r7, #7]
  4010ee:	2ba0      	cmp	r3, #160	; 0xa0
  4010f0:	d802      	bhi.n	4010f8 <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
  4010f2:	2309      	movs	r3, #9
  4010f4:	733b      	strb	r3, [r7, #12]
  4010f6:	e001      	b.n	4010fc <mpu_lp_accel_mode+0xc0>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
  4010f8:	230a      	movs	r3, #10
  4010fa:	733b      	strb	r3, [r7, #12]
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
  4010fc:	4b1b      	ldr	r3, [pc, #108]	; (40116c <mpu_lp_accel_mode+0x130>)
  4010fe:	685b      	ldr	r3, [r3, #4]
  401100:	7818      	ldrb	r0, [r3, #0]
  401102:	4b1a      	ldr	r3, [pc, #104]	; (40116c <mpu_lp_accel_mode+0x130>)
  401104:	681b      	ldr	r3, [r3, #0]
  401106:	7a59      	ldrb	r1, [r3, #9]
  401108:	f107 030c 	add.w	r3, r7, #12
  40110c:	2201      	movs	r2, #1
  40110e:	4c18      	ldr	r4, [pc, #96]	; (401170 <mpu_lp_accel_mode+0x134>)
  401110:	47a0      	blx	r4
  401112:	4603      	mov	r3, r0
  401114:	2b00      	cmp	r3, #0
  401116:	d002      	beq.n	40111e <mpu_lp_accel_mode+0xe2>
        return -1;
  401118:	f04f 33ff 	mov.w	r3, #4294967295
  40111c:	e01f      	b.n	40115e <mpu_lp_accel_mode+0x122>
    tmp[0] = BIT_LPA_CYCLE;
  40111e:	2320      	movs	r3, #32
  401120:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
  401122:	4b12      	ldr	r3, [pc, #72]	; (40116c <mpu_lp_accel_mode+0x130>)
  401124:	685b      	ldr	r3, [r3, #4]
  401126:	7818      	ldrb	r0, [r3, #0]
  401128:	4b10      	ldr	r3, [pc, #64]	; (40116c <mpu_lp_accel_mode+0x130>)
  40112a:	681b      	ldr	r3, [r3, #0]
  40112c:	7d59      	ldrb	r1, [r3, #21]
  40112e:	f107 030c 	add.w	r3, r7, #12
  401132:	2201      	movs	r2, #1
  401134:	4c0e      	ldr	r4, [pc, #56]	; (401170 <mpu_lp_accel_mode+0x134>)
  401136:	47a0      	blx	r4
  401138:	4603      	mov	r3, r0
  40113a:	2b00      	cmp	r3, #0
  40113c:	d002      	beq.n	401144 <mpu_lp_accel_mode+0x108>
        return -1;
  40113e:	f04f 33ff 	mov.w	r3, #4294967295
  401142:	e00c      	b.n	40115e <mpu_lp_accel_mode+0x122>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
  401144:	4b09      	ldr	r3, [pc, #36]	; (40116c <mpu_lp_accel_mode+0x130>)
  401146:	2208      	movs	r2, #8
  401148:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
  40114a:	4b08      	ldr	r3, [pc, #32]	; (40116c <mpu_lp_accel_mode+0x130>)
  40114c:	2200      	movs	r2, #0
  40114e:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
  401150:	4b06      	ldr	r3, [pc, #24]	; (40116c <mpu_lp_accel_mode+0x130>)
  401152:	2201      	movs	r2, #1
  401154:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
  401156:	2000      	movs	r0, #0
  401158:	4b06      	ldr	r3, [pc, #24]	; (401174 <mpu_lp_accel_mode+0x138>)
  40115a:	4798      	blx	r3

    return 0;
  40115c:	2300      	movs	r3, #0
}
  40115e:	4618      	mov	r0, r3
  401160:	3714      	adds	r7, #20
  401162:	46bd      	mov	sp, r7
  401164:	bd90      	pop	{r4, r7, pc}
  401166:	bf00      	nop
  401168:	00401c35 	.word	0x00401c35
  40116c:	20000000 	.word	0x20000000
  401170:	00403bf1 	.word	0x00403bf1
  401174:	00401825 	.word	0x00401825

00401178 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
  401178:	b590      	push	{r4, r7, lr}
  40117a:	b083      	sub	sp, #12
  40117c:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  40117e:	4b7e      	ldr	r3, [pc, #504]	; (401378 <mpu_reset_fifo+0x200>)
  401180:	7a9b      	ldrb	r3, [r3, #10]
  401182:	2b00      	cmp	r3, #0
  401184:	d102      	bne.n	40118c <mpu_reset_fifo+0x14>
        return -1;
  401186:	f04f 33ff 	mov.w	r3, #4294967295
  40118a:	e0f1      	b.n	401370 <mpu_reset_fifo+0x1f8>

    data = 0;
  40118c:	2300      	movs	r3, #0
  40118e:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401190:	4b79      	ldr	r3, [pc, #484]	; (401378 <mpu_reset_fifo+0x200>)
  401192:	685b      	ldr	r3, [r3, #4]
  401194:	7818      	ldrb	r0, [r3, #0]
  401196:	4b78      	ldr	r3, [pc, #480]	; (401378 <mpu_reset_fifo+0x200>)
  401198:	681b      	ldr	r3, [r3, #0]
  40119a:	7c59      	ldrb	r1, [r3, #17]
  40119c:	1dfb      	adds	r3, r7, #7
  40119e:	2201      	movs	r2, #1
  4011a0:	4c76      	ldr	r4, [pc, #472]	; (40137c <mpu_reset_fifo+0x204>)
  4011a2:	47a0      	blx	r4
  4011a4:	4603      	mov	r3, r0
  4011a6:	2b00      	cmp	r3, #0
  4011a8:	d002      	beq.n	4011b0 <mpu_reset_fifo+0x38>
        return -1;
  4011aa:	f04f 33ff 	mov.w	r3, #4294967295
  4011ae:	e0df      	b.n	401370 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
  4011b0:	4b71      	ldr	r3, [pc, #452]	; (401378 <mpu_reset_fifo+0x200>)
  4011b2:	685b      	ldr	r3, [r3, #4]
  4011b4:	7818      	ldrb	r0, [r3, #0]
  4011b6:	4b70      	ldr	r3, [pc, #448]	; (401378 <mpu_reset_fifo+0x200>)
  4011b8:	681b      	ldr	r3, [r3, #0]
  4011ba:	7959      	ldrb	r1, [r3, #5]
  4011bc:	1dfb      	adds	r3, r7, #7
  4011be:	2201      	movs	r2, #1
  4011c0:	4c6e      	ldr	r4, [pc, #440]	; (40137c <mpu_reset_fifo+0x204>)
  4011c2:	47a0      	blx	r4
  4011c4:	4603      	mov	r3, r0
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d002      	beq.n	4011d0 <mpu_reset_fifo+0x58>
        return -1;
  4011ca:	f04f 33ff 	mov.w	r3, #4294967295
  4011ce:	e0cf      	b.n	401370 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4011d0:	4b69      	ldr	r3, [pc, #420]	; (401378 <mpu_reset_fifo+0x200>)
  4011d2:	685b      	ldr	r3, [r3, #4]
  4011d4:	7818      	ldrb	r0, [r3, #0]
  4011d6:	4b68      	ldr	r3, [pc, #416]	; (401378 <mpu_reset_fifo+0x200>)
  4011d8:	681b      	ldr	r3, [r3, #0]
  4011da:	7919      	ldrb	r1, [r3, #4]
  4011dc:	1dfb      	adds	r3, r7, #7
  4011de:	2201      	movs	r2, #1
  4011e0:	4c66      	ldr	r4, [pc, #408]	; (40137c <mpu_reset_fifo+0x204>)
  4011e2:	47a0      	blx	r4
  4011e4:	4603      	mov	r3, r0
  4011e6:	2b00      	cmp	r3, #0
  4011e8:	d002      	beq.n	4011f0 <mpu_reset_fifo+0x78>
        return -1;
  4011ea:	f04f 33ff 	mov.w	r3, #4294967295
  4011ee:	e0bf      	b.n	401370 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
  4011f0:	4b61      	ldr	r3, [pc, #388]	; (401378 <mpu_reset_fifo+0x200>)
  4011f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4011f6:	2b00      	cmp	r3, #0
  4011f8:	d05c      	beq.n	4012b4 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
  4011fa:	230c      	movs	r3, #12
  4011fc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4011fe:	4b5e      	ldr	r3, [pc, #376]	; (401378 <mpu_reset_fifo+0x200>)
  401200:	685b      	ldr	r3, [r3, #4]
  401202:	7818      	ldrb	r0, [r3, #0]
  401204:	4b5c      	ldr	r3, [pc, #368]	; (401378 <mpu_reset_fifo+0x200>)
  401206:	681b      	ldr	r3, [r3, #0]
  401208:	7919      	ldrb	r1, [r3, #4]
  40120a:	1dfb      	adds	r3, r7, #7
  40120c:	2201      	movs	r2, #1
  40120e:	4c5b      	ldr	r4, [pc, #364]	; (40137c <mpu_reset_fifo+0x204>)
  401210:	47a0      	blx	r4
  401212:	4603      	mov	r3, r0
  401214:	2b00      	cmp	r3, #0
  401216:	d002      	beq.n	40121e <mpu_reset_fifo+0xa6>
            return -1;
  401218:	f04f 33ff 	mov.w	r3, #4294967295
  40121c:	e0a8      	b.n	401370 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
  40121e:	2032      	movs	r0, #50	; 0x32
  401220:	4b57      	ldr	r3, [pc, #348]	; (401380 <mpu_reset_fifo+0x208>)
  401222:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
  401224:	23c0      	movs	r3, #192	; 0xc0
  401226:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
  401228:	4b53      	ldr	r3, [pc, #332]	; (401378 <mpu_reset_fifo+0x200>)
  40122a:	7a9b      	ldrb	r3, [r3, #10]
  40122c:	f003 0301 	and.w	r3, r3, #1
  401230:	2b00      	cmp	r3, #0
  401232:	d004      	beq.n	40123e <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
  401234:	79fb      	ldrb	r3, [r7, #7]
  401236:	f043 0320 	orr.w	r3, r3, #32
  40123a:	b2db      	uxtb	r3, r3
  40123c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  40123e:	4b4e      	ldr	r3, [pc, #312]	; (401378 <mpu_reset_fifo+0x200>)
  401240:	685b      	ldr	r3, [r3, #4]
  401242:	7818      	ldrb	r0, [r3, #0]
  401244:	4b4c      	ldr	r3, [pc, #304]	; (401378 <mpu_reset_fifo+0x200>)
  401246:	681b      	ldr	r3, [r3, #0]
  401248:	7919      	ldrb	r1, [r3, #4]
  40124a:	1dfb      	adds	r3, r7, #7
  40124c:	2201      	movs	r2, #1
  40124e:	4c4b      	ldr	r4, [pc, #300]	; (40137c <mpu_reset_fifo+0x204>)
  401250:	47a0      	blx	r4
  401252:	4603      	mov	r3, r0
  401254:	2b00      	cmp	r3, #0
  401256:	d002      	beq.n	40125e <mpu_reset_fifo+0xe6>
            return -1;
  401258:	f04f 33ff 	mov.w	r3, #4294967295
  40125c:	e088      	b.n	401370 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
  40125e:	4b46      	ldr	r3, [pc, #280]	; (401378 <mpu_reset_fifo+0x200>)
  401260:	7c5b      	ldrb	r3, [r3, #17]
  401262:	2b00      	cmp	r3, #0
  401264:	d002      	beq.n	40126c <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
  401266:	2302      	movs	r3, #2
  401268:	71fb      	strb	r3, [r7, #7]
  40126a:	e001      	b.n	401270 <mpu_reset_fifo+0xf8>
        else
            data = 0;
  40126c:	2300      	movs	r3, #0
  40126e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401270:	4b41      	ldr	r3, [pc, #260]	; (401378 <mpu_reset_fifo+0x200>)
  401272:	685b      	ldr	r3, [r3, #4]
  401274:	7818      	ldrb	r0, [r3, #0]
  401276:	4b40      	ldr	r3, [pc, #256]	; (401378 <mpu_reset_fifo+0x200>)
  401278:	681b      	ldr	r3, [r3, #0]
  40127a:	7c59      	ldrb	r1, [r3, #17]
  40127c:	1dfb      	adds	r3, r7, #7
  40127e:	2201      	movs	r2, #1
  401280:	4c3e      	ldr	r4, [pc, #248]	; (40137c <mpu_reset_fifo+0x204>)
  401282:	47a0      	blx	r4
  401284:	4603      	mov	r3, r0
  401286:	2b00      	cmp	r3, #0
  401288:	d002      	beq.n	401290 <mpu_reset_fifo+0x118>
            return -1;
  40128a:	f04f 33ff 	mov.w	r3, #4294967295
  40128e:	e06f      	b.n	401370 <mpu_reset_fifo+0x1f8>
        data = 0;
  401290:	2300      	movs	r3, #0
  401292:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
  401294:	4b38      	ldr	r3, [pc, #224]	; (401378 <mpu_reset_fifo+0x200>)
  401296:	685b      	ldr	r3, [r3, #4]
  401298:	7818      	ldrb	r0, [r3, #0]
  40129a:	4b37      	ldr	r3, [pc, #220]	; (401378 <mpu_reset_fifo+0x200>)
  40129c:	681b      	ldr	r3, [r3, #0]
  40129e:	7959      	ldrb	r1, [r3, #5]
  4012a0:	1dfb      	adds	r3, r7, #7
  4012a2:	2201      	movs	r2, #1
  4012a4:	4c35      	ldr	r4, [pc, #212]	; (40137c <mpu_reset_fifo+0x204>)
  4012a6:	47a0      	blx	r4
  4012a8:	4603      	mov	r3, r0
  4012aa:	2b00      	cmp	r3, #0
  4012ac:	d05f      	beq.n	40136e <mpu_reset_fifo+0x1f6>
            return -1;
  4012ae:	f04f 33ff 	mov.w	r3, #4294967295
  4012b2:	e05d      	b.n	401370 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
  4012b4:	2304      	movs	r3, #4
  4012b6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4012b8:	4b2f      	ldr	r3, [pc, #188]	; (401378 <mpu_reset_fifo+0x200>)
  4012ba:	685b      	ldr	r3, [r3, #4]
  4012bc:	7818      	ldrb	r0, [r3, #0]
  4012be:	4b2e      	ldr	r3, [pc, #184]	; (401378 <mpu_reset_fifo+0x200>)
  4012c0:	681b      	ldr	r3, [r3, #0]
  4012c2:	7919      	ldrb	r1, [r3, #4]
  4012c4:	1dfb      	adds	r3, r7, #7
  4012c6:	2201      	movs	r2, #1
  4012c8:	4c2c      	ldr	r4, [pc, #176]	; (40137c <mpu_reset_fifo+0x204>)
  4012ca:	47a0      	blx	r4
  4012cc:	4603      	mov	r3, r0
  4012ce:	2b00      	cmp	r3, #0
  4012d0:	d002      	beq.n	4012d8 <mpu_reset_fifo+0x160>
            return -1;
  4012d2:	f04f 33ff 	mov.w	r3, #4294967295
  4012d6:	e04b      	b.n	401370 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
  4012d8:	4b27      	ldr	r3, [pc, #156]	; (401378 <mpu_reset_fifo+0x200>)
  4012da:	7c9b      	ldrb	r3, [r3, #18]
  4012dc:	2b00      	cmp	r3, #0
  4012de:	d105      	bne.n	4012ec <mpu_reset_fifo+0x174>
  4012e0:	4b25      	ldr	r3, [pc, #148]	; (401378 <mpu_reset_fifo+0x200>)
  4012e2:	7a9b      	ldrb	r3, [r3, #10]
  4012e4:	f003 0301 	and.w	r3, r3, #1
  4012e8:	2b00      	cmp	r3, #0
  4012ea:	d102      	bne.n	4012f2 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
  4012ec:	2340      	movs	r3, #64	; 0x40
  4012ee:	71fb      	strb	r3, [r7, #7]
  4012f0:	e001      	b.n	4012f6 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
  4012f2:	2360      	movs	r3, #96	; 0x60
  4012f4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4012f6:	4b20      	ldr	r3, [pc, #128]	; (401378 <mpu_reset_fifo+0x200>)
  4012f8:	685b      	ldr	r3, [r3, #4]
  4012fa:	7818      	ldrb	r0, [r3, #0]
  4012fc:	4b1e      	ldr	r3, [pc, #120]	; (401378 <mpu_reset_fifo+0x200>)
  4012fe:	681b      	ldr	r3, [r3, #0]
  401300:	7919      	ldrb	r1, [r3, #4]
  401302:	1dfb      	adds	r3, r7, #7
  401304:	2201      	movs	r2, #1
  401306:	4c1d      	ldr	r4, [pc, #116]	; (40137c <mpu_reset_fifo+0x204>)
  401308:	47a0      	blx	r4
  40130a:	4603      	mov	r3, r0
  40130c:	2b00      	cmp	r3, #0
  40130e:	d002      	beq.n	401316 <mpu_reset_fifo+0x19e>
            return -1;
  401310:	f04f 33ff 	mov.w	r3, #4294967295
  401314:	e02c      	b.n	401370 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
  401316:	2032      	movs	r0, #50	; 0x32
  401318:	4b19      	ldr	r3, [pc, #100]	; (401380 <mpu_reset_fifo+0x208>)
  40131a:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
  40131c:	4b16      	ldr	r3, [pc, #88]	; (401378 <mpu_reset_fifo+0x200>)
  40131e:	7c5b      	ldrb	r3, [r3, #17]
  401320:	2b00      	cmp	r3, #0
  401322:	d002      	beq.n	40132a <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
  401324:	2301      	movs	r3, #1
  401326:	71fb      	strb	r3, [r7, #7]
  401328:	e001      	b.n	40132e <mpu_reset_fifo+0x1b6>
        else
            data = 0;
  40132a:	2300      	movs	r3, #0
  40132c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  40132e:	4b12      	ldr	r3, [pc, #72]	; (401378 <mpu_reset_fifo+0x200>)
  401330:	685b      	ldr	r3, [r3, #4]
  401332:	7818      	ldrb	r0, [r3, #0]
  401334:	4b10      	ldr	r3, [pc, #64]	; (401378 <mpu_reset_fifo+0x200>)
  401336:	681b      	ldr	r3, [r3, #0]
  401338:	7c59      	ldrb	r1, [r3, #17]
  40133a:	1dfb      	adds	r3, r7, #7
  40133c:	2201      	movs	r2, #1
  40133e:	4c0f      	ldr	r4, [pc, #60]	; (40137c <mpu_reset_fifo+0x204>)
  401340:	47a0      	blx	r4
  401342:	4603      	mov	r3, r0
  401344:	2b00      	cmp	r3, #0
  401346:	d002      	beq.n	40134e <mpu_reset_fifo+0x1d6>
            return -1;
  401348:	f04f 33ff 	mov.w	r3, #4294967295
  40134c:	e010      	b.n	401370 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
  40134e:	4b0a      	ldr	r3, [pc, #40]	; (401378 <mpu_reset_fifo+0x200>)
  401350:	685b      	ldr	r3, [r3, #4]
  401352:	7818      	ldrb	r0, [r3, #0]
  401354:	4b08      	ldr	r3, [pc, #32]	; (401378 <mpu_reset_fifo+0x200>)
  401356:	681b      	ldr	r3, [r3, #0]
  401358:	7959      	ldrb	r1, [r3, #5]
  40135a:	4b0a      	ldr	r3, [pc, #40]	; (401384 <mpu_reset_fifo+0x20c>)
  40135c:	2201      	movs	r2, #1
  40135e:	4c07      	ldr	r4, [pc, #28]	; (40137c <mpu_reset_fifo+0x204>)
  401360:	47a0      	blx	r4
  401362:	4603      	mov	r3, r0
  401364:	2b00      	cmp	r3, #0
  401366:	d002      	beq.n	40136e <mpu_reset_fifo+0x1f6>
            return -1;
  401368:	f04f 33ff 	mov.w	r3, #4294967295
  40136c:	e000      	b.n	401370 <mpu_reset_fifo+0x1f8>
    }
    return 0;
  40136e:	2300      	movs	r3, #0
}
  401370:	4618      	mov	r0, r3
  401372:	370c      	adds	r7, #12
  401374:	46bd      	mov	sp, r7
  401376:	bd90      	pop	{r4, r7, pc}
  401378:	20000000 	.word	0x20000000
  40137c:	00403bf1 	.word	0x00403bf1
  401380:	00403bc1 	.word	0x00403bc1
  401384:	20000010 	.word	0x20000010

00401388 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
  401388:	b480      	push	{r7}
  40138a:	b083      	sub	sp, #12
  40138c:	af00      	add	r7, sp, #0
  40138e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
  401390:	4b16      	ldr	r3, [pc, #88]	; (4013ec <mpu_get_gyro_fsr+0x64>)
  401392:	7a1b      	ldrb	r3, [r3, #8]
  401394:	2b03      	cmp	r3, #3
  401396:	d81e      	bhi.n	4013d6 <mpu_get_gyro_fsr+0x4e>
  401398:	a201      	add	r2, pc, #4	; (adr r2, 4013a0 <mpu_get_gyro_fsr+0x18>)
  40139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40139e:	bf00      	nop
  4013a0:	004013b1 	.word	0x004013b1
  4013a4:	004013b9 	.word	0x004013b9
  4013a8:	004013c3 	.word	0x004013c3
  4013ac:	004013cd 	.word	0x004013cd
    case INV_FSR_250DPS:
        fsr[0] = 250;
  4013b0:	687b      	ldr	r3, [r7, #4]
  4013b2:	22fa      	movs	r2, #250	; 0xfa
  4013b4:	801a      	strh	r2, [r3, #0]
        break;
  4013b6:	e012      	b.n	4013de <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
  4013b8:	687b      	ldr	r3, [r7, #4]
  4013ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4013be:	801a      	strh	r2, [r3, #0]
        break;
  4013c0:	e00d      	b.n	4013de <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
  4013c2:	687b      	ldr	r3, [r7, #4]
  4013c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4013c8:	801a      	strh	r2, [r3, #0]
        break;
  4013ca:	e008      	b.n	4013de <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  4013d2:	801a      	strh	r2, [r3, #0]
        break;
  4013d4:	e003      	b.n	4013de <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
  4013d6:	687b      	ldr	r3, [r7, #4]
  4013d8:	2200      	movs	r2, #0
  4013da:	801a      	strh	r2, [r3, #0]
        break;
  4013dc:	bf00      	nop
    }
    return 0;
  4013de:	2300      	movs	r3, #0
}
  4013e0:	4618      	mov	r0, r3
  4013e2:	370c      	adds	r7, #12
  4013e4:	46bd      	mov	sp, r7
  4013e6:	bc80      	pop	{r7}
  4013e8:	4770      	bx	lr
  4013ea:	bf00      	nop
  4013ec:	20000000 	.word	0x20000000

004013f0 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
  4013f0:	b590      	push	{r4, r7, lr}
  4013f2:	b085      	sub	sp, #20
  4013f4:	af00      	add	r7, sp, #0
  4013f6:	4603      	mov	r3, r0
  4013f8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  4013fa:	4b25      	ldr	r3, [pc, #148]	; (401490 <mpu_set_gyro_fsr+0xa0>)
  4013fc:	7a9b      	ldrb	r3, [r3, #10]
  4013fe:	2b00      	cmp	r3, #0
  401400:	d102      	bne.n	401408 <mpu_set_gyro_fsr+0x18>
        return -1;
  401402:	f04f 33ff 	mov.w	r3, #4294967295
  401406:	e03f      	b.n	401488 <mpu_set_gyro_fsr+0x98>

    switch (fsr) {
  401408:	88fb      	ldrh	r3, [r7, #6]
  40140a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40140e:	d00f      	beq.n	401430 <mpu_set_gyro_fsr+0x40>
  401410:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  401414:	dc02      	bgt.n	40141c <mpu_set_gyro_fsr+0x2c>
  401416:	2bfa      	cmp	r3, #250	; 0xfa
  401418:	d007      	beq.n	40142a <mpu_set_gyro_fsr+0x3a>
  40141a:	e012      	b.n	401442 <mpu_set_gyro_fsr+0x52>
  40141c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401420:	d009      	beq.n	401436 <mpu_set_gyro_fsr+0x46>
  401422:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  401426:	d009      	beq.n	40143c <mpu_set_gyro_fsr+0x4c>
  401428:	e00b      	b.n	401442 <mpu_set_gyro_fsr+0x52>
    case 250:
        data = INV_FSR_250DPS << 3;
  40142a:	2300      	movs	r3, #0
  40142c:	73fb      	strb	r3, [r7, #15]
        break;
  40142e:	e00b      	b.n	401448 <mpu_set_gyro_fsr+0x58>
    case 500:
        data = INV_FSR_500DPS << 3;
  401430:	2308      	movs	r3, #8
  401432:	73fb      	strb	r3, [r7, #15]
        break;
  401434:	e008      	b.n	401448 <mpu_set_gyro_fsr+0x58>
    case 1000:
        data = INV_FSR_1000DPS << 3;
  401436:	2310      	movs	r3, #16
  401438:	73fb      	strb	r3, [r7, #15]
        break;
  40143a:	e005      	b.n	401448 <mpu_set_gyro_fsr+0x58>
    case 2000:
        data = INV_FSR_2000DPS << 3;
  40143c:	2318      	movs	r3, #24
  40143e:	73fb      	strb	r3, [r7, #15]
        break;
  401440:	e002      	b.n	401448 <mpu_set_gyro_fsr+0x58>
    default:
        return -1;
  401442:	f04f 33ff 	mov.w	r3, #4294967295
  401446:	e01f      	b.n	401488 <mpu_set_gyro_fsr+0x98>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
  401448:	4b11      	ldr	r3, [pc, #68]	; (401490 <mpu_set_gyro_fsr+0xa0>)
  40144a:	7a1a      	ldrb	r2, [r3, #8]
  40144c:	7bfb      	ldrb	r3, [r7, #15]
  40144e:	08db      	lsrs	r3, r3, #3
  401450:	b2db      	uxtb	r3, r3
  401452:	429a      	cmp	r2, r3
  401454:	d101      	bne.n	40145a <mpu_set_gyro_fsr+0x6a>
        return 0;
  401456:	2300      	movs	r3, #0
  401458:	e016      	b.n	401488 <mpu_set_gyro_fsr+0x98>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
  40145a:	4b0d      	ldr	r3, [pc, #52]	; (401490 <mpu_set_gyro_fsr+0xa0>)
  40145c:	685b      	ldr	r3, [r3, #4]
  40145e:	7818      	ldrb	r0, [r3, #0]
  401460:	4b0b      	ldr	r3, [pc, #44]	; (401490 <mpu_set_gyro_fsr+0xa0>)
  401462:	681b      	ldr	r3, [r3, #0]
  401464:	7999      	ldrb	r1, [r3, #6]
  401466:	f107 030f 	add.w	r3, r7, #15
  40146a:	2201      	movs	r2, #1
  40146c:	4c09      	ldr	r4, [pc, #36]	; (401494 <mpu_set_gyro_fsr+0xa4>)
  40146e:	47a0      	blx	r4
  401470:	4603      	mov	r3, r0
  401472:	2b00      	cmp	r3, #0
  401474:	d002      	beq.n	40147c <mpu_set_gyro_fsr+0x8c>
        return -1;
  401476:	f04f 33ff 	mov.w	r3, #4294967295
  40147a:	e005      	b.n	401488 <mpu_set_gyro_fsr+0x98>
    st.chip_cfg.gyro_fsr = data >> 3;
  40147c:	7bfb      	ldrb	r3, [r7, #15]
  40147e:	08db      	lsrs	r3, r3, #3
  401480:	b2da      	uxtb	r2, r3
  401482:	4b03      	ldr	r3, [pc, #12]	; (401490 <mpu_set_gyro_fsr+0xa0>)
  401484:	721a      	strb	r2, [r3, #8]
    return 0;
  401486:	2300      	movs	r3, #0
}
  401488:	4618      	mov	r0, r3
  40148a:	3714      	adds	r7, #20
  40148c:	46bd      	mov	sp, r7
  40148e:	bd90      	pop	{r4, r7, pc}
  401490:	20000000 	.word	0x20000000
  401494:	00403bf1 	.word	0x00403bf1

00401498 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
  401498:	b480      	push	{r7}
  40149a:	b083      	sub	sp, #12
  40149c:	af00      	add	r7, sp, #0
  40149e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
  4014a0:	4b19      	ldr	r3, [pc, #100]	; (401508 <mpu_get_accel_fsr+0x70>)
  4014a2:	7a5b      	ldrb	r3, [r3, #9]
  4014a4:	2b03      	cmp	r3, #3
  4014a6:	d81b      	bhi.n	4014e0 <mpu_get_accel_fsr+0x48>
  4014a8:	a201      	add	r2, pc, #4	; (adr r2, 4014b0 <mpu_get_accel_fsr+0x18>)
  4014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014ae:	bf00      	nop
  4014b0:	004014c1 	.word	0x004014c1
  4014b4:	004014c9 	.word	0x004014c9
  4014b8:	004014d1 	.word	0x004014d1
  4014bc:	004014d9 	.word	0x004014d9
    case INV_FSR_2G:
        fsr[0] = 2;
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	2202      	movs	r2, #2
  4014c4:	701a      	strb	r2, [r3, #0]
        break;
  4014c6:	e00e      	b.n	4014e6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
  4014c8:	687b      	ldr	r3, [r7, #4]
  4014ca:	2204      	movs	r2, #4
  4014cc:	701a      	strb	r2, [r3, #0]
        break;
  4014ce:	e00a      	b.n	4014e6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
  4014d0:	687b      	ldr	r3, [r7, #4]
  4014d2:	2208      	movs	r2, #8
  4014d4:	701a      	strb	r2, [r3, #0]
        break;
  4014d6:	e006      	b.n	4014e6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
  4014d8:	687b      	ldr	r3, [r7, #4]
  4014da:	2210      	movs	r2, #16
  4014dc:	701a      	strb	r2, [r3, #0]
        break;
  4014de:	e002      	b.n	4014e6 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
  4014e0:	f04f 33ff 	mov.w	r3, #4294967295
  4014e4:	e00a      	b.n	4014fc <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
  4014e6:	4b08      	ldr	r3, [pc, #32]	; (401508 <mpu_get_accel_fsr+0x70>)
  4014e8:	7cdb      	ldrb	r3, [r3, #19]
  4014ea:	2b00      	cmp	r3, #0
  4014ec:	d005      	beq.n	4014fa <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
  4014ee:	687b      	ldr	r3, [r7, #4]
  4014f0:	781b      	ldrb	r3, [r3, #0]
  4014f2:	005b      	lsls	r3, r3, #1
  4014f4:	b2da      	uxtb	r2, r3
  4014f6:	687b      	ldr	r3, [r7, #4]
  4014f8:	701a      	strb	r2, [r3, #0]
    return 0;
  4014fa:	2300      	movs	r3, #0
}
  4014fc:	4618      	mov	r0, r3
  4014fe:	370c      	adds	r7, #12
  401500:	46bd      	mov	sp, r7
  401502:	bc80      	pop	{r7}
  401504:	4770      	bx	lr
  401506:	bf00      	nop
  401508:	20000000 	.word	0x20000000

0040150c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
  40150c:	b590      	push	{r4, r7, lr}
  40150e:	b085      	sub	sp, #20
  401510:	af00      	add	r7, sp, #0
  401512:	4603      	mov	r3, r0
  401514:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  401516:	4b30      	ldr	r3, [pc, #192]	; (4015d8 <mpu_set_accel_fsr+0xcc>)
  401518:	7a9b      	ldrb	r3, [r3, #10]
  40151a:	2b00      	cmp	r3, #0
  40151c:	d102      	bne.n	401524 <mpu_set_accel_fsr+0x18>
        return -1;
  40151e:	f04f 33ff 	mov.w	r3, #4294967295
  401522:	e054      	b.n	4015ce <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
  401524:	79fb      	ldrb	r3, [r7, #7]
  401526:	3b02      	subs	r3, #2
  401528:	2b0e      	cmp	r3, #14
  40152a:	d82d      	bhi.n	401588 <mpu_set_accel_fsr+0x7c>
  40152c:	a201      	add	r2, pc, #4	; (adr r2, 401534 <mpu_set_accel_fsr+0x28>)
  40152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401532:	bf00      	nop
  401534:	00401571 	.word	0x00401571
  401538:	00401589 	.word	0x00401589
  40153c:	00401577 	.word	0x00401577
  401540:	00401589 	.word	0x00401589
  401544:	00401589 	.word	0x00401589
  401548:	00401589 	.word	0x00401589
  40154c:	0040157d 	.word	0x0040157d
  401550:	00401589 	.word	0x00401589
  401554:	00401589 	.word	0x00401589
  401558:	00401589 	.word	0x00401589
  40155c:	00401589 	.word	0x00401589
  401560:	00401589 	.word	0x00401589
  401564:	00401589 	.word	0x00401589
  401568:	00401589 	.word	0x00401589
  40156c:	00401583 	.word	0x00401583
    case 2:
        data = INV_FSR_2G << 3;
  401570:	2300      	movs	r3, #0
  401572:	73fb      	strb	r3, [r7, #15]
        break;
  401574:	e00b      	b.n	40158e <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
  401576:	2308      	movs	r3, #8
  401578:	73fb      	strb	r3, [r7, #15]
        break;
  40157a:	e008      	b.n	40158e <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
  40157c:	2310      	movs	r3, #16
  40157e:	73fb      	strb	r3, [r7, #15]
        break;
  401580:	e005      	b.n	40158e <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
  401582:	2318      	movs	r3, #24
  401584:	73fb      	strb	r3, [r7, #15]
        break;
  401586:	e002      	b.n	40158e <mpu_set_accel_fsr+0x82>
    default:
        return -1;
  401588:	f04f 33ff 	mov.w	r3, #4294967295
  40158c:	e01f      	b.n	4015ce <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
  40158e:	4b12      	ldr	r3, [pc, #72]	; (4015d8 <mpu_set_accel_fsr+0xcc>)
  401590:	7a5a      	ldrb	r2, [r3, #9]
  401592:	7bfb      	ldrb	r3, [r7, #15]
  401594:	08db      	lsrs	r3, r3, #3
  401596:	b2db      	uxtb	r3, r3
  401598:	429a      	cmp	r2, r3
  40159a:	d101      	bne.n	4015a0 <mpu_set_accel_fsr+0x94>
        return 0;
  40159c:	2300      	movs	r3, #0
  40159e:	e016      	b.n	4015ce <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
  4015a0:	4b0d      	ldr	r3, [pc, #52]	; (4015d8 <mpu_set_accel_fsr+0xcc>)
  4015a2:	685b      	ldr	r3, [r3, #4]
  4015a4:	7818      	ldrb	r0, [r3, #0]
  4015a6:	4b0c      	ldr	r3, [pc, #48]	; (4015d8 <mpu_set_accel_fsr+0xcc>)
  4015a8:	681b      	ldr	r3, [r3, #0]
  4015aa:	79d9      	ldrb	r1, [r3, #7]
  4015ac:	f107 030f 	add.w	r3, r7, #15
  4015b0:	2201      	movs	r2, #1
  4015b2:	4c0a      	ldr	r4, [pc, #40]	; (4015dc <mpu_set_accel_fsr+0xd0>)
  4015b4:	47a0      	blx	r4
  4015b6:	4603      	mov	r3, r0
  4015b8:	2b00      	cmp	r3, #0
  4015ba:	d002      	beq.n	4015c2 <mpu_set_accel_fsr+0xb6>
        return -1;
  4015bc:	f04f 33ff 	mov.w	r3, #4294967295
  4015c0:	e005      	b.n	4015ce <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
  4015c2:	7bfb      	ldrb	r3, [r7, #15]
  4015c4:	08db      	lsrs	r3, r3, #3
  4015c6:	b2da      	uxtb	r2, r3
  4015c8:	4b03      	ldr	r3, [pc, #12]	; (4015d8 <mpu_set_accel_fsr+0xcc>)
  4015ca:	725a      	strb	r2, [r3, #9]
    return 0;
  4015cc:	2300      	movs	r3, #0
}
  4015ce:	4618      	mov	r0, r3
  4015d0:	3714      	adds	r7, #20
  4015d2:	46bd      	mov	sp, r7
  4015d4:	bd90      	pop	{r4, r7, pc}
  4015d6:	bf00      	nop
  4015d8:	20000000 	.word	0x20000000
  4015dc:	00403bf1 	.word	0x00403bf1

004015e0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
  4015e0:	b590      	push	{r4, r7, lr}
  4015e2:	b085      	sub	sp, #20
  4015e4:	af00      	add	r7, sp, #0
  4015e6:	4603      	mov	r3, r0
  4015e8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  4015ea:	4b23      	ldr	r3, [pc, #140]	; (401678 <mpu_set_lpf+0x98>)
  4015ec:	7a9b      	ldrb	r3, [r3, #10]
  4015ee:	2b00      	cmp	r3, #0
  4015f0:	d102      	bne.n	4015f8 <mpu_set_lpf+0x18>
        return -1;
  4015f2:	f04f 33ff 	mov.w	r3, #4294967295
  4015f6:	e03b      	b.n	401670 <mpu_set_lpf+0x90>

    if (lpf >= 188)
  4015f8:	88fb      	ldrh	r3, [r7, #6]
  4015fa:	2bbb      	cmp	r3, #187	; 0xbb
  4015fc:	d902      	bls.n	401604 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
  4015fe:	2301      	movs	r3, #1
  401600:	73fb      	strb	r3, [r7, #15]
  401602:	e019      	b.n	401638 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
  401604:	88fb      	ldrh	r3, [r7, #6]
  401606:	2b61      	cmp	r3, #97	; 0x61
  401608:	d902      	bls.n	401610 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
  40160a:	2302      	movs	r3, #2
  40160c:	73fb      	strb	r3, [r7, #15]
  40160e:	e013      	b.n	401638 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
  401610:	88fb      	ldrh	r3, [r7, #6]
  401612:	2b29      	cmp	r3, #41	; 0x29
  401614:	d902      	bls.n	40161c <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
  401616:	2303      	movs	r3, #3
  401618:	73fb      	strb	r3, [r7, #15]
  40161a:	e00d      	b.n	401638 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
  40161c:	88fb      	ldrh	r3, [r7, #6]
  40161e:	2b13      	cmp	r3, #19
  401620:	d902      	bls.n	401628 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
  401622:	2304      	movs	r3, #4
  401624:	73fb      	strb	r3, [r7, #15]
  401626:	e007      	b.n	401638 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
  401628:	88fb      	ldrh	r3, [r7, #6]
  40162a:	2b09      	cmp	r3, #9
  40162c:	d902      	bls.n	401634 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
  40162e:	2305      	movs	r3, #5
  401630:	73fb      	strb	r3, [r7, #15]
  401632:	e001      	b.n	401638 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
  401634:	2306      	movs	r3, #6
  401636:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
  401638:	4b0f      	ldr	r3, [pc, #60]	; (401678 <mpu_set_lpf+0x98>)
  40163a:	7ada      	ldrb	r2, [r3, #11]
  40163c:	7bfb      	ldrb	r3, [r7, #15]
  40163e:	429a      	cmp	r2, r3
  401640:	d101      	bne.n	401646 <mpu_set_lpf+0x66>
        return 0;
  401642:	2300      	movs	r3, #0
  401644:	e014      	b.n	401670 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
  401646:	4b0c      	ldr	r3, [pc, #48]	; (401678 <mpu_set_lpf+0x98>)
  401648:	685b      	ldr	r3, [r3, #4]
  40164a:	7818      	ldrb	r0, [r3, #0]
  40164c:	4b0a      	ldr	r3, [pc, #40]	; (401678 <mpu_set_lpf+0x98>)
  40164e:	681b      	ldr	r3, [r3, #0]
  401650:	7899      	ldrb	r1, [r3, #2]
  401652:	f107 030f 	add.w	r3, r7, #15
  401656:	2201      	movs	r2, #1
  401658:	4c08      	ldr	r4, [pc, #32]	; (40167c <mpu_set_lpf+0x9c>)
  40165a:	47a0      	blx	r4
  40165c:	4603      	mov	r3, r0
  40165e:	2b00      	cmp	r3, #0
  401660:	d002      	beq.n	401668 <mpu_set_lpf+0x88>
        return -1;
  401662:	f04f 33ff 	mov.w	r3, #4294967295
  401666:	e003      	b.n	401670 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
  401668:	7bfa      	ldrb	r2, [r7, #15]
  40166a:	4b03      	ldr	r3, [pc, #12]	; (401678 <mpu_set_lpf+0x98>)
  40166c:	72da      	strb	r2, [r3, #11]
    return 0;
  40166e:	2300      	movs	r3, #0
}
  401670:	4618      	mov	r0, r3
  401672:	3714      	adds	r7, #20
  401674:	46bd      	mov	sp, r7
  401676:	bd90      	pop	{r4, r7, pc}
  401678:	20000000 	.word	0x20000000
  40167c:	00403bf1 	.word	0x00403bf1

00401680 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
  401680:	b480      	push	{r7}
  401682:	b083      	sub	sp, #12
  401684:	af00      	add	r7, sp, #0
  401686:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
  401688:	4b08      	ldr	r3, [pc, #32]	; (4016ac <mpu_get_sample_rate+0x2c>)
  40168a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  40168e:	2b00      	cmp	r3, #0
  401690:	d002      	beq.n	401698 <mpu_get_sample_rate+0x18>
        return -1;
  401692:	f04f 33ff 	mov.w	r3, #4294967295
  401696:	e004      	b.n	4016a2 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
  401698:	4b04      	ldr	r3, [pc, #16]	; (4016ac <mpu_get_sample_rate+0x2c>)
  40169a:	89da      	ldrh	r2, [r3, #14]
  40169c:	687b      	ldr	r3, [r7, #4]
  40169e:	801a      	strh	r2, [r3, #0]
    return 0;
  4016a0:	2300      	movs	r3, #0
}
  4016a2:	4618      	mov	r0, r3
  4016a4:	370c      	adds	r7, #12
  4016a6:	46bd      	mov	sp, r7
  4016a8:	bc80      	pop	{r7}
  4016aa:	4770      	bx	lr
  4016ac:	20000000 	.word	0x20000000

004016b0 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
  4016b0:	b590      	push	{r4, r7, lr}
  4016b2:	b085      	sub	sp, #20
  4016b4:	af00      	add	r7, sp, #0
  4016b6:	4603      	mov	r3, r0
  4016b8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  4016ba:	4b34      	ldr	r3, [pc, #208]	; (40178c <mpu_set_sample_rate+0xdc>)
  4016bc:	7a9b      	ldrb	r3, [r3, #10]
  4016be:	2b00      	cmp	r3, #0
  4016c0:	d102      	bne.n	4016c8 <mpu_set_sample_rate+0x18>
        return -1;
  4016c2:	f04f 33ff 	mov.w	r3, #4294967295
  4016c6:	e05c      	b.n	401782 <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
  4016c8:	4b30      	ldr	r3, [pc, #192]	; (40178c <mpu_set_sample_rate+0xdc>)
  4016ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4016ce:	2b00      	cmp	r3, #0
  4016d0:	d002      	beq.n	4016d8 <mpu_set_sample_rate+0x28>
        return -1;
  4016d2:	f04f 33ff 	mov.w	r3, #4294967295
  4016d6:	e054      	b.n	401782 <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
  4016d8:	4b2c      	ldr	r3, [pc, #176]	; (40178c <mpu_set_sample_rate+0xdc>)
  4016da:	7d1b      	ldrb	r3, [r3, #20]
  4016dc:	2b00      	cmp	r3, #0
  4016de:	d00f      	beq.n	401700 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
  4016e0:	88fb      	ldrh	r3, [r7, #6]
  4016e2:	2b00      	cmp	r3, #0
  4016e4:	d009      	beq.n	4016fa <mpu_set_sample_rate+0x4a>
  4016e6:	88fb      	ldrh	r3, [r7, #6]
  4016e8:	2b28      	cmp	r3, #40	; 0x28
  4016ea:	d806      	bhi.n	4016fa <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
  4016ec:	88fb      	ldrh	r3, [r7, #6]
  4016ee:	b2db      	uxtb	r3, r3
  4016f0:	4618      	mov	r0, r3
  4016f2:	4b27      	ldr	r3, [pc, #156]	; (401790 <mpu_set_sample_rate+0xe0>)
  4016f4:	4798      	blx	r3
                return 0;
  4016f6:	2300      	movs	r3, #0
  4016f8:	e043      	b.n	401782 <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
  4016fa:	2000      	movs	r0, #0
  4016fc:	4b24      	ldr	r3, [pc, #144]	; (401790 <mpu_set_sample_rate+0xe0>)
  4016fe:	4798      	blx	r3
        }
        if (rate < 4)
  401700:	88fb      	ldrh	r3, [r7, #6]
  401702:	2b03      	cmp	r3, #3
  401704:	d802      	bhi.n	40170c <mpu_set_sample_rate+0x5c>
            rate = 4;
  401706:	2304      	movs	r3, #4
  401708:	80fb      	strh	r3, [r7, #6]
  40170a:	e006      	b.n	40171a <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
  40170c:	88fb      	ldrh	r3, [r7, #6]
  40170e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401712:	d902      	bls.n	40171a <mpu_set_sample_rate+0x6a>
            rate = 1000;
  401714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401718:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
  40171a:	88fb      	ldrh	r3, [r7, #6]
  40171c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401720:	fb92 f3f3 	sdiv	r3, r2, r3
  401724:	b2db      	uxtb	r3, r3
  401726:	3b01      	subs	r3, #1
  401728:	b2db      	uxtb	r3, r3
  40172a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
  40172c:	4b17      	ldr	r3, [pc, #92]	; (40178c <mpu_set_sample_rate+0xdc>)
  40172e:	685b      	ldr	r3, [r3, #4]
  401730:	7818      	ldrb	r0, [r3, #0]
  401732:	4b16      	ldr	r3, [pc, #88]	; (40178c <mpu_set_sample_rate+0xdc>)
  401734:	681b      	ldr	r3, [r3, #0]
  401736:	7859      	ldrb	r1, [r3, #1]
  401738:	f107 030f 	add.w	r3, r7, #15
  40173c:	2201      	movs	r2, #1
  40173e:	4c15      	ldr	r4, [pc, #84]	; (401794 <mpu_set_sample_rate+0xe4>)
  401740:	47a0      	blx	r4
  401742:	4603      	mov	r3, r0
  401744:	2b00      	cmp	r3, #0
  401746:	d002      	beq.n	40174e <mpu_set_sample_rate+0x9e>
            return -1;
  401748:	f04f 33ff 	mov.w	r3, #4294967295
  40174c:	e019      	b.n	401782 <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
  40174e:	7bfb      	ldrb	r3, [r7, #15]
  401750:	3301      	adds	r3, #1
  401752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401756:	fb92 f3f3 	sdiv	r3, r2, r3
  40175a:	b29a      	uxth	r2, r3
  40175c:	4b0b      	ldr	r3, [pc, #44]	; (40178c <mpu_set_sample_rate+0xdc>)
  40175e:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
  401760:	4b0a      	ldr	r3, [pc, #40]	; (40178c <mpu_set_sample_rate+0xdc>)
  401762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  401764:	2b64      	cmp	r3, #100	; 0x64
  401766:	bf28      	it	cs
  401768:	2364      	movcs	r3, #100	; 0x64
  40176a:	b29b      	uxth	r3, r3
  40176c:	4618      	mov	r0, r3
  40176e:	4b0a      	ldr	r3, [pc, #40]	; (401798 <mpu_set_sample_rate+0xe8>)
  401770:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
  401772:	4b06      	ldr	r3, [pc, #24]	; (40178c <mpu_set_sample_rate+0xdc>)
  401774:	89db      	ldrh	r3, [r3, #14]
  401776:	085b      	lsrs	r3, r3, #1
  401778:	b29b      	uxth	r3, r3
  40177a:	4618      	mov	r0, r3
  40177c:	4b07      	ldr	r3, [pc, #28]	; (40179c <mpu_set_sample_rate+0xec>)
  40177e:	4798      	blx	r3
        return 0;
  401780:	2300      	movs	r3, #0
    }
}
  401782:	4618      	mov	r0, r3
  401784:	3714      	adds	r7, #20
  401786:	46bd      	mov	sp, r7
  401788:	bd90      	pop	{r4, r7, pc}
  40178a:	bf00      	nop
  40178c:	20000000 	.word	0x20000000
  401790:	0040103d 	.word	0x0040103d
  401794:	00403bf1 	.word	0x00403bf1
  401798:	004017a1 	.word	0x004017a1
  40179c:	004015e1 	.word	0x004015e1

004017a0 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
  4017a0:	b590      	push	{r4, r7, lr}
  4017a2:	b085      	sub	sp, #20
  4017a4:	af00      	add	r7, sp, #0
  4017a6:	4603      	mov	r3, r0
  4017a8:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
  4017aa:	88fb      	ldrh	r3, [r7, #6]
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	d007      	beq.n	4017c0 <mpu_set_compass_sample_rate+0x20>
  4017b0:	4b1a      	ldr	r3, [pc, #104]	; (40181c <mpu_set_compass_sample_rate+0x7c>)
  4017b2:	89db      	ldrh	r3, [r3, #14]
  4017b4:	88fa      	ldrh	r2, [r7, #6]
  4017b6:	429a      	cmp	r2, r3
  4017b8:	d802      	bhi.n	4017c0 <mpu_set_compass_sample_rate+0x20>
  4017ba:	88fb      	ldrh	r3, [r7, #6]
  4017bc:	2b64      	cmp	r3, #100	; 0x64
  4017be:	d902      	bls.n	4017c6 <mpu_set_compass_sample_rate+0x26>
        return -1;
  4017c0:	f04f 33ff 	mov.w	r3, #4294967295
  4017c4:	e026      	b.n	401814 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
  4017c6:	4b15      	ldr	r3, [pc, #84]	; (40181c <mpu_set_compass_sample_rate+0x7c>)
  4017c8:	89da      	ldrh	r2, [r3, #14]
  4017ca:	88fb      	ldrh	r3, [r7, #6]
  4017cc:	fbb2 f3f3 	udiv	r3, r2, r3
  4017d0:	b29b      	uxth	r3, r3
  4017d2:	b2db      	uxtb	r3, r3
  4017d4:	3b01      	subs	r3, #1
  4017d6:	b2db      	uxtb	r3, r3
  4017d8:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
  4017da:	4b10      	ldr	r3, [pc, #64]	; (40181c <mpu_set_compass_sample_rate+0x7c>)
  4017dc:	685b      	ldr	r3, [r3, #4]
  4017de:	7818      	ldrb	r0, [r3, #0]
  4017e0:	4b0e      	ldr	r3, [pc, #56]	; (40181c <mpu_set_compass_sample_rate+0x7c>)
  4017e2:	681b      	ldr	r3, [r3, #0]
  4017e4:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
  4017e8:	f107 030f 	add.w	r3, r7, #15
  4017ec:	2201      	movs	r2, #1
  4017ee:	4c0c      	ldr	r4, [pc, #48]	; (401820 <mpu_set_compass_sample_rate+0x80>)
  4017f0:	47a0      	blx	r4
  4017f2:	4603      	mov	r3, r0
  4017f4:	2b00      	cmp	r3, #0
  4017f6:	d002      	beq.n	4017fe <mpu_set_compass_sample_rate+0x5e>
        return -1;
  4017f8:	f04f 33ff 	mov.w	r3, #4294967295
  4017fc:	e00a      	b.n	401814 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
  4017fe:	4b07      	ldr	r3, [pc, #28]	; (40181c <mpu_set_compass_sample_rate+0x7c>)
  401800:	89db      	ldrh	r3, [r3, #14]
  401802:	461a      	mov	r2, r3
  401804:	7bfb      	ldrb	r3, [r7, #15]
  401806:	3301      	adds	r3, #1
  401808:	fb92 f3f3 	sdiv	r3, r2, r3
  40180c:	b29a      	uxth	r2, r3
  40180e:	4b03      	ldr	r3, [pc, #12]	; (40181c <mpu_set_compass_sample_rate+0x7c>)
  401810:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
  401812:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
  401814:	4618      	mov	r0, r3
  401816:	3714      	adds	r7, #20
  401818:	46bd      	mov	sp, r7
  40181a:	bd90      	pop	{r4, r7, pc}
  40181c:	20000000 	.word	0x20000000
  401820:	00403bf1 	.word	0x00403bf1

00401824 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
  401824:	b580      	push	{r7, lr}
  401826:	b084      	sub	sp, #16
  401828:	af00      	add	r7, sp, #0
  40182a:	4603      	mov	r3, r0
  40182c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
  40182e:	2300      	movs	r3, #0
  401830:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
  401832:	79fb      	ldrb	r3, [r7, #7]
  401834:	f023 0301 	bic.w	r3, r3, #1
  401838:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
  40183a:	4b22      	ldr	r3, [pc, #136]	; (4018c4 <mpu_configure_fifo+0xa0>)
  40183c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401840:	2b00      	cmp	r3, #0
  401842:	d001      	beq.n	401848 <mpu_configure_fifo+0x24>
        return 0;
  401844:	2300      	movs	r3, #0
  401846:	e038      	b.n	4018ba <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
  401848:	4b1e      	ldr	r3, [pc, #120]	; (4018c4 <mpu_configure_fifo+0xa0>)
  40184a:	7a9b      	ldrb	r3, [r3, #10]
  40184c:	2b00      	cmp	r3, #0
  40184e:	d102      	bne.n	401856 <mpu_configure_fifo+0x32>
            return -1;
  401850:	f04f 33ff 	mov.w	r3, #4294967295
  401854:	e031      	b.n	4018ba <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
  401856:	4b1b      	ldr	r3, [pc, #108]	; (4018c4 <mpu_configure_fifo+0xa0>)
  401858:	7c1b      	ldrb	r3, [r3, #16]
  40185a:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
  40185c:	4b19      	ldr	r3, [pc, #100]	; (4018c4 <mpu_configure_fifo+0xa0>)
  40185e:	7a9a      	ldrb	r2, [r3, #10]
  401860:	79fb      	ldrb	r3, [r7, #7]
  401862:	4013      	ands	r3, r2
  401864:	b2da      	uxtb	r2, r3
  401866:	4b17      	ldr	r3, [pc, #92]	; (4018c4 <mpu_configure_fifo+0xa0>)
  401868:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
  40186a:	4b16      	ldr	r3, [pc, #88]	; (4018c4 <mpu_configure_fifo+0xa0>)
  40186c:	7c1b      	ldrb	r3, [r3, #16]
  40186e:	79fa      	ldrb	r2, [r7, #7]
  401870:	429a      	cmp	r2, r3
  401872:	d003      	beq.n	40187c <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
  401874:	f04f 33ff 	mov.w	r3, #4294967295
  401878:	60fb      	str	r3, [r7, #12]
  40187a:	e001      	b.n	401880 <mpu_configure_fifo+0x5c>
        else
            result = 0;
  40187c:	2300      	movs	r3, #0
  40187e:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
  401880:	79fb      	ldrb	r3, [r7, #7]
  401882:	2b00      	cmp	r3, #0
  401884:	d103      	bne.n	40188e <mpu_configure_fifo+0x6a>
  401886:	4b0f      	ldr	r3, [pc, #60]	; (4018c4 <mpu_configure_fifo+0xa0>)
  401888:	7d1b      	ldrb	r3, [r3, #20]
  40188a:	2b00      	cmp	r3, #0
  40188c:	d003      	beq.n	401896 <mpu_configure_fifo+0x72>
            set_int_enable(1);
  40188e:	2001      	movs	r0, #1
  401890:	4b0d      	ldr	r3, [pc, #52]	; (4018c8 <mpu_configure_fifo+0xa4>)
  401892:	4798      	blx	r3
  401894:	e002      	b.n	40189c <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
  401896:	2000      	movs	r0, #0
  401898:	4b0b      	ldr	r3, [pc, #44]	; (4018c8 <mpu_configure_fifo+0xa4>)
  40189a:	4798      	blx	r3
        if (sensors) {
  40189c:	79fb      	ldrb	r3, [r7, #7]
  40189e:	2b00      	cmp	r3, #0
  4018a0:	d00a      	beq.n	4018b8 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
  4018a2:	4b0a      	ldr	r3, [pc, #40]	; (4018cc <mpu_configure_fifo+0xa8>)
  4018a4:	4798      	blx	r3
  4018a6:	4603      	mov	r3, r0
  4018a8:	2b00      	cmp	r3, #0
  4018aa:	d005      	beq.n	4018b8 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
  4018ac:	4a05      	ldr	r2, [pc, #20]	; (4018c4 <mpu_configure_fifo+0xa0>)
  4018ae:	7afb      	ldrb	r3, [r7, #11]
  4018b0:	7413      	strb	r3, [r2, #16]
                return -1;
  4018b2:	f04f 33ff 	mov.w	r3, #4294967295
  4018b6:	e000      	b.n	4018ba <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
  4018b8:	68fb      	ldr	r3, [r7, #12]
}
  4018ba:	4618      	mov	r0, r3
  4018bc:	3710      	adds	r7, #16
  4018be:	46bd      	mov	sp, r7
  4018c0:	bd80      	pop	{r7, pc}
  4018c2:	bf00      	nop
  4018c4:	20000000 	.word	0x20000000
  4018c8:	00400dc1 	.word	0x00400dc1
  4018cc:	00401179 	.word	0x00401179

004018d0 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
  4018d0:	b590      	push	{r4, r7, lr}
  4018d2:	b085      	sub	sp, #20
  4018d4:	af00      	add	r7, sp, #0
  4018d6:	4603      	mov	r3, r0
  4018d8:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
  4018da:	79fb      	ldrb	r3, [r7, #7]
  4018dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018e0:	2b00      	cmp	r3, #0
  4018e2:	d002      	beq.n	4018ea <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
  4018e4:	2301      	movs	r3, #1
  4018e6:	73fb      	strb	r3, [r7, #15]
  4018e8:	e007      	b.n	4018fa <mpu_set_sensors+0x2a>
    else if (sensors)
  4018ea:	79fb      	ldrb	r3, [r7, #7]
  4018ec:	2b00      	cmp	r3, #0
  4018ee:	d002      	beq.n	4018f6 <mpu_set_sensors+0x26>
        data = 0;
  4018f0:	2300      	movs	r3, #0
  4018f2:	73fb      	strb	r3, [r7, #15]
  4018f4:	e001      	b.n	4018fa <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
  4018f6:	2340      	movs	r3, #64	; 0x40
  4018f8:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
  4018fa:	4b63      	ldr	r3, [pc, #396]	; (401a88 <mpu_set_sensors+0x1b8>)
  4018fc:	685b      	ldr	r3, [r3, #4]
  4018fe:	7818      	ldrb	r0, [r3, #0]
  401900:	4b61      	ldr	r3, [pc, #388]	; (401a88 <mpu_set_sensors+0x1b8>)
  401902:	681b      	ldr	r3, [r3, #0]
  401904:	7d59      	ldrb	r1, [r3, #21]
  401906:	f107 030f 	add.w	r3, r7, #15
  40190a:	2201      	movs	r2, #1
  40190c:	4c5f      	ldr	r4, [pc, #380]	; (401a8c <mpu_set_sensors+0x1bc>)
  40190e:	47a0      	blx	r4
  401910:	4603      	mov	r3, r0
  401912:	2b00      	cmp	r3, #0
  401914:	d005      	beq.n	401922 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
  401916:	4b5c      	ldr	r3, [pc, #368]	; (401a88 <mpu_set_sensors+0x1b8>)
  401918:	2200      	movs	r2, #0
  40191a:	729a      	strb	r2, [r3, #10]
        return -1;
  40191c:	f04f 33ff 	mov.w	r3, #4294967295
  401920:	e0ae      	b.n	401a80 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
  401922:	7bfb      	ldrb	r3, [r7, #15]
  401924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  401928:	b2da      	uxtb	r2, r3
  40192a:	4b57      	ldr	r3, [pc, #348]	; (401a88 <mpu_set_sensors+0x1b8>)
  40192c:	731a      	strb	r2, [r3, #12]

    data = 0;
  40192e:	2300      	movs	r3, #0
  401930:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
  401932:	79fb      	ldrb	r3, [r7, #7]
  401934:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401938:	2b00      	cmp	r3, #0
  40193a:	d104      	bne.n	401946 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
  40193c:	7bfb      	ldrb	r3, [r7, #15]
  40193e:	f043 0304 	orr.w	r3, r3, #4
  401942:	b2db      	uxtb	r3, r3
  401944:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
  401946:	79fb      	ldrb	r3, [r7, #7]
  401948:	f003 0320 	and.w	r3, r3, #32
  40194c:	2b00      	cmp	r3, #0
  40194e:	d104      	bne.n	40195a <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
  401950:	7bfb      	ldrb	r3, [r7, #15]
  401952:	f043 0302 	orr.w	r3, r3, #2
  401956:	b2db      	uxtb	r3, r3
  401958:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
  40195a:	79fb      	ldrb	r3, [r7, #7]
  40195c:	f003 0310 	and.w	r3, r3, #16
  401960:	2b00      	cmp	r3, #0
  401962:	d104      	bne.n	40196e <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
  401964:	7bfb      	ldrb	r3, [r7, #15]
  401966:	f043 0301 	orr.w	r3, r3, #1
  40196a:	b2db      	uxtb	r3, r3
  40196c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
  40196e:	79fb      	ldrb	r3, [r7, #7]
  401970:	f003 0308 	and.w	r3, r3, #8
  401974:	2b00      	cmp	r3, #0
  401976:	d104      	bne.n	401982 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
  401978:	7bfb      	ldrb	r3, [r7, #15]
  40197a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
  40197e:	b2db      	uxtb	r3, r3
  401980:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
  401982:	4b41      	ldr	r3, [pc, #260]	; (401a88 <mpu_set_sensors+0x1b8>)
  401984:	685b      	ldr	r3, [r3, #4]
  401986:	7818      	ldrb	r0, [r3, #0]
  401988:	4b3f      	ldr	r3, [pc, #252]	; (401a88 <mpu_set_sensors+0x1b8>)
  40198a:	681b      	ldr	r3, [r3, #0]
  40198c:	7d99      	ldrb	r1, [r3, #22]
  40198e:	f107 030f 	add.w	r3, r7, #15
  401992:	2201      	movs	r2, #1
  401994:	4c3d      	ldr	r4, [pc, #244]	; (401a8c <mpu_set_sensors+0x1bc>)
  401996:	47a0      	blx	r4
  401998:	4603      	mov	r3, r0
  40199a:	2b00      	cmp	r3, #0
  40199c:	d005      	beq.n	4019aa <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
  40199e:	4b3a      	ldr	r3, [pc, #232]	; (401a88 <mpu_set_sensors+0x1b8>)
  4019a0:	2200      	movs	r2, #0
  4019a2:	729a      	strb	r2, [r3, #10]
        return -1;
  4019a4:	f04f 33ff 	mov.w	r3, #4294967295
  4019a8:	e06a      	b.n	401a80 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
  4019aa:	79fb      	ldrb	r3, [r7, #7]
  4019ac:	2b00      	cmp	r3, #0
  4019ae:	d005      	beq.n	4019bc <mpu_set_sensors+0xec>
  4019b0:	79fb      	ldrb	r3, [r7, #7]
  4019b2:	2b08      	cmp	r3, #8
  4019b4:	d002      	beq.n	4019bc <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
  4019b6:	2000      	movs	r0, #0
  4019b8:	4b35      	ldr	r3, [pc, #212]	; (401a90 <mpu_set_sensors+0x1c0>)
  4019ba:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
  4019bc:	4b32      	ldr	r3, [pc, #200]	; (401a88 <mpu_set_sensors+0x1b8>)
  4019be:	685b      	ldr	r3, [r3, #4]
  4019c0:	7818      	ldrb	r0, [r3, #0]
  4019c2:	4b31      	ldr	r3, [pc, #196]	; (401a88 <mpu_set_sensors+0x1b8>)
  4019c4:	681b      	ldr	r3, [r3, #0]
  4019c6:	7919      	ldrb	r1, [r3, #4]
  4019c8:	f107 030e 	add.w	r3, r7, #14
  4019cc:	2201      	movs	r2, #1
  4019ce:	4c31      	ldr	r4, [pc, #196]	; (401a94 <mpu_set_sensors+0x1c4>)
  4019d0:	47a0      	blx	r4
  4019d2:	4603      	mov	r3, r0
  4019d4:	2b00      	cmp	r3, #0
  4019d6:	d002      	beq.n	4019de <mpu_set_sensors+0x10e>
        return -1;
  4019d8:	f04f 33ff 	mov.w	r3, #4294967295
  4019dc:	e050      	b.n	401a80 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
  4019de:	79fb      	ldrb	r3, [r7, #7]
  4019e0:	f003 0301 	and.w	r3, r3, #1
  4019e4:	2b00      	cmp	r3, #0
  4019e6:	d007      	beq.n	4019f8 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
  4019e8:	2311      	movs	r3, #17
  4019ea:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
  4019ec:	7bbb      	ldrb	r3, [r7, #14]
  4019ee:	f043 0320 	orr.w	r3, r3, #32
  4019f2:	b2db      	uxtb	r3, r3
  4019f4:	73bb      	strb	r3, [r7, #14]
  4019f6:	e006      	b.n	401a06 <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
  4019f8:	2310      	movs	r3, #16
  4019fa:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
  4019fc:	7bbb      	ldrb	r3, [r7, #14]
  4019fe:	f023 0320 	bic.w	r3, r3, #32
  401a02:	b2db      	uxtb	r3, r3
  401a04:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
  401a06:	4b20      	ldr	r3, [pc, #128]	; (401a88 <mpu_set_sensors+0x1b8>)
  401a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401a0c:	2b00      	cmp	r3, #0
  401a0e:	d005      	beq.n	401a1c <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
  401a10:	7bbb      	ldrb	r3, [r7, #14]
  401a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401a16:	b2db      	uxtb	r3, r3
  401a18:	73bb      	strb	r3, [r7, #14]
  401a1a:	e004      	b.n	401a26 <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
  401a1c:	7bbb      	ldrb	r3, [r7, #14]
  401a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401a22:	b2db      	uxtb	r3, r3
  401a24:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
  401a26:	4b18      	ldr	r3, [pc, #96]	; (401a88 <mpu_set_sensors+0x1b8>)
  401a28:	685b      	ldr	r3, [r3, #4]
  401a2a:	7818      	ldrb	r0, [r3, #0]
  401a2c:	4b16      	ldr	r3, [pc, #88]	; (401a88 <mpu_set_sensors+0x1b8>)
  401a2e:	681b      	ldr	r3, [r3, #0]
  401a30:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
  401a34:	f107 030f 	add.w	r3, r7, #15
  401a38:	2201      	movs	r2, #1
  401a3a:	4c14      	ldr	r4, [pc, #80]	; (401a8c <mpu_set_sensors+0x1bc>)
  401a3c:	47a0      	blx	r4
  401a3e:	4603      	mov	r3, r0
  401a40:	2b00      	cmp	r3, #0
  401a42:	d002      	beq.n	401a4a <mpu_set_sensors+0x17a>
        return -1;
  401a44:	f04f 33ff 	mov.w	r3, #4294967295
  401a48:	e01a      	b.n	401a80 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
  401a4a:	4b0f      	ldr	r3, [pc, #60]	; (401a88 <mpu_set_sensors+0x1b8>)
  401a4c:	685b      	ldr	r3, [r3, #4]
  401a4e:	7818      	ldrb	r0, [r3, #0]
  401a50:	4b0d      	ldr	r3, [pc, #52]	; (401a88 <mpu_set_sensors+0x1b8>)
  401a52:	681b      	ldr	r3, [r3, #0]
  401a54:	7919      	ldrb	r1, [r3, #4]
  401a56:	f107 030e 	add.w	r3, r7, #14
  401a5a:	2201      	movs	r2, #1
  401a5c:	4c0b      	ldr	r4, [pc, #44]	; (401a8c <mpu_set_sensors+0x1bc>)
  401a5e:	47a0      	blx	r4
  401a60:	4603      	mov	r3, r0
  401a62:	2b00      	cmp	r3, #0
  401a64:	d002      	beq.n	401a6c <mpu_set_sensors+0x19c>
        return -1;
  401a66:	f04f 33ff 	mov.w	r3, #4294967295
  401a6a:	e009      	b.n	401a80 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
  401a6c:	4a06      	ldr	r2, [pc, #24]	; (401a88 <mpu_set_sensors+0x1b8>)
  401a6e:	79fb      	ldrb	r3, [r7, #7]
  401a70:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
  401a72:	4b05      	ldr	r3, [pc, #20]	; (401a88 <mpu_set_sensors+0x1b8>)
  401a74:	2200      	movs	r2, #0
  401a76:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
  401a78:	2032      	movs	r0, #50	; 0x32
  401a7a:	4b07      	ldr	r3, [pc, #28]	; (401a98 <mpu_set_sensors+0x1c8>)
  401a7c:	4798      	blx	r3
    return 0;
  401a7e:	2300      	movs	r3, #0
}
  401a80:	4618      	mov	r0, r3
  401a82:	3714      	adds	r7, #20
  401a84:	46bd      	mov	sp, r7
  401a86:	bd90      	pop	{r4, r7, pc}
  401a88:	20000000 	.word	0x20000000
  401a8c:	00403bf1 	.word	0x00403bf1
  401a90:	00401c35 	.word	0x00401c35
  401a94:	00403cad 	.word	0x00403cad
  401a98:	00403bc1 	.word	0x00403bc1

00401a9c <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
  401a9c:	b590      	push	{r4, r7, lr}
  401a9e:	b085      	sub	sp, #20
  401aa0:	af00      	add	r7, sp, #0
  401aa2:	4603      	mov	r3, r0
  401aa4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
  401aa6:	4b5f      	ldr	r3, [pc, #380]	; (401c24 <mpu_set_bypass+0x188>)
  401aa8:	7c9b      	ldrb	r3, [r3, #18]
  401aaa:	79fa      	ldrb	r2, [r7, #7]
  401aac:	429a      	cmp	r2, r3
  401aae:	d101      	bne.n	401ab4 <mpu_set_bypass+0x18>
        return 0;
  401ab0:	2300      	movs	r3, #0
  401ab2:	e0b2      	b.n	401c1a <mpu_set_bypass+0x17e>

    if (bypass_on) {
  401ab4:	79fb      	ldrb	r3, [r7, #7]
  401ab6:	2b00      	cmp	r3, #0
  401ab8:	d050      	beq.n	401b5c <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401aba:	4b5a      	ldr	r3, [pc, #360]	; (401c24 <mpu_set_bypass+0x188>)
  401abc:	685b      	ldr	r3, [r3, #4]
  401abe:	7818      	ldrb	r0, [r3, #0]
  401ac0:	4b58      	ldr	r3, [pc, #352]	; (401c24 <mpu_set_bypass+0x188>)
  401ac2:	681b      	ldr	r3, [r3, #0]
  401ac4:	7919      	ldrb	r1, [r3, #4]
  401ac6:	f107 030f 	add.w	r3, r7, #15
  401aca:	2201      	movs	r2, #1
  401acc:	4c56      	ldr	r4, [pc, #344]	; (401c28 <mpu_set_bypass+0x18c>)
  401ace:	47a0      	blx	r4
  401ad0:	4603      	mov	r3, r0
  401ad2:	2b00      	cmp	r3, #0
  401ad4:	d002      	beq.n	401adc <mpu_set_bypass+0x40>
            return -1;
  401ad6:	f04f 33ff 	mov.w	r3, #4294967295
  401ada:	e09e      	b.n	401c1a <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
  401adc:	7bfb      	ldrb	r3, [r7, #15]
  401ade:	f023 0320 	bic.w	r3, r3, #32
  401ae2:	b2db      	uxtb	r3, r3
  401ae4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401ae6:	4b4f      	ldr	r3, [pc, #316]	; (401c24 <mpu_set_bypass+0x188>)
  401ae8:	685b      	ldr	r3, [r3, #4]
  401aea:	7818      	ldrb	r0, [r3, #0]
  401aec:	4b4d      	ldr	r3, [pc, #308]	; (401c24 <mpu_set_bypass+0x188>)
  401aee:	681b      	ldr	r3, [r3, #0]
  401af0:	7919      	ldrb	r1, [r3, #4]
  401af2:	f107 030f 	add.w	r3, r7, #15
  401af6:	2201      	movs	r2, #1
  401af8:	4c4c      	ldr	r4, [pc, #304]	; (401c2c <mpu_set_bypass+0x190>)
  401afa:	47a0      	blx	r4
  401afc:	4603      	mov	r3, r0
  401afe:	2b00      	cmp	r3, #0
  401b00:	d002      	beq.n	401b08 <mpu_set_bypass+0x6c>
            return -1;
  401b02:	f04f 33ff 	mov.w	r3, #4294967295
  401b06:	e088      	b.n	401c1a <mpu_set_bypass+0x17e>
        delay_ms(3);
  401b08:	2003      	movs	r0, #3
  401b0a:	4b49      	ldr	r3, [pc, #292]	; (401c30 <mpu_set_bypass+0x194>)
  401b0c:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
  401b0e:	2302      	movs	r3, #2
  401b10:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
  401b12:	4b44      	ldr	r3, [pc, #272]	; (401c24 <mpu_set_bypass+0x188>)
  401b14:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401b18:	2b00      	cmp	r3, #0
  401b1a:	d004      	beq.n	401b26 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
  401b1c:	7bfb      	ldrb	r3, [r7, #15]
  401b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401b22:	b2db      	uxtb	r3, r3
  401b24:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
  401b26:	4b3f      	ldr	r3, [pc, #252]	; (401c24 <mpu_set_bypass+0x188>)
  401b28:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401b2c:	2b00      	cmp	r3, #0
  401b2e:	d004      	beq.n	401b3a <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401b30:	7bfb      	ldrb	r3, [r7, #15]
  401b32:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401b36:	b2db      	uxtb	r3, r3
  401b38:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401b3a:	4b3a      	ldr	r3, [pc, #232]	; (401c24 <mpu_set_bypass+0x188>)
  401b3c:	685b      	ldr	r3, [r3, #4]
  401b3e:	7818      	ldrb	r0, [r3, #0]
  401b40:	4b38      	ldr	r3, [pc, #224]	; (401c24 <mpu_set_bypass+0x188>)
  401b42:	681b      	ldr	r3, [r3, #0]
  401b44:	7dd9      	ldrb	r1, [r3, #23]
  401b46:	f107 030f 	add.w	r3, r7, #15
  401b4a:	2201      	movs	r2, #1
  401b4c:	4c37      	ldr	r4, [pc, #220]	; (401c2c <mpu_set_bypass+0x190>)
  401b4e:	47a0      	blx	r4
  401b50:	4603      	mov	r3, r0
  401b52:	2b00      	cmp	r3, #0
  401b54:	d05d      	beq.n	401c12 <mpu_set_bypass+0x176>
            return -1;
  401b56:	f04f 33ff 	mov.w	r3, #4294967295
  401b5a:	e05e      	b.n	401c1a <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401b5c:	4b31      	ldr	r3, [pc, #196]	; (401c24 <mpu_set_bypass+0x188>)
  401b5e:	685b      	ldr	r3, [r3, #4]
  401b60:	7818      	ldrb	r0, [r3, #0]
  401b62:	4b30      	ldr	r3, [pc, #192]	; (401c24 <mpu_set_bypass+0x188>)
  401b64:	681b      	ldr	r3, [r3, #0]
  401b66:	7919      	ldrb	r1, [r3, #4]
  401b68:	f107 030f 	add.w	r3, r7, #15
  401b6c:	2201      	movs	r2, #1
  401b6e:	4c2e      	ldr	r4, [pc, #184]	; (401c28 <mpu_set_bypass+0x18c>)
  401b70:	47a0      	blx	r4
  401b72:	4603      	mov	r3, r0
  401b74:	2b00      	cmp	r3, #0
  401b76:	d002      	beq.n	401b7e <mpu_set_bypass+0xe2>
            return -1;
  401b78:	f04f 33ff 	mov.w	r3, #4294967295
  401b7c:	e04d      	b.n	401c1a <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
  401b7e:	4b29      	ldr	r3, [pc, #164]	; (401c24 <mpu_set_bypass+0x188>)
  401b80:	7a9b      	ldrb	r3, [r3, #10]
  401b82:	f003 0301 	and.w	r3, r3, #1
  401b86:	2b00      	cmp	r3, #0
  401b88:	d005      	beq.n	401b96 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
  401b8a:	7bfb      	ldrb	r3, [r7, #15]
  401b8c:	f043 0320 	orr.w	r3, r3, #32
  401b90:	b2db      	uxtb	r3, r3
  401b92:	73fb      	strb	r3, [r7, #15]
  401b94:	e004      	b.n	401ba0 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
  401b96:	7bfb      	ldrb	r3, [r7, #15]
  401b98:	f023 0320 	bic.w	r3, r3, #32
  401b9c:	b2db      	uxtb	r3, r3
  401b9e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401ba0:	4b20      	ldr	r3, [pc, #128]	; (401c24 <mpu_set_bypass+0x188>)
  401ba2:	685b      	ldr	r3, [r3, #4]
  401ba4:	7818      	ldrb	r0, [r3, #0]
  401ba6:	4b1f      	ldr	r3, [pc, #124]	; (401c24 <mpu_set_bypass+0x188>)
  401ba8:	681b      	ldr	r3, [r3, #0]
  401baa:	7919      	ldrb	r1, [r3, #4]
  401bac:	f107 030f 	add.w	r3, r7, #15
  401bb0:	2201      	movs	r2, #1
  401bb2:	4c1e      	ldr	r4, [pc, #120]	; (401c2c <mpu_set_bypass+0x190>)
  401bb4:	47a0      	blx	r4
  401bb6:	4603      	mov	r3, r0
  401bb8:	2b00      	cmp	r3, #0
  401bba:	d002      	beq.n	401bc2 <mpu_set_bypass+0x126>
            return -1;
  401bbc:	f04f 33ff 	mov.w	r3, #4294967295
  401bc0:	e02b      	b.n	401c1a <mpu_set_bypass+0x17e>
        delay_ms(3);
  401bc2:	2003      	movs	r0, #3
  401bc4:	4b1a      	ldr	r3, [pc, #104]	; (401c30 <mpu_set_bypass+0x194>)
  401bc6:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
  401bc8:	4b16      	ldr	r3, [pc, #88]	; (401c24 <mpu_set_bypass+0x188>)
  401bca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401bce:	2b00      	cmp	r3, #0
  401bd0:	d002      	beq.n	401bd8 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
  401bd2:	2380      	movs	r3, #128	; 0x80
  401bd4:	73fb      	strb	r3, [r7, #15]
  401bd6:	e001      	b.n	401bdc <mpu_set_bypass+0x140>
        else
            tmp = 0;
  401bd8:	2300      	movs	r3, #0
  401bda:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
  401bdc:	4b11      	ldr	r3, [pc, #68]	; (401c24 <mpu_set_bypass+0x188>)
  401bde:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401be2:	2b00      	cmp	r3, #0
  401be4:	d004      	beq.n	401bf0 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401be6:	7bfb      	ldrb	r3, [r7, #15]
  401be8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401bec:	b2db      	uxtb	r3, r3
  401bee:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401bf0:	4b0c      	ldr	r3, [pc, #48]	; (401c24 <mpu_set_bypass+0x188>)
  401bf2:	685b      	ldr	r3, [r3, #4]
  401bf4:	7818      	ldrb	r0, [r3, #0]
  401bf6:	4b0b      	ldr	r3, [pc, #44]	; (401c24 <mpu_set_bypass+0x188>)
  401bf8:	681b      	ldr	r3, [r3, #0]
  401bfa:	7dd9      	ldrb	r1, [r3, #23]
  401bfc:	f107 030f 	add.w	r3, r7, #15
  401c00:	2201      	movs	r2, #1
  401c02:	4c0a      	ldr	r4, [pc, #40]	; (401c2c <mpu_set_bypass+0x190>)
  401c04:	47a0      	blx	r4
  401c06:	4603      	mov	r3, r0
  401c08:	2b00      	cmp	r3, #0
  401c0a:	d002      	beq.n	401c12 <mpu_set_bypass+0x176>
            return -1;
  401c0c:	f04f 33ff 	mov.w	r3, #4294967295
  401c10:	e003      	b.n	401c1a <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
  401c12:	4a04      	ldr	r2, [pc, #16]	; (401c24 <mpu_set_bypass+0x188>)
  401c14:	79fb      	ldrb	r3, [r7, #7]
  401c16:	7493      	strb	r3, [r2, #18]
    return 0;
  401c18:	2300      	movs	r3, #0
}
  401c1a:	4618      	mov	r0, r3
  401c1c:	3714      	adds	r7, #20
  401c1e:	46bd      	mov	sp, r7
  401c20:	bd90      	pop	{r4, r7, pc}
  401c22:	bf00      	nop
  401c24:	20000000 	.word	0x20000000
  401c28:	00403cad 	.word	0x00403cad
  401c2c:	00403bf1 	.word	0x00403bf1
  401c30:	00403bc1 	.word	0x00403bc1

00401c34 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
  401c34:	b590      	push	{r4, r7, lr}
  401c36:	b085      	sub	sp, #20
  401c38:	af00      	add	r7, sp, #0
  401c3a:	4603      	mov	r3, r0
  401c3c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
  401c3e:	4b1e      	ldr	r3, [pc, #120]	; (401cb8 <mpu_set_int_latched+0x84>)
  401c40:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401c44:	79fa      	ldrb	r2, [r7, #7]
  401c46:	429a      	cmp	r2, r3
  401c48:	d101      	bne.n	401c4e <mpu_set_int_latched+0x1a>
        return 0;
  401c4a:	2300      	movs	r3, #0
  401c4c:	e030      	b.n	401cb0 <mpu_set_int_latched+0x7c>

    if (enable)
  401c4e:	79fb      	ldrb	r3, [r7, #7]
  401c50:	2b00      	cmp	r3, #0
  401c52:	d002      	beq.n	401c5a <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401c54:	2330      	movs	r3, #48	; 0x30
  401c56:	73fb      	strb	r3, [r7, #15]
  401c58:	e001      	b.n	401c5e <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
  401c5a:	2300      	movs	r3, #0
  401c5c:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
  401c5e:	4b16      	ldr	r3, [pc, #88]	; (401cb8 <mpu_set_int_latched+0x84>)
  401c60:	7c9b      	ldrb	r3, [r3, #18]
  401c62:	2b00      	cmp	r3, #0
  401c64:	d004      	beq.n	401c70 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
  401c66:	7bfb      	ldrb	r3, [r7, #15]
  401c68:	f043 0302 	orr.w	r3, r3, #2
  401c6c:	b2db      	uxtb	r3, r3
  401c6e:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
  401c70:	4b11      	ldr	r3, [pc, #68]	; (401cb8 <mpu_set_int_latched+0x84>)
  401c72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401c76:	2b00      	cmp	r3, #0
  401c78:	d004      	beq.n	401c84 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
  401c7a:	7bfb      	ldrb	r3, [r7, #15]
  401c7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401c80:	b2db      	uxtb	r3, r3
  401c82:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401c84:	4b0c      	ldr	r3, [pc, #48]	; (401cb8 <mpu_set_int_latched+0x84>)
  401c86:	685b      	ldr	r3, [r3, #4]
  401c88:	7818      	ldrb	r0, [r3, #0]
  401c8a:	4b0b      	ldr	r3, [pc, #44]	; (401cb8 <mpu_set_int_latched+0x84>)
  401c8c:	681b      	ldr	r3, [r3, #0]
  401c8e:	7dd9      	ldrb	r1, [r3, #23]
  401c90:	f107 030f 	add.w	r3, r7, #15
  401c94:	2201      	movs	r2, #1
  401c96:	4c09      	ldr	r4, [pc, #36]	; (401cbc <mpu_set_int_latched+0x88>)
  401c98:	47a0      	blx	r4
  401c9a:	4603      	mov	r3, r0
  401c9c:	2b00      	cmp	r3, #0
  401c9e:	d002      	beq.n	401ca6 <mpu_set_int_latched+0x72>
        return -1;
  401ca0:	f04f 33ff 	mov.w	r3, #4294967295
  401ca4:	e004      	b.n	401cb0 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
  401ca6:	4a04      	ldr	r2, [pc, #16]	; (401cb8 <mpu_set_int_latched+0x84>)
  401ca8:	79fb      	ldrb	r3, [r7, #7]
  401caa:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
  401cae:	2300      	movs	r3, #0
}
  401cb0:	4618      	mov	r0, r3
  401cb2:	3714      	adds	r7, #20
  401cb4:	46bd      	mov	sp, r7
  401cb6:	bd90      	pop	{r4, r7, pc}
  401cb8:	20000000 	.word	0x20000000
  401cbc:	00403bf1 	.word	0x00403bf1

00401cc0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
  401cc0:	b590      	push	{r4, r7, lr}
  401cc2:	b085      	sub	sp, #20
  401cc4:	af00      	add	r7, sp, #0
  401cc6:	4603      	mov	r3, r0
  401cc8:	603a      	str	r2, [r7, #0]
  401cca:	80fb      	strh	r3, [r7, #6]
  401ccc:	460b      	mov	r3, r1
  401cce:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
  401cd0:	683b      	ldr	r3, [r7, #0]
  401cd2:	2b00      	cmp	r3, #0
  401cd4:	d102      	bne.n	401cdc <mpu_write_mem+0x1c>
        return -1;
  401cd6:	f04f 33ff 	mov.w	r3, #4294967295
  401cda:	e03d      	b.n	401d58 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
  401cdc:	4b20      	ldr	r3, [pc, #128]	; (401d60 <mpu_write_mem+0xa0>)
  401cde:	7a9b      	ldrb	r3, [r3, #10]
  401ce0:	2b00      	cmp	r3, #0
  401ce2:	d102      	bne.n	401cea <mpu_write_mem+0x2a>
        return -1;
  401ce4:	f04f 33ff 	mov.w	r3, #4294967295
  401ce8:	e036      	b.n	401d58 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
  401cea:	88fb      	ldrh	r3, [r7, #6]
  401cec:	0a1b      	lsrs	r3, r3, #8
  401cee:	b29b      	uxth	r3, r3
  401cf0:	b2db      	uxtb	r3, r3
  401cf2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
  401cf4:	88fb      	ldrh	r3, [r7, #6]
  401cf6:	b2db      	uxtb	r3, r3
  401cf8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
  401cfa:	7b7b      	ldrb	r3, [r7, #13]
  401cfc:	461a      	mov	r2, r3
  401cfe:	88bb      	ldrh	r3, [r7, #4]
  401d00:	4413      	add	r3, r2
  401d02:	4a17      	ldr	r2, [pc, #92]	; (401d60 <mpu_write_mem+0xa0>)
  401d04:	6852      	ldr	r2, [r2, #4]
  401d06:	8952      	ldrh	r2, [r2, #10]
  401d08:	4293      	cmp	r3, r2
  401d0a:	dd02      	ble.n	401d12 <mpu_write_mem+0x52>
        return -1;
  401d0c:	f04f 33ff 	mov.w	r3, #4294967295
  401d10:	e022      	b.n	401d58 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
  401d12:	4b13      	ldr	r3, [pc, #76]	; (401d60 <mpu_write_mem+0xa0>)
  401d14:	685b      	ldr	r3, [r3, #4]
  401d16:	7818      	ldrb	r0, [r3, #0]
  401d18:	4b11      	ldr	r3, [pc, #68]	; (401d60 <mpu_write_mem+0xa0>)
  401d1a:	681b      	ldr	r3, [r3, #0]
  401d1c:	7ed9      	ldrb	r1, [r3, #27]
  401d1e:	f107 030c 	add.w	r3, r7, #12
  401d22:	2202      	movs	r2, #2
  401d24:	4c0f      	ldr	r4, [pc, #60]	; (401d64 <mpu_write_mem+0xa4>)
  401d26:	47a0      	blx	r4
  401d28:	4603      	mov	r3, r0
  401d2a:	2b00      	cmp	r3, #0
  401d2c:	d002      	beq.n	401d34 <mpu_write_mem+0x74>
        return -1;
  401d2e:	f04f 33ff 	mov.w	r3, #4294967295
  401d32:	e011      	b.n	401d58 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
  401d34:	4b0a      	ldr	r3, [pc, #40]	; (401d60 <mpu_write_mem+0xa0>)
  401d36:	685b      	ldr	r3, [r3, #4]
  401d38:	7818      	ldrb	r0, [r3, #0]
  401d3a:	4b09      	ldr	r3, [pc, #36]	; (401d60 <mpu_write_mem+0xa0>)
  401d3c:	681b      	ldr	r3, [r3, #0]
  401d3e:	7e19      	ldrb	r1, [r3, #24]
  401d40:	88bb      	ldrh	r3, [r7, #4]
  401d42:	b2da      	uxtb	r2, r3
  401d44:	683b      	ldr	r3, [r7, #0]
  401d46:	4c07      	ldr	r4, [pc, #28]	; (401d64 <mpu_write_mem+0xa4>)
  401d48:	47a0      	blx	r4
  401d4a:	4603      	mov	r3, r0
  401d4c:	2b00      	cmp	r3, #0
  401d4e:	d002      	beq.n	401d56 <mpu_write_mem+0x96>
        return -1;
  401d50:	f04f 33ff 	mov.w	r3, #4294967295
  401d54:	e000      	b.n	401d58 <mpu_write_mem+0x98>
    return 0;
  401d56:	2300      	movs	r3, #0
}
  401d58:	4618      	mov	r0, r3
  401d5a:	3714      	adds	r7, #20
  401d5c:	46bd      	mov	sp, r7
  401d5e:	bd90      	pop	{r4, r7, pc}
  401d60:	20000000 	.word	0x20000000
  401d64:	00403bf1 	.word	0x00403bf1

00401d68 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
  401d68:	b590      	push	{r4, r7, lr}
  401d6a:	b085      	sub	sp, #20
  401d6c:	af00      	add	r7, sp, #0
  401d6e:	4603      	mov	r3, r0
  401d70:	603a      	str	r2, [r7, #0]
  401d72:	80fb      	strh	r3, [r7, #6]
  401d74:	460b      	mov	r3, r1
  401d76:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
  401d78:	683b      	ldr	r3, [r7, #0]
  401d7a:	2b00      	cmp	r3, #0
  401d7c:	d102      	bne.n	401d84 <mpu_read_mem+0x1c>
        return -1;
  401d7e:	f04f 33ff 	mov.w	r3, #4294967295
  401d82:	e03d      	b.n	401e00 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
  401d84:	4b20      	ldr	r3, [pc, #128]	; (401e08 <mpu_read_mem+0xa0>)
  401d86:	7a9b      	ldrb	r3, [r3, #10]
  401d88:	2b00      	cmp	r3, #0
  401d8a:	d102      	bne.n	401d92 <mpu_read_mem+0x2a>
        return -1;
  401d8c:	f04f 33ff 	mov.w	r3, #4294967295
  401d90:	e036      	b.n	401e00 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
  401d92:	88fb      	ldrh	r3, [r7, #6]
  401d94:	0a1b      	lsrs	r3, r3, #8
  401d96:	b29b      	uxth	r3, r3
  401d98:	b2db      	uxtb	r3, r3
  401d9a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
  401d9c:	88fb      	ldrh	r3, [r7, #6]
  401d9e:	b2db      	uxtb	r3, r3
  401da0:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
  401da2:	7b7b      	ldrb	r3, [r7, #13]
  401da4:	461a      	mov	r2, r3
  401da6:	88bb      	ldrh	r3, [r7, #4]
  401da8:	4413      	add	r3, r2
  401daa:	4a17      	ldr	r2, [pc, #92]	; (401e08 <mpu_read_mem+0xa0>)
  401dac:	6852      	ldr	r2, [r2, #4]
  401dae:	8952      	ldrh	r2, [r2, #10]
  401db0:	4293      	cmp	r3, r2
  401db2:	dd02      	ble.n	401dba <mpu_read_mem+0x52>
        return -1;
  401db4:	f04f 33ff 	mov.w	r3, #4294967295
  401db8:	e022      	b.n	401e00 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
  401dba:	4b13      	ldr	r3, [pc, #76]	; (401e08 <mpu_read_mem+0xa0>)
  401dbc:	685b      	ldr	r3, [r3, #4]
  401dbe:	7818      	ldrb	r0, [r3, #0]
  401dc0:	4b11      	ldr	r3, [pc, #68]	; (401e08 <mpu_read_mem+0xa0>)
  401dc2:	681b      	ldr	r3, [r3, #0]
  401dc4:	7ed9      	ldrb	r1, [r3, #27]
  401dc6:	f107 030c 	add.w	r3, r7, #12
  401dca:	2202      	movs	r2, #2
  401dcc:	4c0f      	ldr	r4, [pc, #60]	; (401e0c <mpu_read_mem+0xa4>)
  401dce:	47a0      	blx	r4
  401dd0:	4603      	mov	r3, r0
  401dd2:	2b00      	cmp	r3, #0
  401dd4:	d002      	beq.n	401ddc <mpu_read_mem+0x74>
        return -1;
  401dd6:	f04f 33ff 	mov.w	r3, #4294967295
  401dda:	e011      	b.n	401e00 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
  401ddc:	4b0a      	ldr	r3, [pc, #40]	; (401e08 <mpu_read_mem+0xa0>)
  401dde:	685b      	ldr	r3, [r3, #4]
  401de0:	7818      	ldrb	r0, [r3, #0]
  401de2:	4b09      	ldr	r3, [pc, #36]	; (401e08 <mpu_read_mem+0xa0>)
  401de4:	681b      	ldr	r3, [r3, #0]
  401de6:	7e19      	ldrb	r1, [r3, #24]
  401de8:	88bb      	ldrh	r3, [r7, #4]
  401dea:	b2da      	uxtb	r2, r3
  401dec:	683b      	ldr	r3, [r7, #0]
  401dee:	4c08      	ldr	r4, [pc, #32]	; (401e10 <mpu_read_mem+0xa8>)
  401df0:	47a0      	blx	r4
  401df2:	4603      	mov	r3, r0
  401df4:	2b00      	cmp	r3, #0
  401df6:	d002      	beq.n	401dfe <mpu_read_mem+0x96>
        return -1;
  401df8:	f04f 33ff 	mov.w	r3, #4294967295
  401dfc:	e000      	b.n	401e00 <mpu_read_mem+0x98>
    return 0;
  401dfe:	2300      	movs	r3, #0
}
  401e00:	4618      	mov	r0, r3
  401e02:	3714      	adds	r7, #20
  401e04:	46bd      	mov	sp, r7
  401e06:	bd90      	pop	{r4, r7, pc}
  401e08:	20000000 	.word	0x20000000
  401e0c:	00403bf1 	.word	0x00403bf1
  401e10:	00403cad 	.word	0x00403cad

00401e14 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
  401e14:	b590      	push	{r4, r7, lr}
  401e16:	b08b      	sub	sp, #44	; 0x2c
  401e18:	af00      	add	r7, sp, #0
  401e1a:	60b9      	str	r1, [r7, #8]
  401e1c:	4611      	mov	r1, r2
  401e1e:	461a      	mov	r2, r3
  401e20:	4603      	mov	r3, r0
  401e22:	81fb      	strh	r3, [r7, #14]
  401e24:	460b      	mov	r3, r1
  401e26:	81bb      	strh	r3, [r7, #12]
  401e28:	4613      	mov	r3, r2
  401e2a:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
  401e2c:	4b37      	ldr	r3, [pc, #220]	; (401f0c <mpu_load_firmware+0xf8>)
  401e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401e32:	2b00      	cmp	r3, #0
  401e34:	d002      	beq.n	401e3c <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
  401e36:	f04f 33ff 	mov.w	r3, #4294967295
  401e3a:	e062      	b.n	401f02 <mpu_load_firmware+0xee>

    if (!firmware)
  401e3c:	68bb      	ldr	r3, [r7, #8]
  401e3e:	2b00      	cmp	r3, #0
  401e40:	d102      	bne.n	401e48 <mpu_load_firmware+0x34>
        return -1;
  401e42:	f04f 33ff 	mov.w	r3, #4294967295
  401e46:	e05c      	b.n	401f02 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
  401e48:	2300      	movs	r3, #0
  401e4a:	84fb      	strh	r3, [r7, #38]	; 0x26
  401e4c:	e034      	b.n	401eb8 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
  401e4e:	89fa      	ldrh	r2, [r7, #14]
  401e50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e52:	1ad3      	subs	r3, r2, r3
  401e54:	2b10      	cmp	r3, #16
  401e56:	bfa8      	it	ge
  401e58:	2310      	movge	r3, #16
  401e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
  401e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e5e:	68ba      	ldr	r2, [r7, #8]
  401e60:	441a      	add	r2, r3
  401e62:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  401e64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e66:	4618      	mov	r0, r3
  401e68:	4b29      	ldr	r3, [pc, #164]	; (401f10 <mpu_load_firmware+0xfc>)
  401e6a:	4798      	blx	r3
  401e6c:	4603      	mov	r3, r0
  401e6e:	2b00      	cmp	r3, #0
  401e70:	d002      	beq.n	401e78 <mpu_load_firmware+0x64>
            return -1;
  401e72:	f04f 33ff 	mov.w	r3, #4294967295
  401e76:	e044      	b.n	401f02 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
  401e78:	f107 0214 	add.w	r2, r7, #20
  401e7c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  401e7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e80:	4618      	mov	r0, r3
  401e82:	4b24      	ldr	r3, [pc, #144]	; (401f14 <mpu_load_firmware+0x100>)
  401e84:	4798      	blx	r3
  401e86:	4603      	mov	r3, r0
  401e88:	2b00      	cmp	r3, #0
  401e8a:	d002      	beq.n	401e92 <mpu_load_firmware+0x7e>
            return -1;
  401e8c:	f04f 33ff 	mov.w	r3, #4294967295
  401e90:	e037      	b.n	401f02 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
  401e92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e94:	68ba      	ldr	r2, [r7, #8]
  401e96:	4413      	add	r3, r2
  401e98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  401e9a:	f107 0114 	add.w	r1, r7, #20
  401e9e:	4618      	mov	r0, r3
  401ea0:	4b1d      	ldr	r3, [pc, #116]	; (401f18 <mpu_load_firmware+0x104>)
  401ea2:	4798      	blx	r3
  401ea4:	4603      	mov	r3, r0
  401ea6:	2b00      	cmp	r3, #0
  401ea8:	d002      	beq.n	401eb0 <mpu_load_firmware+0x9c>
            return -2;
  401eaa:	f06f 0301 	mvn.w	r3, #1
  401eae:	e028      	b.n	401f02 <mpu_load_firmware+0xee>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
  401eb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  401eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  401eb4:	4413      	add	r3, r2
  401eb6:	84fb      	strh	r3, [r7, #38]	; 0x26
  401eb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  401eba:	89fb      	ldrh	r3, [r7, #14]
  401ebc:	429a      	cmp	r2, r3
  401ebe:	d3c6      	bcc.n	401e4e <mpu_load_firmware+0x3a>
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
  401ec0:	89bb      	ldrh	r3, [r7, #12]
  401ec2:	0a1b      	lsrs	r3, r3, #8
  401ec4:	b29b      	uxth	r3, r3
  401ec6:	b2db      	uxtb	r3, r3
  401ec8:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
  401eca:	89bb      	ldrh	r3, [r7, #12]
  401ecc:	b2db      	uxtb	r3, r3
  401ece:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
  401ed0:	4b0e      	ldr	r3, [pc, #56]	; (401f0c <mpu_load_firmware+0xf8>)
  401ed2:	685b      	ldr	r3, [r3, #4]
  401ed4:	7818      	ldrb	r0, [r3, #0]
  401ed6:	4b0d      	ldr	r3, [pc, #52]	; (401f0c <mpu_load_firmware+0xf8>)
  401ed8:	681b      	ldr	r3, [r3, #0]
  401eda:	7f59      	ldrb	r1, [r3, #29]
  401edc:	f107 0310 	add.w	r3, r7, #16
  401ee0:	2202      	movs	r2, #2
  401ee2:	4c0e      	ldr	r4, [pc, #56]	; (401f1c <mpu_load_firmware+0x108>)
  401ee4:	47a0      	blx	r4
  401ee6:	4603      	mov	r3, r0
  401ee8:	2b00      	cmp	r3, #0
  401eea:	d002      	beq.n	401ef2 <mpu_load_firmware+0xde>
        return -1;
  401eec:	f04f 33ff 	mov.w	r3, #4294967295
  401ef0:	e007      	b.n	401f02 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
  401ef2:	4b06      	ldr	r3, [pc, #24]	; (401f0c <mpu_load_firmware+0xf8>)
  401ef4:	2201      	movs	r2, #1
  401ef6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
  401efa:	4a04      	ldr	r2, [pc, #16]	; (401f0c <mpu_load_firmware+0xf8>)
  401efc:	88fb      	ldrh	r3, [r7, #6]
  401efe:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
  401f00:	2300      	movs	r3, #0
}
  401f02:	4618      	mov	r0, r3
  401f04:	372c      	adds	r7, #44	; 0x2c
  401f06:	46bd      	mov	sp, r7
  401f08:	bd90      	pop	{r4, r7, pc}
  401f0a:	bf00      	nop
  401f0c:	20000000 	.word	0x20000000
  401f10:	00401cc1 	.word	0x00401cc1
  401f14:	00401d69 	.word	0x00401d69
  401f18:	004069f9 	.word	0x004069f9
  401f1c:	00403bf1 	.word	0x00403bf1

00401f20 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
  401f20:	b590      	push	{r4, r7, lr}
  401f22:	b085      	sub	sp, #20
  401f24:	af00      	add	r7, sp, #0
  401f26:	4603      	mov	r3, r0
  401f28:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
  401f2a:	4b26      	ldr	r3, [pc, #152]	; (401fc4 <mpu_set_dmp_state+0xa4>)
  401f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401f30:	79fa      	ldrb	r2, [r7, #7]
  401f32:	429a      	cmp	r2, r3
  401f34:	d101      	bne.n	401f3a <mpu_set_dmp_state+0x1a>
        return 0;
  401f36:	2300      	movs	r3, #0
  401f38:	e040      	b.n	401fbc <mpu_set_dmp_state+0x9c>

    if (enable) {
  401f3a:	79fb      	ldrb	r3, [r7, #7]
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	d027      	beq.n	401f90 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
  401f40:	4b20      	ldr	r3, [pc, #128]	; (401fc4 <mpu_set_dmp_state+0xa4>)
  401f42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401f46:	2b00      	cmp	r3, #0
  401f48:	d102      	bne.n	401f50 <mpu_set_dmp_state+0x30>
            return -1;
  401f4a:	f04f 33ff 	mov.w	r3, #4294967295
  401f4e:	e035      	b.n	401fbc <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
  401f50:	2000      	movs	r0, #0
  401f52:	4b1d      	ldr	r3, [pc, #116]	; (401fc8 <mpu_set_dmp_state+0xa8>)
  401f54:	4798      	blx	r3
        /* Disable bypass mode. */
        mpu_set_bypass(0);
  401f56:	2000      	movs	r0, #0
  401f58:	4b1c      	ldr	r3, [pc, #112]	; (401fcc <mpu_set_dmp_state+0xac>)
  401f5a:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
  401f5c:	4b19      	ldr	r3, [pc, #100]	; (401fc4 <mpu_set_dmp_state+0xa4>)
  401f5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  401f60:	4618      	mov	r0, r3
  401f62:	4b1b      	ldr	r3, [pc, #108]	; (401fd0 <mpu_set_dmp_state+0xb0>)
  401f64:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
  401f66:	2300      	movs	r3, #0
  401f68:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
  401f6a:	4b16      	ldr	r3, [pc, #88]	; (401fc4 <mpu_set_dmp_state+0xa4>)
  401f6c:	685b      	ldr	r3, [r3, #4]
  401f6e:	7818      	ldrb	r0, [r3, #0]
  401f70:	f107 030f 	add.w	r3, r7, #15
  401f74:	2201      	movs	r2, #1
  401f76:	2123      	movs	r1, #35	; 0x23
  401f78:	4c16      	ldr	r4, [pc, #88]	; (401fd4 <mpu_set_dmp_state+0xb4>)
  401f7a:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 1;
  401f7c:	4b11      	ldr	r3, [pc, #68]	; (401fc4 <mpu_set_dmp_state+0xa4>)
  401f7e:	2201      	movs	r2, #1
  401f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
  401f84:	2001      	movs	r0, #1
  401f86:	4b10      	ldr	r3, [pc, #64]	; (401fc8 <mpu_set_dmp_state+0xa8>)
  401f88:	4798      	blx	r3
        mpu_reset_fifo();
  401f8a:	4b13      	ldr	r3, [pc, #76]	; (401fd8 <mpu_set_dmp_state+0xb8>)
  401f8c:	4798      	blx	r3
  401f8e:	e014      	b.n	401fba <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
  401f90:	2000      	movs	r0, #0
  401f92:	4b0d      	ldr	r3, [pc, #52]	; (401fc8 <mpu_set_dmp_state+0xa8>)
  401f94:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
  401f96:	4b0b      	ldr	r3, [pc, #44]	; (401fc4 <mpu_set_dmp_state+0xa4>)
  401f98:	7c1b      	ldrb	r3, [r3, #16]
  401f9a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
  401f9c:	4b09      	ldr	r3, [pc, #36]	; (401fc4 <mpu_set_dmp_state+0xa4>)
  401f9e:	685b      	ldr	r3, [r3, #4]
  401fa0:	7818      	ldrb	r0, [r3, #0]
  401fa2:	f107 030f 	add.w	r3, r7, #15
  401fa6:	2201      	movs	r2, #1
  401fa8:	2123      	movs	r1, #35	; 0x23
  401faa:	4c0a      	ldr	r4, [pc, #40]	; (401fd4 <mpu_set_dmp_state+0xb4>)
  401fac:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 0;
  401fae:	4b05      	ldr	r3, [pc, #20]	; (401fc4 <mpu_set_dmp_state+0xa4>)
  401fb0:	2200      	movs	r2, #0
  401fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
  401fb6:	4b08      	ldr	r3, [pc, #32]	; (401fd8 <mpu_set_dmp_state+0xb8>)
  401fb8:	4798      	blx	r3
    }
    return 0;
  401fba:	2300      	movs	r3, #0
}
  401fbc:	4618      	mov	r0, r3
  401fbe:	3714      	adds	r7, #20
  401fc0:	46bd      	mov	sp, r7
  401fc2:	bd90      	pop	{r4, r7, pc}
  401fc4:	20000000 	.word	0x20000000
  401fc8:	00400dc1 	.word	0x00400dc1
  401fcc:	00401a9d 	.word	0x00401a9d
  401fd0:	004016b1 	.word	0x004016b1
  401fd4:	00403bf1 	.word	0x00403bf1
  401fd8:	00401179 	.word	0x00401179

00401fdc <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
  401fdc:	b590      	push	{r4, r7, lr}
  401fde:	b085      	sub	sp, #20
  401fe0:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
  401fe2:	2001      	movs	r0, #1
  401fe4:	4b9b      	ldr	r3, [pc, #620]	; (402254 <setup_compass+0x278>)
  401fe6:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
  401fe8:	230c      	movs	r3, #12
  401fea:	73fb      	strb	r3, [r7, #15]
  401fec:	e010      	b.n	402010 <setup_compass+0x34>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
  401fee:	1d3b      	adds	r3, r7, #4
  401ff0:	7bf8      	ldrb	r0, [r7, #15]
  401ff2:	2201      	movs	r2, #1
  401ff4:	2100      	movs	r1, #0
  401ff6:	4c98      	ldr	r4, [pc, #608]	; (402258 <setup_compass+0x27c>)
  401ff8:	47a0      	blx	r4
  401ffa:	4603      	mov	r3, r0
  401ffc:	60bb      	str	r3, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
  401ffe:	68bb      	ldr	r3, [r7, #8]
  402000:	2b00      	cmp	r3, #0
  402002:	d102      	bne.n	40200a <setup_compass+0x2e>
  402004:	793b      	ldrb	r3, [r7, #4]
  402006:	2b48      	cmp	r3, #72	; 0x48
  402008:	d006      	beq.n	402018 <setup_compass+0x3c>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
  40200a:	7bfb      	ldrb	r3, [r7, #15]
  40200c:	3301      	adds	r3, #1
  40200e:	73fb      	strb	r3, [r7, #15]
  402010:	7bfb      	ldrb	r3, [r7, #15]
  402012:	2b0f      	cmp	r3, #15
  402014:	d9eb      	bls.n	401fee <setup_compass+0x12>
  402016:	e000      	b.n	40201a <setup_compass+0x3e>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
  402018:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
  40201a:	7bfb      	ldrb	r3, [r7, #15]
  40201c:	2b0f      	cmp	r3, #15
  40201e:	d902      	bls.n	402026 <setup_compass+0x4a>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
  402020:	f04f 33ff 	mov.w	r3, #4294967295
  402024:	e112      	b.n	40224c <setup_compass+0x270>
    }

    st.chip_cfg.compass_addr = akm_addr;
  402026:	4a8d      	ldr	r2, [pc, #564]	; (40225c <setup_compass+0x280>)
  402028:	7bfb      	ldrb	r3, [r7, #15]
  40202a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
  40202e:	2310      	movs	r3, #16
  402030:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  402032:	4b8a      	ldr	r3, [pc, #552]	; (40225c <setup_compass+0x280>)
  402034:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402038:	1d3b      	adds	r3, r7, #4
  40203a:	2201      	movs	r2, #1
  40203c:	210a      	movs	r1, #10
  40203e:	4c88      	ldr	r4, [pc, #544]	; (402260 <setup_compass+0x284>)
  402040:	47a0      	blx	r4
  402042:	4603      	mov	r3, r0
  402044:	2b00      	cmp	r3, #0
  402046:	d002      	beq.n	40204e <setup_compass+0x72>
        return -1;
  402048:	f04f 33ff 	mov.w	r3, #4294967295
  40204c:	e0fe      	b.n	40224c <setup_compass+0x270>
    delay_ms(1);
  40204e:	2001      	movs	r0, #1
  402050:	4b84      	ldr	r3, [pc, #528]	; (402264 <setup_compass+0x288>)
  402052:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
  402054:	231f      	movs	r3, #31
  402056:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  402058:	4b80      	ldr	r3, [pc, #512]	; (40225c <setup_compass+0x280>)
  40205a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  40205e:	1d3b      	adds	r3, r7, #4
  402060:	2201      	movs	r2, #1
  402062:	210a      	movs	r1, #10
  402064:	4c7e      	ldr	r4, [pc, #504]	; (402260 <setup_compass+0x284>)
  402066:	47a0      	blx	r4
  402068:	4603      	mov	r3, r0
  40206a:	2b00      	cmp	r3, #0
  40206c:	d002      	beq.n	402074 <setup_compass+0x98>
        return -1;
  40206e:	f04f 33ff 	mov.w	r3, #4294967295
  402072:	e0eb      	b.n	40224c <setup_compass+0x270>
    delay_ms(1);
  402074:	2001      	movs	r0, #1
  402076:	4b7b      	ldr	r3, [pc, #492]	; (402264 <setup_compass+0x288>)
  402078:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
  40207a:	4b78      	ldr	r3, [pc, #480]	; (40225c <setup_compass+0x280>)
  40207c:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402080:	1d3b      	adds	r3, r7, #4
  402082:	2203      	movs	r2, #3
  402084:	2110      	movs	r1, #16
  402086:	4c74      	ldr	r4, [pc, #464]	; (402258 <setup_compass+0x27c>)
  402088:	47a0      	blx	r4
  40208a:	4603      	mov	r3, r0
  40208c:	2b00      	cmp	r3, #0
  40208e:	d002      	beq.n	402096 <setup_compass+0xba>
        return -1;
  402090:	f04f 33ff 	mov.w	r3, #4294967295
  402094:	e0da      	b.n	40224c <setup_compass+0x270>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
  402096:	793b      	ldrb	r3, [r7, #4]
  402098:	b29b      	uxth	r3, r3
  40209a:	3380      	adds	r3, #128	; 0x80
  40209c:	b29b      	uxth	r3, r3
  40209e:	b21a      	sxth	r2, r3
  4020a0:	4b6e      	ldr	r3, [pc, #440]	; (40225c <setup_compass+0x280>)
  4020a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
  4020a4:	797b      	ldrb	r3, [r7, #5]
  4020a6:	b29b      	uxth	r3, r3
  4020a8:	3380      	adds	r3, #128	; 0x80
  4020aa:	b29b      	uxth	r3, r3
  4020ac:	b21a      	sxth	r2, r3
  4020ae:	4b6b      	ldr	r3, [pc, #428]	; (40225c <setup_compass+0x280>)
  4020b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
  4020b2:	79bb      	ldrb	r3, [r7, #6]
  4020b4:	b29b      	uxth	r3, r3
  4020b6:	3380      	adds	r3, #128	; 0x80
  4020b8:	b29b      	uxth	r3, r3
  4020ba:	b21a      	sxth	r2, r3
  4020bc:	4b67      	ldr	r3, [pc, #412]	; (40225c <setup_compass+0x280>)
  4020be:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
  4020c0:	2310      	movs	r3, #16
  4020c2:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  4020c4:	4b65      	ldr	r3, [pc, #404]	; (40225c <setup_compass+0x280>)
  4020c6:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  4020ca:	1d3b      	adds	r3, r7, #4
  4020cc:	2201      	movs	r2, #1
  4020ce:	210a      	movs	r1, #10
  4020d0:	4c63      	ldr	r4, [pc, #396]	; (402260 <setup_compass+0x284>)
  4020d2:	47a0      	blx	r4
  4020d4:	4603      	mov	r3, r0
  4020d6:	2b00      	cmp	r3, #0
  4020d8:	d002      	beq.n	4020e0 <setup_compass+0x104>
        return -1;
  4020da:	f04f 33ff 	mov.w	r3, #4294967295
  4020de:	e0b5      	b.n	40224c <setup_compass+0x270>
    delay_ms(1);
  4020e0:	2001      	movs	r0, #1
  4020e2:	4b60      	ldr	r3, [pc, #384]	; (402264 <setup_compass+0x288>)
  4020e4:	4798      	blx	r3

    mpu_set_bypass(0);
  4020e6:	2000      	movs	r0, #0
  4020e8:	4b5a      	ldr	r3, [pc, #360]	; (402254 <setup_compass+0x278>)
  4020ea:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
  4020ec:	2340      	movs	r3, #64	; 0x40
  4020ee:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
  4020f0:	4b5a      	ldr	r3, [pc, #360]	; (40225c <setup_compass+0x280>)
  4020f2:	685b      	ldr	r3, [r3, #4]
  4020f4:	7818      	ldrb	r0, [r3, #0]
  4020f6:	4b59      	ldr	r3, [pc, #356]	; (40225c <setup_compass+0x280>)
  4020f8:	681b      	ldr	r3, [r3, #0]
  4020fa:	7e99      	ldrb	r1, [r3, #26]
  4020fc:	1d3b      	adds	r3, r7, #4
  4020fe:	2201      	movs	r2, #1
  402100:	4c57      	ldr	r4, [pc, #348]	; (402260 <setup_compass+0x284>)
  402102:	47a0      	blx	r4
  402104:	4603      	mov	r3, r0
  402106:	2b00      	cmp	r3, #0
  402108:	d002      	beq.n	402110 <setup_compass+0x134>
        return -1;
  40210a:	f04f 33ff 	mov.w	r3, #4294967295
  40210e:	e09d      	b.n	40224c <setup_compass+0x270>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
  402110:	4b52      	ldr	r3, [pc, #328]	; (40225c <setup_compass+0x280>)
  402112:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  402116:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40211a:	b2db      	uxtb	r3, r3
  40211c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
  40211e:	4b4f      	ldr	r3, [pc, #316]	; (40225c <setup_compass+0x280>)
  402120:	685b      	ldr	r3, [r3, #4]
  402122:	7818      	ldrb	r0, [r3, #0]
  402124:	4b4d      	ldr	r3, [pc, #308]	; (40225c <setup_compass+0x280>)
  402126:	681b      	ldr	r3, [r3, #0]
  402128:	7f99      	ldrb	r1, [r3, #30]
  40212a:	1d3b      	adds	r3, r7, #4
  40212c:	2201      	movs	r2, #1
  40212e:	4c4c      	ldr	r4, [pc, #304]	; (402260 <setup_compass+0x284>)
  402130:	47a0      	blx	r4
  402132:	4603      	mov	r3, r0
  402134:	2b00      	cmp	r3, #0
  402136:	d002      	beq.n	40213e <setup_compass+0x162>
        return -1;
  402138:	f04f 33ff 	mov.w	r3, #4294967295
  40213c:	e086      	b.n	40224c <setup_compass+0x270>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
  40213e:	2302      	movs	r3, #2
  402140:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
  402142:	4b46      	ldr	r3, [pc, #280]	; (40225c <setup_compass+0x280>)
  402144:	685b      	ldr	r3, [r3, #4]
  402146:	7818      	ldrb	r0, [r3, #0]
  402148:	4b44      	ldr	r3, [pc, #272]	; (40225c <setup_compass+0x280>)
  40214a:	681b      	ldr	r3, [r3, #0]
  40214c:	7fd9      	ldrb	r1, [r3, #31]
  40214e:	1d3b      	adds	r3, r7, #4
  402150:	2201      	movs	r2, #1
  402152:	4c43      	ldr	r4, [pc, #268]	; (402260 <setup_compass+0x284>)
  402154:	47a0      	blx	r4
  402156:	4603      	mov	r3, r0
  402158:	2b00      	cmp	r3, #0
  40215a:	d002      	beq.n	402162 <setup_compass+0x186>
        return -1;
  40215c:	f04f 33ff 	mov.w	r3, #4294967295
  402160:	e074      	b.n	40224c <setup_compass+0x270>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
  402162:	2388      	movs	r3, #136	; 0x88
  402164:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
  402166:	4b3d      	ldr	r3, [pc, #244]	; (40225c <setup_compass+0x280>)
  402168:	685b      	ldr	r3, [r3, #4]
  40216a:	7818      	ldrb	r0, [r3, #0]
  40216c:	4b3b      	ldr	r3, [pc, #236]	; (40225c <setup_compass+0x280>)
  40216e:	681b      	ldr	r3, [r3, #0]
  402170:	f893 1020 	ldrb.w	r1, [r3, #32]
  402174:	1d3b      	adds	r3, r7, #4
  402176:	2201      	movs	r2, #1
  402178:	4c39      	ldr	r4, [pc, #228]	; (402260 <setup_compass+0x284>)
  40217a:	47a0      	blx	r4
  40217c:	4603      	mov	r3, r0
  40217e:	2b00      	cmp	r3, #0
  402180:	d002      	beq.n	402188 <setup_compass+0x1ac>
        return -1;
  402182:	f04f 33ff 	mov.w	r3, #4294967295
  402186:	e061      	b.n	40224c <setup_compass+0x270>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
  402188:	4b34      	ldr	r3, [pc, #208]	; (40225c <setup_compass+0x280>)
  40218a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  40218e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
  402190:	4b32      	ldr	r3, [pc, #200]	; (40225c <setup_compass+0x280>)
  402192:	685b      	ldr	r3, [r3, #4]
  402194:	7818      	ldrb	r0, [r3, #0]
  402196:	4b31      	ldr	r3, [pc, #196]	; (40225c <setup_compass+0x280>)
  402198:	681b      	ldr	r3, [r3, #0]
  40219a:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
  40219e:	1d3b      	adds	r3, r7, #4
  4021a0:	2201      	movs	r2, #1
  4021a2:	4c2f      	ldr	r4, [pc, #188]	; (402260 <setup_compass+0x284>)
  4021a4:	47a0      	blx	r4
  4021a6:	4603      	mov	r3, r0
  4021a8:	2b00      	cmp	r3, #0
  4021aa:	d002      	beq.n	4021b2 <setup_compass+0x1d6>
        return -1;
  4021ac:	f04f 33ff 	mov.w	r3, #4294967295
  4021b0:	e04c      	b.n	40224c <setup_compass+0x270>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
  4021b2:	230a      	movs	r3, #10
  4021b4:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
  4021b6:	4b29      	ldr	r3, [pc, #164]	; (40225c <setup_compass+0x280>)
  4021b8:	685b      	ldr	r3, [r3, #4]
  4021ba:	7818      	ldrb	r0, [r3, #0]
  4021bc:	4b27      	ldr	r3, [pc, #156]	; (40225c <setup_compass+0x280>)
  4021be:	681b      	ldr	r3, [r3, #0]
  4021c0:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
  4021c4:	1d3b      	adds	r3, r7, #4
  4021c6:	2201      	movs	r2, #1
  4021c8:	4c25      	ldr	r4, [pc, #148]	; (402260 <setup_compass+0x284>)
  4021ca:	47a0      	blx	r4
  4021cc:	4603      	mov	r3, r0
  4021ce:	2b00      	cmp	r3, #0
  4021d0:	d002      	beq.n	4021d8 <setup_compass+0x1fc>
        return -1;
  4021d2:	f04f 33ff 	mov.w	r3, #4294967295
  4021d6:	e039      	b.n	40224c <setup_compass+0x270>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
  4021d8:	2381      	movs	r3, #129	; 0x81
  4021da:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
  4021dc:	4b1f      	ldr	r3, [pc, #124]	; (40225c <setup_compass+0x280>)
  4021de:	685b      	ldr	r3, [r3, #4]
  4021e0:	7818      	ldrb	r0, [r3, #0]
  4021e2:	4b1e      	ldr	r3, [pc, #120]	; (40225c <setup_compass+0x280>)
  4021e4:	681b      	ldr	r3, [r3, #0]
  4021e6:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
  4021ea:	1d3b      	adds	r3, r7, #4
  4021ec:	2201      	movs	r2, #1
  4021ee:	4c1c      	ldr	r4, [pc, #112]	; (402260 <setup_compass+0x284>)
  4021f0:	47a0      	blx	r4
  4021f2:	4603      	mov	r3, r0
  4021f4:	2b00      	cmp	r3, #0
  4021f6:	d002      	beq.n	4021fe <setup_compass+0x222>
        return -1;
  4021f8:	f04f 33ff 	mov.w	r3, #4294967295
  4021fc:	e026      	b.n	40224c <setup_compass+0x270>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
  4021fe:	2311      	movs	r3, #17
  402200:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
  402202:	4b16      	ldr	r3, [pc, #88]	; (40225c <setup_compass+0x280>)
  402204:	685b      	ldr	r3, [r3, #4]
  402206:	7818      	ldrb	r0, [r3, #0]
  402208:	4b14      	ldr	r3, [pc, #80]	; (40225c <setup_compass+0x280>)
  40220a:	681b      	ldr	r3, [r3, #0]
  40220c:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
  402210:	1d3b      	adds	r3, r7, #4
  402212:	2201      	movs	r2, #1
  402214:	4c12      	ldr	r4, [pc, #72]	; (402260 <setup_compass+0x284>)
  402216:	47a0      	blx	r4
  402218:	4603      	mov	r3, r0
  40221a:	2b00      	cmp	r3, #0
  40221c:	d002      	beq.n	402224 <setup_compass+0x248>
        return -1;
  40221e:	f04f 33ff 	mov.w	r3, #4294967295
  402222:	e013      	b.n	40224c <setup_compass+0x270>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
  402224:	2303      	movs	r3, #3
  402226:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
  402228:	4b0c      	ldr	r3, [pc, #48]	; (40225c <setup_compass+0x280>)
  40222a:	685b      	ldr	r3, [r3, #4]
  40222c:	7818      	ldrb	r0, [r3, #0]
  40222e:	4b0b      	ldr	r3, [pc, #44]	; (40225c <setup_compass+0x280>)
  402230:	681b      	ldr	r3, [r3, #0]
  402232:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
  402236:	1d3b      	adds	r3, r7, #4
  402238:	2201      	movs	r2, #1
  40223a:	4c09      	ldr	r4, [pc, #36]	; (402260 <setup_compass+0x284>)
  40223c:	47a0      	blx	r4
  40223e:	4603      	mov	r3, r0
  402240:	2b00      	cmp	r3, #0
  402242:	d002      	beq.n	40224a <setup_compass+0x26e>
        return -1;
  402244:	f04f 33ff 	mov.w	r3, #4294967295
  402248:	e000      	b.n	40224c <setup_compass+0x270>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
  40224a:	2300      	movs	r3, #0
}
  40224c:	4618      	mov	r0, r3
  40224e:	3714      	adds	r7, #20
  402250:	46bd      	mov	sp, r7
  402252:	bd90      	pop	{r4, r7, pc}
  402254:	00401a9d 	.word	0x00401a9d
  402258:	00403cad 	.word	0x00403cad
  40225c:	20000000 	.word	0x20000000
  402260:	00403bf1 	.word	0x00403bf1
  402264:	00403bc1 	.word	0x00403bc1

00402268 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
  402268:	b598      	push	{r3, r4, r7, lr}
  40226a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
  40226c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402270:	23c8      	movs	r3, #200	; 0xc8
  402272:	4904      	ldr	r1, [pc, #16]	; (402284 <dmp_load_motion_driver_firmware+0x1c>)
  402274:	f640 30f6 	movw	r0, #3062	; 0xbf6
  402278:	4c03      	ldr	r4, [pc, #12]	; (402288 <dmp_load_motion_driver_firmware+0x20>)
  40227a:	47a0      	blx	r4
  40227c:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
  40227e:	4618      	mov	r0, r3
  402280:	bd98      	pop	{r3, r4, r7, pc}
  402282:	bf00      	nop
  402284:	00406f84 	.word	0x00406f84
  402288:	00401e15 	.word	0x00401e15

0040228c <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
  40228c:	b580      	push	{r7, lr}
  40228e:	b088      	sub	sp, #32
  402290:	af00      	add	r7, sp, #0
  402292:	4603      	mov	r3, r0
  402294:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
  402296:	4a6d      	ldr	r2, [pc, #436]	; (40244c <dmp_set_orientation+0x1c0>)
  402298:	f107 0314 	add.w	r3, r7, #20
  40229c:	8811      	ldrh	r1, [r2, #0]
  40229e:	7892      	ldrb	r2, [r2, #2]
  4022a0:	8019      	strh	r1, [r3, #0]
  4022a2:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
  4022a4:	4a6a      	ldr	r2, [pc, #424]	; (402450 <dmp_set_orientation+0x1c4>)
  4022a6:	f107 0310 	add.w	r3, r7, #16
  4022aa:	8811      	ldrh	r1, [r2, #0]
  4022ac:	7892      	ldrb	r2, [r2, #2]
  4022ae:	8019      	strh	r1, [r3, #0]
  4022b0:	709a      	strb	r2, [r3, #2]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
  4022b2:	4a68      	ldr	r2, [pc, #416]	; (402454 <dmp_set_orientation+0x1c8>)
  4022b4:	f107 030c 	add.w	r3, r7, #12
  4022b8:	8811      	ldrh	r1, [r2, #0]
  4022ba:	7892      	ldrb	r2, [r2, #2]
  4022bc:	8019      	strh	r1, [r3, #0]
  4022be:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
  4022c0:	4a65      	ldr	r2, [pc, #404]	; (402458 <dmp_set_orientation+0x1cc>)
  4022c2:	f107 0308 	add.w	r3, r7, #8
  4022c6:	8811      	ldrh	r1, [r2, #0]
  4022c8:	7892      	ldrb	r2, [r2, #2]
  4022ca:	8019      	strh	r1, [r3, #0]
  4022cc:	709a      	strb	r2, [r3, #2]

    gyro_regs[0] = gyro_axes[orient & 3];
  4022ce:	88fb      	ldrh	r3, [r7, #6]
  4022d0:	f003 0303 	and.w	r3, r3, #3
  4022d4:	f107 0220 	add.w	r2, r7, #32
  4022d8:	4413      	add	r3, r2
  4022da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4022de:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
  4022e0:	88fb      	ldrh	r3, [r7, #6]
  4022e2:	08db      	lsrs	r3, r3, #3
  4022e4:	b29b      	uxth	r3, r3
  4022e6:	f003 0303 	and.w	r3, r3, #3
  4022ea:	f107 0220 	add.w	r2, r7, #32
  4022ee:	4413      	add	r3, r2
  4022f0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4022f4:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
  4022f6:	88fb      	ldrh	r3, [r7, #6]
  4022f8:	099b      	lsrs	r3, r3, #6
  4022fa:	b29b      	uxth	r3, r3
  4022fc:	f003 0303 	and.w	r3, r3, #3
  402300:	f107 0220 	add.w	r2, r7, #32
  402304:	4413      	add	r3, r2
  402306:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  40230a:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
  40230c:	88fb      	ldrh	r3, [r7, #6]
  40230e:	f003 0303 	and.w	r3, r3, #3
  402312:	f107 0220 	add.w	r2, r7, #32
  402316:	4413      	add	r3, r2
  402318:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  40231c:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
  40231e:	88fb      	ldrh	r3, [r7, #6]
  402320:	08db      	lsrs	r3, r3, #3
  402322:	b29b      	uxth	r3, r3
  402324:	f003 0303 	and.w	r3, r3, #3
  402328:	f107 0220 	add.w	r2, r7, #32
  40232c:	4413      	add	r3, r2
  40232e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  402332:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
  402334:	88fb      	ldrh	r3, [r7, #6]
  402336:	099b      	lsrs	r3, r3, #6
  402338:	b29b      	uxth	r3, r3
  40233a:	f003 0303 	and.w	r3, r3, #3
  40233e:	f107 0220 	add.w	r2, r7, #32
  402342:	4413      	add	r3, r2
  402344:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  402348:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
  40234a:	f107 031c 	add.w	r3, r7, #28
  40234e:	461a      	mov	r2, r3
  402350:	2103      	movs	r1, #3
  402352:	f240 4026 	movw	r0, #1062	; 0x426
  402356:	4b41      	ldr	r3, [pc, #260]	; (40245c <dmp_set_orientation+0x1d0>)
  402358:	4798      	blx	r3
  40235a:	4603      	mov	r3, r0
  40235c:	2b00      	cmp	r3, #0
  40235e:	d002      	beq.n	402366 <dmp_set_orientation+0xda>
        return -1;
  402360:	f04f 33ff 	mov.w	r3, #4294967295
  402364:	e06e      	b.n	402444 <dmp_set_orientation+0x1b8>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
  402366:	f107 0318 	add.w	r3, r7, #24
  40236a:	461a      	mov	r2, r3
  40236c:	2103      	movs	r1, #3
  40236e:	f240 402a 	movw	r0, #1066	; 0x42a
  402372:	4b3a      	ldr	r3, [pc, #232]	; (40245c <dmp_set_orientation+0x1d0>)
  402374:	4798      	blx	r3
  402376:	4603      	mov	r3, r0
  402378:	2b00      	cmp	r3, #0
  40237a:	d002      	beq.n	402382 <dmp_set_orientation+0xf6>
        return -1;
  40237c:	f04f 33ff 	mov.w	r3, #4294967295
  402380:	e060      	b.n	402444 <dmp_set_orientation+0x1b8>

    memcpy(gyro_regs, gyro_sign, 3);
  402382:	f107 031c 	add.w	r3, r7, #28
  402386:	f107 020c 	add.w	r2, r7, #12
  40238a:	6812      	ldr	r2, [r2, #0]
  40238c:	4611      	mov	r1, r2
  40238e:	8019      	strh	r1, [r3, #0]
  402390:	3302      	adds	r3, #2
  402392:	0c12      	lsrs	r2, r2, #16
  402394:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
  402396:	f107 0318 	add.w	r3, r7, #24
  40239a:	f107 0208 	add.w	r2, r7, #8
  40239e:	6812      	ldr	r2, [r2, #0]
  4023a0:	4611      	mov	r1, r2
  4023a2:	8019      	strh	r1, [r3, #0]
  4023a4:	3302      	adds	r3, #2
  4023a6:	0c12      	lsrs	r2, r2, #16
  4023a8:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
  4023aa:	88fb      	ldrh	r3, [r7, #6]
  4023ac:	f003 0304 	and.w	r3, r3, #4
  4023b0:	2b00      	cmp	r3, #0
  4023b2:	d009      	beq.n	4023c8 <dmp_set_orientation+0x13c>
        gyro_regs[0] |= 1;
  4023b4:	7f3b      	ldrb	r3, [r7, #28]
  4023b6:	f043 0301 	orr.w	r3, r3, #1
  4023ba:	b2db      	uxtb	r3, r3
  4023bc:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
  4023be:	7e3b      	ldrb	r3, [r7, #24]
  4023c0:	f043 0301 	orr.w	r3, r3, #1
  4023c4:	b2db      	uxtb	r3, r3
  4023c6:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
  4023c8:	88fb      	ldrh	r3, [r7, #6]
  4023ca:	f003 0320 	and.w	r3, r3, #32
  4023ce:	2b00      	cmp	r3, #0
  4023d0:	d009      	beq.n	4023e6 <dmp_set_orientation+0x15a>
        gyro_regs[1] |= 1;
  4023d2:	7f7b      	ldrb	r3, [r7, #29]
  4023d4:	f043 0301 	orr.w	r3, r3, #1
  4023d8:	b2db      	uxtb	r3, r3
  4023da:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
  4023dc:	7e7b      	ldrb	r3, [r7, #25]
  4023de:	f043 0301 	orr.w	r3, r3, #1
  4023e2:	b2db      	uxtb	r3, r3
  4023e4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
  4023e6:	88fb      	ldrh	r3, [r7, #6]
  4023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4023ec:	2b00      	cmp	r3, #0
  4023ee:	d009      	beq.n	402404 <dmp_set_orientation+0x178>
        gyro_regs[2] |= 1;
  4023f0:	7fbb      	ldrb	r3, [r7, #30]
  4023f2:	f043 0301 	orr.w	r3, r3, #1
  4023f6:	b2db      	uxtb	r3, r3
  4023f8:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
  4023fa:	7ebb      	ldrb	r3, [r7, #26]
  4023fc:	f043 0301 	orr.w	r3, r3, #1
  402400:	b2db      	uxtb	r3, r3
  402402:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
  402404:	f107 031c 	add.w	r3, r7, #28
  402408:	461a      	mov	r2, r3
  40240a:	2103      	movs	r1, #3
  40240c:	f44f 6088 	mov.w	r0, #1088	; 0x440
  402410:	4b12      	ldr	r3, [pc, #72]	; (40245c <dmp_set_orientation+0x1d0>)
  402412:	4798      	blx	r3
  402414:	4603      	mov	r3, r0
  402416:	2b00      	cmp	r3, #0
  402418:	d002      	beq.n	402420 <dmp_set_orientation+0x194>
        return -1;
  40241a:	f04f 33ff 	mov.w	r3, #4294967295
  40241e:	e011      	b.n	402444 <dmp_set_orientation+0x1b8>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
  402420:	f107 0318 	add.w	r3, r7, #24
  402424:	461a      	mov	r2, r3
  402426:	2103      	movs	r1, #3
  402428:	f240 4031 	movw	r0, #1073	; 0x431
  40242c:	4b0b      	ldr	r3, [pc, #44]	; (40245c <dmp_set_orientation+0x1d0>)
  40242e:	4798      	blx	r3
  402430:	4603      	mov	r3, r0
  402432:	2b00      	cmp	r3, #0
  402434:	d002      	beq.n	40243c <dmp_set_orientation+0x1b0>
        return -1;
  402436:	f04f 33ff 	mov.w	r3, #4294967295
  40243a:	e003      	b.n	402444 <dmp_set_orientation+0x1b8>
    dmp.orient = orient;
  40243c:	4a08      	ldr	r2, [pc, #32]	; (402460 <dmp_set_orientation+0x1d4>)
  40243e:	88fb      	ldrh	r3, [r7, #6]
  402440:	8113      	strh	r3, [r2, #8]
    return 0;
  402442:	2300      	movs	r3, #0
}
  402444:	4618      	mov	r0, r3
  402446:	3720      	adds	r7, #32
  402448:	46bd      	mov	sp, r7
  40244a:	bd80      	pop	{r7, pc}
  40244c:	00407b7c 	.word	0x00407b7c
  402450:	00407b80 	.word	0x00407b80
  402454:	00407b84 	.word	0x00407b84
  402458:	00407b88 	.word	0x00407b88
  40245c:	00401cc1 	.word	0x00401cc1
  402460:	200004a4 	.word	0x200004a4

00402464 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
  402464:	b580      	push	{r7, lr}
  402466:	b088      	sub	sp, #32
  402468:	af00      	add	r7, sp, #0
  40246a:	4603      	mov	r3, r0
  40246c:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
  40246e:	4a20      	ldr	r2, [pc, #128]	; (4024f0 <dmp_set_fifo_rate+0x8c>)
  402470:	f107 0310 	add.w	r3, r7, #16
  402474:	6810      	ldr	r0, [r2, #0]
  402476:	6851      	ldr	r1, [r2, #4]
  402478:	6892      	ldr	r2, [r2, #8]
  40247a:	c307      	stmia	r3!, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
  40247c:	88fb      	ldrh	r3, [r7, #6]
  40247e:	2bc8      	cmp	r3, #200	; 0xc8
  402480:	d902      	bls.n	402488 <dmp_set_fifo_rate+0x24>
        return -1;
  402482:	f04f 33ff 	mov.w	r3, #4294967295
  402486:	e02e      	b.n	4024e6 <dmp_set_fifo_rate+0x82>
    div = DMP_SAMPLE_RATE / rate - 1;
  402488:	88fb      	ldrh	r3, [r7, #6]
  40248a:	22c8      	movs	r2, #200	; 0xc8
  40248c:	fb92 f3f3 	sdiv	r3, r2, r3
  402490:	b29b      	uxth	r3, r3
  402492:	3b01      	subs	r3, #1
  402494:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
  402496:	8bfb      	ldrh	r3, [r7, #30]
  402498:	0a1b      	lsrs	r3, r3, #8
  40249a:	b29b      	uxth	r3, r3
  40249c:	b2db      	uxtb	r3, r3
  40249e:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
  4024a0:	8bfb      	ldrh	r3, [r7, #30]
  4024a2:	b2db      	uxtb	r3, r3
  4024a4:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
  4024a6:	f107 0308 	add.w	r3, r7, #8
  4024aa:	461a      	mov	r2, r3
  4024ac:	2102      	movs	r1, #2
  4024ae:	f240 2016 	movw	r0, #534	; 0x216
  4024b2:	4b10      	ldr	r3, [pc, #64]	; (4024f4 <dmp_set_fifo_rate+0x90>)
  4024b4:	4798      	blx	r3
  4024b6:	4603      	mov	r3, r0
  4024b8:	2b00      	cmp	r3, #0
  4024ba:	d002      	beq.n	4024c2 <dmp_set_fifo_rate+0x5e>
        return -1;
  4024bc:	f04f 33ff 	mov.w	r3, #4294967295
  4024c0:	e011      	b.n	4024e6 <dmp_set_fifo_rate+0x82>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
  4024c2:	f107 0310 	add.w	r3, r7, #16
  4024c6:	461a      	mov	r2, r3
  4024c8:	210c      	movs	r1, #12
  4024ca:	f640 20c1 	movw	r0, #2753	; 0xac1
  4024ce:	4b09      	ldr	r3, [pc, #36]	; (4024f4 <dmp_set_fifo_rate+0x90>)
  4024d0:	4798      	blx	r3
  4024d2:	4603      	mov	r3, r0
  4024d4:	2b00      	cmp	r3, #0
  4024d6:	d002      	beq.n	4024de <dmp_set_fifo_rate+0x7a>
        return -1;
  4024d8:	f04f 33ff 	mov.w	r3, #4294967295
  4024dc:	e003      	b.n	4024e6 <dmp_set_fifo_rate+0x82>

    dmp.fifo_rate = rate;
  4024de:	4a06      	ldr	r2, [pc, #24]	; (4024f8 <dmp_set_fifo_rate+0x94>)
  4024e0:	88fb      	ldrh	r3, [r7, #6]
  4024e2:	8193      	strh	r3, [r2, #12]
    return 0;
  4024e4:	2300      	movs	r3, #0
}
  4024e6:	4618      	mov	r0, r3
  4024e8:	3720      	adds	r7, #32
  4024ea:	46bd      	mov	sp, r7
  4024ec:	bd80      	pop	{r7, pc}
  4024ee:	bf00      	nop
  4024f0:	00407b8c 	.word	0x00407b8c
  4024f4:	00401cc1 	.word	0x00401cc1
  4024f8:	200004a4 	.word	0x200004a4

004024fc <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
  4024fc:	b580      	push	{r7, lr}
  4024fe:	b086      	sub	sp, #24
  402500:	af00      	add	r7, sp, #0
  402502:	4603      	mov	r3, r0
  402504:	460a      	mov	r2, r1
  402506:	71fb      	strb	r3, [r7, #7]
  402508:	4613      	mov	r3, r2
  40250a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
  40250c:	79fb      	ldrb	r3, [r7, #7]
  40250e:	f003 0307 	and.w	r3, r3, #7
  402512:	2b00      	cmp	r3, #0
  402514:	d003      	beq.n	40251e <dmp_set_tap_thresh+0x22>
  402516:	88bb      	ldrh	r3, [r7, #4]
  402518:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
  40251c:	d902      	bls.n	402524 <dmp_set_tap_thresh+0x28>
        return -1;
  40251e:	f04f 33ff 	mov.w	r3, #4294967295
  402522:	e10f      	b.n	402744 <dmp_set_tap_thresh+0x248>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
  402524:	88ba      	ldrh	r2, [r7, #4]
  402526:	4b89      	ldr	r3, [pc, #548]	; (40274c <dmp_set_tap_thresh+0x250>)
  402528:	4610      	mov	r0, r2
  40252a:	4798      	blx	r3
  40252c:	4602      	mov	r2, r0
  40252e:	4b88      	ldr	r3, [pc, #544]	; (402750 <dmp_set_tap_thresh+0x254>)
  402530:	4988      	ldr	r1, [pc, #544]	; (402754 <dmp_set_tap_thresh+0x258>)
  402532:	4610      	mov	r0, r2
  402534:	4798      	blx	r3
  402536:	4603      	mov	r3, r0
  402538:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
  40253a:	f107 030b 	add.w	r3, r7, #11
  40253e:	4618      	mov	r0, r3
  402540:	4b85      	ldr	r3, [pc, #532]	; (402758 <dmp_set_tap_thresh+0x25c>)
  402542:	4798      	blx	r3
    switch (accel_fsr) {
  402544:	7afb      	ldrb	r3, [r7, #11]
  402546:	3b02      	subs	r3, #2
  402548:	2b0e      	cmp	r3, #14
  40254a:	f200 8081 	bhi.w	402650 <dmp_set_tap_thresh+0x154>
  40254e:	a201      	add	r2, pc, #4	; (adr r2, 402554 <dmp_set_tap_thresh+0x58>)
  402550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402554:	00402591 	.word	0x00402591
  402558:	00402651 	.word	0x00402651
  40255c:	004025c1 	.word	0x004025c1
  402560:	00402651 	.word	0x00402651
  402564:	00402651 	.word	0x00402651
  402568:	00402651 	.word	0x00402651
  40256c:	004025f1 	.word	0x004025f1
  402570:	00402651 	.word	0x00402651
  402574:	00402651 	.word	0x00402651
  402578:	00402651 	.word	0x00402651
  40257c:	00402651 	.word	0x00402651
  402580:	00402651 	.word	0x00402651
  402584:	00402651 	.word	0x00402651
  402588:	00402651 	.word	0x00402651
  40258c:	00402621 	.word	0x00402621
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
  402590:	4b72      	ldr	r3, [pc, #456]	; (40275c <dmp_set_tap_thresh+0x260>)
  402592:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
  402596:	6938      	ldr	r0, [r7, #16]
  402598:	4798      	blx	r3
  40259a:	4603      	mov	r3, r0
  40259c:	461a      	mov	r2, r3
  40259e:	4b70      	ldr	r3, [pc, #448]	; (402760 <dmp_set_tap_thresh+0x264>)
  4025a0:	4610      	mov	r0, r2
  4025a2:	4798      	blx	r3
  4025a4:	4603      	mov	r3, r0
  4025a6:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
  4025a8:	4b6c      	ldr	r3, [pc, #432]	; (40275c <dmp_set_tap_thresh+0x260>)
  4025aa:	496e      	ldr	r1, [pc, #440]	; (402764 <dmp_set_tap_thresh+0x268>)
  4025ac:	6938      	ldr	r0, [r7, #16]
  4025ae:	4798      	blx	r3
  4025b0:	4603      	mov	r3, r0
  4025b2:	461a      	mov	r2, r3
  4025b4:	4b6a      	ldr	r3, [pc, #424]	; (402760 <dmp_set_tap_thresh+0x264>)
  4025b6:	4610      	mov	r0, r2
  4025b8:	4798      	blx	r3
  4025ba:	4603      	mov	r3, r0
  4025bc:	82bb      	strh	r3, [r7, #20]
        break;
  4025be:	e04a      	b.n	402656 <dmp_set_tap_thresh+0x15a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
  4025c0:	4b66      	ldr	r3, [pc, #408]	; (40275c <dmp_set_tap_thresh+0x260>)
  4025c2:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
  4025c6:	6938      	ldr	r0, [r7, #16]
  4025c8:	4798      	blx	r3
  4025ca:	4603      	mov	r3, r0
  4025cc:	461a      	mov	r2, r3
  4025ce:	4b64      	ldr	r3, [pc, #400]	; (402760 <dmp_set_tap_thresh+0x264>)
  4025d0:	4610      	mov	r0, r2
  4025d2:	4798      	blx	r3
  4025d4:	4603      	mov	r3, r0
  4025d6:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
  4025d8:	4b60      	ldr	r3, [pc, #384]	; (40275c <dmp_set_tap_thresh+0x260>)
  4025da:	4963      	ldr	r1, [pc, #396]	; (402768 <dmp_set_tap_thresh+0x26c>)
  4025dc:	6938      	ldr	r0, [r7, #16]
  4025de:	4798      	blx	r3
  4025e0:	4603      	mov	r3, r0
  4025e2:	461a      	mov	r2, r3
  4025e4:	4b5e      	ldr	r3, [pc, #376]	; (402760 <dmp_set_tap_thresh+0x264>)
  4025e6:	4610      	mov	r0, r2
  4025e8:	4798      	blx	r3
  4025ea:	4603      	mov	r3, r0
  4025ec:	82bb      	strh	r3, [r7, #20]
        break;
  4025ee:	e032      	b.n	402656 <dmp_set_tap_thresh+0x15a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
  4025f0:	4b5a      	ldr	r3, [pc, #360]	; (40275c <dmp_set_tap_thresh+0x260>)
  4025f2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
  4025f6:	6938      	ldr	r0, [r7, #16]
  4025f8:	4798      	blx	r3
  4025fa:	4603      	mov	r3, r0
  4025fc:	461a      	mov	r2, r3
  4025fe:	4b58      	ldr	r3, [pc, #352]	; (402760 <dmp_set_tap_thresh+0x264>)
  402600:	4610      	mov	r0, r2
  402602:	4798      	blx	r3
  402604:	4603      	mov	r3, r0
  402606:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
  402608:	4b54      	ldr	r3, [pc, #336]	; (40275c <dmp_set_tap_thresh+0x260>)
  40260a:	4958      	ldr	r1, [pc, #352]	; (40276c <dmp_set_tap_thresh+0x270>)
  40260c:	6938      	ldr	r0, [r7, #16]
  40260e:	4798      	blx	r3
  402610:	4603      	mov	r3, r0
  402612:	461a      	mov	r2, r3
  402614:	4b52      	ldr	r3, [pc, #328]	; (402760 <dmp_set_tap_thresh+0x264>)
  402616:	4610      	mov	r0, r2
  402618:	4798      	blx	r3
  40261a:	4603      	mov	r3, r0
  40261c:	82bb      	strh	r3, [r7, #20]
        break;
  40261e:	e01a      	b.n	402656 <dmp_set_tap_thresh+0x15a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
  402620:	4b4e      	ldr	r3, [pc, #312]	; (40275c <dmp_set_tap_thresh+0x260>)
  402622:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
  402626:	6938      	ldr	r0, [r7, #16]
  402628:	4798      	blx	r3
  40262a:	4603      	mov	r3, r0
  40262c:	461a      	mov	r2, r3
  40262e:	4b4c      	ldr	r3, [pc, #304]	; (402760 <dmp_set_tap_thresh+0x264>)
  402630:	4610      	mov	r0, r2
  402632:	4798      	blx	r3
  402634:	4603      	mov	r3, r0
  402636:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
  402638:	4b48      	ldr	r3, [pc, #288]	; (40275c <dmp_set_tap_thresh+0x260>)
  40263a:	494d      	ldr	r1, [pc, #308]	; (402770 <dmp_set_tap_thresh+0x274>)
  40263c:	6938      	ldr	r0, [r7, #16]
  40263e:	4798      	blx	r3
  402640:	4603      	mov	r3, r0
  402642:	461a      	mov	r2, r3
  402644:	4b46      	ldr	r3, [pc, #280]	; (402760 <dmp_set_tap_thresh+0x264>)
  402646:	4610      	mov	r0, r2
  402648:	4798      	blx	r3
  40264a:	4603      	mov	r3, r0
  40264c:	82bb      	strh	r3, [r7, #20]
        break;
  40264e:	e002      	b.n	402656 <dmp_set_tap_thresh+0x15a>
    default:
        return -1;
  402650:	f04f 33ff 	mov.w	r3, #4294967295
  402654:	e076      	b.n	402744 <dmp_set_tap_thresh+0x248>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
  402656:	8afb      	ldrh	r3, [r7, #22]
  402658:	0a1b      	lsrs	r3, r3, #8
  40265a:	b29b      	uxth	r3, r3
  40265c:	b2db      	uxtb	r3, r3
  40265e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
  402660:	8afb      	ldrh	r3, [r7, #22]
  402662:	b2db      	uxtb	r3, r3
  402664:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
  402666:	8abb      	ldrh	r3, [r7, #20]
  402668:	0a1b      	lsrs	r3, r3, #8
  40266a:	b29b      	uxth	r3, r3
  40266c:	b2db      	uxtb	r3, r3
  40266e:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
  402670:	8abb      	ldrh	r3, [r7, #20]
  402672:	b2db      	uxtb	r3, r3
  402674:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
  402676:	79fb      	ldrb	r3, [r7, #7]
  402678:	f003 0301 	and.w	r3, r3, #1
  40267c:	2b00      	cmp	r3, #0
  40267e:	d01c      	beq.n	4026ba <dmp_set_tap_thresh+0x1be>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
  402680:	f107 030c 	add.w	r3, r7, #12
  402684:	461a      	mov	r2, r3
  402686:	2102      	movs	r1, #2
  402688:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
  40268c:	4b39      	ldr	r3, [pc, #228]	; (402774 <dmp_set_tap_thresh+0x278>)
  40268e:	4798      	blx	r3
  402690:	4603      	mov	r3, r0
  402692:	2b00      	cmp	r3, #0
  402694:	d002      	beq.n	40269c <dmp_set_tap_thresh+0x1a0>
            return -1;
  402696:	f04f 33ff 	mov.w	r3, #4294967295
  40269a:	e053      	b.n	402744 <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
  40269c:	f107 030c 	add.w	r3, r7, #12
  4026a0:	3302      	adds	r3, #2
  4026a2:	461a      	mov	r2, r3
  4026a4:	2102      	movs	r1, #2
  4026a6:	f44f 7092 	mov.w	r0, #292	; 0x124
  4026aa:	4b32      	ldr	r3, [pc, #200]	; (402774 <dmp_set_tap_thresh+0x278>)
  4026ac:	4798      	blx	r3
  4026ae:	4603      	mov	r3, r0
  4026b0:	2b00      	cmp	r3, #0
  4026b2:	d002      	beq.n	4026ba <dmp_set_tap_thresh+0x1be>
            return -1;
  4026b4:	f04f 33ff 	mov.w	r3, #4294967295
  4026b8:	e044      	b.n	402744 <dmp_set_tap_thresh+0x248>
    }
    if (axis & TAP_Y) {
  4026ba:	79fb      	ldrb	r3, [r7, #7]
  4026bc:	f003 0302 	and.w	r3, r3, #2
  4026c0:	2b00      	cmp	r3, #0
  4026c2:	d01c      	beq.n	4026fe <dmp_set_tap_thresh+0x202>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
  4026c4:	f107 030c 	add.w	r3, r7, #12
  4026c8:	461a      	mov	r2, r3
  4026ca:	2102      	movs	r1, #2
  4026cc:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
  4026d0:	4b28      	ldr	r3, [pc, #160]	; (402774 <dmp_set_tap_thresh+0x278>)
  4026d2:	4798      	blx	r3
  4026d4:	4603      	mov	r3, r0
  4026d6:	2b00      	cmp	r3, #0
  4026d8:	d002      	beq.n	4026e0 <dmp_set_tap_thresh+0x1e4>
            return -1;
  4026da:	f04f 33ff 	mov.w	r3, #4294967295
  4026de:	e031      	b.n	402744 <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
  4026e0:	f107 030c 	add.w	r3, r7, #12
  4026e4:	3302      	adds	r3, #2
  4026e6:	461a      	mov	r2, r3
  4026e8:	2102      	movs	r1, #2
  4026ea:	f44f 7094 	mov.w	r0, #296	; 0x128
  4026ee:	4b21      	ldr	r3, [pc, #132]	; (402774 <dmp_set_tap_thresh+0x278>)
  4026f0:	4798      	blx	r3
  4026f2:	4603      	mov	r3, r0
  4026f4:	2b00      	cmp	r3, #0
  4026f6:	d002      	beq.n	4026fe <dmp_set_tap_thresh+0x202>
            return -1;
  4026f8:	f04f 33ff 	mov.w	r3, #4294967295
  4026fc:	e022      	b.n	402744 <dmp_set_tap_thresh+0x248>
    }
    if (axis & TAP_Z) {
  4026fe:	79fb      	ldrb	r3, [r7, #7]
  402700:	f003 0304 	and.w	r3, r3, #4
  402704:	2b00      	cmp	r3, #0
  402706:	d01c      	beq.n	402742 <dmp_set_tap_thresh+0x246>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
  402708:	f107 030c 	add.w	r3, r7, #12
  40270c:	461a      	mov	r2, r3
  40270e:	2102      	movs	r1, #2
  402710:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
  402714:	4b17      	ldr	r3, [pc, #92]	; (402774 <dmp_set_tap_thresh+0x278>)
  402716:	4798      	blx	r3
  402718:	4603      	mov	r3, r0
  40271a:	2b00      	cmp	r3, #0
  40271c:	d002      	beq.n	402724 <dmp_set_tap_thresh+0x228>
            return -1;
  40271e:	f04f 33ff 	mov.w	r3, #4294967295
  402722:	e00f      	b.n	402744 <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
  402724:	f107 030c 	add.w	r3, r7, #12
  402728:	3302      	adds	r3, #2
  40272a:	461a      	mov	r2, r3
  40272c:	2102      	movs	r1, #2
  40272e:	f44f 7096 	mov.w	r0, #300	; 0x12c
  402732:	4b10      	ldr	r3, [pc, #64]	; (402774 <dmp_set_tap_thresh+0x278>)
  402734:	4798      	blx	r3
  402736:	4603      	mov	r3, r0
  402738:	2b00      	cmp	r3, #0
  40273a:	d002      	beq.n	402742 <dmp_set_tap_thresh+0x246>
            return -1;
  40273c:	f04f 33ff 	mov.w	r3, #4294967295
  402740:	e000      	b.n	402744 <dmp_set_tap_thresh+0x248>
    }
    return 0;
  402742:	2300      	movs	r3, #0
}
  402744:	4618      	mov	r0, r3
  402746:	3718      	adds	r7, #24
  402748:	46bd      	mov	sp, r7
  40274a:	bd80      	pop	{r7, pc}
  40274c:	0040652d 	.word	0x0040652d
  402750:	00406745 	.word	0x00406745
  402754:	43480000 	.word	0x43480000
  402758:	00401499 	.word	0x00401499
  40275c:	004065dd 	.word	0x004065dd
  402760:	00406969 	.word	0x00406969
  402764:	46400000 	.word	0x46400000
  402768:	45c00000 	.word	0x45c00000
  40276c:	45400000 	.word	0x45400000
  402770:	44c00000 	.word	0x44c00000
  402774:	00401cc1 	.word	0x00401cc1

00402778 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
  402778:	b580      	push	{r7, lr}
  40277a:	b084      	sub	sp, #16
  40277c:	af00      	add	r7, sp, #0
  40277e:	4603      	mov	r3, r0
  402780:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
  402782:	2300      	movs	r3, #0
  402784:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
  402786:	79fb      	ldrb	r3, [r7, #7]
  402788:	f003 0301 	and.w	r3, r3, #1
  40278c:	2b00      	cmp	r3, #0
  40278e:	d004      	beq.n	40279a <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
  402790:	7bfb      	ldrb	r3, [r7, #15]
  402792:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  402796:	b2db      	uxtb	r3, r3
  402798:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
  40279a:	79fb      	ldrb	r3, [r7, #7]
  40279c:	f003 0302 	and.w	r3, r3, #2
  4027a0:	2b00      	cmp	r3, #0
  4027a2:	d004      	beq.n	4027ae <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
  4027a4:	7bfb      	ldrb	r3, [r7, #15]
  4027a6:	f043 030c 	orr.w	r3, r3, #12
  4027aa:	b2db      	uxtb	r3, r3
  4027ac:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
  4027ae:	79fb      	ldrb	r3, [r7, #7]
  4027b0:	f003 0304 	and.w	r3, r3, #4
  4027b4:	2b00      	cmp	r3, #0
  4027b6:	d004      	beq.n	4027c2 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
  4027b8:	7bfb      	ldrb	r3, [r7, #15]
  4027ba:	f043 0303 	orr.w	r3, r3, #3
  4027be:	b2db      	uxtb	r3, r3
  4027c0:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
  4027c2:	f107 030f 	add.w	r3, r7, #15
  4027c6:	461a      	mov	r2, r3
  4027c8:	2101      	movs	r1, #1
  4027ca:	f44f 70a4 	mov.w	r0, #328	; 0x148
  4027ce:	4b03      	ldr	r3, [pc, #12]	; (4027dc <dmp_set_tap_axes+0x64>)
  4027d0:	4798      	blx	r3
  4027d2:	4603      	mov	r3, r0
}
  4027d4:	4618      	mov	r0, r3
  4027d6:	3710      	adds	r7, #16
  4027d8:	46bd      	mov	sp, r7
  4027da:	bd80      	pop	{r7, pc}
  4027dc:	00401cc1 	.word	0x00401cc1

004027e0 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
  4027e0:	b580      	push	{r7, lr}
  4027e2:	b084      	sub	sp, #16
  4027e4:	af00      	add	r7, sp, #0
  4027e6:	4603      	mov	r3, r0
  4027e8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
  4027ea:	79fb      	ldrb	r3, [r7, #7]
  4027ec:	2b00      	cmp	r3, #0
  4027ee:	d102      	bne.n	4027f6 <dmp_set_tap_count+0x16>
        min_taps = 1;
  4027f0:	2301      	movs	r3, #1
  4027f2:	71fb      	strb	r3, [r7, #7]
  4027f4:	e004      	b.n	402800 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
  4027f6:	79fb      	ldrb	r3, [r7, #7]
  4027f8:	2b04      	cmp	r3, #4
  4027fa:	d901      	bls.n	402800 <dmp_set_tap_count+0x20>
        min_taps = 4;
  4027fc:	2304      	movs	r3, #4
  4027fe:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
  402800:	79fb      	ldrb	r3, [r7, #7]
  402802:	3b01      	subs	r3, #1
  402804:	b2db      	uxtb	r3, r3
  402806:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
  402808:	f107 030f 	add.w	r3, r7, #15
  40280c:	461a      	mov	r2, r3
  40280e:	2101      	movs	r1, #1
  402810:	f240 104f 	movw	r0, #335	; 0x14f
  402814:	4b03      	ldr	r3, [pc, #12]	; (402824 <dmp_set_tap_count+0x44>)
  402816:	4798      	blx	r3
  402818:	4603      	mov	r3, r0
}
  40281a:	4618      	mov	r0, r3
  40281c:	3710      	adds	r7, #16
  40281e:	46bd      	mov	sp, r7
  402820:	bd80      	pop	{r7, pc}
  402822:	bf00      	nop
  402824:	00401cc1 	.word	0x00401cc1

00402828 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
  402828:	b580      	push	{r7, lr}
  40282a:	b084      	sub	sp, #16
  40282c:	af00      	add	r7, sp, #0
  40282e:	4603      	mov	r3, r0
  402830:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
  402832:	88fb      	ldrh	r3, [r7, #6]
  402834:	4a0c      	ldr	r2, [pc, #48]	; (402868 <dmp_set_tap_time+0x40>)
  402836:	fba2 2303 	umull	r2, r3, r2, r3
  40283a:	089b      	lsrs	r3, r3, #2
  40283c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
  40283e:	89fb      	ldrh	r3, [r7, #14]
  402840:	0a1b      	lsrs	r3, r3, #8
  402842:	b29b      	uxth	r3, r3
  402844:	b2db      	uxtb	r3, r3
  402846:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
  402848:	89fb      	ldrh	r3, [r7, #14]
  40284a:	b2db      	uxtb	r3, r3
  40284c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
  40284e:	f107 030c 	add.w	r3, r7, #12
  402852:	461a      	mov	r2, r3
  402854:	2102      	movs	r1, #2
  402856:	f44f 70ef 	mov.w	r0, #478	; 0x1de
  40285a:	4b04      	ldr	r3, [pc, #16]	; (40286c <dmp_set_tap_time+0x44>)
  40285c:	4798      	blx	r3
  40285e:	4603      	mov	r3, r0
}
  402860:	4618      	mov	r0, r3
  402862:	3710      	adds	r7, #16
  402864:	46bd      	mov	sp, r7
  402866:	bd80      	pop	{r7, pc}
  402868:	cccccccd 	.word	0xcccccccd
  40286c:	00401cc1 	.word	0x00401cc1

00402870 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
  402870:	b580      	push	{r7, lr}
  402872:	b084      	sub	sp, #16
  402874:	af00      	add	r7, sp, #0
  402876:	4603      	mov	r3, r0
  402878:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
  40287a:	88fb      	ldrh	r3, [r7, #6]
  40287c:	4a0c      	ldr	r2, [pc, #48]	; (4028b0 <dmp_set_tap_time_multi+0x40>)
  40287e:	fba2 2303 	umull	r2, r3, r2, r3
  402882:	089b      	lsrs	r3, r3, #2
  402884:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
  402886:	89fb      	ldrh	r3, [r7, #14]
  402888:	0a1b      	lsrs	r3, r3, #8
  40288a:	b29b      	uxth	r3, r3
  40288c:	b2db      	uxtb	r3, r3
  40288e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
  402890:	89fb      	ldrh	r3, [r7, #14]
  402892:	b2db      	uxtb	r3, r3
  402894:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
  402896:	f107 030c 	add.w	r3, r7, #12
  40289a:	461a      	mov	r2, r3
  40289c:	2102      	movs	r1, #2
  40289e:	f44f 70ed 	mov.w	r0, #474	; 0x1da
  4028a2:	4b04      	ldr	r3, [pc, #16]	; (4028b4 <dmp_set_tap_time_multi+0x44>)
  4028a4:	4798      	blx	r3
  4028a6:	4603      	mov	r3, r0
}
  4028a8:	4618      	mov	r0, r3
  4028aa:	3710      	adds	r7, #16
  4028ac:	46bd      	mov	sp, r7
  4028ae:	bd80      	pop	{r7, pc}
  4028b0:	cccccccd 	.word	0xcccccccd
  4028b4:	00401cc1 	.word	0x00401cc1

004028b8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
  4028b8:	b580      	push	{r7, lr}
  4028ba:	b084      	sub	sp, #16
  4028bc:	af00      	add	r7, sp, #0
  4028be:	6078      	str	r0, [r7, #4]
  4028c0:	460b      	mov	r3, r1
  4028c2:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
  4028c4:	687b      	ldr	r3, [r7, #4]
  4028c6:	4a13      	ldr	r2, [pc, #76]	; (402914 <dmp_set_shake_reject_thresh+0x5c>)
  4028c8:	fb82 1203 	smull	r1, r2, r2, r3
  4028cc:	1192      	asrs	r2, r2, #6
  4028ce:	17db      	asrs	r3, r3, #31
  4028d0:	1ad3      	subs	r3, r2, r3
  4028d2:	887a      	ldrh	r2, [r7, #2]
  4028d4:	fb02 f303 	mul.w	r3, r2, r3
  4028d8:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
  4028da:	68fb      	ldr	r3, [r7, #12]
  4028dc:	161b      	asrs	r3, r3, #24
  4028de:	b2db      	uxtb	r3, r3
  4028e0:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
  4028e2:	68fb      	ldr	r3, [r7, #12]
  4028e4:	141b      	asrs	r3, r3, #16
  4028e6:	b2db      	uxtb	r3, r3
  4028e8:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
  4028ea:	68fb      	ldr	r3, [r7, #12]
  4028ec:	121b      	asrs	r3, r3, #8
  4028ee:	b2db      	uxtb	r3, r3
  4028f0:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
  4028f2:	68fb      	ldr	r3, [r7, #12]
  4028f4:	b2db      	uxtb	r3, r3
  4028f6:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
  4028f8:	f107 0308 	add.w	r3, r7, #8
  4028fc:	461a      	mov	r2, r3
  4028fe:	2104      	movs	r1, #4
  402900:	f44f 70ae 	mov.w	r0, #348	; 0x15c
  402904:	4b04      	ldr	r3, [pc, #16]	; (402918 <dmp_set_shake_reject_thresh+0x60>)
  402906:	4798      	blx	r3
  402908:	4603      	mov	r3, r0
}
  40290a:	4618      	mov	r0, r3
  40290c:	3710      	adds	r7, #16
  40290e:	46bd      	mov	sp, r7
  402910:	bd80      	pop	{r7, pc}
  402912:	bf00      	nop
  402914:	10624dd3 	.word	0x10624dd3
  402918:	00401cc1 	.word	0x00401cc1

0040291c <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
  40291c:	b580      	push	{r7, lr}
  40291e:	b084      	sub	sp, #16
  402920:	af00      	add	r7, sp, #0
  402922:	4603      	mov	r3, r0
  402924:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
  402926:	88fb      	ldrh	r3, [r7, #6]
  402928:	4a0c      	ldr	r2, [pc, #48]	; (40295c <dmp_set_shake_reject_time+0x40>)
  40292a:	fba2 2303 	umull	r2, r3, r2, r3
  40292e:	089b      	lsrs	r3, r3, #2
  402930:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
  402932:	88fb      	ldrh	r3, [r7, #6]
  402934:	0a1b      	lsrs	r3, r3, #8
  402936:	b29b      	uxth	r3, r3
  402938:	b2db      	uxtb	r3, r3
  40293a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
  40293c:	88fb      	ldrh	r3, [r7, #6]
  40293e:	b2db      	uxtb	r3, r3
  402940:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
  402942:	f107 030c 	add.w	r3, r7, #12
  402946:	461a      	mov	r2, r3
  402948:	2102      	movs	r1, #2
  40294a:	f44f 70ad 	mov.w	r0, #346	; 0x15a
  40294e:	4b04      	ldr	r3, [pc, #16]	; (402960 <dmp_set_shake_reject_time+0x44>)
  402950:	4798      	blx	r3
  402952:	4603      	mov	r3, r0
}
  402954:	4618      	mov	r0, r3
  402956:	3710      	adds	r7, #16
  402958:	46bd      	mov	sp, r7
  40295a:	bd80      	pop	{r7, pc}
  40295c:	cccccccd 	.word	0xcccccccd
  402960:	00401cc1 	.word	0x00401cc1

00402964 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
  402964:	b580      	push	{r7, lr}
  402966:	b084      	sub	sp, #16
  402968:	af00      	add	r7, sp, #0
  40296a:	4603      	mov	r3, r0
  40296c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
  40296e:	88fb      	ldrh	r3, [r7, #6]
  402970:	4a0c      	ldr	r2, [pc, #48]	; (4029a4 <dmp_set_shake_reject_timeout+0x40>)
  402972:	fba2 2303 	umull	r2, r3, r2, r3
  402976:	089b      	lsrs	r3, r3, #2
  402978:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
  40297a:	88fb      	ldrh	r3, [r7, #6]
  40297c:	0a1b      	lsrs	r3, r3, #8
  40297e:	b29b      	uxth	r3, r3
  402980:	b2db      	uxtb	r3, r3
  402982:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
  402984:	88fb      	ldrh	r3, [r7, #6]
  402986:	b2db      	uxtb	r3, r3
  402988:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
  40298a:	f107 030c 	add.w	r3, r7, #12
  40298e:	461a      	mov	r2, r3
  402990:	2102      	movs	r1, #2
  402992:	f44f 70ac 	mov.w	r0, #344	; 0x158
  402996:	4b04      	ldr	r3, [pc, #16]	; (4029a8 <dmp_set_shake_reject_timeout+0x44>)
  402998:	4798      	blx	r3
  40299a:	4603      	mov	r3, r0
}
  40299c:	4618      	mov	r0, r3
  40299e:	3710      	adds	r7, #16
  4029a0:	46bd      	mov	sp, r7
  4029a2:	bd80      	pop	{r7, pc}
  4029a4:	cccccccd 	.word	0xcccccccd
  4029a8:	00401cc1 	.word	0x00401cc1

004029ac <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
  4029ac:	b580      	push	{r7, lr}
  4029ae:	b086      	sub	sp, #24
  4029b0:	af00      	add	r7, sp, #0
  4029b2:	4603      	mov	r3, r0
  4029b4:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
  4029b6:	2302      	movs	r3, #2
  4029b8:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
  4029ba:	23ca      	movs	r3, #202	; 0xca
  4029bc:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
  4029be:	23e3      	movs	r3, #227	; 0xe3
  4029c0:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
  4029c2:	2309      	movs	r3, #9
  4029c4:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
  4029c6:	f107 030c 	add.w	r3, r7, #12
  4029ca:	461a      	mov	r2, r3
  4029cc:	2104      	movs	r1, #4
  4029ce:	2068      	movs	r0, #104	; 0x68
  4029d0:	4b88      	ldr	r3, [pc, #544]	; (402bf4 <dmp_enable_feature+0x248>)
  4029d2:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
  4029d4:	23a3      	movs	r3, #163	; 0xa3
  4029d6:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
  4029d8:	88fb      	ldrh	r3, [r7, #6]
  4029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4029de:	2b00      	cmp	r3, #0
  4029e0:	d006      	beq.n	4029f0 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
  4029e2:	23c0      	movs	r3, #192	; 0xc0
  4029e4:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
  4029e6:	23c8      	movs	r3, #200	; 0xc8
  4029e8:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
  4029ea:	23c2      	movs	r3, #194	; 0xc2
  4029ec:	73fb      	strb	r3, [r7, #15]
  4029ee:	e005      	b.n	4029fc <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
  4029f0:	23a3      	movs	r3, #163	; 0xa3
  4029f2:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
  4029f4:	23a3      	movs	r3, #163	; 0xa3
  4029f6:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
  4029f8:	23a3      	movs	r3, #163	; 0xa3
  4029fa:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
  4029fc:	88fb      	ldrh	r3, [r7, #6]
  4029fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402a02:	2b00      	cmp	r3, #0
  402a04:	d006      	beq.n	402a14 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
  402a06:	23c4      	movs	r3, #196	; 0xc4
  402a08:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
  402a0a:	23cc      	movs	r3, #204	; 0xcc
  402a0c:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
  402a0e:	23c6      	movs	r3, #198	; 0xc6
  402a10:	74bb      	strb	r3, [r7, #18]
  402a12:	e005      	b.n	402a20 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
  402a14:	23a3      	movs	r3, #163	; 0xa3
  402a16:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
  402a18:	23a3      	movs	r3, #163	; 0xa3
  402a1a:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
  402a1c:	23a3      	movs	r3, #163	; 0xa3
  402a1e:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
  402a20:	23a3      	movs	r3, #163	; 0xa3
  402a22:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
  402a24:	23a3      	movs	r3, #163	; 0xa3
  402a26:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
  402a28:	23a3      	movs	r3, #163	; 0xa3
  402a2a:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
  402a2c:	f107 030c 	add.w	r3, r7, #12
  402a30:	461a      	mov	r2, r3
  402a32:	210a      	movs	r1, #10
  402a34:	f640 20a7 	movw	r0, #2727	; 0xaa7
  402a38:	4b6e      	ldr	r3, [pc, #440]	; (402bf4 <dmp_enable_feature+0x248>)
  402a3a:	4798      	blx	r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
  402a3c:	88fb      	ldrh	r3, [r7, #6]
  402a3e:	f003 0303 	and.w	r3, r3, #3
  402a42:	2b00      	cmp	r3, #0
  402a44:	d002      	beq.n	402a4c <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
  402a46:	2320      	movs	r3, #32
  402a48:	733b      	strb	r3, [r7, #12]
  402a4a:	e001      	b.n	402a50 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
  402a4c:	23d8      	movs	r3, #216	; 0xd8
  402a4e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
  402a50:	f107 030c 	add.w	r3, r7, #12
  402a54:	461a      	mov	r2, r3
  402a56:	2101      	movs	r1, #1
  402a58:	f640 20b6 	movw	r0, #2742	; 0xab6
  402a5c:	4b65      	ldr	r3, [pc, #404]	; (402bf4 <dmp_enable_feature+0x248>)
  402a5e:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
  402a60:	88fb      	ldrh	r3, [r7, #6]
  402a62:	f003 0320 	and.w	r3, r3, #32
  402a66:	2b00      	cmp	r3, #0
  402a68:	d003      	beq.n	402a72 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
  402a6a:	2001      	movs	r0, #1
  402a6c:	4b62      	ldr	r3, [pc, #392]	; (402bf8 <dmp_enable_feature+0x24c>)
  402a6e:	4798      	blx	r3
  402a70:	e002      	b.n	402a78 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
  402a72:	2000      	movs	r0, #0
  402a74:	4b60      	ldr	r3, [pc, #384]	; (402bf8 <dmp_enable_feature+0x24c>)
  402a76:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
  402a78:	88fb      	ldrh	r3, [r7, #6]
  402a7a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402a7e:	2b00      	cmp	r3, #0
  402a80:	d01d      	beq.n	402abe <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
  402a82:	88fb      	ldrh	r3, [r7, #6]
  402a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402a88:	2b00      	cmp	r3, #0
  402a8a:	d008      	beq.n	402a9e <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
  402a8c:	23b2      	movs	r3, #178	; 0xb2
  402a8e:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
  402a90:	238b      	movs	r3, #139	; 0x8b
  402a92:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
  402a94:	23b6      	movs	r3, #182	; 0xb6
  402a96:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
  402a98:	239b      	movs	r3, #155	; 0x9b
  402a9a:	73fb      	strb	r3, [r7, #15]
  402a9c:	e007      	b.n	402aae <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
  402a9e:	23b0      	movs	r3, #176	; 0xb0
  402aa0:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
  402aa2:	2380      	movs	r3, #128	; 0x80
  402aa4:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
  402aa6:	23b4      	movs	r3, #180	; 0xb4
  402aa8:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
  402aaa:	2390      	movs	r3, #144	; 0x90
  402aac:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
  402aae:	f107 030c 	add.w	r3, r7, #12
  402ab2:	461a      	mov	r2, r3
  402ab4:	2104      	movs	r1, #4
  402ab6:	f640 20a2 	movw	r0, #2722	; 0xaa2
  402aba:	4b4e      	ldr	r3, [pc, #312]	; (402bf4 <dmp_enable_feature+0x248>)
  402abc:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
  402abe:	88fb      	ldrh	r3, [r7, #6]
  402ac0:	f003 0301 	and.w	r3, r3, #1
  402ac4:	2b00      	cmp	r3, #0
  402ac6:	d025      	beq.n	402b14 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
  402ac8:	23f8      	movs	r3, #248	; 0xf8
  402aca:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
  402acc:	f107 030c 	add.w	r3, r7, #12
  402ad0:	461a      	mov	r2, r3
  402ad2:	2101      	movs	r1, #1
  402ad4:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
  402ad8:	4b46      	ldr	r3, [pc, #280]	; (402bf4 <dmp_enable_feature+0x248>)
  402ada:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
  402adc:	21fa      	movs	r1, #250	; 0xfa
  402ade:	2007      	movs	r0, #7
  402ae0:	4b46      	ldr	r3, [pc, #280]	; (402bfc <dmp_enable_feature+0x250>)
  402ae2:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
  402ae4:	2007      	movs	r0, #7
  402ae6:	4b46      	ldr	r3, [pc, #280]	; (402c00 <dmp_enable_feature+0x254>)
  402ae8:	4798      	blx	r3
        dmp_set_tap_count(1);
  402aea:	2001      	movs	r0, #1
  402aec:	4b45      	ldr	r3, [pc, #276]	; (402c04 <dmp_enable_feature+0x258>)
  402aee:	4798      	blx	r3
        dmp_set_tap_time(100);
  402af0:	2064      	movs	r0, #100	; 0x64
  402af2:	4b45      	ldr	r3, [pc, #276]	; (402c08 <dmp_enable_feature+0x25c>)
  402af4:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
  402af6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402afa:	4b44      	ldr	r3, [pc, #272]	; (402c0c <dmp_enable_feature+0x260>)
  402afc:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
  402afe:	21c8      	movs	r1, #200	; 0xc8
  402b00:	4843      	ldr	r0, [pc, #268]	; (402c10 <dmp_enable_feature+0x264>)
  402b02:	4b44      	ldr	r3, [pc, #272]	; (402c14 <dmp_enable_feature+0x268>)
  402b04:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
  402b06:	2028      	movs	r0, #40	; 0x28
  402b08:	4b43      	ldr	r3, [pc, #268]	; (402c18 <dmp_enable_feature+0x26c>)
  402b0a:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
  402b0c:	200a      	movs	r0, #10
  402b0e:	4b43      	ldr	r3, [pc, #268]	; (402c1c <dmp_enable_feature+0x270>)
  402b10:	4798      	blx	r3
  402b12:	e009      	b.n	402b28 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
  402b14:	23d8      	movs	r3, #216	; 0xd8
  402b16:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
  402b18:	f107 030c 	add.w	r3, r7, #12
  402b1c:	461a      	mov	r2, r3
  402b1e:	2101      	movs	r1, #1
  402b20:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
  402b24:	4b33      	ldr	r3, [pc, #204]	; (402bf4 <dmp_enable_feature+0x248>)
  402b26:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
  402b28:	88fb      	ldrh	r3, [r7, #6]
  402b2a:	f003 0302 	and.w	r3, r3, #2
  402b2e:	2b00      	cmp	r3, #0
  402b30:	d002      	beq.n	402b38 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
  402b32:	23d9      	movs	r3, #217	; 0xd9
  402b34:	733b      	strb	r3, [r7, #12]
  402b36:	e001      	b.n	402b3c <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
  402b38:	23d8      	movs	r3, #216	; 0xd8
  402b3a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
  402b3c:	f107 030c 	add.w	r3, r7, #12
  402b40:	461a      	mov	r2, r3
  402b42:	2101      	movs	r1, #1
  402b44:	f240 703d 	movw	r0, #1853	; 0x73d
  402b48:	4b2a      	ldr	r3, [pc, #168]	; (402bf4 <dmp_enable_feature+0x248>)
  402b4a:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
  402b4c:	88fb      	ldrh	r3, [r7, #6]
  402b4e:	f003 0304 	and.w	r3, r3, #4
  402b52:	2b00      	cmp	r3, #0
  402b54:	d003      	beq.n	402b5e <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
  402b56:	2001      	movs	r0, #1
  402b58:	4b31      	ldr	r3, [pc, #196]	; (402c20 <dmp_enable_feature+0x274>)
  402b5a:	4798      	blx	r3
  402b5c:	e002      	b.n	402b64 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
  402b5e:	2000      	movs	r0, #0
  402b60:	4b2f      	ldr	r3, [pc, #188]	; (402c20 <dmp_enable_feature+0x274>)
  402b62:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
  402b64:	88fb      	ldrh	r3, [r7, #6]
  402b66:	f003 0310 	and.w	r3, r3, #16
  402b6a:	2b00      	cmp	r3, #0
  402b6c:	d003      	beq.n	402b76 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
  402b6e:	2001      	movs	r0, #1
  402b70:	4b2c      	ldr	r3, [pc, #176]	; (402c24 <dmp_enable_feature+0x278>)
  402b72:	4798      	blx	r3
  402b74:	e002      	b.n	402b7c <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
  402b76:	2000      	movs	r0, #0
  402b78:	4b2a      	ldr	r3, [pc, #168]	; (402c24 <dmp_enable_feature+0x278>)
  402b7a:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
  402b7c:	88fb      	ldrh	r3, [r7, #6]
  402b7e:	f043 0308 	orr.w	r3, r3, #8
  402b82:	b29a      	uxth	r2, r3
  402b84:	4b28      	ldr	r3, [pc, #160]	; (402c28 <dmp_enable_feature+0x27c>)
  402b86:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
  402b88:	4b28      	ldr	r3, [pc, #160]	; (402c2c <dmp_enable_feature+0x280>)
  402b8a:	4798      	blx	r3

    dmp.packet_length = 0;
  402b8c:	4b26      	ldr	r3, [pc, #152]	; (402c28 <dmp_enable_feature+0x27c>)
  402b8e:	2200      	movs	r2, #0
  402b90:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
  402b92:	88fb      	ldrh	r3, [r7, #6]
  402b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402b98:	2b00      	cmp	r3, #0
  402b9a:	d005      	beq.n	402ba8 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
  402b9c:	4b22      	ldr	r3, [pc, #136]	; (402c28 <dmp_enable_feature+0x27c>)
  402b9e:	7b9b      	ldrb	r3, [r3, #14]
  402ba0:	3306      	adds	r3, #6
  402ba2:	b2da      	uxtb	r2, r3
  402ba4:	4b20      	ldr	r3, [pc, #128]	; (402c28 <dmp_enable_feature+0x27c>)
  402ba6:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
  402ba8:	88fb      	ldrh	r3, [r7, #6]
  402baa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402bae:	2b00      	cmp	r3, #0
  402bb0:	d005      	beq.n	402bbe <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
  402bb2:	4b1d      	ldr	r3, [pc, #116]	; (402c28 <dmp_enable_feature+0x27c>)
  402bb4:	7b9b      	ldrb	r3, [r3, #14]
  402bb6:	3306      	adds	r3, #6
  402bb8:	b2da      	uxtb	r2, r3
  402bba:	4b1b      	ldr	r3, [pc, #108]	; (402c28 <dmp_enable_feature+0x27c>)
  402bbc:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
  402bbe:	88fb      	ldrh	r3, [r7, #6]
  402bc0:	f003 0314 	and.w	r3, r3, #20
  402bc4:	2b00      	cmp	r3, #0
  402bc6:	d005      	beq.n	402bd4 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
  402bc8:	4b17      	ldr	r3, [pc, #92]	; (402c28 <dmp_enable_feature+0x27c>)
  402bca:	7b9b      	ldrb	r3, [r3, #14]
  402bcc:	3310      	adds	r3, #16
  402bce:	b2da      	uxtb	r2, r3
  402bd0:	4b15      	ldr	r3, [pc, #84]	; (402c28 <dmp_enable_feature+0x27c>)
  402bd2:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
  402bd4:	88fb      	ldrh	r3, [r7, #6]
  402bd6:	f003 0303 	and.w	r3, r3, #3
  402bda:	2b00      	cmp	r3, #0
  402bdc:	d005      	beq.n	402bea <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
  402bde:	4b12      	ldr	r3, [pc, #72]	; (402c28 <dmp_enable_feature+0x27c>)
  402be0:	7b9b      	ldrb	r3, [r3, #14]
  402be2:	3304      	adds	r3, #4
  402be4:	b2da      	uxtb	r2, r3
  402be6:	4b10      	ldr	r3, [pc, #64]	; (402c28 <dmp_enable_feature+0x27c>)
  402be8:	739a      	strb	r2, [r3, #14]

    return 0;
  402bea:	2300      	movs	r3, #0
}
  402bec:	4618      	mov	r0, r3
  402bee:	3718      	adds	r7, #24
  402bf0:	46bd      	mov	sp, r7
  402bf2:	bd80      	pop	{r7, pc}
  402bf4:	00401cc1 	.word	0x00401cc1
  402bf8:	00402c31 	.word	0x00402c31
  402bfc:	004024fd 	.word	0x004024fd
  402c00:	00402779 	.word	0x00402779
  402c04:	004027e1 	.word	0x004027e1
  402c08:	00402829 	.word	0x00402829
  402c0c:	00402871 	.word	0x00402871
  402c10:	02cae309 	.word	0x02cae309
  402c14:	004028b9 	.word	0x004028b9
  402c18:	0040291d 	.word	0x0040291d
  402c1c:	00402965 	.word	0x00402965
  402c20:	00402c9d 	.word	0x00402c9d
  402c24:	00402cf9 	.word	0x00402cf9
  402c28:	200004a4 	.word	0x200004a4
  402c2c:	00401179 	.word	0x00401179

00402c30 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
  402c30:	b580      	push	{r7, lr}
  402c32:	b088      	sub	sp, #32
  402c34:	af00      	add	r7, sp, #0
  402c36:	4603      	mov	r3, r0
  402c38:	71fb      	strb	r3, [r7, #7]
    if (enable) {
  402c3a:	79fb      	ldrb	r3, [r7, #7]
  402c3c:	2b00      	cmp	r3, #0
  402c3e:	d011      	beq.n	402c64 <dmp_enable_gyro_cal+0x34>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
  402c40:	4a13      	ldr	r2, [pc, #76]	; (402c90 <dmp_enable_gyro_cal+0x60>)
  402c42:	f107 0314 	add.w	r3, r7, #20
  402c46:	6810      	ldr	r0, [r2, #0]
  402c48:	6851      	ldr	r1, [r2, #4]
  402c4a:	c303      	stmia	r3!, {r0, r1}
  402c4c:	7a12      	ldrb	r2, [r2, #8]
  402c4e:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
  402c50:	f107 0314 	add.w	r3, r7, #20
  402c54:	461a      	mov	r2, r3
  402c56:	2109      	movs	r1, #9
  402c58:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
  402c5c:	4b0d      	ldr	r3, [pc, #52]	; (402c94 <dmp_enable_gyro_cal+0x64>)
  402c5e:	4798      	blx	r3
  402c60:	4603      	mov	r3, r0
  402c62:	e010      	b.n	402c86 <dmp_enable_gyro_cal+0x56>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
  402c64:	4a0c      	ldr	r2, [pc, #48]	; (402c98 <dmp_enable_gyro_cal+0x68>)
  402c66:	f107 0308 	add.w	r3, r7, #8
  402c6a:	6810      	ldr	r0, [r2, #0]
  402c6c:	6851      	ldr	r1, [r2, #4]
  402c6e:	c303      	stmia	r3!, {r0, r1}
  402c70:	7a12      	ldrb	r2, [r2, #8]
  402c72:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
  402c74:	f107 0308 	add.w	r3, r7, #8
  402c78:	461a      	mov	r2, r3
  402c7a:	2109      	movs	r1, #9
  402c7c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
  402c80:	4b04      	ldr	r3, [pc, #16]	; (402c94 <dmp_enable_gyro_cal+0x64>)
  402c82:	4798      	blx	r3
  402c84:	4603      	mov	r3, r0
    }
}
  402c86:	4618      	mov	r0, r3
  402c88:	3720      	adds	r7, #32
  402c8a:	46bd      	mov	sp, r7
  402c8c:	bd80      	pop	{r7, pc}
  402c8e:	bf00      	nop
  402c90:	00407b98 	.word	0x00407b98
  402c94:	00401cc1 	.word	0x00401cc1
  402c98:	00407ba4 	.word	0x00407ba4

00402c9c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
  402c9c:	b580      	push	{r7, lr}
  402c9e:	b084      	sub	sp, #16
  402ca0:	af00      	add	r7, sp, #0
  402ca2:	4603      	mov	r3, r0
  402ca4:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
  402ca6:	79fb      	ldrb	r3, [r7, #7]
  402ca8:	2b00      	cmp	r3, #0
  402caa:	d008      	beq.n	402cbe <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
  402cac:	23c0      	movs	r3, #192	; 0xc0
  402cae:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
  402cb0:	23c2      	movs	r3, #194	; 0xc2
  402cb2:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
  402cb4:	23c4      	movs	r3, #196	; 0xc4
  402cb6:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
  402cb8:	23c6      	movs	r3, #198	; 0xc6
  402cba:	73fb      	strb	r3, [r7, #15]
  402cbc:	e006      	b.n	402ccc <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
  402cbe:	f107 030c 	add.w	r3, r7, #12
  402cc2:	2204      	movs	r2, #4
  402cc4:	218b      	movs	r1, #139	; 0x8b
  402cc6:	4618      	mov	r0, r3
  402cc8:	4b08      	ldr	r3, [pc, #32]	; (402cec <dmp_enable_lp_quat+0x50>)
  402cca:	4798      	blx	r3

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
  402ccc:	f107 030c 	add.w	r3, r7, #12
  402cd0:	461a      	mov	r2, r3
  402cd2:	2104      	movs	r1, #4
  402cd4:	f640 2098 	movw	r0, #2712	; 0xa98
  402cd8:	4b05      	ldr	r3, [pc, #20]	; (402cf0 <dmp_enable_lp_quat+0x54>)
  402cda:	4798      	blx	r3

    return mpu_reset_fifo();
  402cdc:	4b05      	ldr	r3, [pc, #20]	; (402cf4 <dmp_enable_lp_quat+0x58>)
  402cde:	4798      	blx	r3
  402ce0:	4603      	mov	r3, r0
}
  402ce2:	4618      	mov	r0, r3
  402ce4:	3710      	adds	r7, #16
  402ce6:	46bd      	mov	sp, r7
  402ce8:	bd80      	pop	{r7, pc}
  402cea:	bf00      	nop
  402cec:	00406b91 	.word	0x00406b91
  402cf0:	00401cc1 	.word	0x00401cc1
  402cf4:	00401179 	.word	0x00401179

00402cf8 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
  402cf8:	b580      	push	{r7, lr}
  402cfa:	b084      	sub	sp, #16
  402cfc:	af00      	add	r7, sp, #0
  402cfe:	4603      	mov	r3, r0
  402d00:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
  402d02:	79fb      	ldrb	r3, [r7, #7]
  402d04:	2b00      	cmp	r3, #0
  402d06:	d008      	beq.n	402d1a <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
  402d08:	2320      	movs	r3, #32
  402d0a:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
  402d0c:	2328      	movs	r3, #40	; 0x28
  402d0e:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
  402d10:	2330      	movs	r3, #48	; 0x30
  402d12:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
  402d14:	2338      	movs	r3, #56	; 0x38
  402d16:	73fb      	strb	r3, [r7, #15]
  402d18:	e006      	b.n	402d28 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
  402d1a:	f107 030c 	add.w	r3, r7, #12
  402d1e:	2204      	movs	r2, #4
  402d20:	21a3      	movs	r1, #163	; 0xa3
  402d22:	4618      	mov	r0, r3
  402d24:	4b08      	ldr	r3, [pc, #32]	; (402d48 <dmp_enable_6x_lp_quat+0x50>)
  402d26:	4798      	blx	r3

    mpu_write_mem(CFG_8, 4, regs);
  402d28:	f107 030c 	add.w	r3, r7, #12
  402d2c:	461a      	mov	r2, r3
  402d2e:	2104      	movs	r1, #4
  402d30:	f640 209e 	movw	r0, #2718	; 0xa9e
  402d34:	4b05      	ldr	r3, [pc, #20]	; (402d4c <dmp_enable_6x_lp_quat+0x54>)
  402d36:	4798      	blx	r3

    return mpu_reset_fifo();
  402d38:	4b05      	ldr	r3, [pc, #20]	; (402d50 <dmp_enable_6x_lp_quat+0x58>)
  402d3a:	4798      	blx	r3
  402d3c:	4603      	mov	r3, r0
}
  402d3e:	4618      	mov	r0, r3
  402d40:	3710      	adds	r7, #16
  402d42:	46bd      	mov	sp, r7
  402d44:	bd80      	pop	{r7, pc}
  402d46:	bf00      	nop
  402d48:	00406b91 	.word	0x00406b91
  402d4c:	00401cc1 	.word	0x00401cc1
  402d50:	00401179 	.word	0x00401179

00402d54 <LightSensor_Setup>:

/******** Light Sensor Registry Setup ********/
//White Light Detection Enabled with low lux (40ms integration time), No Trigger, Auto Mode
//Only sets up one light sensor at a time, not both
void LightSensor_Setup(uint8_t channel)
{
  402d54:	b580      	push	{r7, lr}
  402d56:	b082      	sub	sp, #8
  402d58:	af00      	add	r7, sp, #0
  402d5a:	4603      	mov	r3, r0
  402d5c:	71fb      	strb	r3, [r7, #7]
	TWI0_MuxSwitch(channel); //Set multiplexer address to correct device
  402d5e:	79fb      	ldrb	r3, [r7, #7]
  402d60:	4618      	mov	r0, r3
  402d62:	4b05      	ldr	r3, [pc, #20]	; (402d78 <LightSensor_Setup+0x24>)
  402d64:	4798      	blx	r3
	TWI0_Write(TWI0_LightSensorAddress, LightSens_Config, LightSens_Auto_LowLux);
  402d66:	2200      	movs	r2, #0
  402d68:	2100      	movs	r1, #0
  402d6a:	2010      	movs	r0, #16
  402d6c:	4b03      	ldr	r3, [pc, #12]	; (402d7c <LightSensor_Setup+0x28>)
  402d6e:	4798      	blx	r3
}
  402d70:	bf00      	nop
  402d72:	3708      	adds	r7, #8
  402d74:	46bd      	mov	sp, r7
  402d76:	bd80      	pop	{r7, pc}
  402d78:	004040f1 	.word	0x004040f1
  402d7c:	004041c5 	.word	0x004041c5

00402d80 <LightSensor_Data_Read>:

/******** Light Sensor Data Read ********/
//Retrieves the White Light (16-bit) data from the selected Light Sensor
uint16_t LightSensor_Data_Read(uint8_t channel)
{
  402d80:	b580      	push	{r7, lr}
  402d82:	b084      	sub	sp, #16
  402d84:	af00      	add	r7, sp, #0
  402d86:	4603      	mov	r3, r0
  402d88:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	TWI0_MuxSwitch(channel);	//Set multiplexer address to correct device
  402d8a:	79fb      	ldrb	r3, [r7, #7]
  402d8c:	4618      	mov	r0, r3
  402d8e:	4b06      	ldr	r3, [pc, #24]	; (402da8 <LightSensor_Data_Read+0x28>)
  402d90:	4798      	blx	r3
	data = TWI0_ReadDB(TWI0_LightSensorAddress, LightSensorWhite);
  402d92:	210b      	movs	r1, #11
  402d94:	2010      	movs	r0, #16
  402d96:	4b05      	ldr	r3, [pc, #20]	; (402dac <LightSensor_Data_Read+0x2c>)
  402d98:	4798      	blx	r3
  402d9a:	4603      	mov	r3, r0
  402d9c:	81fb      	strh	r3, [r7, #14]
	return data;
  402d9e:	89fb      	ldrh	r3, [r7, #14]
}
  402da0:	4618      	mov	r0, r3
  402da2:	3710      	adds	r7, #16
  402da4:	46bd      	mov	sp, r7
  402da6:	bd80      	pop	{r7, pc}
  402da8:	004040f1 	.word	0x004040f1
  402dac:	00404249 	.word	0x00404249

00402db0 <motor_init>:
 * \param 
 * 
 * \return void
 */
void motor_init(void)
{
  402db0:	b480      	push	{r7}
  402db2:	af00      	add	r7, sp, #0
	REG_CCFG_SYSIO |= CCFG_SYSIO_SYSIO12; //disable erase pin to give access to PB12 via PIO
  402db4:	4a82      	ldr	r2, [pc, #520]	; (402fc0 <motor_init+0x210>)
  402db6:	4b82      	ldr	r3, [pc, #520]	; (402fc0 <motor_init+0x210>)
  402db8:	681b      	ldr	r3, [r3, #0]
  402dba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402dbe:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<31);		//Enable clock access for PWM
  402dc0:	4a80      	ldr	r2, [pc, #512]	; (402fc4 <motor_init+0x214>)
  402dc2:	4b80      	ldr	r3, [pc, #512]	; (402fc4 <motor_init+0x214>)
  402dc4:	681b      	ldr	r3, [r3, #0]
  402dc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402dca:	6013      	str	r3, [r2, #0]
	
	//****Channel 3 (Motor 1)****//
	REG_PWM_CMR3 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  402dcc:	4a7e      	ldr	r2, [pc, #504]	; (402fc8 <motor_init+0x218>)
  402dce:	4b7e      	ldr	r3, [pc, #504]	; (402fc8 <motor_init+0x218>)
  402dd0:	681b      	ldr	r3, [r3, #0]
  402dd2:	f043 0304 	orr.w	r3, r3, #4
  402dd6:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 |= (1<<9);			//output starts at high level
  402dd8:	4a7b      	ldr	r2, [pc, #492]	; (402fc8 <motor_init+0x218>)
  402dda:	4b7b      	ldr	r3, [pc, #492]	; (402fc8 <motor_init+0x218>)
  402ddc:	681b      	ldr	r3, [r3, #0]
  402dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402de2:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 &= ~(1<<8);		//Left aligned output
  402de4:	4a78      	ldr	r2, [pc, #480]	; (402fc8 <motor_init+0x218>)
  402de6:	4b78      	ldr	r3, [pc, #480]	; (402fc8 <motor_init+0x218>)
  402de8:	681b      	ldr	r3, [r3, #0]
  402dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402dee:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 &= ~(1<<10);		//Update Duty cycle (NOT period)
  402df0:	4a75      	ldr	r2, [pc, #468]	; (402fc8 <motor_init+0x218>)
  402df2:	4b75      	ldr	r3, [pc, #468]	; (402fc8 <motor_init+0x218>)
  402df4:	681b      	ldr	r3, [r3, #0]
  402df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402dfa:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY3 = 0;				//PWM Duty cycle (default = 0)
  402dfc:	4b73      	ldr	r3, [pc, #460]	; (402fcc <motor_init+0x21c>)
  402dfe:	2200      	movs	r2, #0
  402e00:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD3 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  402e02:	4b73      	ldr	r3, [pc, #460]	; (402fd0 <motor_init+0x220>)
  402e04:	2264      	movs	r2, #100	; 0x64
  402e06:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<21);		//Enable peripheral control of PC21
  402e08:	4a72      	ldr	r2, [pc, #456]	; (402fd4 <motor_init+0x224>)
  402e0a:	4b72      	ldr	r3, [pc, #456]	; (402fd4 <motor_init+0x224>)
  402e0c:	681b      	ldr	r3, [r3, #0]
  402e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  402e12:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<21);		//Assign PC21 to PWM Peripheral B		
  402e14:	4b70      	ldr	r3, [pc, #448]	; (402fd8 <motor_init+0x228>)
  402e16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402e1a:	601a      	str	r2, [r3, #0]
	REG_PIOB_PER |= (1<<12);		//Enable PIO control of PB12
  402e1c:	4a6f      	ldr	r2, [pc, #444]	; (402fdc <motor_init+0x22c>)
  402e1e:	4b6f      	ldr	r3, [pc, #444]	; (402fdc <motor_init+0x22c>)
  402e20:	681b      	ldr	r3, [r3, #0]
  402e22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402e26:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<12);		//Set PB12 as output
  402e28:	4a6d      	ldr	r2, [pc, #436]	; (402fe0 <motor_init+0x230>)
  402e2a:	4b6d      	ldr	r3, [pc, #436]	; (402fe0 <motor_init+0x230>)
  402e2c:	681b      	ldr	r3, [r3, #0]
  402e2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402e32:	6013      	str	r3, [r2, #0]
	FIN_1_Low;		
  402e34:	4a6b      	ldr	r2, [pc, #428]	; (402fe4 <motor_init+0x234>)
  402e36:	4b6b      	ldr	r3, [pc, #428]	; (402fe4 <motor_init+0x234>)
  402e38:	681b      	ldr	r3, [r3, #0]
  402e3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402e3e:	6013      	str	r3, [r2, #0]
	REG_PIOC_PER |= (1<<22);		//Enable PIO control of PC22
  402e40:	4a69      	ldr	r2, [pc, #420]	; (402fe8 <motor_init+0x238>)
  402e42:	4b69      	ldr	r3, [pc, #420]	; (402fe8 <motor_init+0x238>)
  402e44:	681b      	ldr	r3, [r3, #0]
  402e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402e4a:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<22);		//Set PC22 as output
  402e4c:	4a67      	ldr	r2, [pc, #412]	; (402fec <motor_init+0x23c>)
  402e4e:	4b67      	ldr	r3, [pc, #412]	; (402fec <motor_init+0x23c>)
  402e50:	681b      	ldr	r3, [r3, #0]
  402e52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402e56:	6013      	str	r3, [r2, #0]
	RIN_1_Low;
  402e58:	4a65      	ldr	r2, [pc, #404]	; (402ff0 <motor_init+0x240>)
  402e5a:	4b65      	ldr	r3, [pc, #404]	; (402ff0 <motor_init+0x240>)
  402e5c:	681b      	ldr	r3, [r3, #0]
  402e5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402e62:	6013      	str	r3, [r2, #0]
								
	//****Channel 2 (Motor 2)****//
	REG_PWM_CMR2 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  402e64:	4a63      	ldr	r2, [pc, #396]	; (402ff4 <motor_init+0x244>)
  402e66:	4b63      	ldr	r3, [pc, #396]	; (402ff4 <motor_init+0x244>)
  402e68:	681b      	ldr	r3, [r3, #0]
  402e6a:	f043 0304 	orr.w	r3, r3, #4
  402e6e:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 |= (1<<9);			//output starts at low level
  402e70:	4a60      	ldr	r2, [pc, #384]	; (402ff4 <motor_init+0x244>)
  402e72:	4b60      	ldr	r3, [pc, #384]	; (402ff4 <motor_init+0x244>)
  402e74:	681b      	ldr	r3, [r3, #0]
  402e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402e7a:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 &= ~(1<<8);		//Left aligned output
  402e7c:	4a5d      	ldr	r2, [pc, #372]	; (402ff4 <motor_init+0x244>)
  402e7e:	4b5d      	ldr	r3, [pc, #372]	; (402ff4 <motor_init+0x244>)
  402e80:	681b      	ldr	r3, [r3, #0]
  402e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402e86:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 &= ~(1<<10);		//Update Duty cycle (NOT period)
  402e88:	4a5a      	ldr	r2, [pc, #360]	; (402ff4 <motor_init+0x244>)
  402e8a:	4b5a      	ldr	r3, [pc, #360]	; (402ff4 <motor_init+0x244>)
  402e8c:	681b      	ldr	r3, [r3, #0]
  402e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402e92:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY2 = 0;				//PWM Duty cycle (default = 0)
  402e94:	4b58      	ldr	r3, [pc, #352]	; (402ff8 <motor_init+0x248>)
  402e96:	2200      	movs	r2, #0
  402e98:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD2 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  402e9a:	4b58      	ldr	r3, [pc, #352]	; (402ffc <motor_init+0x24c>)
  402e9c:	2264      	movs	r2, #100	; 0x64
  402e9e:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<20);		//Enable peripheral control of PC20
  402ea0:	4a4c      	ldr	r2, [pc, #304]	; (402fd4 <motor_init+0x224>)
  402ea2:	4b4c      	ldr	r3, [pc, #304]	; (402fd4 <motor_init+0x224>)
  402ea4:	681b      	ldr	r3, [r3, #0]
  402ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402eaa:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<20);		//Assign VREF_1 to PWM Peripheral B			
  402eac:	4b4a      	ldr	r3, [pc, #296]	; (402fd8 <motor_init+0x228>)
  402eae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402eb2:	601a      	str	r2, [r3, #0]
	REG_PIOC_PER |= (1<<19);		//Enable PIO control of PC19
  402eb4:	4a4c      	ldr	r2, [pc, #304]	; (402fe8 <motor_init+0x238>)
  402eb6:	4b4c      	ldr	r3, [pc, #304]	; (402fe8 <motor_init+0x238>)
  402eb8:	681b      	ldr	r3, [r3, #0]
  402eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  402ebe:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<19);		//Set PC19 as output
  402ec0:	4a4a      	ldr	r2, [pc, #296]	; (402fec <motor_init+0x23c>)
  402ec2:	4b4a      	ldr	r3, [pc, #296]	; (402fec <motor_init+0x23c>)
  402ec4:	681b      	ldr	r3, [r3, #0]
  402ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  402eca:	6013      	str	r3, [r2, #0]
	RIN_2_Low;		
  402ecc:	4a4c      	ldr	r2, [pc, #304]	; (403000 <motor_init+0x250>)
  402ece:	4b4c      	ldr	r3, [pc, #304]	; (403000 <motor_init+0x250>)
  402ed0:	681b      	ldr	r3, [r3, #0]
  402ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402ed6:	6013      	str	r3, [r2, #0]
	REG_PIOA_PER |= (1<<31);		//Enable PIO control of PA31
  402ed8:	4a4a      	ldr	r2, [pc, #296]	; (403004 <motor_init+0x254>)
  402eda:	4b4a      	ldr	r3, [pc, #296]	; (403004 <motor_init+0x254>)
  402edc:	681b      	ldr	r3, [r3, #0]
  402ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402ee2:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<31);		//Set PA31 as output
  402ee4:	4a48      	ldr	r2, [pc, #288]	; (403008 <motor_init+0x258>)
  402ee6:	4b48      	ldr	r3, [pc, #288]	; (403008 <motor_init+0x258>)
  402ee8:	681b      	ldr	r3, [r3, #0]
  402eea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402eee:	6013      	str	r3, [r2, #0]
	FIN_2_Low;		
  402ef0:	4a3f      	ldr	r2, [pc, #252]	; (402ff0 <motor_init+0x240>)
  402ef2:	4b3f      	ldr	r3, [pc, #252]	; (402ff0 <motor_init+0x240>)
  402ef4:	681b      	ldr	r3, [r3, #0]
  402ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  402efa:	6013      	str	r3, [r2, #0]

	//****Channel 1 (Motor 3)****//
	REG_PWM_CMR1 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  402efc:	4a43      	ldr	r2, [pc, #268]	; (40300c <motor_init+0x25c>)
  402efe:	4b43      	ldr	r3, [pc, #268]	; (40300c <motor_init+0x25c>)
  402f00:	681b      	ldr	r3, [r3, #0]
  402f02:	f043 0304 	orr.w	r3, r3, #4
  402f06:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 |= (1<<9);			//output starts at low level
  402f08:	4a40      	ldr	r2, [pc, #256]	; (40300c <motor_init+0x25c>)
  402f0a:	4b40      	ldr	r3, [pc, #256]	; (40300c <motor_init+0x25c>)
  402f0c:	681b      	ldr	r3, [r3, #0]
  402f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402f12:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 &= ~(1<<8);		//Left aligned output
  402f14:	4a3d      	ldr	r2, [pc, #244]	; (40300c <motor_init+0x25c>)
  402f16:	4b3d      	ldr	r3, [pc, #244]	; (40300c <motor_init+0x25c>)
  402f18:	681b      	ldr	r3, [r3, #0]
  402f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402f1e:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 &= ~(1<<10);		//Update Duty cycle (NOT period)
  402f20:	4a3a      	ldr	r2, [pc, #232]	; (40300c <motor_init+0x25c>)
  402f22:	4b3a      	ldr	r3, [pc, #232]	; (40300c <motor_init+0x25c>)
  402f24:	681b      	ldr	r3, [r3, #0]
  402f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402f2a:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY1 = 0;				//PWM Duty cycle (default = 0)
  402f2c:	4b38      	ldr	r3, [pc, #224]	; (403010 <motor_init+0x260>)
  402f2e:	2200      	movs	r2, #0
  402f30:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD1 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  402f32:	4b38      	ldr	r3, [pc, #224]	; (403014 <motor_init+0x264>)
  402f34:	2264      	movs	r2, #100	; 0x64
  402f36:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<9);			//Enable peripheral control of PC9
  402f38:	4a26      	ldr	r2, [pc, #152]	; (402fd4 <motor_init+0x224>)
  402f3a:	4b26      	ldr	r3, [pc, #152]	; (402fd4 <motor_init+0x224>)
  402f3c:	681b      	ldr	r3, [r3, #0]
  402f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402f42:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<9);		//Assign PC9 to PWM Peripheral B		
  402f44:	4b24      	ldr	r3, [pc, #144]	; (402fd8 <motor_init+0x228>)
  402f46:	f44f 7200 	mov.w	r2, #512	; 0x200
  402f4a:	601a      	str	r2, [r3, #0]
	REG_PIOA_PER |= (1<<30);		//Enable PIO control of PA30
  402f4c:	4a2d      	ldr	r2, [pc, #180]	; (403004 <motor_init+0x254>)
  402f4e:	4b2d      	ldr	r3, [pc, #180]	; (403004 <motor_init+0x254>)
  402f50:	681b      	ldr	r3, [r3, #0]
  402f52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f56:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<30);		//Set PA30 as output
  402f58:	4a2b      	ldr	r2, [pc, #172]	; (403008 <motor_init+0x258>)
  402f5a:	4b2b      	ldr	r3, [pc, #172]	; (403008 <motor_init+0x258>)
  402f5c:	681b      	ldr	r3, [r3, #0]
  402f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f62:	6013      	str	r3, [r2, #0]
	RIN_3_Low;		
  402f64:	4a26      	ldr	r2, [pc, #152]	; (403000 <motor_init+0x250>)
  402f66:	4b26      	ldr	r3, [pc, #152]	; (403000 <motor_init+0x250>)
  402f68:	681b      	ldr	r3, [r3, #0]
  402f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f6e:	6013      	str	r3, [r2, #0]
	REG_PIOA_PER |= (1<<29);		//Enable PIO control of PA29
  402f70:	4a24      	ldr	r2, [pc, #144]	; (403004 <motor_init+0x254>)
  402f72:	4b24      	ldr	r3, [pc, #144]	; (403004 <motor_init+0x254>)
  402f74:	681b      	ldr	r3, [r3, #0]
  402f76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f7a:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<29);		//Set PA29 as output
  402f7c:	4a22      	ldr	r2, [pc, #136]	; (403008 <motor_init+0x258>)
  402f7e:	4b22      	ldr	r3, [pc, #136]	; (403008 <motor_init+0x258>)
  402f80:	681b      	ldr	r3, [r3, #0]
  402f82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f86:	6013      	str	r3, [r2, #0]
	FIN_3_Low;
  402f88:	4a1d      	ldr	r2, [pc, #116]	; (403000 <motor_init+0x250>)
  402f8a:	4b1d      	ldr	r3, [pc, #116]	; (403000 <motor_init+0x250>)
  402f8c:	681b      	ldr	r3, [r3, #0]
  402f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f92:	6013      	str	r3, [r2, #0]
	
	//****Enable PWM Channels as last step of setup****//	
	REG_PWM_ENA |= PWM_ENA_CHID1;	//Enable PWM on channel 1
  402f94:	4a20      	ldr	r2, [pc, #128]	; (403018 <motor_init+0x268>)
  402f96:	4b20      	ldr	r3, [pc, #128]	; (403018 <motor_init+0x268>)
  402f98:	681b      	ldr	r3, [r3, #0]
  402f9a:	f043 0302 	orr.w	r3, r3, #2
  402f9e:	6013      	str	r3, [r2, #0]
	REG_PWM_ENA |= PWM_ENA_CHID2;	//Enable PWM on channel 2
  402fa0:	4a1d      	ldr	r2, [pc, #116]	; (403018 <motor_init+0x268>)
  402fa2:	4b1d      	ldr	r3, [pc, #116]	; (403018 <motor_init+0x268>)
  402fa4:	681b      	ldr	r3, [r3, #0]
  402fa6:	f043 0304 	orr.w	r3, r3, #4
  402faa:	6013      	str	r3, [r2, #0]
	REG_PWM_ENA |= PWM_ENA_CHID3;	//Enable PWM on channel 3
  402fac:	4a1a      	ldr	r2, [pc, #104]	; (403018 <motor_init+0x268>)
  402fae:	4b1a      	ldr	r3, [pc, #104]	; (403018 <motor_init+0x268>)
  402fb0:	681b      	ldr	r3, [r3, #0]
  402fb2:	f043 0308 	orr.w	r3, r3, #8
  402fb6:	6013      	str	r3, [r2, #0]
}
  402fb8:	bf00      	nop
  402fba:	46bd      	mov	sp, r7
  402fbc:	bc80      	pop	{r7}
  402fbe:	4770      	bx	lr
  402fc0:	400e0314 	.word	0x400e0314
  402fc4:	400e0410 	.word	0x400e0410
  402fc8:	40020260 	.word	0x40020260
  402fcc:	40020264 	.word	0x40020264
  402fd0:	40020268 	.word	0x40020268
  402fd4:	400e1204 	.word	0x400e1204
  402fd8:	400e1270 	.word	0x400e1270
  402fdc:	400e1000 	.word	0x400e1000
  402fe0:	400e1010 	.word	0x400e1010
  402fe4:	400e1034 	.word	0x400e1034
  402fe8:	400e1200 	.word	0x400e1200
  402fec:	400e1210 	.word	0x400e1210
  402ff0:	400e1234 	.word	0x400e1234
  402ff4:	40020240 	.word	0x40020240
  402ff8:	40020244 	.word	0x40020244
  402ffc:	40020248 	.word	0x40020248
  403000:	400e0e34 	.word	0x400e0e34
  403004:	400e0e00 	.word	0x400e0e00
  403008:	400e0e10 	.word	0x400e0e10
  40300c:	40020220 	.word	0x40020220
  403010:	40020224 	.word	0x40020224
  403014:	40020228 	.word	0x40020228
  403018:	40020004 	.word	0x40020004
  40301c:	00000000 	.word	0x00000000

00403020 <moveRobot>:
 * \param speed
 * 
 * \return void
 */
void moveRobot(float direction, unsigned char speed)
{
  403020:	b5f0      	push	{r4, r5, r6, r7, lr}
  403022:	b087      	sub	sp, #28
  403024:	af00      	add	r7, sp, #0
  403026:	6078      	str	r0, [r7, #4]
  403028:	460b      	mov	r3, r1
  40302a:	70fb      	strb	r3, [r7, #3]
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
  40302c:	e005      	b.n	40303a <moveRobot+0x1a>
		direction -= 360;
  40302e:	4ba4      	ldr	r3, [pc, #656]	; (4032c0 <moveRobot+0x2a0>)
  403030:	49a4      	ldr	r1, [pc, #656]	; (4032c4 <moveRobot+0x2a4>)
  403032:	6878      	ldr	r0, [r7, #4]
  403034:	4798      	blx	r3
  403036:	4603      	mov	r3, r0
  403038:	607b      	str	r3, [r7, #4]
void moveRobot(float direction, unsigned char speed)
{
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
  40303a:	4ba3      	ldr	r3, [pc, #652]	; (4032c8 <moveRobot+0x2a8>)
  40303c:	49a3      	ldr	r1, [pc, #652]	; (4032cc <moveRobot+0x2ac>)
  40303e:	6878      	ldr	r0, [r7, #4]
  403040:	4798      	blx	r3
  403042:	4603      	mov	r3, r0
  403044:	2b00      	cmp	r3, #0
  403046:	d1f2      	bne.n	40302e <moveRobot+0xe>
		direction -= 360;
	while(direction < -180)
  403048:	e005      	b.n	403056 <moveRobot+0x36>
		direction += 360;
  40304a:	4ba1      	ldr	r3, [pc, #644]	; (4032d0 <moveRobot+0x2b0>)
  40304c:	499d      	ldr	r1, [pc, #628]	; (4032c4 <moveRobot+0x2a4>)
  40304e:	6878      	ldr	r0, [r7, #4]
  403050:	4798      	blx	r3
  403052:	4603      	mov	r3, r0
  403054:	607b      	str	r3, [r7, #4]
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
		direction -= 360;
	while(direction < -180)
  403056:	4b9f      	ldr	r3, [pc, #636]	; (4032d4 <moveRobot+0x2b4>)
  403058:	499f      	ldr	r1, [pc, #636]	; (4032d8 <moveRobot+0x2b8>)
  40305a:	6878      	ldr	r0, [r7, #4]
  40305c:	4798      	blx	r3
  40305e:	4603      	mov	r3, r0
  403060:	2b00      	cmp	r3, #0
  403062:	d1f2      	bne.n	40304a <moveRobot+0x2a>
		direction += 360;
	//stop speed from being over max in case of user input error
	if(speed > 100)
  403064:	78fb      	ldrb	r3, [r7, #3]
  403066:	2b64      	cmp	r3, #100	; 0x64
  403068:	d901      	bls.n	40306e <moveRobot+0x4e>
		speed = 100;
  40306a:	2364      	movs	r3, #100	; 0x64
  40306c:	70fb      	strb	r3, [r7, #3]
	directionRad = (direction * M_PI) / 180; //convert desired direction to radians
  40306e:	4b9b      	ldr	r3, [pc, #620]	; (4032dc <moveRobot+0x2bc>)
  403070:	6878      	ldr	r0, [r7, #4]
  403072:	4798      	blx	r3
  403074:	4c9a      	ldr	r4, [pc, #616]	; (4032e0 <moveRobot+0x2c0>)
  403076:	a38a      	add	r3, pc, #552	; (adr r3, 4032a0 <moveRobot+0x280>)
  403078:	e9d3 2300 	ldrd	r2, r3, [r3]
  40307c:	47a0      	blx	r4
  40307e:	4603      	mov	r3, r0
  403080:	460c      	mov	r4, r1
  403082:	4618      	mov	r0, r3
  403084:	4621      	mov	r1, r4
  403086:	4c97      	ldr	r4, [pc, #604]	; (4032e4 <moveRobot+0x2c4>)
  403088:	f04f 0200 	mov.w	r2, #0
  40308c:	4b96      	ldr	r3, [pc, #600]	; (4032e8 <moveRobot+0x2c8>)
  40308e:	47a0      	blx	r4
  403090:	4603      	mov	r3, r0
  403092:	460c      	mov	r4, r1
  403094:	4619      	mov	r1, r3
  403096:	4622      	mov	r2, r4
  403098:	4b94      	ldr	r3, [pc, #592]	; (4032ec <moveRobot+0x2cc>)
  40309a:	4608      	mov	r0, r1
  40309c:	4611      	mov	r1, r2
  40309e:	4798      	blx	r3
  4030a0:	4603      	mov	r3, r0
  4030a2:	60bb      	str	r3, [r7, #8]
	motor1Speed = speed * cos ((270 * M_PI) / 180 - directionRad );//radians
  4030a4:	78fa      	ldrb	r2, [r7, #3]
  4030a6:	4b92      	ldr	r3, [pc, #584]	; (4032f0 <moveRobot+0x2d0>)
  4030a8:	4610      	mov	r0, r2
  4030aa:	4798      	blx	r3
  4030ac:	4605      	mov	r5, r0
  4030ae:	460e      	mov	r6, r1
  4030b0:	4b8a      	ldr	r3, [pc, #552]	; (4032dc <moveRobot+0x2bc>)
  4030b2:	68b8      	ldr	r0, [r7, #8]
  4030b4:	4798      	blx	r3
  4030b6:	4602      	mov	r2, r0
  4030b8:	460b      	mov	r3, r1
  4030ba:	4c8e      	ldr	r4, [pc, #568]	; (4032f4 <moveRobot+0x2d4>)
  4030bc:	a17a      	add	r1, pc, #488	; (adr r1, 4032a8 <moveRobot+0x288>)
  4030be:	e9d1 0100 	ldrd	r0, r1, [r1]
  4030c2:	47a0      	blx	r4
  4030c4:	4603      	mov	r3, r0
  4030c6:	460c      	mov	r4, r1
  4030c8:	4618      	mov	r0, r3
  4030ca:	4621      	mov	r1, r4
  4030cc:	4b8a      	ldr	r3, [pc, #552]	; (4032f8 <moveRobot+0x2d8>)
  4030ce:	4798      	blx	r3
  4030d0:	4602      	mov	r2, r0
  4030d2:	460b      	mov	r3, r1
  4030d4:	4c82      	ldr	r4, [pc, #520]	; (4032e0 <moveRobot+0x2c0>)
  4030d6:	4628      	mov	r0, r5
  4030d8:	4631      	mov	r1, r6
  4030da:	47a0      	blx	r4
  4030dc:	4603      	mov	r3, r0
  4030de:	460c      	mov	r4, r1
  4030e0:	4619      	mov	r1, r3
  4030e2:	4622      	mov	r2, r4
  4030e4:	4b81      	ldr	r3, [pc, #516]	; (4032ec <moveRobot+0x2cc>)
  4030e6:	4608      	mov	r0, r1
  4030e8:	4611      	mov	r1, r2
  4030ea:	4798      	blx	r3
  4030ec:	4603      	mov	r3, r0
  4030ee:	617b      	str	r3, [r7, #20]
	motor2Speed = speed * cos ((30  * M_PI) / 180 - directionRad );
  4030f0:	78fa      	ldrb	r2, [r7, #3]
  4030f2:	4b7f      	ldr	r3, [pc, #508]	; (4032f0 <moveRobot+0x2d0>)
  4030f4:	4610      	mov	r0, r2
  4030f6:	4798      	blx	r3
  4030f8:	4605      	mov	r5, r0
  4030fa:	460e      	mov	r6, r1
  4030fc:	4b77      	ldr	r3, [pc, #476]	; (4032dc <moveRobot+0x2bc>)
  4030fe:	68b8      	ldr	r0, [r7, #8]
  403100:	4798      	blx	r3
  403102:	4602      	mov	r2, r0
  403104:	460b      	mov	r3, r1
  403106:	4c7b      	ldr	r4, [pc, #492]	; (4032f4 <moveRobot+0x2d4>)
  403108:	a169      	add	r1, pc, #420	; (adr r1, 4032b0 <moveRobot+0x290>)
  40310a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40310e:	47a0      	blx	r4
  403110:	4603      	mov	r3, r0
  403112:	460c      	mov	r4, r1
  403114:	4618      	mov	r0, r3
  403116:	4621      	mov	r1, r4
  403118:	4b77      	ldr	r3, [pc, #476]	; (4032f8 <moveRobot+0x2d8>)
  40311a:	4798      	blx	r3
  40311c:	4602      	mov	r2, r0
  40311e:	460b      	mov	r3, r1
  403120:	4c6f      	ldr	r4, [pc, #444]	; (4032e0 <moveRobot+0x2c0>)
  403122:	4628      	mov	r0, r5
  403124:	4631      	mov	r1, r6
  403126:	47a0      	blx	r4
  403128:	4603      	mov	r3, r0
  40312a:	460c      	mov	r4, r1
  40312c:	4619      	mov	r1, r3
  40312e:	4622      	mov	r2, r4
  403130:	4b6e      	ldr	r3, [pc, #440]	; (4032ec <moveRobot+0x2cc>)
  403132:	4608      	mov	r0, r1
  403134:	4611      	mov	r1, r2
  403136:	4798      	blx	r3
  403138:	4603      	mov	r3, r0
  40313a:	613b      	str	r3, [r7, #16]
	motor3Speed = speed * cos ((150 * M_PI) / 180 - directionRad );
  40313c:	78fa      	ldrb	r2, [r7, #3]
  40313e:	4b6c      	ldr	r3, [pc, #432]	; (4032f0 <moveRobot+0x2d0>)
  403140:	4610      	mov	r0, r2
  403142:	4798      	blx	r3
  403144:	4605      	mov	r5, r0
  403146:	460e      	mov	r6, r1
  403148:	4b64      	ldr	r3, [pc, #400]	; (4032dc <moveRobot+0x2bc>)
  40314a:	68b8      	ldr	r0, [r7, #8]
  40314c:	4798      	blx	r3
  40314e:	4602      	mov	r2, r0
  403150:	460b      	mov	r3, r1
  403152:	4c68      	ldr	r4, [pc, #416]	; (4032f4 <moveRobot+0x2d4>)
  403154:	a158      	add	r1, pc, #352	; (adr r1, 4032b8 <moveRobot+0x298>)
  403156:	e9d1 0100 	ldrd	r0, r1, [r1]
  40315a:	47a0      	blx	r4
  40315c:	4603      	mov	r3, r0
  40315e:	460c      	mov	r4, r1
  403160:	4618      	mov	r0, r3
  403162:	4621      	mov	r1, r4
  403164:	4b64      	ldr	r3, [pc, #400]	; (4032f8 <moveRobot+0x2d8>)
  403166:	4798      	blx	r3
  403168:	4602      	mov	r2, r0
  40316a:	460b      	mov	r3, r1
  40316c:	4c5c      	ldr	r4, [pc, #368]	; (4032e0 <moveRobot+0x2c0>)
  40316e:	4628      	mov	r0, r5
  403170:	4631      	mov	r1, r6
  403172:	47a0      	blx	r4
  403174:	4603      	mov	r3, r0
  403176:	460c      	mov	r4, r1
  403178:	4619      	mov	r1, r3
  40317a:	4622      	mov	r2, r4
  40317c:	4b5b      	ldr	r3, [pc, #364]	; (4032ec <moveRobot+0x2cc>)
  40317e:	4608      	mov	r0, r1
  403180:	4611      	mov	r1, r2
  403182:	4798      	blx	r3
  403184:	4603      	mov	r3, r0
  403186:	60fb      	str	r3, [r7, #12]
	
	//motor 2 & 3 is wired backwards on test robot so forward and back is flipped
	if(motor1Speed > 0)
  403188:	4b4f      	ldr	r3, [pc, #316]	; (4032c8 <moveRobot+0x2a8>)
  40318a:	f04f 0100 	mov.w	r1, #0
  40318e:	6978      	ldr	r0, [r7, #20]
  403190:	4798      	blx	r3
  403192:	4603      	mov	r3, r0
  403194:	2b00      	cmp	r3, #0
  403196:	d00c      	beq.n	4031b2 <moveRobot+0x192>
	{
		//Forward
		RIN_1_Low;
  403198:	4a58      	ldr	r2, [pc, #352]	; (4032fc <moveRobot+0x2dc>)
  40319a:	4b58      	ldr	r3, [pc, #352]	; (4032fc <moveRobot+0x2dc>)
  40319c:	681b      	ldr	r3, [r3, #0]
  40319e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4031a2:	6013      	str	r3, [r2, #0]
		FIN_1_High;		
  4031a4:	4a56      	ldr	r2, [pc, #344]	; (403300 <moveRobot+0x2e0>)
  4031a6:	4b56      	ldr	r3, [pc, #344]	; (403300 <moveRobot+0x2e0>)
  4031a8:	681b      	ldr	r3, [r3, #0]
  4031aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031ae:	6013      	str	r3, [r2, #0]
  4031b0:	e024      	b.n	4031fc <moveRobot+0x1dc>
	}
	else if (motor1Speed == 0)
  4031b2:	4b54      	ldr	r3, [pc, #336]	; (403304 <moveRobot+0x2e4>)
  4031b4:	f04f 0100 	mov.w	r1, #0
  4031b8:	6978      	ldr	r0, [r7, #20]
  4031ba:	4798      	blx	r3
  4031bc:	4603      	mov	r3, r0
  4031be:	2b00      	cmp	r3, #0
  4031c0:	d00c      	beq.n	4031dc <moveRobot+0x1bc>
	{
		//Motor off (coast not brake)
		RIN_1_Low;
  4031c2:	4a4e      	ldr	r2, [pc, #312]	; (4032fc <moveRobot+0x2dc>)
  4031c4:	4b4d      	ldr	r3, [pc, #308]	; (4032fc <moveRobot+0x2dc>)
  4031c6:	681b      	ldr	r3, [r3, #0]
  4031c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4031cc:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4031ce:	4a4e      	ldr	r2, [pc, #312]	; (403308 <moveRobot+0x2e8>)
  4031d0:	4b4d      	ldr	r3, [pc, #308]	; (403308 <moveRobot+0x2e8>)
  4031d2:	681b      	ldr	r3, [r3, #0]
  4031d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031d8:	6013      	str	r3, [r2, #0]
  4031da:	e00f      	b.n	4031fc <moveRobot+0x1dc>
	}
	else
	{
		//Reverse
		motor1Speed = motor1Speed * (-1); 
  4031dc:	697b      	ldr	r3, [r7, #20]
  4031de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  4031e2:	617b      	str	r3, [r7, #20]
		RIN_1_High;
  4031e4:	4a49      	ldr	r2, [pc, #292]	; (40330c <moveRobot+0x2ec>)
  4031e6:	4b49      	ldr	r3, [pc, #292]	; (40330c <moveRobot+0x2ec>)
  4031e8:	681b      	ldr	r3, [r3, #0]
  4031ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4031ee:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4031f0:	4a45      	ldr	r2, [pc, #276]	; (403308 <moveRobot+0x2e8>)
  4031f2:	4b45      	ldr	r3, [pc, #276]	; (403308 <moveRobot+0x2e8>)
  4031f4:	681b      	ldr	r3, [r3, #0]
  4031f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031fa:	6013      	str	r3, [r2, #0]
	}

	if(motor2Speed > 0)
  4031fc:	4b32      	ldr	r3, [pc, #200]	; (4032c8 <moveRobot+0x2a8>)
  4031fe:	f04f 0100 	mov.w	r1, #0
  403202:	6938      	ldr	r0, [r7, #16]
  403204:	4798      	blx	r3
  403206:	4603      	mov	r3, r0
  403208:	2b00      	cmp	r3, #0
  40320a:	d00c      	beq.n	403226 <moveRobot+0x206>
	{
		//Forward
		RIN_2_Low;
  40320c:	4a40      	ldr	r2, [pc, #256]	; (403310 <moveRobot+0x2f0>)
  40320e:	4b40      	ldr	r3, [pc, #256]	; (403310 <moveRobot+0x2f0>)
  403210:	681b      	ldr	r3, [r3, #0]
  403212:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403216:	6013      	str	r3, [r2, #0]
		FIN_2_High;
  403218:	4a3c      	ldr	r2, [pc, #240]	; (40330c <moveRobot+0x2ec>)
  40321a:	4b3c      	ldr	r3, [pc, #240]	; (40330c <moveRobot+0x2ec>)
  40321c:	681b      	ldr	r3, [r3, #0]
  40321e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403222:	6013      	str	r3, [r2, #0]
  403224:	e024      	b.n	403270 <moveRobot+0x250>
	}
	else if (motor2Speed == 0)
  403226:	4b37      	ldr	r3, [pc, #220]	; (403304 <moveRobot+0x2e4>)
  403228:	f04f 0100 	mov.w	r1, #0
  40322c:	6938      	ldr	r0, [r7, #16]
  40322e:	4798      	blx	r3
  403230:	4603      	mov	r3, r0
  403232:	2b00      	cmp	r3, #0
  403234:	d00c      	beq.n	403250 <moveRobot+0x230>
	{
		//Motor off (coast not brake)
		RIN_2_Low;
  403236:	4a36      	ldr	r2, [pc, #216]	; (403310 <moveRobot+0x2f0>)
  403238:	4b35      	ldr	r3, [pc, #212]	; (403310 <moveRobot+0x2f0>)
  40323a:	681b      	ldr	r3, [r3, #0]
  40323c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403240:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  403242:	4a2e      	ldr	r2, [pc, #184]	; (4032fc <moveRobot+0x2dc>)
  403244:	4b2d      	ldr	r3, [pc, #180]	; (4032fc <moveRobot+0x2dc>)
  403246:	681b      	ldr	r3, [r3, #0]
  403248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  40324c:	6013      	str	r3, [r2, #0]
  40324e:	e00f      	b.n	403270 <moveRobot+0x250>
	}
	else
	{
		//Reverse
		motor2Speed = motor2Speed * (-1); 
  403250:	693b      	ldr	r3, [r7, #16]
  403252:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  403256:	613b      	str	r3, [r7, #16]
		RIN_2_High;
  403258:	4a2e      	ldr	r2, [pc, #184]	; (403314 <moveRobot+0x2f4>)
  40325a:	4b2e      	ldr	r3, [pc, #184]	; (403314 <moveRobot+0x2f4>)
  40325c:	681b      	ldr	r3, [r3, #0]
  40325e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403262:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  403264:	4a25      	ldr	r2, [pc, #148]	; (4032fc <moveRobot+0x2dc>)
  403266:	4b25      	ldr	r3, [pc, #148]	; (4032fc <moveRobot+0x2dc>)
  403268:	681b      	ldr	r3, [r3, #0]
  40326a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  40326e:	6013      	str	r3, [r2, #0]
	}
	
	if(motor3Speed > 0)
  403270:	4b15      	ldr	r3, [pc, #84]	; (4032c8 <moveRobot+0x2a8>)
  403272:	f04f 0100 	mov.w	r1, #0
  403276:	68f8      	ldr	r0, [r7, #12]
  403278:	4798      	blx	r3
  40327a:	4603      	mov	r3, r0
  40327c:	2b00      	cmp	r3, #0
  40327e:	d04b      	beq.n	403318 <moveRobot+0x2f8>
	{
		//Forward
		RIN_3_Low;
  403280:	4a23      	ldr	r2, [pc, #140]	; (403310 <moveRobot+0x2f0>)
  403282:	4b23      	ldr	r3, [pc, #140]	; (403310 <moveRobot+0x2f0>)
  403284:	681b      	ldr	r3, [r3, #0]
  403286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40328a:	6013      	str	r3, [r2, #0]
		FIN_3_High;			
  40328c:	4a21      	ldr	r2, [pc, #132]	; (403314 <moveRobot+0x2f4>)
  40328e:	4b21      	ldr	r3, [pc, #132]	; (403314 <moveRobot+0x2f4>)
  403290:	681b      	ldr	r3, [r3, #0]
  403292:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403296:	6013      	str	r3, [r2, #0]
  403298:	e063      	b.n	403362 <moveRobot+0x342>
  40329a:	bf00      	nop
  40329c:	f3af 8000 	nop.w
  4032a0:	54442d18 	.word	0x54442d18
  4032a4:	400921fb 	.word	0x400921fb
  4032a8:	7f3321d2 	.word	0x7f3321d2
  4032ac:	4012d97c 	.word	0x4012d97c
  4032b0:	382d7365 	.word	0x382d7365
  4032b4:	3fe0c152 	.word	0x3fe0c152
  4032b8:	c638d03f 	.word	0xc638d03f
  4032bc:	4004f1a6 	.word	0x4004f1a6
  4032c0:	004063c9 	.word	0x004063c9
  4032c4:	43b40000 	.word	0x43b40000
  4032c8:	00406955 	.word	0x00406955
  4032cc:	43340000 	.word	0x43340000
  4032d0:	004063cd 	.word	0x004063cd
  4032d4:	00406919 	.word	0x00406919
  4032d8:	c3340000 	.word	0xc3340000
  4032dc:	00405cb5 	.word	0x00405cb5
  4032e0:	00405d5d 	.word	0x00405d5d
  4032e4:	00405fb1 	.word	0x00405fb1
  4032e8:	40668000 	.word	0x40668000
  4032ec:	00406321 	.word	0x00406321
  4032f0:	00405c91 	.word	0x00405c91
  4032f4:	004059f5 	.word	0x004059f5
  4032f8:	0040473d 	.word	0x0040473d
  4032fc:	400e1234 	.word	0x400e1234
  403300:	400e1030 	.word	0x400e1030
  403304:	00406905 	.word	0x00406905
  403308:	400e1034 	.word	0x400e1034
  40330c:	400e1230 	.word	0x400e1230
  403310:	400e0e34 	.word	0x400e0e34
  403314:	400e0e30 	.word	0x400e0e30
	}
	else if (motor3Speed == 0)
  403318:	4b1d      	ldr	r3, [pc, #116]	; (403390 <moveRobot+0x370>)
  40331a:	f04f 0100 	mov.w	r1, #0
  40331e:	68f8      	ldr	r0, [r7, #12]
  403320:	4798      	blx	r3
  403322:	4603      	mov	r3, r0
  403324:	2b00      	cmp	r3, #0
  403326:	d00c      	beq.n	403342 <moveRobot+0x322>
	{
		//Motor off (coast not brake)
		RIN_3_Low;
  403328:	4a1a      	ldr	r2, [pc, #104]	; (403394 <moveRobot+0x374>)
  40332a:	4b1a      	ldr	r3, [pc, #104]	; (403394 <moveRobot+0x374>)
  40332c:	681b      	ldr	r3, [r3, #0]
  40332e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403332:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  403334:	4a17      	ldr	r2, [pc, #92]	; (403394 <moveRobot+0x374>)
  403336:	4b17      	ldr	r3, [pc, #92]	; (403394 <moveRobot+0x374>)
  403338:	681b      	ldr	r3, [r3, #0]
  40333a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40333e:	6013      	str	r3, [r2, #0]
  403340:	e00f      	b.n	403362 <moveRobot+0x342>
	}
	else
	{
		//Reverse
		motor3Speed = motor3Speed * (-1); 
  403342:	68fb      	ldr	r3, [r7, #12]
  403344:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  403348:	60fb      	str	r3, [r7, #12]
		RIN_3_High;
  40334a:	4a13      	ldr	r2, [pc, #76]	; (403398 <moveRobot+0x378>)
  40334c:	4b12      	ldr	r3, [pc, #72]	; (403398 <moveRobot+0x378>)
  40334e:	681b      	ldr	r3, [r3, #0]
  403350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403354:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  403356:	4a0f      	ldr	r2, [pc, #60]	; (403394 <moveRobot+0x374>)
  403358:	4b0e      	ldr	r3, [pc, #56]	; (403394 <moveRobot+0x374>)
  40335a:	681b      	ldr	r3, [r3, #0]
  40335c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403360:	6013      	str	r3, [r2, #0]
	}
	REG_PWM_CUPD1 = (motor3Speed); //Update duty cycle as per calculations
  403362:	4c0e      	ldr	r4, [pc, #56]	; (40339c <moveRobot+0x37c>)
  403364:	4b0e      	ldr	r3, [pc, #56]	; (4033a0 <moveRobot+0x380>)
  403366:	68f8      	ldr	r0, [r7, #12]
  403368:	4798      	blx	r3
  40336a:	4603      	mov	r3, r0
  40336c:	6023      	str	r3, [r4, #0]
	REG_PWM_CUPD2 = (motor2Speed); //Update duty cycle as per calculations
  40336e:	4c0d      	ldr	r4, [pc, #52]	; (4033a4 <moveRobot+0x384>)
  403370:	4b0b      	ldr	r3, [pc, #44]	; (4033a0 <moveRobot+0x380>)
  403372:	6938      	ldr	r0, [r7, #16]
  403374:	4798      	blx	r3
  403376:	4603      	mov	r3, r0
  403378:	6023      	str	r3, [r4, #0]
	REG_PWM_CUPD3 = (motor1Speed); //Update duty cycle as per calculations
  40337a:	4c0b      	ldr	r4, [pc, #44]	; (4033a8 <moveRobot+0x388>)
  40337c:	4b08      	ldr	r3, [pc, #32]	; (4033a0 <moveRobot+0x380>)
  40337e:	6978      	ldr	r0, [r7, #20]
  403380:	4798      	blx	r3
  403382:	4603      	mov	r3, r0
  403384:	6023      	str	r3, [r4, #0]
}
  403386:	bf00      	nop
  403388:	371c      	adds	r7, #28
  40338a:	46bd      	mov	sp, r7
  40338c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40338e:	bf00      	nop
  403390:	00406905 	.word	0x00406905
  403394:	400e0e34 	.word	0x400e0e34
  403398:	400e0e30 	.word	0x400e0e30
  40339c:	40020230 	.word	0x40020230
  4033a0:	00406969 	.word	0x00406969
  4033a4:	40020250 	.word	0x40020250
  4033a8:	40020270 	.word	0x40020270

004033ac <rotateRobot>:

void rotateRobot(char direction, unsigned char speed)
{
  4033ac:	b480      	push	{r7}
  4033ae:	b083      	sub	sp, #12
  4033b0:	af00      	add	r7, sp, #0
  4033b2:	4603      	mov	r3, r0
  4033b4:	460a      	mov	r2, r1
  4033b6:	71fb      	strb	r3, [r7, #7]
  4033b8:	4613      	mov	r3, r2
  4033ba:	71bb      	strb	r3, [r7, #6]
	if(direction == CW)			//enable all motors to spin the robot clockwise
  4033bc:	79fb      	ldrb	r3, [r7, #7]
  4033be:	2b00      	cmp	r3, #0
  4033c0:	d124      	bne.n	40340c <rotateRobot+0x60>
	{
		RIN_1_High;
  4033c2:	4a2d      	ldr	r2, [pc, #180]	; (403478 <rotateRobot+0xcc>)
  4033c4:	4b2c      	ldr	r3, [pc, #176]	; (403478 <rotateRobot+0xcc>)
  4033c6:	681b      	ldr	r3, [r3, #0]
  4033c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4033cc:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4033ce:	4a2b      	ldr	r2, [pc, #172]	; (40347c <rotateRobot+0xd0>)
  4033d0:	4b2a      	ldr	r3, [pc, #168]	; (40347c <rotateRobot+0xd0>)
  4033d2:	681b      	ldr	r3, [r3, #0]
  4033d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4033d8:	6013      	str	r3, [r2, #0]
		RIN_2_High;
  4033da:	4a29      	ldr	r2, [pc, #164]	; (403480 <rotateRobot+0xd4>)
  4033dc:	4b28      	ldr	r3, [pc, #160]	; (403480 <rotateRobot+0xd4>)
  4033de:	681b      	ldr	r3, [r3, #0]
  4033e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4033e4:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  4033e6:	4a27      	ldr	r2, [pc, #156]	; (403484 <rotateRobot+0xd8>)
  4033e8:	4b26      	ldr	r3, [pc, #152]	; (403484 <rotateRobot+0xd8>)
  4033ea:	681b      	ldr	r3, [r3, #0]
  4033ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4033f0:	6013      	str	r3, [r2, #0]
		RIN_3_High;
  4033f2:	4a23      	ldr	r2, [pc, #140]	; (403480 <rotateRobot+0xd4>)
  4033f4:	4b22      	ldr	r3, [pc, #136]	; (403480 <rotateRobot+0xd4>)
  4033f6:	681b      	ldr	r3, [r3, #0]
  4033f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4033fc:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  4033fe:	4a22      	ldr	r2, [pc, #136]	; (403488 <rotateRobot+0xdc>)
  403400:	4b21      	ldr	r3, [pc, #132]	; (403488 <rotateRobot+0xdc>)
  403402:	681b      	ldr	r3, [r3, #0]
  403404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403408:	6013      	str	r3, [r2, #0]
  40340a:	e026      	b.n	40345a <rotateRobot+0xae>
	}
	else if(direction == CCW)	//enable all motors to spin the robot counter-clockwise
  40340c:	79fb      	ldrb	r3, [r7, #7]
  40340e:	2b01      	cmp	r3, #1
  403410:	d123      	bne.n	40345a <rotateRobot+0xae>
	{
		RIN_1_Low;
  403412:	4a1c      	ldr	r2, [pc, #112]	; (403484 <rotateRobot+0xd8>)
  403414:	4b1b      	ldr	r3, [pc, #108]	; (403484 <rotateRobot+0xd8>)
  403416:	681b      	ldr	r3, [r3, #0]
  403418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40341c:	6013      	str	r3, [r2, #0]
		FIN_1_High;
  40341e:	4a1b      	ldr	r2, [pc, #108]	; (40348c <rotateRobot+0xe0>)
  403420:	4b1a      	ldr	r3, [pc, #104]	; (40348c <rotateRobot+0xe0>)
  403422:	681b      	ldr	r3, [r3, #0]
  403424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403428:	6013      	str	r3, [r2, #0]
		RIN_2_Low;
  40342a:	4a17      	ldr	r2, [pc, #92]	; (403488 <rotateRobot+0xdc>)
  40342c:	4b16      	ldr	r3, [pc, #88]	; (403488 <rotateRobot+0xdc>)
  40342e:	681b      	ldr	r3, [r3, #0]
  403430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403434:	6013      	str	r3, [r2, #0]
		FIN_2_High;
  403436:	4a10      	ldr	r2, [pc, #64]	; (403478 <rotateRobot+0xcc>)
  403438:	4b0f      	ldr	r3, [pc, #60]	; (403478 <rotateRobot+0xcc>)
  40343a:	681b      	ldr	r3, [r3, #0]
  40343c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403440:	6013      	str	r3, [r2, #0]
		RIN_3_Low;
  403442:	4a11      	ldr	r2, [pc, #68]	; (403488 <rotateRobot+0xdc>)
  403444:	4b10      	ldr	r3, [pc, #64]	; (403488 <rotateRobot+0xdc>)
  403446:	681b      	ldr	r3, [r3, #0]
  403448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40344c:	6013      	str	r3, [r2, #0]
		FIN_3_High;
  40344e:	4a0c      	ldr	r2, [pc, #48]	; (403480 <rotateRobot+0xd4>)
  403450:	4b0b      	ldr	r3, [pc, #44]	; (403480 <rotateRobot+0xd4>)
  403452:	681b      	ldr	r3, [r3, #0]
  403454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403458:	6013      	str	r3, [r2, #0]
	}
	//Update all duty cycles to match the desired rotation speed
	REG_PWM_CUPD1 = speed;
  40345a:	4a0d      	ldr	r2, [pc, #52]	; (403490 <rotateRobot+0xe4>)
  40345c:	79bb      	ldrb	r3, [r7, #6]
  40345e:	6013      	str	r3, [r2, #0]
	REG_PWM_CUPD2 = speed;
  403460:	4a0c      	ldr	r2, [pc, #48]	; (403494 <rotateRobot+0xe8>)
  403462:	79bb      	ldrb	r3, [r7, #6]
  403464:	6013      	str	r3, [r2, #0]
	REG_PWM_CUPD3 = speed;	
  403466:	4a0c      	ldr	r2, [pc, #48]	; (403498 <rotateRobot+0xec>)
  403468:	79bb      	ldrb	r3, [r7, #6]
  40346a:	6013      	str	r3, [r2, #0]
}
  40346c:	bf00      	nop
  40346e:	370c      	adds	r7, #12
  403470:	46bd      	mov	sp, r7
  403472:	bc80      	pop	{r7}
  403474:	4770      	bx	lr
  403476:	bf00      	nop
  403478:	400e1230 	.word	0x400e1230
  40347c:	400e1034 	.word	0x400e1034
  403480:	400e0e30 	.word	0x400e0e30
  403484:	400e1234 	.word	0x400e1234
  403488:	400e0e34 	.word	0x400e0e34
  40348c:	400e1030 	.word	0x400e1030
  403490:	40020230 	.word	0x40020230
  403494:	40020250 	.word	0x40020250
  403498:	40020270 	.word	0x40020270

0040349c <dockRobot>:

//assume max brightness is 0-100 (scale it to make this work)
void dockRobot(void)
{
  40349c:	b590      	push	{r4, r7, lr}
  40349e:	b085      	sub	sp, #20
  4034a0:	af00      	add	r7, sp, #0
	//10cm away 0x0070 - 0x0100
	//20cm away 0x0030 - 0x003f
	//30cm away 0x0020 - 0x0029
	
	uint16_t rightBrightness, leftBrightness;
	float diff = 0;
  4034a2:	f04f 0300 	mov.w	r3, #0
  4034a6:	60fb      	str	r3, [r7, #12]
	float rightBrightnessScaled, leftBrightnessScaled;
	
	leftBrightness = LightSensor_Data_Read(Mux_LHS_LightSens);
  4034a8:	20f9      	movs	r0, #249	; 0xf9
  4034aa:	4b3d      	ldr	r3, [pc, #244]	; (4035a0 <dockRobot+0x104>)
  4034ac:	4798      	blx	r3
  4034ae:	4603      	mov	r3, r0
  4034b0:	817b      	strh	r3, [r7, #10]
	rightBrightness = LightSensor_Data_Read(Mux_RHS_LightSens);
  4034b2:	20f8      	movs	r0, #248	; 0xf8
  4034b4:	4b3a      	ldr	r3, [pc, #232]	; (4035a0 <dockRobot+0x104>)
  4034b6:	4798      	blx	r3
  4034b8:	4603      	mov	r3, r0
  4034ba:	813b      	strh	r3, [r7, #8]
	
	//frontProximity = Proximity_Data_Read(Mux_ProximityA); //need to test this
	
	if(rightBrightness > 0x0200 && leftBrightness > 0x0200)//if there is more light than ambient
  4034bc:	893b      	ldrh	r3, [r7, #8]
  4034be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034c2:	d94a      	bls.n	40355a <dockRobot+0xbe>
  4034c4:	897b      	ldrh	r3, [r7, #10]
  4034c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034ca:	d946      	bls.n	40355a <dockRobot+0xbe>
	{
		//Scale brightness to calculate required position
		rightBrightnessScaled = (rightBrightness / 0xFFFF) * 100;
  4034cc:	893b      	ldrh	r3, [r7, #8]
  4034ce:	4a35      	ldr	r2, [pc, #212]	; (4035a4 <dockRobot+0x108>)
  4034d0:	fba2 2303 	umull	r2, r3, r2, r3
  4034d4:	0bdb      	lsrs	r3, r3, #15
  4034d6:	b29b      	uxth	r3, r3
  4034d8:	461a      	mov	r2, r3
  4034da:	2364      	movs	r3, #100	; 0x64
  4034dc:	fb03 f202 	mul.w	r2, r3, r2
  4034e0:	4b31      	ldr	r3, [pc, #196]	; (4035a8 <dockRobot+0x10c>)
  4034e2:	4610      	mov	r0, r2
  4034e4:	4798      	blx	r3
  4034e6:	4603      	mov	r3, r0
  4034e8:	607b      	str	r3, [r7, #4]
		leftBrightnessScaled = (leftBrightness / 0xFFFF) * 100;
  4034ea:	897b      	ldrh	r3, [r7, #10]
  4034ec:	4a2d      	ldr	r2, [pc, #180]	; (4035a4 <dockRobot+0x108>)
  4034ee:	fba2 2303 	umull	r2, r3, r2, r3
  4034f2:	0bdb      	lsrs	r3, r3, #15
  4034f4:	b29b      	uxth	r3, r3
  4034f6:	461a      	mov	r2, r3
  4034f8:	2364      	movs	r3, #100	; 0x64
  4034fa:	fb03 f202 	mul.w	r2, r3, r2
  4034fe:	4b2a      	ldr	r3, [pc, #168]	; (4035a8 <dockRobot+0x10c>)
  403500:	4610      	mov	r0, r2
  403502:	4798      	blx	r3
  403504:	4603      	mov	r3, r0
  403506:	603b      	str	r3, [r7, #0]
		//Zero Justified Normalized Differential Shade Calculation
		diff = 2 * (((rightBrightnessScaled * 100)/(rightBrightnessScaled + leftBrightnessScaled)) - 50);
  403508:	4b28      	ldr	r3, [pc, #160]	; (4035ac <dockRobot+0x110>)
  40350a:	4929      	ldr	r1, [pc, #164]	; (4035b0 <dockRobot+0x114>)
  40350c:	6878      	ldr	r0, [r7, #4]
  40350e:	4798      	blx	r3
  403510:	4603      	mov	r3, r0
  403512:	461c      	mov	r4, r3
  403514:	4b27      	ldr	r3, [pc, #156]	; (4035b4 <dockRobot+0x118>)
  403516:	6839      	ldr	r1, [r7, #0]
  403518:	6878      	ldr	r0, [r7, #4]
  40351a:	4798      	blx	r3
  40351c:	4603      	mov	r3, r0
  40351e:	461a      	mov	r2, r3
  403520:	4b25      	ldr	r3, [pc, #148]	; (4035b8 <dockRobot+0x11c>)
  403522:	4611      	mov	r1, r2
  403524:	4620      	mov	r0, r4
  403526:	4798      	blx	r3
  403528:	4603      	mov	r3, r0
  40352a:	461a      	mov	r2, r3
  40352c:	4b23      	ldr	r3, [pc, #140]	; (4035bc <dockRobot+0x120>)
  40352e:	4924      	ldr	r1, [pc, #144]	; (4035c0 <dockRobot+0x124>)
  403530:	4610      	mov	r0, r2
  403532:	4798      	blx	r3
  403534:	4603      	mov	r3, r0
  403536:	461a      	mov	r2, r3
  403538:	4b1e      	ldr	r3, [pc, #120]	; (4035b4 <dockRobot+0x118>)
  40353a:	4611      	mov	r1, r2
  40353c:	4610      	mov	r0, r2
  40353e:	4798      	blx	r3
  403540:	4603      	mov	r3, r0
  403542:	60fb      	str	r3, [r7, #12]
		//Convert to degrees
		moveRobot(diff/2, 50);
  403544:	4b1c      	ldr	r3, [pc, #112]	; (4035b8 <dockRobot+0x11c>)
  403546:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40354a:	68f8      	ldr	r0, [r7, #12]
  40354c:	4798      	blx	r3
  40354e:	4603      	mov	r3, r0
  403550:	2132      	movs	r1, #50	; 0x32
  403552:	4618      	mov	r0, r3
  403554:	4b1b      	ldr	r3, [pc, #108]	; (4035c4 <dockRobot+0x128>)
  403556:	4798      	blx	r3
  403558:	e01e      	b.n	403598 <dockRobot+0xfc>
	}
	else if((leftBrightness > 0x1000 || rightBrightness >  0x1000))// && frontProximity > 0x0300)
  40355a:	897b      	ldrh	r3, [r7, #10]
  40355c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  403560:	d803      	bhi.n	40356a <dockRobot+0xce>
  403562:	893b      	ldrh	r3, [r7, #8]
  403564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  403568:	d902      	bls.n	403570 <dockRobot+0xd4>
	{
		stopRobot();
  40356a:	4b17      	ldr	r3, [pc, #92]	; (4035c8 <dockRobot+0x12c>)
  40356c:	4798      	blx	r3
  40356e:	e013      	b.n	403598 <dockRobot+0xfc>
	}
	else if((rightBrightness - leftBrightness) > 0x009F)
  403570:	893a      	ldrh	r2, [r7, #8]
  403572:	897b      	ldrh	r3, [r7, #10]
  403574:	1ad3      	subs	r3, r2, r3
  403576:	2b9f      	cmp	r3, #159	; 0x9f
  403578:	dd04      	ble.n	403584 <dockRobot+0xe8>
	{
		rotateRobot(CW, 30); //turn right
  40357a:	211e      	movs	r1, #30
  40357c:	2000      	movs	r0, #0
  40357e:	4b13      	ldr	r3, [pc, #76]	; (4035cc <dockRobot+0x130>)
  403580:	4798      	blx	r3
	}
	else if((leftBrightness - rightBrightness) > 0x009F)
	{
		rotateRobot(CCW, 30);//turn left
	}
}
  403582:	e009      	b.n	403598 <dockRobot+0xfc>
	}
	else if((rightBrightness - leftBrightness) > 0x009F)
	{
		rotateRobot(CW, 30); //turn right
	}
	else if((leftBrightness - rightBrightness) > 0x009F)
  403584:	897a      	ldrh	r2, [r7, #10]
  403586:	893b      	ldrh	r3, [r7, #8]
  403588:	1ad3      	subs	r3, r2, r3
  40358a:	2b9f      	cmp	r3, #159	; 0x9f
  40358c:	dd04      	ble.n	403598 <dockRobot+0xfc>
	{
		rotateRobot(CCW, 30);//turn left
  40358e:	211e      	movs	r1, #30
  403590:	2001      	movs	r0, #1
  403592:	4b0e      	ldr	r3, [pc, #56]	; (4035cc <dockRobot+0x130>)
  403594:	4798      	blx	r3
	}
}
  403596:	e7ff      	b.n	403598 <dockRobot+0xfc>
  403598:	bf00      	nop
  40359a:	3714      	adds	r7, #20
  40359c:	46bd      	mov	sp, r7
  40359e:	bd90      	pop	{r4, r7, pc}
  4035a0:	00402d81 	.word	0x00402d81
  4035a4:	80008001 	.word	0x80008001
  4035a8:	00406535 	.word	0x00406535
  4035ac:	004065dd 	.word	0x004065dd
  4035b0:	42c80000 	.word	0x42c80000
  4035b4:	004063cd 	.word	0x004063cd
  4035b8:	00406745 	.word	0x00406745
  4035bc:	004063c9 	.word	0x004063c9
  4035c0:	42480000 	.word	0x42480000
  4035c4:	00403021 	.word	0x00403021
  4035c8:	004035d1 	.word	0x004035d1
  4035cc:	004033ad 	.word	0x004033ad

004035d0 <stopRobot>:

void stopRobot(void)
{
  4035d0:	b480      	push	{r7}
  4035d2:	af00      	add	r7, sp, #0
	//Stops the robot from moving
	FIN_1_Low;
  4035d4:	4a13      	ldr	r2, [pc, #76]	; (403624 <stopRobot+0x54>)
  4035d6:	4b13      	ldr	r3, [pc, #76]	; (403624 <stopRobot+0x54>)
  4035d8:	681b      	ldr	r3, [r3, #0]
  4035da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4035de:	6013      	str	r3, [r2, #0]
	RIN_1_Low;
  4035e0:	4a11      	ldr	r2, [pc, #68]	; (403628 <stopRobot+0x58>)
  4035e2:	4b11      	ldr	r3, [pc, #68]	; (403628 <stopRobot+0x58>)
  4035e4:	681b      	ldr	r3, [r3, #0]
  4035e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4035ea:	6013      	str	r3, [r2, #0]
	FIN_2_Low;
  4035ec:	4a0e      	ldr	r2, [pc, #56]	; (403628 <stopRobot+0x58>)
  4035ee:	4b0e      	ldr	r3, [pc, #56]	; (403628 <stopRobot+0x58>)
  4035f0:	681b      	ldr	r3, [r3, #0]
  4035f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4035f6:	6013      	str	r3, [r2, #0]
	RIN_2_Low;
  4035f8:	4a0c      	ldr	r2, [pc, #48]	; (40362c <stopRobot+0x5c>)
  4035fa:	4b0c      	ldr	r3, [pc, #48]	; (40362c <stopRobot+0x5c>)
  4035fc:	681b      	ldr	r3, [r3, #0]
  4035fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403602:	6013      	str	r3, [r2, #0]
	FIN_3_Low;
  403604:	4a09      	ldr	r2, [pc, #36]	; (40362c <stopRobot+0x5c>)
  403606:	4b09      	ldr	r3, [pc, #36]	; (40362c <stopRobot+0x5c>)
  403608:	681b      	ldr	r3, [r3, #0]
  40360a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40360e:	6013      	str	r3, [r2, #0]
	RIN_3_Low;
  403610:	4a06      	ldr	r2, [pc, #24]	; (40362c <stopRobot+0x5c>)
  403612:	4b06      	ldr	r3, [pc, #24]	; (40362c <stopRobot+0x5c>)
  403614:	681b      	ldr	r3, [r3, #0]
  403616:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40361a:	6013      	str	r3, [r2, #0]
}
  40361c:	bf00      	nop
  40361e:	46bd      	mov	sp, r7
  403620:	bc80      	pop	{r7}
  403622:	4770      	bx	lr
  403624:	400e1034 	.word	0x400e1034
  403628:	400e1234 	.word	0x400e1234
  40362c:	400e0e34 	.word	0x400e0e34

00403630 <setTestMotors>:


///TODO comment function
void setTestMotors(uint8_t motorData[])
{
  403630:	b480      	push	{r7}
  403632:	b083      	sub	sp, #12
  403634:	af00      	add	r7, sp, #0
  403636:	6078      	str	r0, [r7, #4]
	if(motorData[0] == MOTOR_1 && (motorData[1] & 0x80))//check if bit 7 is set meaning forward
  403638:	687b      	ldr	r3, [r7, #4]
  40363a:	781b      	ldrb	r3, [r3, #0]
  40363c:	2b01      	cmp	r3, #1
  40363e:	d119      	bne.n	403674 <setTestMotors+0x44>
  403640:	687b      	ldr	r3, [r7, #4]
  403642:	3301      	adds	r3, #1
  403644:	781b      	ldrb	r3, [r3, #0]
  403646:	b25b      	sxtb	r3, r3
  403648:	2b00      	cmp	r3, #0
  40364a:	da13      	bge.n	403674 <setTestMotors+0x44>
	{
		FIN_1_High;
  40364c:	4a4e      	ldr	r2, [pc, #312]	; (403788 <setTestMotors+0x158>)
  40364e:	4b4e      	ldr	r3, [pc, #312]	; (403788 <setTestMotors+0x158>)
  403650:	681b      	ldr	r3, [r3, #0]
  403652:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403656:	6013      	str	r3, [r2, #0]
		RIN_1_Low;
  403658:	4a4c      	ldr	r2, [pc, #304]	; (40378c <setTestMotors+0x15c>)
  40365a:	4b4c      	ldr	r3, [pc, #304]	; (40378c <setTestMotors+0x15c>)
  40365c:	681b      	ldr	r3, [r3, #0]
  40365e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403662:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD1 = (motorData[1] & 0x7F);
  403664:	4a4a      	ldr	r2, [pc, #296]	; (403790 <setTestMotors+0x160>)
  403666:	687b      	ldr	r3, [r7, #4]
  403668:	3301      	adds	r3, #1
  40366a:	781b      	ldrb	r3, [r3, #0]
  40366c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403670:	6013      	str	r3, [r2, #0]
  403672:	e083      	b.n	40377c <setTestMotors+0x14c>
	}
	else if(motorData[0] == MOTOR_1 && ~(motorData[1] & 0x80))
  403674:	687b      	ldr	r3, [r7, #4]
  403676:	781b      	ldrb	r3, [r3, #0]
  403678:	2b01      	cmp	r3, #1
  40367a:	d113      	bne.n	4036a4 <setTestMotors+0x74>
	{
		FIN_1_Low;
  40367c:	4a45      	ldr	r2, [pc, #276]	; (403794 <setTestMotors+0x164>)
  40367e:	4b45      	ldr	r3, [pc, #276]	; (403794 <setTestMotors+0x164>)
  403680:	681b      	ldr	r3, [r3, #0]
  403682:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403686:	6013      	str	r3, [r2, #0]
		RIN_1_High;
  403688:	4a43      	ldr	r2, [pc, #268]	; (403798 <setTestMotors+0x168>)
  40368a:	4b43      	ldr	r3, [pc, #268]	; (403798 <setTestMotors+0x168>)
  40368c:	681b      	ldr	r3, [r3, #0]
  40368e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403692:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD1 = (motorData[1] & 0x7F);
  403694:	4a3e      	ldr	r2, [pc, #248]	; (403790 <setTestMotors+0x160>)
  403696:	687b      	ldr	r3, [r7, #4]
  403698:	3301      	adds	r3, #1
  40369a:	781b      	ldrb	r3, [r3, #0]
  40369c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4036a0:	6013      	str	r3, [r2, #0]
	{
		FIN_3_Low;
		RIN_3_High;
		REG_PWM_CUPD3 = (motorData[1] & 0x7F);
	}
  4036a2:	e06b      	b.n	40377c <setTestMotors+0x14c>
	{
		FIN_1_Low;
		RIN_1_High;
		REG_PWM_CUPD1 = (motorData[1] & 0x7F);
	}
	else if(motorData[0] == MOTOR_2 && (motorData[1] & 0x80))//check if bit 7 is set meaning forward
  4036a4:	687b      	ldr	r3, [r7, #4]
  4036a6:	781b      	ldrb	r3, [r3, #0]
  4036a8:	2b02      	cmp	r3, #2
  4036aa:	d119      	bne.n	4036e0 <setTestMotors+0xb0>
  4036ac:	687b      	ldr	r3, [r7, #4]
  4036ae:	3301      	adds	r3, #1
  4036b0:	781b      	ldrb	r3, [r3, #0]
  4036b2:	b25b      	sxtb	r3, r3
  4036b4:	2b00      	cmp	r3, #0
  4036b6:	da13      	bge.n	4036e0 <setTestMotors+0xb0>
	{
		FIN_2_High;
  4036b8:	4a37      	ldr	r2, [pc, #220]	; (403798 <setTestMotors+0x168>)
  4036ba:	4b37      	ldr	r3, [pc, #220]	; (403798 <setTestMotors+0x168>)
  4036bc:	681b      	ldr	r3, [r3, #0]
  4036be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4036c2:	6013      	str	r3, [r2, #0]
		RIN_2_Low;
  4036c4:	4a35      	ldr	r2, [pc, #212]	; (40379c <setTestMotors+0x16c>)
  4036c6:	4b35      	ldr	r3, [pc, #212]	; (40379c <setTestMotors+0x16c>)
  4036c8:	681b      	ldr	r3, [r3, #0]
  4036ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4036ce:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD2 = (motorData[1] & 0x7F);
  4036d0:	4a33      	ldr	r2, [pc, #204]	; (4037a0 <setTestMotors+0x170>)
  4036d2:	687b      	ldr	r3, [r7, #4]
  4036d4:	3301      	adds	r3, #1
  4036d6:	781b      	ldrb	r3, [r3, #0]
  4036d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4036dc:	6013      	str	r3, [r2, #0]
  4036de:	e04d      	b.n	40377c <setTestMotors+0x14c>
	}
	else if(motorData[0] == MOTOR_2 && ~(motorData[1] & 0x80))
  4036e0:	687b      	ldr	r3, [r7, #4]
  4036e2:	781b      	ldrb	r3, [r3, #0]
  4036e4:	2b02      	cmp	r3, #2
  4036e6:	d113      	bne.n	403710 <setTestMotors+0xe0>
	{
		FIN_2_Low;
  4036e8:	4a28      	ldr	r2, [pc, #160]	; (40378c <setTestMotors+0x15c>)
  4036ea:	4b28      	ldr	r3, [pc, #160]	; (40378c <setTestMotors+0x15c>)
  4036ec:	681b      	ldr	r3, [r3, #0]
  4036ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4036f2:	6013      	str	r3, [r2, #0]
		RIN_2_High;
  4036f4:	4a2b      	ldr	r2, [pc, #172]	; (4037a4 <setTestMotors+0x174>)
  4036f6:	4b2b      	ldr	r3, [pc, #172]	; (4037a4 <setTestMotors+0x174>)
  4036f8:	681b      	ldr	r3, [r3, #0]
  4036fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4036fe:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD2 = (motorData[1] & 0x7F);
  403700:	4a27      	ldr	r2, [pc, #156]	; (4037a0 <setTestMotors+0x170>)
  403702:	687b      	ldr	r3, [r7, #4]
  403704:	3301      	adds	r3, #1
  403706:	781b      	ldrb	r3, [r3, #0]
  403708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40370c:	6013      	str	r3, [r2, #0]
	{
		FIN_3_Low;
		RIN_3_High;
		REG_PWM_CUPD3 = (motorData[1] & 0x7F);
	}
  40370e:	e035      	b.n	40377c <setTestMotors+0x14c>
	{
		FIN_2_Low;
		RIN_2_High;
		REG_PWM_CUPD2 = (motorData[1] & 0x7F);
	}
	else if(motorData[0] == MOTOR_3 && (motorData[1] & 0x80))//check if bit 7 is set meaning forward
  403710:	687b      	ldr	r3, [r7, #4]
  403712:	781b      	ldrb	r3, [r3, #0]
  403714:	2b03      	cmp	r3, #3
  403716:	d119      	bne.n	40374c <setTestMotors+0x11c>
  403718:	687b      	ldr	r3, [r7, #4]
  40371a:	3301      	adds	r3, #1
  40371c:	781b      	ldrb	r3, [r3, #0]
  40371e:	b25b      	sxtb	r3, r3
  403720:	2b00      	cmp	r3, #0
  403722:	da13      	bge.n	40374c <setTestMotors+0x11c>
	{
		FIN_3_High;
  403724:	4a1f      	ldr	r2, [pc, #124]	; (4037a4 <setTestMotors+0x174>)
  403726:	4b1f      	ldr	r3, [pc, #124]	; (4037a4 <setTestMotors+0x174>)
  403728:	681b      	ldr	r3, [r3, #0]
  40372a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40372e:	6013      	str	r3, [r2, #0]
		RIN_3_Low;
  403730:	4a1a      	ldr	r2, [pc, #104]	; (40379c <setTestMotors+0x16c>)
  403732:	4b1a      	ldr	r3, [pc, #104]	; (40379c <setTestMotors+0x16c>)
  403734:	681b      	ldr	r3, [r3, #0]
  403736:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40373a:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD3 = (motorData[1] & 0x7F);
  40373c:	4a1a      	ldr	r2, [pc, #104]	; (4037a8 <setTestMotors+0x178>)
  40373e:	687b      	ldr	r3, [r7, #4]
  403740:	3301      	adds	r3, #1
  403742:	781b      	ldrb	r3, [r3, #0]
  403744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403748:	6013      	str	r3, [r2, #0]
  40374a:	e017      	b.n	40377c <setTestMotors+0x14c>
	}
	else if(motorData[0] == MOTOR_1 && ~(motorData[1] & 0x80))
  40374c:	687b      	ldr	r3, [r7, #4]
  40374e:	781b      	ldrb	r3, [r3, #0]
  403750:	2b01      	cmp	r3, #1
  403752:	d113      	bne.n	40377c <setTestMotors+0x14c>
	{
		FIN_3_Low;
  403754:	4a11      	ldr	r2, [pc, #68]	; (40379c <setTestMotors+0x16c>)
  403756:	4b11      	ldr	r3, [pc, #68]	; (40379c <setTestMotors+0x16c>)
  403758:	681b      	ldr	r3, [r3, #0]
  40375a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40375e:	6013      	str	r3, [r2, #0]
		RIN_3_High;
  403760:	4a10      	ldr	r2, [pc, #64]	; (4037a4 <setTestMotors+0x174>)
  403762:	4b10      	ldr	r3, [pc, #64]	; (4037a4 <setTestMotors+0x174>)
  403764:	681b      	ldr	r3, [r3, #0]
  403766:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40376a:	6013      	str	r3, [r2, #0]
		REG_PWM_CUPD3 = (motorData[1] & 0x7F);
  40376c:	4a0e      	ldr	r2, [pc, #56]	; (4037a8 <setTestMotors+0x178>)
  40376e:	687b      	ldr	r3, [r7, #4]
  403770:	3301      	adds	r3, #1
  403772:	781b      	ldrb	r3, [r3, #0]
  403774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403778:	6013      	str	r3, [r2, #0]
	}
  40377a:	e7ff      	b.n	40377c <setTestMotors+0x14c>
  40377c:	bf00      	nop
  40377e:	370c      	adds	r7, #12
  403780:	46bd      	mov	sp, r7
  403782:	bc80      	pop	{r7}
  403784:	4770      	bx	lr
  403786:	bf00      	nop
  403788:	400e1030 	.word	0x400e1030
  40378c:	400e1234 	.word	0x400e1234
  403790:	40020230 	.word	0x40020230
  403794:	400e1034 	.word	0x400e1034
  403798:	400e1230 	.word	0x400e1230
  40379c:	400e0e34 	.word	0x400e0e34
  4037a0:	40020250 	.word	0x40020250
  4037a4:	400e0e30 	.word	0x400e0e30
  4037a8:	40020270 	.word	0x40020270

004037ac <SPI_Init>:
* In this Swarm robotics project this is already handled by the included spi.h header file
* If this was not included it either needs to be added or the host PC version of spi.h for the SAM4N8C needs to be updated
*
*/
void SPI_Init(void)
{
  4037ac:	b480      	push	{r7}
  4037ae:	af00      	add	r7, sp, #0
	REG_PMC_PCER0 |= PMC_PCER0_PID21;		//Enable clock access to SPI
  4037b0:	4a2b      	ldr	r2, [pc, #172]	; (403860 <SPI_Init+0xb4>)
  4037b2:	4b2b      	ldr	r3, [pc, #172]	; (403860 <SPI_Init+0xb4>)
  4037b4:	681b      	ldr	r3, [r3, #0]
  4037b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  4037ba:	6013      	str	r3, [r2, #0]
	REG_SPI_WPMR |= (SPI_KEY<<8);
  4037bc:	4929      	ldr	r1, [pc, #164]	; (403864 <SPI_Init+0xb8>)
  4037be:	4b29      	ldr	r3, [pc, #164]	; (403864 <SPI_Init+0xb8>)
  4037c0:	681a      	ldr	r2, [r3, #0]
  4037c2:	4b29      	ldr	r3, [pc, #164]	; (403868 <SPI_Init+0xbc>)
  4037c4:	4313      	orrs	r3, r2
  4037c6:	600b      	str	r3, [r1, #0]
	REG_SPI_WPMR &= ~(1<<0);				//Disable SPI write protect
  4037c8:	4a26      	ldr	r2, [pc, #152]	; (403864 <SPI_Init+0xb8>)
  4037ca:	4b26      	ldr	r3, [pc, #152]	; (403864 <SPI_Init+0xb8>)
  4037cc:	681b      	ldr	r3, [r3, #0]
  4037ce:	f023 0301 	bic.w	r3, r3, #1
  4037d2:	6013      	str	r3, [r2, #0]
	
	REG_SPI_CR |= SPI_CR_SWRST;				//Software reset
  4037d4:	4a25      	ldr	r2, [pc, #148]	; (40386c <SPI_Init+0xc0>)
  4037d6:	4b25      	ldr	r3, [pc, #148]	; (40386c <SPI_Init+0xc0>)
  4037d8:	681b      	ldr	r3, [r3, #0]
  4037da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4037de:	6013      	str	r3, [r2, #0]
	//Give control of MOSI, MISO & SCLK pins to SPI
	REG_PIOA_PDR |= PIO_PDR_P12;			//Give control of MISO to SPI
  4037e0:	4a23      	ldr	r2, [pc, #140]	; (403870 <SPI_Init+0xc4>)
  4037e2:	4b23      	ldr	r3, [pc, #140]	; (403870 <SPI_Init+0xc4>)
  4037e4:	681b      	ldr	r3, [r3, #0]
  4037e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4037ea:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P13;			//Give control of MOSI to SPI
  4037ec:	4a20      	ldr	r2, [pc, #128]	; (403870 <SPI_Init+0xc4>)
  4037ee:	4b20      	ldr	r3, [pc, #128]	; (403870 <SPI_Init+0xc4>)
  4037f0:	681b      	ldr	r3, [r3, #0]
  4037f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4037f6:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P14;			//Give control of SCLK to SPI
  4037f8:	4a1d      	ldr	r2, [pc, #116]	; (403870 <SPI_Init+0xc4>)
  4037fa:	4b1d      	ldr	r3, [pc, #116]	; (403870 <SPI_Init+0xc4>)
  4037fc:	681b      	ldr	r3, [r3, #0]
  4037fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  403802:	6013      	str	r3, [r2, #0]
	REG_PIOB_PER |= (1<<14);				//Enable PIO control of PB14
  403804:	4a1b      	ldr	r2, [pc, #108]	; (403874 <SPI_Init+0xc8>)
  403806:	4b1b      	ldr	r3, [pc, #108]	; (403874 <SPI_Init+0xc8>)
  403808:	681b      	ldr	r3, [r3, #0]
  40380a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40380e:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<14);				//Set PB14 as output
  403810:	4a19      	ldr	r2, [pc, #100]	; (403878 <SPI_Init+0xcc>)
  403812:	4b19      	ldr	r3, [pc, #100]	; (403878 <SPI_Init+0xcc>)
  403814:	681b      	ldr	r3, [r3, #0]
  403816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40381a:	6013      	str	r3, [r2, #0]
	REG_SPI_CR |= SPI_CR_SPIEN; 	
  40381c:	4a13      	ldr	r2, [pc, #76]	; (40386c <SPI_Init+0xc0>)
  40381e:	4b13      	ldr	r3, [pc, #76]	; (40386c <SPI_Init+0xc0>)
  403820:	681b      	ldr	r3, [r3, #0]
  403822:	f043 0301 	orr.w	r3, r3, #1
  403826:	6013      	str	r3, [r2, #0]
	//REG_PIOB_PDR |= PIO_PDR_P14; //Give control of NPCS1 (on PB14/Pin 99) to SPI
	REG_SPI_MR |= SPI_MR_MSTR;				//SPI in Master Mode
  403828:	4a14      	ldr	r2, [pc, #80]	; (40387c <SPI_Init+0xd0>)
  40382a:	4b14      	ldr	r3, [pc, #80]	; (40387c <SPI_Init+0xd0>)
  40382c:	681b      	ldr	r3, [r3, #0]
  40382e:	f043 0301 	orr.w	r3, r3, #1
  403832:	6013      	str	r3, [r2, #0]
	REG_SPI_MR &= ~SPI_MR_PS;				//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
  403834:	4a11      	ldr	r2, [pc, #68]	; (40387c <SPI_Init+0xd0>)
  403836:	4b11      	ldr	r3, [pc, #68]	; (40387c <SPI_Init+0xd0>)
  403838:	681b      	ldr	r3, [r3, #0]
  40383a:	f023 0302 	bic.w	r3, r3, #2
  40383e:	6013      	str	r3, [r2, #0]
	REG_SPI_MR |= SPI_MR_PCS(0b1101); //set slave to NPCS1 (only works while SPI_MR_PS = 0)	
  403840:	4a0e      	ldr	r2, [pc, #56]	; (40387c <SPI_Init+0xd0>)
  403842:	4b0e      	ldr	r3, [pc, #56]	; (40387c <SPI_Init+0xd0>)
  403844:	681b      	ldr	r3, [r3, #0]
  403846:	f443 2350 	orr.w	r3, r3, #851968	; 0xd0000
  40384a:	6013      	str	r3, [r2, #0]
	REG_SPI_CSR1 |= (1<<0) | (0xF0<<8) | (0x17<<24); // CPOL=1, 500k baud (2us period), 6us DLYBCT
  40384c:	490c      	ldr	r1, [pc, #48]	; (403880 <SPI_Init+0xd4>)
  40384e:	4b0c      	ldr	r3, [pc, #48]	; (403880 <SPI_Init+0xd4>)
  403850:	681a      	ldr	r2, [r3, #0]
  403852:	4b0c      	ldr	r3, [pc, #48]	; (403884 <SPI_Init+0xd8>)
  403854:	4313      	orrs	r3, r2
  403856:	600b      	str	r3, [r1, #0]
}
  403858:	bf00      	nop
  40385a:	46bd      	mov	sp, r7
  40385c:	bc80      	pop	{r7}
  40385e:	4770      	bx	lr
  403860:	400e0410 	.word	0x400e0410
  403864:	400080e4 	.word	0x400080e4
  403868:	53504900 	.word	0x53504900
  40386c:	40008000 	.word	0x40008000
  403870:	400e0e04 	.word	0x400e0e04
  403874:	400e1000 	.word	0x400e1000
  403878:	400e1010 	.word	0x400e1010
  40387c:	40008004 	.word	0x40008004
  403880:	40008034 	.word	0x40008034
  403884:	1700f001 	.word	0x1700f001

00403888 <getMouseXY>:
* this is then combined with the lower values and given the correct sign (using 2s complement)
* before being written to the opticaldx and opticaldy members of the position structure
*
*/
void getMouseXY(struct Position *mousePos)
{
  403888:	b590      	push	{r4, r7, lr}
  40388a:	b087      	sub	sp, #28
  40388c:	af00      	add	r7, sp, #0
  40388e:	6078      	str	r0, [r7, #4]
	int Xtemp = 0, Ytemp = 0;
  403890:	2300      	movs	r3, #0
  403892:	617b      	str	r3, [r7, #20]
  403894:	2300      	movs	r3, #0
  403896:	613b      	str	r3, [r7, #16]
	char topX, topY, data2, data3, data4, data5;
	data2 = SPI_Read(OPT_OBSERVATION);
  403898:	202e      	movs	r0, #46	; 0x2e
  40389a:	4b35      	ldr	r3, [pc, #212]	; (403970 <getMouseXY+0xe8>)
  40389c:	4798      	blx	r3
  40389e:	4603      	mov	r3, r0
  4038a0:	73fb      	strb	r3, [r7, #15]
	if(data2 & (1<<7))
  4038a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4038a6:	2b00      	cmp	r3, #0
  4038a8:	da59      	bge.n	40395e <getMouseXY+0xd6>
	{
		data3 = SPI_Read(OPT_DELTA_X_L);	//delta x low
  4038aa:	2003      	movs	r0, #3
  4038ac:	4b30      	ldr	r3, [pc, #192]	; (403970 <getMouseXY+0xe8>)
  4038ae:	4798      	blx	r3
  4038b0:	4603      	mov	r3, r0
  4038b2:	73bb      	strb	r3, [r7, #14]
		data4 = SPI_Read(OPT_DELTA_Y_L);	//delta y low
  4038b4:	2004      	movs	r0, #4
  4038b6:	4b2e      	ldr	r3, [pc, #184]	; (403970 <getMouseXY+0xe8>)
  4038b8:	4798      	blx	r3
  4038ba:	4603      	mov	r3, r0
  4038bc:	737b      	strb	r3, [r7, #13]
		data5 = SPI_Read(OPT_DELTA_XY_H);	//delta xy high
  4038be:	2005      	movs	r0, #5
  4038c0:	4b2b      	ldr	r3, [pc, #172]	; (403970 <getMouseXY+0xe8>)
  4038c2:	4798      	blx	r3
  4038c4:	4603      	mov	r3, r0
  4038c6:	733b      	strb	r3, [r7, #12]
		topX = (data5 & (0xF0)) >> 4;		//only read the 4 MSB of data5
  4038c8:	7b3b      	ldrb	r3, [r7, #12]
  4038ca:	091b      	lsrs	r3, r3, #4
  4038cc:	72fb      	strb	r3, [r7, #11]
		topY = data5 & (0x0F);				//only read the 4 LSB of data5
  4038ce:	7b3b      	ldrb	r3, [r7, #12]
  4038d0:	f003 030f 	and.w	r3, r3, #15
  4038d4:	72bb      	strb	r3, [r7, #10]
		Xtemp = data3 | (topX << 8);
  4038d6:	7bba      	ldrb	r2, [r7, #14]
  4038d8:	7afb      	ldrb	r3, [r7, #11]
  4038da:	021b      	lsls	r3, r3, #8
  4038dc:	4313      	orrs	r3, r2
  4038de:	617b      	str	r3, [r7, #20]
		Ytemp = data4 | (topY << 8);
  4038e0:	7b7a      	ldrb	r2, [r7, #13]
  4038e2:	7abb      	ldrb	r3, [r7, #10]
  4038e4:	021b      	lsls	r3, r3, #8
  4038e6:	4313      	orrs	r3, r2
  4038e8:	613b      	str	r3, [r7, #16]
		if(Xtemp & (1<<12))					//if MSB of X is set (for 2s complement)
  4038ea:	697b      	ldr	r3, [r7, #20]
  4038ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4038f0:	2b00      	cmp	r3, #0
  4038f2:	d003      	beq.n	4038fc <getMouseXY+0x74>
		{
			Xtemp -= 4096;
  4038f4:	697b      	ldr	r3, [r7, #20]
  4038f6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
  4038fa:	617b      	str	r3, [r7, #20]
		}
		mousePos->opticaldx = Xtemp * RESOLUTION;
  4038fc:	4b1d      	ldr	r3, [pc, #116]	; (403974 <getMouseXY+0xec>)
  4038fe:	6978      	ldr	r0, [r7, #20]
  403900:	4798      	blx	r3
  403902:	4c1d      	ldr	r4, [pc, #116]	; (403978 <getMouseXY+0xf0>)
  403904:	a318      	add	r3, pc, #96	; (adr r3, 403968 <getMouseXY+0xe0>)
  403906:	e9d3 2300 	ldrd	r2, r3, [r3]
  40390a:	47a0      	blx	r4
  40390c:	4603      	mov	r3, r0
  40390e:	460c      	mov	r4, r1
  403910:	4619      	mov	r1, r3
  403912:	4622      	mov	r2, r4
  403914:	4b19      	ldr	r3, [pc, #100]	; (40397c <getMouseXY+0xf4>)
  403916:	4608      	mov	r0, r1
  403918:	4611      	mov	r1, r2
  40391a:	4798      	blx	r3
  40391c:	4603      	mov	r3, r0
  40391e:	b29a      	uxth	r2, r3
  403920:	687b      	ldr	r3, [r7, #4]
  403922:	801a      	strh	r2, [r3, #0]
		if(Ytemp & (1<<12))					//if MSB of Y is set (for 2s complement)
  403924:	693b      	ldr	r3, [r7, #16]
  403926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  40392a:	2b00      	cmp	r3, #0
  40392c:	d003      	beq.n	403936 <getMouseXY+0xae>
		{
			Ytemp -= 4096;
  40392e:	693b      	ldr	r3, [r7, #16]
  403930:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
  403934:	613b      	str	r3, [r7, #16]
		}
		mousePos->opticaldy = Ytemp * RESOLUTION;
  403936:	4b0f      	ldr	r3, [pc, #60]	; (403974 <getMouseXY+0xec>)
  403938:	6938      	ldr	r0, [r7, #16]
  40393a:	4798      	blx	r3
  40393c:	4c0e      	ldr	r4, [pc, #56]	; (403978 <getMouseXY+0xf0>)
  40393e:	a30a      	add	r3, pc, #40	; (adr r3, 403968 <getMouseXY+0xe0>)
  403940:	e9d3 2300 	ldrd	r2, r3, [r3]
  403944:	47a0      	blx	r4
  403946:	4603      	mov	r3, r0
  403948:	460c      	mov	r4, r1
  40394a:	4619      	mov	r1, r3
  40394c:	4622      	mov	r2, r4
  40394e:	4b0b      	ldr	r3, [pc, #44]	; (40397c <getMouseXY+0xf4>)
  403950:	4608      	mov	r0, r1
  403952:	4611      	mov	r1, r2
  403954:	4798      	blx	r3
  403956:	4603      	mov	r3, r0
  403958:	b29a      	uxth	r2, r3
  40395a:	687b      	ldr	r3, [r7, #4]
  40395c:	805a      	strh	r2, [r3, #2]
	}
}
  40395e:	bf00      	nop
  403960:	371c      	adds	r7, #28
  403962:	46bd      	mov	sp, r7
  403964:	bd90      	pop	{r4, r7, pc}
  403966:	bf00      	nop
  403968:	47ae147b 	.word	0x47ae147b
  40396c:	3f547ae1 	.word	0x3f547ae1
  403970:	00403981 	.word	0x00403981
  403974:	00405c91 	.word	0x00405c91
  403978:	00405d5d 	.word	0x00405d5d
  40397c:	004062e1 	.word	0x004062e1

00403980 <SPI_Read>:
* Repeat the process
* When the flag is set the received data register will contain the desired data
* 
*/
char SPI_Read(char readAddress)
{
  403980:	b480      	push	{r7}
  403982:	b085      	sub	sp, #20
  403984:	af00      	add	r7, sp, #0
  403986:	4603      	mov	r3, r0
  403988:	71fb      	strb	r3, [r7, #7]
	char data;
	data = REG_SPI_RDR;						//Read the RDR to ensure that the RDRF flag is reset.
  40398a:	4b14      	ldr	r3, [pc, #80]	; (4039dc <SPI_Read+0x5c>)
  40398c:	681b      	ldr	r3, [r3, #0]
  40398e:	73fb      	strb	r3, [r7, #15]
	REG_SPI_TDR |= (readAddress);			//Load TDR with peripheral register to be read from. 0  in bit 7 which indicates a reading operation.
  403990:	4913      	ldr	r1, [pc, #76]	; (4039e0 <SPI_Read+0x60>)
  403992:	4b13      	ldr	r3, [pc, #76]	; (4039e0 <SPI_Read+0x60>)
  403994:	681a      	ldr	r2, [r3, #0]
  403996:	79fb      	ldrb	r3, [r7, #7]
  403998:	4313      	orrs	r3, r2
  40399a:	600b      	str	r3, [r1, #0]
	while(!(REG_SPI_SR & (1<<0)));			//Wait for first RDRF flag.
  40399c:	bf00      	nop
  40399e:	4b11      	ldr	r3, [pc, #68]	; (4039e4 <SPI_Read+0x64>)
  4039a0:	681b      	ldr	r3, [r3, #0]
  4039a2:	f003 0301 	and.w	r3, r3, #1
  4039a6:	2b00      	cmp	r3, #0
  4039a8:	d0f9      	beq.n	40399e <SPI_Read+0x1e>
	data = REG_SPI_RDR;						//First lot of data which will be incorrect. Its only being read to reset the RDRF flag.
  4039aa:	4b0c      	ldr	r3, [pc, #48]	; (4039dc <SPI_Read+0x5c>)
  4039ac:	681b      	ldr	r3, [r3, #0]
  4039ae:	73fb      	strb	r3, [r7, #15]
	REG_SPI_TDR |= (readAddress);			//Load TDR again.
  4039b0:	490b      	ldr	r1, [pc, #44]	; (4039e0 <SPI_Read+0x60>)
  4039b2:	4b0b      	ldr	r3, [pc, #44]	; (4039e0 <SPI_Read+0x60>)
  4039b4:	681a      	ldr	r2, [r3, #0]
  4039b6:	79fb      	ldrb	r3, [r7, #7]
  4039b8:	4313      	orrs	r3, r2
  4039ba:	600b      	str	r3, [r1, #0]
	while(!(REG_SPI_SR & (1<<0)));			//Wait for second RDRF flag.
  4039bc:	bf00      	nop
  4039be:	4b09      	ldr	r3, [pc, #36]	; (4039e4 <SPI_Read+0x64>)
  4039c0:	681b      	ldr	r3, [r3, #0]
  4039c2:	f003 0301 	and.w	r3, r3, #1
  4039c6:	2b00      	cmp	r3, #0
  4039c8:	d0f9      	beq.n	4039be <SPI_Read+0x3e>
	data = REG_SPI_RDR;						//Read the correct data
  4039ca:	4b04      	ldr	r3, [pc, #16]	; (4039dc <SPI_Read+0x5c>)
  4039cc:	681b      	ldr	r3, [r3, #0]
  4039ce:	73fb      	strb	r3, [r7, #15]
	return data;
  4039d0:	7bfb      	ldrb	r3, [r7, #15]
}
  4039d2:	4618      	mov	r0, r3
  4039d4:	3714      	adds	r7, #20
  4039d6:	46bd      	mov	sp, r7
  4039d8:	bc80      	pop	{r7}
  4039da:	4770      	bx	lr
  4039dc:	40008008 	.word	0x40008008
  4039e0:	4000800c 	.word	0x4000800c
  4039e4:	40008010 	.word	0x40008010

004039e8 <initImu>:
* Next the update rate of the first in first out buffer is set, and the DMP system is started on
* the IMU.
*
*/
int initImu(void)
{
  4039e8:	b580      	push	{r7, lr}
  4039ea:	b084      	sub	sp, #16
  4039ec:	af00      	add	r7, sp, #0
	unsigned char accel_fsr;
	unsigned short gyro_rate, gyro_fsr;
	int result = 0;
  4039ee:	2300      	movs	r3, #0
  4039f0:	60fb      	str	r3, [r7, #12]
		0,	-1,	 0,
		0,	 0,	 1
	};

	//Initialise the IMU's driver	
	result += mpu_init(0);								// Initialise the MPU with no interrupts
  4039f2:	2000      	movs	r0, #0
  4039f4:	4b2f      	ldr	r3, [pc, #188]	; (403ab4 <initImu+0xcc>)
  4039f6:	4798      	blx	r3
  4039f8:	4602      	mov	r2, r0
  4039fa:	68fb      	ldr	r3, [r7, #12]
  4039fc:	4413      	add	r3, r2
  4039fe:	60fb      	str	r3, [r7, #12]
	result += mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);// Wake up all sensors
  403a00:	2079      	movs	r0, #121	; 0x79
  403a02:	4b2d      	ldr	r3, [pc, #180]	; (403ab8 <initImu+0xd0>)
  403a04:	4798      	blx	r3
  403a06:	4602      	mov	r2, r0
  403a08:	68fb      	ldr	r3, [r7, #12]
  403a0a:	4413      	add	r3, r2
  403a0c:	60fb      	str	r3, [r7, #12]
	result += mpu_set_sample_rate(200);				// Set 200Hz sample rate (for accel and gyro)
  403a0e:	20c8      	movs	r0, #200	; 0xc8
  403a10:	4b2a      	ldr	r3, [pc, #168]	; (403abc <initImu+0xd4>)
  403a12:	4798      	blx	r3
  403a14:	4602      	mov	r2, r0
  403a16:	68fb      	ldr	r3, [r7, #12]
  403a18:	4413      	add	r3, r2
  403a1a:	60fb      	str	r3, [r7, #12]
														
	result += mpu_set_compass_sample_rate(100);			// Set 100Hz compass sample rate (max)
  403a1c:	2064      	movs	r0, #100	; 0x64
  403a1e:	4b28      	ldr	r3, [pc, #160]	; (403ac0 <initImu+0xd8>)
  403a20:	4798      	blx	r3
  403a22:	4602      	mov	r2, r0
  403a24:	68fb      	ldr	r3, [r7, #12]
  403a26:	4413      	add	r3, r2
  403a28:	60fb      	str	r3, [r7, #12]
	
	//Read back configuration in case it was set improperly.
	result += mpu_get_sample_rate(&gyro_rate);
  403a2a:	f107 0308 	add.w	r3, r7, #8
  403a2e:	4618      	mov	r0, r3
  403a30:	4b24      	ldr	r3, [pc, #144]	; (403ac4 <initImu+0xdc>)
  403a32:	4798      	blx	r3
  403a34:	4602      	mov	r2, r0
  403a36:	68fb      	ldr	r3, [r7, #12]
  403a38:	4413      	add	r3, r2
  403a3a:	60fb      	str	r3, [r7, #12]
	result += mpu_get_gyro_fsr(&gyro_fsr);
  403a3c:	1dbb      	adds	r3, r7, #6
  403a3e:	4618      	mov	r0, r3
  403a40:	4b21      	ldr	r3, [pc, #132]	; (403ac8 <initImu+0xe0>)
  403a42:	4798      	blx	r3
  403a44:	4602      	mov	r2, r0
  403a46:	68fb      	ldr	r3, [r7, #12]
  403a48:	4413      	add	r3, r2
  403a4a:	60fb      	str	r3, [r7, #12]
	result += mpu_get_accel_fsr(&accel_fsr);
  403a4c:	f107 030b 	add.w	r3, r7, #11
  403a50:	4618      	mov	r0, r3
  403a52:	4b1e      	ldr	r3, [pc, #120]	; (403acc <initImu+0xe4>)
  403a54:	4798      	blx	r3
  403a56:	4602      	mov	r2, r0
  403a58:	68fb      	ldr	r3, [r7, #12]
  403a5a:	4413      	add	r3, r2
  403a5c:	60fb      	str	r3, [r7, #12]
	
	result += dmp_load_motion_driver_firmware();		// Load the DMP firmware
  403a5e:	4b1c      	ldr	r3, [pc, #112]	; (403ad0 <initImu+0xe8>)
  403a60:	4798      	blx	r3
  403a62:	4602      	mov	r2, r0
  403a64:	68fb      	ldr	r3, [r7, #12]
  403a66:	4413      	add	r3, r2
  403a68:	60fb      	str	r3, [r7, #12]
	//Send the orientation correction matrix
	result += dmp_set_orientation(invOrientationMatrixToScalar(gyro_orientation));
  403a6a:	481a      	ldr	r0, [pc, #104]	; (403ad4 <initImu+0xec>)
  403a6c:	4b1a      	ldr	r3, [pc, #104]	; (403ad8 <initImu+0xf0>)
  403a6e:	4798      	blx	r3
  403a70:	4603      	mov	r3, r0
  403a72:	4618      	mov	r0, r3
  403a74:	4b19      	ldr	r3, [pc, #100]	; (403adc <initImu+0xf4>)
  403a76:	4798      	blx	r3
  403a78:	4602      	mov	r2, r0
  403a7a:	68fb      	ldr	r3, [r7, #12]
  403a7c:	4413      	add	r3, r2
  403a7e:	60fb      	str	r3, [r7, #12]
	//result += dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | 
	//								DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL);
	result += dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT);//Enable 6 axis low power quaternions
  403a80:	2010      	movs	r0, #16
  403a82:	4b17      	ldr	r3, [pc, #92]	; (403ae0 <initImu+0xf8>)
  403a84:	4798      	blx	r3
  403a86:	4602      	mov	r2, r0
  403a88:	68fb      	ldr	r3, [r7, #12]
  403a8a:	4413      	add	r3, r2
  403a8c:	60fb      	str	r3, [r7, #12]
	result += dmp_set_fifo_rate(200);					//200Hz update rate from the FIFO
  403a8e:	20c8      	movs	r0, #200	; 0xc8
  403a90:	4b14      	ldr	r3, [pc, #80]	; (403ae4 <initImu+0xfc>)
  403a92:	4798      	blx	r3
  403a94:	4602      	mov	r2, r0
  403a96:	68fb      	ldr	r3, [r7, #12]
  403a98:	4413      	add	r3, r2
  403a9a:	60fb      	str	r3, [r7, #12]
	result += mpu_set_dmp_state(1);						//Start DMP
  403a9c:	2001      	movs	r0, #1
  403a9e:	4b12      	ldr	r3, [pc, #72]	; (403ae8 <initImu+0x100>)
  403aa0:	4798      	blx	r3
  403aa2:	4602      	mov	r2, r0
  403aa4:	68fb      	ldr	r3, [r7, #12]
  403aa6:	4413      	add	r3, r2
  403aa8:	60fb      	str	r3, [r7, #12]
	return result;
  403aaa:	68fb      	ldr	r3, [r7, #12]
}
  403aac:	4618      	mov	r0, r3
  403aae:	3710      	adds	r7, #16
  403ab0:	46bd      	mov	sp, r7
  403ab2:	bd80      	pop	{r7, pc}
  403ab4:	00400e79 	.word	0x00400e79
  403ab8:	004018d1 	.word	0x004018d1
  403abc:	004016b1 	.word	0x004016b1
  403ac0:	004017a1 	.word	0x004017a1
  403ac4:	00401681 	.word	0x00401681
  403ac8:	00401389 	.word	0x00401389
  403acc:	00401499 	.word	0x00401499
  403ad0:	00402269 	.word	0x00402269
  403ad4:	20000038 	.word	0x20000038
  403ad8:	00403aed 	.word	0x00403aed
  403adc:	0040228d 	.word	0x0040228d
  403ae0:	004029ad 	.word	0x004029ad
  403ae4:	00402465 	.word	0x00402465
  403ae8:	00401f21 	.word	0x00401f21

00403aec <invOrientationMatrixToScalar>:
* Implementation:
* TODO
*
*/
unsigned short invOrientationMatrixToScalar(const signed char *mtx)
{
  403aec:	b580      	push	{r7, lr}
  403aee:	b084      	sub	sp, #16
  403af0:	af00      	add	r7, sp, #0
  403af2:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = invRow2Scale(mtx);
  403af4:	6878      	ldr	r0, [r7, #4]
  403af6:	4b11      	ldr	r3, [pc, #68]	; (403b3c <invOrientationMatrixToScalar+0x50>)
  403af8:	4798      	blx	r3
  403afa:	4603      	mov	r3, r0
  403afc:	81fb      	strh	r3, [r7, #14]
    scalar |= invRow2Scale(mtx + 3) << 3;
  403afe:	687b      	ldr	r3, [r7, #4]
  403b00:	3303      	adds	r3, #3
  403b02:	4618      	mov	r0, r3
  403b04:	4b0d      	ldr	r3, [pc, #52]	; (403b3c <invOrientationMatrixToScalar+0x50>)
  403b06:	4798      	blx	r3
  403b08:	4603      	mov	r3, r0
  403b0a:	00db      	lsls	r3, r3, #3
  403b0c:	b21a      	sxth	r2, r3
  403b0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  403b12:	4313      	orrs	r3, r2
  403b14:	b21b      	sxth	r3, r3
  403b16:	81fb      	strh	r3, [r7, #14]
    scalar |= invRow2Scale(mtx + 6) << 6;
  403b18:	687b      	ldr	r3, [r7, #4]
  403b1a:	3306      	adds	r3, #6
  403b1c:	4618      	mov	r0, r3
  403b1e:	4b07      	ldr	r3, [pc, #28]	; (403b3c <invOrientationMatrixToScalar+0x50>)
  403b20:	4798      	blx	r3
  403b22:	4603      	mov	r3, r0
  403b24:	019b      	lsls	r3, r3, #6
  403b26:	b21a      	sxth	r2, r3
  403b28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  403b2c:	4313      	orrs	r3, r2
  403b2e:	b21b      	sxth	r3, r3
  403b30:	81fb      	strh	r3, [r7, #14]

    return scalar;
  403b32:	89fb      	ldrh	r3, [r7, #14]
}
  403b34:	4618      	mov	r0, r3
  403b36:	3710      	adds	r7, #16
  403b38:	46bd      	mov	sp, r7
  403b3a:	bd80      	pop	{r7, pc}
  403b3c:	00403b41 	.word	0x00403b41

00403b40 <invRow2Scale>:
* Implementation:
* TODO
*
*/
unsigned short invRow2Scale(const signed char *row)
{
  403b40:	b480      	push	{r7}
  403b42:	b085      	sub	sp, #20
  403b44:	af00      	add	r7, sp, #0
  403b46:	6078      	str	r0, [r7, #4]
	unsigned short b;

	if (row[0] > 0)
  403b48:	687b      	ldr	r3, [r7, #4]
  403b4a:	f993 3000 	ldrsb.w	r3, [r3]
  403b4e:	2b00      	cmp	r3, #0
  403b50:	dd02      	ble.n	403b58 <invRow2Scale+0x18>
	b = 0;
  403b52:	2300      	movs	r3, #0
  403b54:	81fb      	strh	r3, [r7, #14]
  403b56:	e02d      	b.n	403bb4 <invRow2Scale+0x74>
	else if (row[0] < 0)
  403b58:	687b      	ldr	r3, [r7, #4]
  403b5a:	f993 3000 	ldrsb.w	r3, [r3]
  403b5e:	2b00      	cmp	r3, #0
  403b60:	da02      	bge.n	403b68 <invRow2Scale+0x28>
	b = 4;
  403b62:	2304      	movs	r3, #4
  403b64:	81fb      	strh	r3, [r7, #14]
  403b66:	e025      	b.n	403bb4 <invRow2Scale+0x74>
	else if (row[1] > 0)
  403b68:	687b      	ldr	r3, [r7, #4]
  403b6a:	3301      	adds	r3, #1
  403b6c:	f993 3000 	ldrsb.w	r3, [r3]
  403b70:	2b00      	cmp	r3, #0
  403b72:	dd02      	ble.n	403b7a <invRow2Scale+0x3a>
	b = 1;
  403b74:	2301      	movs	r3, #1
  403b76:	81fb      	strh	r3, [r7, #14]
  403b78:	e01c      	b.n	403bb4 <invRow2Scale+0x74>
	else if (row[1] < 0)
  403b7a:	687b      	ldr	r3, [r7, #4]
  403b7c:	3301      	adds	r3, #1
  403b7e:	f993 3000 	ldrsb.w	r3, [r3]
  403b82:	2b00      	cmp	r3, #0
  403b84:	da02      	bge.n	403b8c <invRow2Scale+0x4c>
	b = 5;
  403b86:	2305      	movs	r3, #5
  403b88:	81fb      	strh	r3, [r7, #14]
  403b8a:	e013      	b.n	403bb4 <invRow2Scale+0x74>
	else if (row[2] > 0)
  403b8c:	687b      	ldr	r3, [r7, #4]
  403b8e:	3302      	adds	r3, #2
  403b90:	f993 3000 	ldrsb.w	r3, [r3]
  403b94:	2b00      	cmp	r3, #0
  403b96:	dd02      	ble.n	403b9e <invRow2Scale+0x5e>
	b = 2;
  403b98:	2302      	movs	r3, #2
  403b9a:	81fb      	strh	r3, [r7, #14]
  403b9c:	e00a      	b.n	403bb4 <invRow2Scale+0x74>
	else if (row[2] < 0)
  403b9e:	687b      	ldr	r3, [r7, #4]
  403ba0:	3302      	adds	r3, #2
  403ba2:	f993 3000 	ldrsb.w	r3, [r3]
  403ba6:	2b00      	cmp	r3, #0
  403ba8:	da02      	bge.n	403bb0 <invRow2Scale+0x70>
	b = 6;
  403baa:	2306      	movs	r3, #6
  403bac:	81fb      	strh	r3, [r7, #14]
  403bae:	e001      	b.n	403bb4 <invRow2Scale+0x74>
	else
	b = 7;      // error
  403bb0:	2307      	movs	r3, #7
  403bb2:	81fb      	strh	r3, [r7, #14]
	return b;
  403bb4:	89fb      	ldrh	r3, [r7, #14]
}
  403bb6:	4618      	mov	r0, r3
  403bb8:	3714      	adds	r7, #20
  403bba:	46bd      	mov	sp, r7
  403bbc:	bc80      	pop	{r7}
  403bbe:	4770      	bx	lr

00403bc0 <delay_ms>:
* Stores systemTimestamp at the start of the function, then waits until systemTimestamp has
* increased by the amount given in period_ms before continuing.
*
*/
int delay_ms(uint32_t period_ms)
{
  403bc0:	b480      	push	{r7}
  403bc2:	b085      	sub	sp, #20
  403bc4:	af00      	add	r7, sp, #0
  403bc6:	6078      	str	r0, [r7, #4]
	uint32_t startTime = systemTimestamp;
  403bc8:	4b08      	ldr	r3, [pc, #32]	; (403bec <delay_ms+0x2c>)
  403bca:	681b      	ldr	r3, [r3, #0]
  403bcc:	60fb      	str	r3, [r7, #12]
	while(systemTimestamp < (startTime + period_ms));
  403bce:	bf00      	nop
  403bd0:	68fa      	ldr	r2, [r7, #12]
  403bd2:	687b      	ldr	r3, [r7, #4]
  403bd4:	441a      	add	r2, r3
  403bd6:	4b05      	ldr	r3, [pc, #20]	; (403bec <delay_ms+0x2c>)
  403bd8:	681b      	ldr	r3, [r3, #0]
  403bda:	429a      	cmp	r2, r3
  403bdc:	d8f8      	bhi.n	403bd0 <delay_ms+0x10>
	return 0;
  403bde:	2300      	movs	r3, #0
}
  403be0:	4618      	mov	r0, r3
  403be2:	3714      	adds	r7, #20
  403be4:	46bd      	mov	sp, r7
  403be6:	bc80      	pop	{r7}
  403be8:	4770      	bx	lr
  403bea:	bf00      	nop
  403bec:	200004b4 	.word	0x200004b4

00403bf0 <twi_write_imu>:
* flag isn't set until all bytes have been sent and the transmission holding register is clear.
*
*/
char twi_write_imu(unsigned char slave_addr, unsigned char reg_addr, 
					unsigned char length, unsigned char const *data)
{
  403bf0:	b480      	push	{r7}
  403bf2:	b085      	sub	sp, #20
  403bf4:	af00      	add	r7, sp, #0
  403bf6:	603b      	str	r3, [r7, #0]
  403bf8:	4603      	mov	r3, r0
  403bfa:	71fb      	strb	r3, [r7, #7]
  403bfc:	460b      	mov	r3, r1
  403bfe:	71bb      	strb	r3, [r7, #6]
  403c00:	4613      	mov	r3, r2
  403c02:	717b      	strb	r3, [r7, #5]
	//note txcomp MUST = 1 before writing (according to datasheet)
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
  403c04:	4a24      	ldr	r2, [pc, #144]	; (403c98 <twi_write_imu+0xa8>)
  403c06:	4b24      	ldr	r3, [pc, #144]	; (403c98 <twi_write_imu+0xa8>)
  403c08:	681b      	ldr	r3, [r3, #0]
  403c0a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403c0e:	6013      	str	r3, [r2, #0]
	REG_TWI2_MMR
  403c10:	4a22      	ldr	r2, [pc, #136]	; (403c9c <twi_write_imu+0xac>)
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  403c12:	79fb      	ldrb	r3, [r7, #7]
  403c14:	041b      	lsls	r3, r3, #16
  403c16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
		|	TWI_MMR_IADRSZ_1_BYTE;				//Set register address length to 1 byte
  403c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
					unsigned char length, unsigned char const *data)
{
	//note txcomp MUST = 1 before writing (according to datasheet)
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
	REG_TWI2_MMR
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  403c1e:	6013      	str	r3, [r2, #0]
		|	TWI_MMR_IADRSZ_1_BYTE;				//Set register address length to 1 byte
	REG_TWI2_IADR = reg_addr;					//set register address to write to
  403c20:	4a1f      	ldr	r2, [pc, #124]	; (403ca0 <twi_write_imu+0xb0>)
  403c22:	79bb      	ldrb	r3, [r7, #6]
  403c24:	6013      	str	r3, [r2, #0]

	if(length == 1)
  403c26:	797b      	ldrb	r3, [r7, #5]
  403c28:	2b01      	cmp	r3, #1
  403c2a:	d10e      	bne.n	403c4a <twi_write_imu+0x5a>
	{
		REG_TWI2_THR = data[0];					//set up data to transmit
  403c2c:	4a1d      	ldr	r2, [pc, #116]	; (403ca4 <twi_write_imu+0xb4>)
  403c2e:	683b      	ldr	r3, [r7, #0]
  403c30:	781b      	ldrb	r3, [r3, #0]
  403c32:	6013      	str	r3, [r2, #0]
		REG_TWI2_CR = TWI_CR_STOP;				// Send a stop bit
  403c34:	4b18      	ldr	r3, [pc, #96]	; (403c98 <twi_write_imu+0xa8>)
  403c36:	2202      	movs	r2, #2
  403c38:	601a      	str	r2, [r3, #0]
		while(!IMU_TXRDY);						//while Transmit Holding Register not ready. wait.
  403c3a:	bf00      	nop
  403c3c:	4b1a      	ldr	r3, [pc, #104]	; (403ca8 <twi_write_imu+0xb8>)
  403c3e:	681b      	ldr	r3, [r3, #0]
  403c40:	f003 0304 	and.w	r3, r3, #4
  403c44:	2b00      	cmp	r3, #0
  403c46:	d0f9      	beq.n	403c3c <twi_write_imu+0x4c>
  403c48:	e019      	b.n	403c7e <twi_write_imu+0x8e>
	} else {
		for(unsigned char b = 0; b < length; b++)//Send data bit by bit until data length is reached
  403c4a:	2300      	movs	r3, #0
  403c4c:	73fb      	strb	r3, [r7, #15]
  403c4e:	e00f      	b.n	403c70 <twi_write_imu+0x80>
		{
			REG_TWI2_THR = data[b];				//set up data to transmit
  403c50:	4914      	ldr	r1, [pc, #80]	; (403ca4 <twi_write_imu+0xb4>)
  403c52:	7bfb      	ldrb	r3, [r7, #15]
  403c54:	683a      	ldr	r2, [r7, #0]
  403c56:	4413      	add	r3, r2
  403c58:	781b      	ldrb	r3, [r3, #0]
  403c5a:	600b      	str	r3, [r1, #0]
			while(!IMU_TXRDY);					//while Transmit Holding Register not ready. wait.
  403c5c:	bf00      	nop
  403c5e:	4b12      	ldr	r3, [pc, #72]	; (403ca8 <twi_write_imu+0xb8>)
  403c60:	681b      	ldr	r3, [r3, #0]
  403c62:	f003 0304 	and.w	r3, r3, #4
  403c66:	2b00      	cmp	r3, #0
  403c68:	d0f9      	beq.n	403c5e <twi_write_imu+0x6e>
	{
		REG_TWI2_THR = data[0];					//set up data to transmit
		REG_TWI2_CR = TWI_CR_STOP;				// Send a stop bit
		while(!IMU_TXRDY);						//while Transmit Holding Register not ready. wait.
	} else {
		for(unsigned char b = 0; b < length; b++)//Send data bit by bit until data length is reached
  403c6a:	7bfb      	ldrb	r3, [r7, #15]
  403c6c:	3301      	adds	r3, #1
  403c6e:	73fb      	strb	r3, [r7, #15]
  403c70:	7bfa      	ldrb	r2, [r7, #15]
  403c72:	797b      	ldrb	r3, [r7, #5]
  403c74:	429a      	cmp	r2, r3
  403c76:	d3eb      	bcc.n	403c50 <twi_write_imu+0x60>
		{
			REG_TWI2_THR = data[b];				//set up data to transmit
			while(!IMU_TXRDY);					//while Transmit Holding Register not ready. wait.
		}
	
		REG_TWI2_CR = TWI_CR_STOP;				// Send a stop bit
  403c78:	4b07      	ldr	r3, [pc, #28]	; (403c98 <twi_write_imu+0xa8>)
  403c7a:	2202      	movs	r2, #2
  403c7c:	601a      	str	r2, [r3, #0]
	}
	while(!IMU_TXCOMP);							//while transmit not complete. wait.
  403c7e:	bf00      	nop
  403c80:	4b09      	ldr	r3, [pc, #36]	; (403ca8 <twi_write_imu+0xb8>)
  403c82:	681b      	ldr	r3, [r3, #0]
  403c84:	f003 0301 	and.w	r3, r3, #1
  403c88:	2b00      	cmp	r3, #0
  403c8a:	d0f9      	beq.n	403c80 <twi_write_imu+0x90>
	return 0;
  403c8c:	2300      	movs	r3, #0
}
  403c8e:	4618      	mov	r0, r3
  403c90:	3714      	adds	r7, #20
  403c92:	46bd      	mov	sp, r7
  403c94:	bc80      	pop	{r7}
  403c96:	4770      	bx	lr
  403c98:	40040000 	.word	0x40040000
  403c9c:	40040004 	.word	0x40040004
  403ca0:	4004000c 	.word	0x4004000c
  403ca4:	40040034 	.word	0x40040034
  403ca8:	40040020 	.word	0x40040020

00403cac <twi_read_imu>:
* decides to stop talking.
*
*/
char twi_read_imu(unsigned char slave_addr, unsigned char reg_addr, 
					unsigned char length, unsigned char *data)
{
  403cac:	b480      	push	{r7}
  403cae:	b085      	sub	sp, #20
  403cb0:	af00      	add	r7, sp, #0
  403cb2:	603b      	str	r3, [r7, #0]
  403cb4:	4603      	mov	r3, r0
  403cb6:	71fb      	strb	r3, [r7, #7]
  403cb8:	460b      	mov	r3, r1
  403cba:	71bb      	strb	r3, [r7, #6]
  403cbc:	4613      	mov	r3, r2
  403cbe:	717b      	strb	r3, [r7, #5]
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
  403cc0:	4a2d      	ldr	r2, [pc, #180]	; (403d78 <twi_read_imu+0xcc>)
  403cc2:	4b2d      	ldr	r3, [pc, #180]	; (403d78 <twi_read_imu+0xcc>)
  403cc4:	681b      	ldr	r3, [r3, #0]
  403cc6:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403cca:	6013      	str	r3, [r2, #0]
	REG_TWI2_MMR
  403ccc:	4a2b      	ldr	r2, [pc, #172]	; (403d7c <twi_read_imu+0xd0>)
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  403cce:	79fb      	ldrb	r3, [r7, #7]
  403cd0:	041b      	lsls	r3, r3, #16
  403cd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
		|	(TWI_MMR_MREAD)						//Set to read from register
		|	TWI_MMR_IADRSZ_1_BYTE;				//Register addr byte length (0-3)
  403cd6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
char twi_read_imu(unsigned char slave_addr, unsigned char reg_addr, 
					unsigned char length, unsigned char *data)
{
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
	REG_TWI2_MMR
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  403cda:	6013      	str	r3, [r2, #0]
		|	(TWI_MMR_MREAD)						//Set to read from register
		|	TWI_MMR_IADRSZ_1_BYTE;				//Register addr byte length (0-3)
	REG_TWI2_IADR = reg_addr;					//set up address to read from
  403cdc:	4a28      	ldr	r2, [pc, #160]	; (403d80 <twi_read_imu+0xd4>)
  403cde:	79bb      	ldrb	r3, [r7, #6]
  403ce0:	6013      	str	r3, [r2, #0]
	
	if (length == 1)							//If only ready one byte, then START and STOP bits need to be set at the same time
  403ce2:	797b      	ldrb	r3, [r7, #5]
  403ce4:	2b01      	cmp	r3, #1
  403ce6:	d117      	bne.n	403d18 <twi_read_imu+0x6c>
	{
		REG_TWI2_CR
  403ce8:	4b23      	ldr	r3, [pc, #140]	; (403d78 <twi_read_imu+0xcc>)
			=	TWI_CR_START
  403cea:	2203      	movs	r2, #3
  403cec:	601a      	str	r2, [r3, #0]
			|	TWI_CR_STOP;					//Send a START and STOP condition as required (single byte read)	
		while(!IMU_RXRDY);						//while Receive Holding Register not ready. wait.
  403cee:	bf00      	nop
  403cf0:	4b24      	ldr	r3, [pc, #144]	; (403d84 <twi_read_imu+0xd8>)
  403cf2:	681b      	ldr	r3, [r3, #0]
  403cf4:	f003 0302 	and.w	r3, r3, #2
  403cf8:	2b00      	cmp	r3, #0
  403cfa:	d0f9      	beq.n	403cf0 <twi_read_imu+0x44>
		data[0] = REG_TWI2_RHR;					//store data received		
  403cfc:	4b22      	ldr	r3, [pc, #136]	; (403d88 <twi_read_imu+0xdc>)
  403cfe:	681b      	ldr	r3, [r3, #0]
  403d00:	b2da      	uxtb	r2, r3
  403d02:	683b      	ldr	r3, [r7, #0]
  403d04:	701a      	strb	r2, [r3, #0]
		while(!IMU_TXCOMP);						//while transmit not complete. wait.
  403d06:	bf00      	nop
  403d08:	4b1e      	ldr	r3, [pc, #120]	; (403d84 <twi_read_imu+0xd8>)
  403d0a:	681b      	ldr	r3, [r3, #0]
  403d0c:	f003 0301 	and.w	r3, r3, #1
  403d10:	2b00      	cmp	r3, #0
  403d12:	d0f9      	beq.n	403d08 <twi_read_imu+0x5c>
		return 0;
  403d14:	2300      	movs	r3, #0
  403d16:	e02a      	b.n	403d6e <twi_read_imu+0xc2>
	} else {
		REG_TWI2_CR = TWI_CR_START;				//Send start bit
  403d18:	4b17      	ldr	r3, [pc, #92]	; (403d78 <twi_read_imu+0xcc>)
  403d1a:	2201      	movs	r2, #1
  403d1c:	601a      	str	r2, [r3, #0]
		for(unsigned char b = 0; b < length; b++)
  403d1e:	2300      	movs	r3, #0
  403d20:	73fb      	strb	r3, [r7, #15]
  403d22:	e018      	b.n	403d56 <twi_read_imu+0xaa>
		{
			while(!IMU_RXRDY);
  403d24:	bf00      	nop
  403d26:	4b17      	ldr	r3, [pc, #92]	; (403d84 <twi_read_imu+0xd8>)
  403d28:	681b      	ldr	r3, [r3, #0]
  403d2a:	f003 0302 	and.w	r3, r3, #2
  403d2e:	2b00      	cmp	r3, #0
  403d30:	d0f9      	beq.n	403d26 <twi_read_imu+0x7a>
			data[b] = REG_TWI2_RHR;
  403d32:	7bfb      	ldrb	r3, [r7, #15]
  403d34:	683a      	ldr	r2, [r7, #0]
  403d36:	4413      	add	r3, r2
  403d38:	4a13      	ldr	r2, [pc, #76]	; (403d88 <twi_read_imu+0xdc>)
  403d3a:	6812      	ldr	r2, [r2, #0]
  403d3c:	b2d2      	uxtb	r2, r2
  403d3e:	701a      	strb	r2, [r3, #0]
			if(b == length-2)
  403d40:	7bfa      	ldrb	r2, [r7, #15]
  403d42:	797b      	ldrb	r3, [r7, #5]
  403d44:	3b02      	subs	r3, #2
  403d46:	429a      	cmp	r2, r3
  403d48:	d102      	bne.n	403d50 <twi_read_imu+0xa4>
				REG_TWI2_CR = TWI_CR_STOP;	//Send stop on reception of 2nd to last byte
  403d4a:	4b0b      	ldr	r3, [pc, #44]	; (403d78 <twi_read_imu+0xcc>)
  403d4c:	2202      	movs	r2, #2
  403d4e:	601a      	str	r2, [r3, #0]
		data[0] = REG_TWI2_RHR;					//store data received		
		while(!IMU_TXCOMP);						//while transmit not complete. wait.
		return 0;
	} else {
		REG_TWI2_CR = TWI_CR_START;				//Send start bit
		for(unsigned char b = 0; b < length; b++)
  403d50:	7bfb      	ldrb	r3, [r7, #15]
  403d52:	3301      	adds	r3, #1
  403d54:	73fb      	strb	r3, [r7, #15]
  403d56:	7bfa      	ldrb	r2, [r7, #15]
  403d58:	797b      	ldrb	r3, [r7, #5]
  403d5a:	429a      	cmp	r2, r3
  403d5c:	d3e2      	bcc.n	403d24 <twi_read_imu+0x78>
			while(!IMU_RXRDY);
			data[b] = REG_TWI2_RHR;
			if(b == length-2)
				REG_TWI2_CR = TWI_CR_STOP;	//Send stop on reception of 2nd to last byte
		}
		while(!IMU_TXCOMP);							//while transmit not complete. wait.
  403d5e:	bf00      	nop
  403d60:	4b08      	ldr	r3, [pc, #32]	; (403d84 <twi_read_imu+0xd8>)
  403d62:	681b      	ldr	r3, [r3, #0]
  403d64:	f003 0301 	and.w	r3, r3, #1
  403d68:	2b00      	cmp	r3, #0
  403d6a:	d0f9      	beq.n	403d60 <twi_read_imu+0xb4>
	}
	return 0;
  403d6c:	2300      	movs	r3, #0
}
  403d6e:	4618      	mov	r0, r3
  403d70:	3714      	adds	r7, #20
  403d72:	46bd      	mov	sp, r7
  403d74:	bc80      	pop	{r7}
  403d76:	4770      	bx	lr
  403d78:	40040000 	.word	0x40040000
  403d7c:	40040004 	.word	0x40040004
  403d80:	4004000c 	.word	0x4004000c
  403d84:	40040020 	.word	0x40040020
  403d88:	40040030 	.word	0x40040030

00403d8c <TC0_Handler>:
* If the RC compare flag is set then it increments the systemTimestamp, and also checks if 5ms
* has elapsed. If so, will set a flag to read from the IMU's FIFO buffer (unimplemented)
*
*/
void TC0_Handler()
{
  403d8c:	b480      	push	{r7}
  403d8e:	af00      	add	r7, sp, #0
	//The interrupt handler for timer counter 0
	//Triggers every 1ms
	if(REG_TC0_SR0 & TC_SR_CPCS)									//If RC compare flag
  403d90:	4b0c      	ldr	r3, [pc, #48]	; (403dc4 <TC0_Handler+0x38>)
  403d92:	681b      	ldr	r3, [r3, #0]
  403d94:	f003 0310 	and.w	r3, r3, #16
  403d98:	2b00      	cmp	r3, #0
  403d9a:	d00f      	beq.n	403dbc <TC0_Handler+0x30>
	{
		systemTimestamp++;
  403d9c:	4b0a      	ldr	r3, [pc, #40]	; (403dc8 <TC0_Handler+0x3c>)
  403d9e:	681b      	ldr	r3, [r3, #0]
  403da0:	3301      	adds	r3, #1
  403da2:	4a09      	ldr	r2, [pc, #36]	; (403dc8 <TC0_Handler+0x3c>)
  403da4:	6013      	str	r3, [r2, #0]
		//Read IMUs FIFO every 5ms. In future this will be done from an external interrupt.
		if(systemTimestamp >= (check_IMU_FIFO + 5))					
  403da6:	4b09      	ldr	r3, [pc, #36]	; (403dcc <TC0_Handler+0x40>)
  403da8:	681b      	ldr	r3, [r3, #0]
  403daa:	1d5a      	adds	r2, r3, #5
  403dac:	4b06      	ldr	r3, [pc, #24]	; (403dc8 <TC0_Handler+0x3c>)
  403dae:	681b      	ldr	r3, [r3, #0]
  403db0:	429a      	cmp	r2, r3
  403db2:	d803      	bhi.n	403dbc <TC0_Handler+0x30>
		{
			check_IMU_FIFO = systemTimestamp;
  403db4:	4b04      	ldr	r3, [pc, #16]	; (403dc8 <TC0_Handler+0x3c>)
  403db6:	681b      	ldr	r3, [r3, #0]
  403db8:	4a04      	ldr	r2, [pc, #16]	; (403dcc <TC0_Handler+0x40>)
  403dba:	6013      	str	r3, [r2, #0]
		}
	}
}
  403dbc:	bf00      	nop
  403dbe:	46bd      	mov	sp, r7
  403dc0:	bc80      	pop	{r7}
  403dc2:	4770      	bx	lr
  403dc4:	40010020 	.word	0x40010020
  403dc8:	200004b4 	.word	0x200004b4
  403dcc:	200004b8 	.word	0x200004b8

00403dd0 <Proximity_Setup>:
#include "twimux_interface.h"

/******** Proximity Sensor Registry Setup ********/
//This function will pass the desired channel to the Multiplexer and setup an *individual* proximity sensor
void Proximity_Setup(uint8_t channel)
{
  403dd0:	b580      	push	{r7, lr}
  403dd2:	b082      	sub	sp, #8
  403dd4:	af00      	add	r7, sp, #0
  403dd6:	4603      	mov	r3, r0
  403dd8:	71fb      	strb	r3, [r7, #7]
	TWI0_MuxSwitch(channel); //Set multiplexer address to correct device
  403dda:	79fb      	ldrb	r3, [r7, #7]
  403ddc:	4618      	mov	r0, r3
  403dde:	4b0f      	ldr	r3, [pc, #60]	; (403e1c <Proximity_Setup+0x4c>)
  403de0:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_Enable, PDisable);			//Disable and Power down
  403de2:	2200      	movs	r2, #0
  403de4:	2180      	movs	r1, #128	; 0x80
  403de6:	2039      	movs	r0, #57	; 0x39
  403de8:	4b0d      	ldr	r3, [pc, #52]	; (403e20 <Proximity_Setup+0x50>)
  403dea:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_PTime, PTIME);				//Proximity ADC time: 2.73 ms, minimum proximity integration time
  403dec:	22ff      	movs	r2, #255	; 0xff
  403dee:	2182      	movs	r1, #130	; 0x82
  403df0:	2039      	movs	r0, #57	; 0x39
  403df2:	4b0b      	ldr	r3, [pc, #44]	; (403e20 <Proximity_Setup+0x50>)
  403df4:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_PPulse, PPULSE);			//Sets the number of Proximity pulses that the LDR pin will generate during the prox Accum state: (recommended proximity pulse count = 8) PREVIOUSLY HAD BEEN SET TO 0X02
  403df6:	2208      	movs	r2, #8
  403df8:	218e      	movs	r1, #142	; 0x8e
  403dfa:	2039      	movs	r0, #57	; 0x39
  403dfc:	4b08      	ldr	r3, [pc, #32]	; (403e20 <Proximity_Setup+0x50>)
  403dfe:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_GainControl, PDiode);		//Gain Control register: LED = 100mA, Proximity diode select, Proximity gain x1, recommended settings
  403e00:	2220      	movs	r2, #32
  403e02:	218f      	movs	r1, #143	; 0x8f
  403e04:	2039      	movs	r0, #57	; 0x39
  403e06:	4b06      	ldr	r3, [pc, #24]	; (403e20 <Proximity_Setup+0x50>)
  403e08:	4798      	blx	r3
	TWI0_Write(TWI0_ProximitySensorAddress, Proximity_Command_REG_1Byte | Proximity_Enable, PEnable);			//Power ON, Proximity Enable
  403e0a:	2205      	movs	r2, #5
  403e0c:	2180      	movs	r1, #128	; 0x80
  403e0e:	2039      	movs	r0, #57	; 0x39
  403e10:	4b03      	ldr	r3, [pc, #12]	; (403e20 <Proximity_Setup+0x50>)
  403e12:	4798      	blx	r3
}
  403e14:	bf00      	nop
  403e16:	3708      	adds	r7, #8
  403e18:	46bd      	mov	sp, r7
  403e1a:	bd80      	pop	{r7, pc}
  403e1c:	004040f1 	.word	0x004040f1
  403e20:	004041c5 	.word	0x004041c5

00403e24 <Proximity_Data_Read>:
/******** Proximity Sensor Data Read ********/
//Retrieves the Proximity Sensor (16-bit) data from the selected Sensor
//After the programmed number of proximity pulses have been generated, the proximity ADC converts and scales the proximity measurement to a 16-bit value,
//then stores the result in two 8-bit proximity data (PDATAx) registers. Therefore, the TWI must read/retrieve both 8-bit registers.
uint16_t Proximity_Data_Read(uint8_t channel)
{
  403e24:	b580      	push	{r7, lr}
  403e26:	b084      	sub	sp, #16
  403e28:	af00      	add	r7, sp, #0
  403e2a:	4603      	mov	r3, r0
  403e2c:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	TWI0_MuxSwitch(channel);	//Set multiplexer address to correct device
  403e2e:	79fb      	ldrb	r3, [r7, #7]
  403e30:	4618      	mov	r0, r3
  403e32:	4b06      	ldr	r3, [pc, #24]	; (403e4c <Proximity_Data_Read+0x28>)
  403e34:	4798      	blx	r3
	data = TWI0_ReadDB(TWI0_ProximitySensorAddress, Proximity_Command_REG_Increment | Proximity_DataLow);
  403e36:	21b8      	movs	r1, #184	; 0xb8
  403e38:	2039      	movs	r0, #57	; 0x39
  403e3a:	4b05      	ldr	r3, [pc, #20]	; (403e50 <Proximity_Data_Read+0x2c>)
  403e3c:	4798      	blx	r3
  403e3e:	4603      	mov	r3, r0
  403e40:	81fb      	strh	r3, [r7, #14]
	//NOTE: Command_REG of the ProxSensor must be written to, as part of R/W functions.
	//Low data register is read, auto-increment occurs and high data register is read.
	return data;
  403e42:	89fb      	ldrh	r3, [r7, #14]
}
  403e44:	4618      	mov	r0, r3
  403e46:	3710      	adds	r7, #16
  403e48:	46bd      	mov	sp, r7
  403e4a:	bd80      	pop	{r7, pc}
  403e4c:	004040f1 	.word	0x004040f1
  403e50:	00404249 	.word	0x00404249

00403e54 <testManager>:
*		In the case of data with a size larger than bytes this is broken into byte sized pieces
*		The order will be [3] Data1_High, [4] Data1_Low, [5] Data2_High and so on
* The transmit array sie must also be calculated and sent with the XBee Transmit Request
*/
void testManager(struct message_info message)
{
  403e54:	b590      	push	{r4, r7, lr}
  403e56:	b0a1      	sub	sp, #132	; 0x84
  403e58:	af02      	add	r7, sp, #8
  403e5a:	1d3b      	adds	r3, r7, #4
  403e5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	struct Position testPosition;
	static uint8_t receivedTestData[50]; //array for data coming into the robot AFTER Xbee framing has been stripped
	uint8_t transmitTestData[50]; //array for data to be transmitted to PC BEFORE XBee framing has been added
	uint16_t peripheralReturnData; //the test data returned from eh relevant peripheral
	char testType = message.command;//what peripheral is being tested
  403e60:	7a3b      	ldrb	r3, [r7, #8]
  403e62:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t testMode;
	uint8_t transmitTestDataSize;//size of the transmit array
	if (newDataFlag)
  403e66:	4b5d      	ldr	r3, [pc, #372]	; (403fdc <testManager+0x188>)
  403e68:	781b      	ldrb	r3, [r3, #0]
  403e6a:	2b00      	cmp	r3, #0
  403e6c:	d007      	beq.n	403e7e <testManager+0x2a>
	{
		convertData(message, receivedTestData);//converts the Xbee data to the receivedTestData array
  403e6e:	4b5c      	ldr	r3, [pc, #368]	; (403fe0 <testManager+0x18c>)
  403e70:	1d3a      	adds	r2, r7, #4
  403e72:	ca07      	ldmia	r2, {r0, r1, r2}
  403e74:	4c5b      	ldr	r4, [pc, #364]	; (403fe4 <testManager+0x190>)
  403e76:	47a0      	blx	r4
		newDataFlag = 0;
  403e78:	4b58      	ldr	r3, [pc, #352]	; (403fdc <testManager+0x188>)
  403e7a:	2200      	movs	r2, #0
  403e7c:	701a      	strb	r2, [r3, #0]
	}
	testMode = receivedTestData[1];
  403e7e:	4b58      	ldr	r3, [pc, #352]	; (403fe0 <testManager+0x18c>)
  403e80:	785b      	ldrb	r3, [r3, #1]
  403e82:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	//Declare a new instance of the Position structure for test purposes only for mouse and IMU results
	transmitTestData[0] = testType; //First return value is the testType so the PC knows what it is receiving
  403e86:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
  403e8a:	753b      	strb	r3, [r7, #20]
	switch(testType)
  403e8c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
  403e90:	3be4      	subs	r3, #228	; 0xe4
  403e92:	2b09      	cmp	r3, #9
  403e94:	f200 808f 	bhi.w	403fb6 <testManager+0x162>
  403e98:	a201      	add	r2, pc, #4	; (adr r2, 403ea0 <testManager+0x4c>)
  403e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403e9e:	bf00      	nop
  403ea0:	00403ec9 	.word	0x00403ec9
  403ea4:	00403eff 	.word	0x00403eff
  403ea8:	00403f35 	.word	0x00403f35
  403eac:	00403f53 	.word	0x00403f53
  403eb0:	00403f91 	.word	0x00403f91
  403eb4:	00403fb7 	.word	0x00403fb7
  403eb8:	00403fb7 	.word	0x00403fb7
  403ebc:	00403f99 	.word	0x00403f99
  403ec0:	00403fb7 	.word	0x00403fb7
  403ec4:	00403fb7 	.word	0x00403fb7
	{
		case TEST_PROXIMITY_SENSORS: //0xE4
		//6 Proximtiy Sensors (A-F) Identified by their Mux channels
		peripheralReturnData = Proximity_Data_Read(receivedTestData[0]);
  403ec8:	4b45      	ldr	r3, [pc, #276]	; (403fe0 <testManager+0x18c>)
  403eca:	781b      	ldrb	r3, [r3, #0]
  403ecc:	4618      	mov	r0, r3
  403ece:	4b46      	ldr	r3, [pc, #280]	; (403fe8 <testManager+0x194>)
  403ed0:	4798      	blx	r3
  403ed2:	4603      	mov	r3, r0
  403ed4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		transmitTestData[1] = receivedTestData[0];//Transmit the specific proximity sensor ID
  403ed8:	4b41      	ldr	r3, [pc, #260]	; (403fe0 <testManager+0x18c>)
  403eda:	781b      	ldrb	r3, [r3, #0]
  403edc:	757b      	strb	r3, [r7, #21]
		transmitTestData[2] = DATA_RETURN; //sending data out
  403ede:	2300      	movs	r3, #0
  403ee0:	75bb      	strb	r3, [r7, #22]
		transmitTestData[3] = peripheralReturnData >> 8; //upper data byte
  403ee2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  403ee6:	0a1b      	lsrs	r3, r3, #8
  403ee8:	b29b      	uxth	r3, r3
  403eea:	b2db      	uxtb	r3, r3
  403eec:	75fb      	strb	r3, [r7, #23]
		transmitTestData[4] = peripheralReturnData & 0xFF; //lower data byte
  403eee:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  403ef2:	b2db      	uxtb	r3, r3
  403ef4:	763b      	strb	r3, [r7, #24]
		transmitTestDataSize = 5;
  403ef6:	2305      	movs	r3, #5
  403ef8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
  403efc:	e05b      	b.n	403fb6 <testManager+0x162>
		
		case TEST_LIGHT_SENSORS:
		//2 Light Sensors (LHS & RHS) Identified by their Mux channels
		peripheralReturnData = LightSensor_Data_Read(receivedTestData[0]);
  403efe:	4b38      	ldr	r3, [pc, #224]	; (403fe0 <testManager+0x18c>)
  403f00:	781b      	ldrb	r3, [r3, #0]
  403f02:	4618      	mov	r0, r3
  403f04:	4b39      	ldr	r3, [pc, #228]	; (403fec <testManager+0x198>)
  403f06:	4798      	blx	r3
  403f08:	4603      	mov	r3, r0
  403f0a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		transmitTestData[1] = receivedTestData[0];//Transmit the specific light sensor ID
  403f0e:	4b34      	ldr	r3, [pc, #208]	; (403fe0 <testManager+0x18c>)
  403f10:	781b      	ldrb	r3, [r3, #0]
  403f12:	757b      	strb	r3, [r7, #21]
		transmitTestData[2] = DATA_RETURN; //sending data out
  403f14:	2300      	movs	r3, #0
  403f16:	75bb      	strb	r3, [r7, #22]
		transmitTestData[3] = peripheralReturnData >> 8; //upper byte
  403f18:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  403f1c:	0a1b      	lsrs	r3, r3, #8
  403f1e:	b29b      	uxth	r3, r3
  403f20:	b2db      	uxtb	r3, r3
  403f22:	75fb      	strb	r3, [r7, #23]
		transmitTestData[4] = peripheralReturnData & 0xFF; //lower byte
  403f24:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  403f28:	b2db      	uxtb	r3, r3
  403f2a:	763b      	strb	r3, [r7, #24]
		transmitTestDataSize = 5;
  403f2c:	2305      	movs	r3, #5
  403f2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
  403f32:	e040      	b.n	403fb6 <testManager+0x162>
		
		case TEST_MOTORS:
		//3 Motors (1:0x01, 2:0x02, 3:0x03)
		//The motors need to be turned on individually at a set direction and speed as commanded by the PC
		//This is done with a different setTestMotors function, found in motorDriver.c
		setTestMotors(receivedTestData); //Turn on the require motor at the set speed and direction
  403f34:	482a      	ldr	r0, [pc, #168]	; (403fe0 <testManager+0x18c>)
  403f36:	4b2e      	ldr	r3, [pc, #184]	; (403ff0 <testManager+0x19c>)
  403f38:	4798      	blx	r3
		transmitTestData[1] = receivedTestData[0];//Transmit the specific motor ID
  403f3a:	4b29      	ldr	r3, [pc, #164]	; (403fe0 <testManager+0x18c>)
  403f3c:	781b      	ldrb	r3, [r3, #0]
  403f3e:	757b      	strb	r3, [r7, #21]
		transmitTestData[2] = DATA_RETURN; //Sending Data Out
  403f40:	2300      	movs	r3, #0
  403f42:	75bb      	strb	r3, [r7, #22]
		transmitTestData[3] = receivedTestData[2];//Echo's the command
  403f44:	4b26      	ldr	r3, [pc, #152]	; (403fe0 <testManager+0x18c>)
  403f46:	789b      	ldrb	r3, [r3, #2]
  403f48:	75fb      	strb	r3, [r7, #23]
		//TO DO: instead of echo read what motor is on with direction and speed and return it
		//TO DO: turn off motors after test is finished 
		transmitTestDataSize = 4;
  403f4a:	2304      	movs	r3, #4
  403f4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

		break;
  403f50:	e031      	b.n	403fb6 <testManager+0x162>
		
		case TEST_MOUSE_SENSOR:
		//Only 1 mouse sensor just trying to attain dx & dy
		//getMouseXY will will the structure testPosition (using pointers) with dx and dy
		getMouseXY(&testPosition);
  403f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
  403f56:	4618      	mov	r0, r3
  403f58:	4b26      	ldr	r3, [pc, #152]	; (403ff4 <testManager+0x1a0>)
  403f5a:	4798      	blx	r3
		transmitTestData[1] = DATA_RETURN; //sending data out
  403f5c:	2300      	movs	r3, #0
  403f5e:	757b      	strb	r3, [r7, #21]
		transmitTestData[2] = testPosition.opticaldx >> 8; //upper byte
  403f60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
  403f64:	0a1b      	lsrs	r3, r3, #8
  403f66:	b29b      	uxth	r3, r3
  403f68:	b2db      	uxtb	r3, r3
  403f6a:	75bb      	strb	r3, [r7, #22]
		transmitTestData[3] = testPosition.opticaldx & 0xFF; //lower byte
  403f6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
  403f70:	b2db      	uxtb	r3, r3
  403f72:	75fb      	strb	r3, [r7, #23]
		transmitTestData[4] = testPosition.opticaldy >> 8; //upper byte
  403f74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
  403f78:	0a1b      	lsrs	r3, r3, #8
  403f7a:	b29b      	uxth	r3, r3
  403f7c:	b2db      	uxtb	r3, r3
  403f7e:	763b      	strb	r3, [r7, #24]
		transmitTestData[5] = testPosition.opticaldy & 0xFF; //lower byte
  403f80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
  403f84:	b2db      	uxtb	r3, r3
  403f86:	767b      	strb	r3, [r7, #25]
		transmitTestDataSize = 6;
  403f88:	2306      	movs	r3, #6
  403f8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
  403f8e:	e012      	b.n	403fb6 <testManager+0x162>
		transmitTestData[5] = testPosition.IMUqx & 0xFF;	//lower byte
		transmitTestData[6] = testPosition.IMUqy >> 8;		//upper byte
		transmitTestData[7] = testPosition.IMUqy & 0xFF;	//lower byte
		transmitTestData[8] = testPosition.IMUqz >> 8;		//upper byte
		transmitTestData[9] = testPosition.IMUqz & 0xFF;	//lower byte*/
		transmitTestDataSize = 10;
  403f90:	230a      	movs	r3, #10
  403f92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
  403f96:	e00e      	b.n	403fb6 <testManager+0x162>
		
		case TEST_TWI_MULTIPLEXOR:
		//To test the Mux the channel is changed to one set by the PC
		//Then the channel is read off the Mux it should match what was instructed
		//Matching will be checked on the PC side, will appear as an echo if test passes		
		TWI0_MuxSwitch(receivedTestData[1]);//Set the Mux to the specified channel
  403f98:	4b11      	ldr	r3, [pc, #68]	; (403fe0 <testManager+0x18c>)
  403f9a:	785b      	ldrb	r3, [r3, #1]
  403f9c:	4618      	mov	r0, r3
  403f9e:	4b16      	ldr	r3, [pc, #88]	; (403ff8 <testManager+0x1a4>)
  403fa0:	4798      	blx	r3
		transmitTestData[1] = DATA_RETURN;//sending data out
  403fa2:	2300      	movs	r3, #0
  403fa4:	757b      	strb	r3, [r7, #21]
		transmitTestData[2] = TWI0_ReadMuxChannel();//Return the channel the Mux is currently set to
  403fa6:	4b15      	ldr	r3, [pc, #84]	; (403ffc <testManager+0x1a8>)
  403fa8:	4798      	blx	r3
  403faa:	4603      	mov	r3, r0
  403fac:	75bb      	strb	r3, [r7, #22]
		transmitTestDataSize = 3;
  403fae:	2303      	movs	r3, #3
  403fb0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
  403fb4:	bf00      	nop
		case TEST_CAMERA:
		//TO DO Adam & Brae
		break;

	}
	SendXbeeAPITransmitRequest(BROADCAST_64,UNKNOWN_16,transmitTestData,transmitTestDataSize);  //Send the Message
  403fb6:	f107 0214 	add.w	r2, r7, #20
  403fba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
  403fbe:	9300      	str	r3, [sp, #0]
  403fc0:	4613      	mov	r3, r2
  403fc2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  403fc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
  403fca:	f04f 0100 	mov.w	r1, #0
  403fce:	4c0c      	ldr	r4, [pc, #48]	; (404000 <testManager+0x1ac>)
  403fd0:	47a0      	blx	r4
}
  403fd2:	bf00      	nop
  403fd4:	377c      	adds	r7, #124	; 0x7c
  403fd6:	46bd      	mov	sp, r7
  403fd8:	bd90      	pop	{r4, r7, pc}
  403fda:	bf00      	nop
  403fdc:	20000fc8 	.word	0x20000fc8
  403fe0:	200004bc 	.word	0x200004bc
  403fe4:	00404005 	.word	0x00404005
  403fe8:	00403e25 	.word	0x00403e25
  403fec:	00402d81 	.word	0x00402d81
  403ff0:	00403631 	.word	0x00403631
  403ff4:	00403889 	.word	0x00403889
  403ff8:	004040f1 	.word	0x004040f1
  403ffc:	00404159 	.word	0x00404159
  404000:	004006b1 	.word	0x004006b1

00404004 <convertData>:
* The Message Buffer Get function returns 0 for success and -1 for failure
* This function will quit on a failed return
*
*/
void convertData(struct message_info message, char *data)
{
  404004:	b590      	push	{r4, r7, lr}
  404006:	b087      	sub	sp, #28
  404008:	af00      	add	r7, sp, #0
  40400a:	1d3c      	adds	r4, r7, #4
  40400c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  404010:	603b      	str	r3, [r7, #0]
	char dataByte;
	char messageError;
	MessageBufferOut = message.index;//sets message buffer reader to correct start address
  404012:	687b      	ldr	r3, [r7, #4]
  404014:	4a0f      	ldr	r2, [pc, #60]	; (404054 <convertData+0x50>)
  404016:	6013      	str	r3, [r2, #0]
	for (char i = 0; i < message.length; i++)//for each entry in the array
  404018:	2300      	movs	r3, #0
  40401a:	75fb      	strb	r3, [r7, #23]
  40401c:	e011      	b.n	404042 <convertData+0x3e>
	{
		messageError = MessageBufferGet(&dataByte);//retrieve the next byte of received message data
  40401e:	f107 0315 	add.w	r3, r7, #21
  404022:	4618      	mov	r0, r3
  404024:	4b0c      	ldr	r3, [pc, #48]	; (404058 <convertData+0x54>)
  404026:	4798      	blx	r3
  404028:	4603      	mov	r3, r0
  40402a:	75bb      	strb	r3, [r7, #22]
		if(messageError == 0)//if there was NO error
  40402c:	7dbb      	ldrb	r3, [r7, #22]
  40402e:	2b00      	cmp	r3, #0
  404030:	d10c      	bne.n	40404c <convertData+0x48>
		{
			data[i] = dataByte;//fill the array with the data
  404032:	7dfb      	ldrb	r3, [r7, #23]
  404034:	683a      	ldr	r2, [r7, #0]
  404036:	4413      	add	r3, r2
  404038:	7d7a      	ldrb	r2, [r7, #21]
  40403a:	701a      	strb	r2, [r3, #0]
void convertData(struct message_info message, char *data)
{
	char dataByte;
	char messageError;
	MessageBufferOut = message.index;//sets message buffer reader to correct start address
	for (char i = 0; i < message.length; i++)//for each entry in the array
  40403c:	7dfb      	ldrb	r3, [r7, #23]
  40403e:	3301      	adds	r3, #1
  404040:	75fb      	strb	r3, [r7, #23]
  404042:	7dfa      	ldrb	r2, [r7, #23]
  404044:	68fb      	ldr	r3, [r7, #12]
  404046:	429a      	cmp	r2, r3
  404048:	dbe9      	blt.n	40401e <convertData+0x1a>
  40404a:	e000      	b.n	40404e <convertData+0x4a>
		{
			data[i] = dataByte;//fill the array with the data
		}
		else//if there was an error, exit
		//TO DO: prehaps add some sort of error flagging system??
			return;
  40404c:	bf00      	nop
	}
}
  40404e:	371c      	adds	r7, #28
  404050:	46bd      	mov	sp, r7
  404052:	bd90      	pop	{r4, r7, pc}
  404054:	20000b58 	.word	0x20000b58
  404058:	00400b65 	.word	0x00400b65

0040405c <twi0Init>:
#include "twimux_interface.h"

//Initialise the TWI0 hardware. No Parameters
//Update to new code format necessary
void twi0Init(void)
{
  40405c:	b480      	push	{r7}
  40405e:	b083      	sub	sp, #12
  404060:	af00      	add	r7, sp, #0
	/******** TWI0 SETUP ********/
	REG_PMC_PCER0 |= (1<<19);				//Enable clock access to TWI0, Peripheral TWI0_ID = 19
  404062:	4a1e      	ldr	r2, [pc, #120]	; (4040dc <twi0Init+0x80>)
  404064:	4b1d      	ldr	r3, [pc, #116]	; (4040dc <twi0Init+0x80>)
  404066:	681b      	ldr	r3, [r3, #0]
  404068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  40406c:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR  |= (1<<3);				// Enable peripheralA control of PA3 (TWD0)
  40406e:	4a1c      	ldr	r2, [pc, #112]	; (4040e0 <twi0Init+0x84>)
  404070:	4b1b      	ldr	r3, [pc, #108]	; (4040e0 <twi0Init+0x84>)
  404072:	681b      	ldr	r3, [r3, #0]
  404074:	f043 0308 	orr.w	r3, r3, #8
  404078:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR  |= (1<<4);				// Enable peripheralA control of PA4 (TWCK0)
  40407a:	4a19      	ldr	r2, [pc, #100]	; (4040e0 <twi0Init+0x84>)
  40407c:	4b18      	ldr	r3, [pc, #96]	; (4040e0 <twi0Init+0x84>)
  40407e:	681b      	ldr	r3, [r3, #0]
  404080:	f043 0310 	orr.w	r3, r3, #16
  404084:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR = (1<<7);					//Software Reset
  404086:	4b17      	ldr	r3, [pc, #92]	; (4040e4 <twi0Init+0x88>)
  404088:	2280      	movs	r2, #128	; 0x80
  40408a:	601a      	str	r2, [r3, #0]
	/* TWI0 Clock Waveform Setup */
	//NOTE: A high period of 0.6uSec and a low period of 1.3uSec is required by both the Proximity and Light Sensors
	uint8_t CKDIV, CHDIV, CLDIV;
	CKDIV = 1;
  40408c:	2301      	movs	r3, #1
  40408e:	71fb      	strb	r3, [r7, #7]
	CLDIV = 63;								//x=63 1.3uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
  404090:	233f      	movs	r3, #63	; 0x3f
  404092:	71bb      	strb	r3, [r7, #6]
	CHDIV = 28;								//x=28, 0.6uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
  404094:	231c      	movs	r3, #28
  404096:	717b      	strb	r3, [r7, #5]
	REG_TWI0_CWGR |= (CKDIV<<16);			//Clock speed 400000, fast mode
  404098:	4913      	ldr	r1, [pc, #76]	; (4040e8 <twi0Init+0x8c>)
  40409a:	4b13      	ldr	r3, [pc, #76]	; (4040e8 <twi0Init+0x8c>)
  40409c:	681b      	ldr	r3, [r3, #0]
  40409e:	79fa      	ldrb	r2, [r7, #7]
  4040a0:	0412      	lsls	r2, r2, #16
  4040a2:	4313      	orrs	r3, r2
  4040a4:	600b      	str	r3, [r1, #0]
	REG_TWI0_CWGR |= (CHDIV<<8);			//Clock high period  0.6uSec
  4040a6:	4910      	ldr	r1, [pc, #64]	; (4040e8 <twi0Init+0x8c>)
  4040a8:	4b0f      	ldr	r3, [pc, #60]	; (4040e8 <twi0Init+0x8c>)
  4040aa:	681b      	ldr	r3, [r3, #0]
  4040ac:	797a      	ldrb	r2, [r7, #5]
  4040ae:	0212      	lsls	r2, r2, #8
  4040b0:	4313      	orrs	r3, r2
  4040b2:	600b      	str	r3, [r1, #0]
	REG_TWI0_CWGR |= (CLDIV<<0);			//Clock low period 1.3uSec
  4040b4:	490c      	ldr	r1, [pc, #48]	; (4040e8 <twi0Init+0x8c>)
  4040b6:	4b0c      	ldr	r3, [pc, #48]	; (4040e8 <twi0Init+0x8c>)
  4040b8:	681a      	ldr	r2, [r3, #0]
  4040ba:	79bb      	ldrb	r3, [r7, #6]
  4040bc:	4313      	orrs	r3, r2
  4040be:	600b      	str	r3, [r1, #0]
	REG_TWI0_CR |= (1<<2)|(1<<5);			//Master mode enabled, Slave disabled
  4040c0:	4a08      	ldr	r2, [pc, #32]	; (4040e4 <twi0Init+0x88>)
  4040c2:	4b08      	ldr	r3, [pc, #32]	; (4040e4 <twi0Init+0x88>)
  4040c4:	681b      	ldr	r3, [r3, #0]
  4040c6:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  4040ca:	6013      	str	r3, [r2, #0]
	uint8_t dummy = REG_TWI0_RHR;			//Ensure RXRDY flag is cleared
  4040cc:	4b07      	ldr	r3, [pc, #28]	; (4040ec <twi0Init+0x90>)
  4040ce:	681b      	ldr	r3, [r3, #0]
  4040d0:	713b      	strb	r3, [r7, #4]
}
  4040d2:	bf00      	nop
  4040d4:	370c      	adds	r7, #12
  4040d6:	46bd      	mov	sp, r7
  4040d8:	bc80      	pop	{r7}
  4040da:	4770      	bx	lr
  4040dc:	400e0410 	.word	0x400e0410
  4040e0:	400e0e04 	.word	0x400e0e04
  4040e4:	40018000 	.word	0x40018000
  4040e8:	40018010 	.word	0x40018010
  4040ec:	40018030 	.word	0x40018030

004040f0 <TWI0_MuxSwitch>:

/******** TWI0 Multiplexer Channel Select ********/
//Sets the Multiplexer to desired channel. Can put called by the user but is mostly called by other functions
void TWI0_MuxSwitch(uint8_t channel)
{
  4040f0:	b480      	push	{r7}
  4040f2:	b083      	sub	sp, #12
  4040f4:	af00      	add	r7, sp, #0
  4040f6:	4603      	mov	r3, r0
  4040f8:	71fb      	strb	r3, [r7, #7]
	REG_TWI0_CR |= (1<<2)|(1<<5);			//Master mode enabled, Slave disabled
  4040fa:	4a13      	ldr	r2, [pc, #76]	; (404148 <TWI0_MuxSwitch+0x58>)
  4040fc:	4b12      	ldr	r3, [pc, #72]	; (404148 <TWI0_MuxSwitch+0x58>)
  4040fe:	681b      	ldr	r3, [r3, #0]
  404100:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  404104:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (TWI0_Mux_Address<<16);	//Set Slave Device address
  404106:	4b11      	ldr	r3, [pc, #68]	; (40414c <TWI0_MuxSwitch+0x5c>)
  404108:	f44f 0260 	mov.w	r2, #14680064	; 0xe00000
  40410c:	601a      	str	r2, [r3, #0]
	//No internal address and set to master write mode by default of zero
	REG_TWI0_THR = channel;					//Load THR and writing to THR causes start to be sent
  40410e:	4a10      	ldr	r2, [pc, #64]	; (404150 <TWI0_MuxSwitch+0x60>)
  404110:	79fb      	ldrb	r3, [r7, #7]
  404112:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR |= (1<<1);					//Set STOP bit after tx
  404114:	4a0c      	ldr	r2, [pc, #48]	; (404148 <TWI0_MuxSwitch+0x58>)
  404116:	4b0c      	ldr	r3, [pc, #48]	; (404148 <TWI0_MuxSwitch+0x58>)
  404118:	681b      	ldr	r3, [r3, #0]
  40411a:	f043 0302 	orr.w	r3, r3, #2
  40411e:	6013      	str	r3, [r2, #0]
	while(!(twi0TXRDY));					//wait for start and data to be shifted out of holding register
  404120:	bf00      	nop
  404122:	4b0c      	ldr	r3, [pc, #48]	; (404154 <TWI0_MuxSwitch+0x64>)
  404124:	681b      	ldr	r3, [r3, #0]
  404126:	f003 0304 	and.w	r3, r3, #4
  40412a:	2b00      	cmp	r3, #0
  40412c:	d0f9      	beq.n	404122 <TWI0_MuxSwitch+0x32>
	while(!(twi0TXCOMP));					//Communication complete, holding and shifting registers empty, Stop sent
  40412e:	bf00      	nop
  404130:	4b08      	ldr	r3, [pc, #32]	; (404154 <TWI0_MuxSwitch+0x64>)
  404132:	681b      	ldr	r3, [r3, #0]
  404134:	f003 0301 	and.w	r3, r3, #1
  404138:	2b00      	cmp	r3, #0
  40413a:	d0f9      	beq.n	404130 <TWI0_MuxSwitch+0x40>
}
  40413c:	bf00      	nop
  40413e:	370c      	adds	r7, #12
  404140:	46bd      	mov	sp, r7
  404142:	bc80      	pop	{r7}
  404144:	4770      	bx	lr
  404146:	bf00      	nop
  404148:	40018000 	.word	0x40018000
  40414c:	40018004 	.word	0x40018004
  404150:	40018034 	.word	0x40018034
  404154:	40018020 	.word	0x40018020

00404158 <TWI0_ReadMuxChannel>:

/******** TWI0 Multiplexer Channel Read ********/
//Allows read back of the currently selected Multiplexer channel
uint8_t TWI0_ReadMuxChannel(void)
{
  404158:	b480      	push	{r7}
  40415a:	b083      	sub	sp, #12
  40415c:	af00      	add	r7, sp, #0
	/*** This read function tells you the selected Mux channel (8 bits of data, no internal address) ***/
	uint8_t data;
	REG_TWI0_CR |= (1<<2)|(1<<5);			//Enable master mode and disable slave mode
  40415e:	4a15      	ldr	r2, [pc, #84]	; (4041b4 <TWI0_ReadMuxChannel+0x5c>)
  404160:	4b14      	ldr	r3, [pc, #80]	; (4041b4 <TWI0_ReadMuxChannel+0x5c>)
  404162:	681b      	ldr	r3, [r3, #0]
  404164:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  404168:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (TWI0_Mux_Address<<16);	//Device Slave address
  40416a:	4b13      	ldr	r3, [pc, #76]	; (4041b8 <TWI0_ReadMuxChannel+0x60>)
  40416c:	f44f 0260 	mov.w	r2, #14680064	; 0xe00000
  404170:	601a      	str	r2, [r3, #0]
	REG_TWI0_MMR |= (1<<12);				//Master read direction = 1
  404172:	4a11      	ldr	r2, [pc, #68]	; (4041b8 <TWI0_ReadMuxChannel+0x60>)
  404174:	4b10      	ldr	r3, [pc, #64]	; (4041b8 <TWI0_ReadMuxChannel+0x60>)
  404176:	681b      	ldr	r3, [r3, #0]
  404178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40417c:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR = 0x3;						//Send a START|STOP bit as required (single byte read)
  40417e:	4b0d      	ldr	r3, [pc, #52]	; (4041b4 <TWI0_ReadMuxChannel+0x5c>)
  404180:	2203      	movs	r2, #3
  404182:	601a      	str	r2, [r3, #0]
	while(!(twi0RXRDY));					//While Receive Holding Register not ready. wait.
  404184:	bf00      	nop
  404186:	4b0d      	ldr	r3, [pc, #52]	; (4041bc <TWI0_ReadMuxChannel+0x64>)
  404188:	681b      	ldr	r3, [r3, #0]
  40418a:	f003 0302 	and.w	r3, r3, #2
  40418e:	2b00      	cmp	r3, #0
  404190:	d0f9      	beq.n	404186 <TWI0_ReadMuxChannel+0x2e>
	data = REG_TWI0_RHR;					//Store data received
  404192:	4b0b      	ldr	r3, [pc, #44]	; (4041c0 <TWI0_ReadMuxChannel+0x68>)
  404194:	681b      	ldr	r3, [r3, #0]
  404196:	71fb      	strb	r3, [r7, #7]
	while(!(twi0TXCOMP));					//Wait for transmission complete
  404198:	bf00      	nop
  40419a:	4b08      	ldr	r3, [pc, #32]	; (4041bc <TWI0_ReadMuxChannel+0x64>)
  40419c:	681b      	ldr	r3, [r3, #0]
  40419e:	f003 0301 	and.w	r3, r3, #1
  4041a2:	2b00      	cmp	r3, #0
  4041a4:	d0f9      	beq.n	40419a <TWI0_ReadMuxChannel+0x42>
	return data;
  4041a6:	79fb      	ldrb	r3, [r7, #7]
}
  4041a8:	4618      	mov	r0, r3
  4041aa:	370c      	adds	r7, #12
  4041ac:	46bd      	mov	sp, r7
  4041ae:	bc80      	pop	{r7}
  4041b0:	4770      	bx	lr
  4041b2:	bf00      	nop
  4041b4:	40018000 	.word	0x40018000
  4041b8:	40018004 	.word	0x40018004
  4041bc:	40018020 	.word	0x40018020
  4041c0:	40018030 	.word	0x40018030

004041c4 <TWI0_Write>:

/******** TWI0 Write ********/
void TWI0_Write(uint8_t SlaveAddress, uint8_t intAddress, uint8_t Data)
{
  4041c4:	b480      	push	{r7}
  4041c6:	b083      	sub	sp, #12
  4041c8:	af00      	add	r7, sp, #0
  4041ca:	4603      	mov	r3, r0
  4041cc:	71fb      	strb	r3, [r7, #7]
  4041ce:	460b      	mov	r3, r1
  4041d0:	71bb      	strb	r3, [r7, #6]
  4041d2:	4613      	mov	r3, r2
  4041d4:	717b      	strb	r3, [r7, #5]
	REG_TWI0_CR |= (1<<2)|(1<<5);		//Enable master mode and disable slave mode
  4041d6:	4a17      	ldr	r2, [pc, #92]	; (404234 <TWI0_Write+0x70>)
  4041d8:	4b16      	ldr	r3, [pc, #88]	; (404234 <TWI0_Write+0x70>)
  4041da:	681b      	ldr	r3, [r3, #0]
  4041dc:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  4041e0:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (SlaveAddress<<16);	//Slave address (eg. Mux or Fast Charge Chip)
  4041e2:	4a15      	ldr	r2, [pc, #84]	; (404238 <TWI0_Write+0x74>)
  4041e4:	79fb      	ldrb	r3, [r7, #7]
  4041e6:	041b      	lsls	r3, r3, #16
  4041e8:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR |= (1<<8);				//Set one-byte internal device address
  4041ea:	4a13      	ldr	r2, [pc, #76]	; (404238 <TWI0_Write+0x74>)
  4041ec:	4b12      	ldr	r3, [pc, #72]	; (404238 <TWI0_Write+0x74>)
  4041ee:	681b      	ldr	r3, [r3, #0]
  4041f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4041f4:	6013      	str	r3, [r2, #0]
	//Master write direction default by 0
	REG_TWI0_IADR = intAddress;			//Set up the address to write to
  4041f6:	4a11      	ldr	r2, [pc, #68]	; (40423c <TWI0_Write+0x78>)
  4041f8:	79bb      	ldrb	r3, [r7, #6]
  4041fa:	6013      	str	r3, [r2, #0]
	REG_TWI0_THR = Data;				//Load the transmit holding register with data to send (start bit is also sent)
  4041fc:	4a10      	ldr	r2, [pc, #64]	; (404240 <TWI0_Write+0x7c>)
  4041fe:	797b      	ldrb	r3, [r7, #5]
  404200:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR |= (1<<1);				//Set the STOP bit
  404202:	4a0c      	ldr	r2, [pc, #48]	; (404234 <TWI0_Write+0x70>)
  404204:	4b0b      	ldr	r3, [pc, #44]	; (404234 <TWI0_Write+0x70>)
  404206:	681b      	ldr	r3, [r3, #0]
  404208:	f043 0302 	orr.w	r3, r3, #2
  40420c:	6013      	str	r3, [r2, #0]
	while(!(twi0TXRDY));				//while Transmit Holding Register not ready. wait.
  40420e:	bf00      	nop
  404210:	4b0c      	ldr	r3, [pc, #48]	; (404244 <TWI0_Write+0x80>)
  404212:	681b      	ldr	r3, [r3, #0]
  404214:	f003 0304 	and.w	r3, r3, #4
  404218:	2b00      	cmp	r3, #0
  40421a:	d0f9      	beq.n	404210 <TWI0_Write+0x4c>
	while(!(twi0TXCOMP));				//while transmit not complete. wait.
  40421c:	bf00      	nop
  40421e:	4b09      	ldr	r3, [pc, #36]	; (404244 <TWI0_Write+0x80>)
  404220:	681b      	ldr	r3, [r3, #0]
  404222:	f003 0301 	and.w	r3, r3, #1
  404226:	2b00      	cmp	r3, #0
  404228:	d0f9      	beq.n	40421e <TWI0_Write+0x5a>
}
  40422a:	bf00      	nop
  40422c:	370c      	adds	r7, #12
  40422e:	46bd      	mov	sp, r7
  404230:	bc80      	pop	{r7}
  404232:	4770      	bx	lr
  404234:	40018000 	.word	0x40018000
  404238:	40018004 	.word	0x40018004
  40423c:	4001800c 	.word	0x4001800c
  404240:	40018034 	.word	0x40018034
  404244:	40018020 	.word	0x40018020

00404248 <TWI0_ReadDB>:
}

/******** TWI0 Read - Double Byte ********/
//This read function is for peripherals with 16 bits of data and an internal address
uint16_t TWI0_ReadDB(uint8_t SlaveAddress, uint8_t intAddress)
{
  404248:	b480      	push	{r7}
  40424a:	b085      	sub	sp, #20
  40424c:	af00      	add	r7, sp, #0
  40424e:	4603      	mov	r3, r0
  404250:	460a      	mov	r2, r1
  404252:	71fb      	strb	r3, [r7, #7]
  404254:	4613      	mov	r3, r2
  404256:	71bb      	strb	r3, [r7, #6]
	uint8_t data1, data2;
	uint16_t data;
	REG_TWI0_CR |= (1<<2)|(1<<5);		//Enable master mode and disable slave mode
  404258:	4a26      	ldr	r2, [pc, #152]	; (4042f4 <TWI0_ReadDB+0xac>)
  40425a:	4b26      	ldr	r3, [pc, #152]	; (4042f4 <TWI0_ReadDB+0xac>)
  40425c:	681b      	ldr	r3, [r3, #0]
  40425e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  404262:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR = (SlaveAddress<<16);	//Device Slave address
  404264:	4a24      	ldr	r2, [pc, #144]	; (4042f8 <TWI0_ReadDB+0xb0>)
  404266:	79fb      	ldrb	r3, [r7, #7]
  404268:	041b      	lsls	r3, r3, #16
  40426a:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR |= (1<<8);				//Set one-byte internal device address
  40426c:	4a22      	ldr	r2, [pc, #136]	; (4042f8 <TWI0_ReadDB+0xb0>)
  40426e:	4b22      	ldr	r3, [pc, #136]	; (4042f8 <TWI0_ReadDB+0xb0>)
  404270:	681b      	ldr	r3, [r3, #0]
  404272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404276:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR |= (1<<12);			//Master read direction = 1
  404278:	4a1f      	ldr	r2, [pc, #124]	; (4042f8 <TWI0_ReadDB+0xb0>)
  40427a:	4b1f      	ldr	r3, [pc, #124]	; (4042f8 <TWI0_ReadDB+0xb0>)
  40427c:	681b      	ldr	r3, [r3, #0]
  40427e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  404282:	6013      	str	r3, [r2, #0]
	REG_TWI0_IADR = intAddress;			//Set up device internal address to read from
  404284:	4a1d      	ldr	r2, [pc, #116]	; (4042fc <TWI0_ReadDB+0xb4>)
  404286:	79bb      	ldrb	r3, [r7, #6]
  404288:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR |= (1<<0);				//Send a START bit as required (single byte read)
  40428a:	4a1a      	ldr	r2, [pc, #104]	; (4042f4 <TWI0_ReadDB+0xac>)
  40428c:	4b19      	ldr	r3, [pc, #100]	; (4042f4 <TWI0_ReadDB+0xac>)
  40428e:	681b      	ldr	r3, [r3, #0]
  404290:	f043 0301 	orr.w	r3, r3, #1
  404294:	6013      	str	r3, [r2, #0]
	while(!(twi0RXRDY));				//While Receive Holding Register not ready. wait.
  404296:	bf00      	nop
  404298:	4b19      	ldr	r3, [pc, #100]	; (404300 <TWI0_ReadDB+0xb8>)
  40429a:	681b      	ldr	r3, [r3, #0]
  40429c:	f003 0302 	and.w	r3, r3, #2
  4042a0:	2b00      	cmp	r3, #0
  4042a2:	d0f9      	beq.n	404298 <TWI0_ReadDB+0x50>
	data1 = REG_TWI0_RHR;				//Store data received (the lower byte of 16-bit data)
  4042a4:	4b17      	ldr	r3, [pc, #92]	; (404304 <TWI0_ReadDB+0xbc>)
  4042a6:	681b      	ldr	r3, [r3, #0]
  4042a8:	73fb      	strb	r3, [r7, #15]
	REG_TWI0_CR |= (1<<1);				//Set STOP bit as required
  4042aa:	4a12      	ldr	r2, [pc, #72]	; (4042f4 <TWI0_ReadDB+0xac>)
  4042ac:	4b11      	ldr	r3, [pc, #68]	; (4042f4 <TWI0_ReadDB+0xac>)
  4042ae:	681b      	ldr	r3, [r3, #0]
  4042b0:	f043 0302 	orr.w	r3, r3, #2
  4042b4:	6013      	str	r3, [r2, #0]
	while(!(twi0RXRDY));				//While Receive Holding Register not ready. wait.
  4042b6:	bf00      	nop
  4042b8:	4b11      	ldr	r3, [pc, #68]	; (404300 <TWI0_ReadDB+0xb8>)
  4042ba:	681b      	ldr	r3, [r3, #0]
  4042bc:	f003 0302 	and.w	r3, r3, #2
  4042c0:	2b00      	cmp	r3, #0
  4042c2:	d0f9      	beq.n	4042b8 <TWI0_ReadDB+0x70>
	data2 = REG_TWI0_RHR;				//Store data received (the upper byte of 16-bit data)
  4042c4:	4b0f      	ldr	r3, [pc, #60]	; (404304 <TWI0_ReadDB+0xbc>)
  4042c6:	681b      	ldr	r3, [r3, #0]
  4042c8:	73bb      	strb	r3, [r7, #14]
	while(!(twi0TXCOMP));				//While transmit not complete. wait.
  4042ca:	bf00      	nop
  4042cc:	4b0c      	ldr	r3, [pc, #48]	; (404300 <TWI0_ReadDB+0xb8>)
  4042ce:	681b      	ldr	r3, [r3, #0]
  4042d0:	f003 0301 	and.w	r3, r3, #1
  4042d4:	2b00      	cmp	r3, #0
  4042d6:	d0f9      	beq.n	4042cc <TWI0_ReadDB+0x84>
	data = (data2 << 8) | data1;		//Puts the two 8 bits into 16 bits
  4042d8:	7bbb      	ldrb	r3, [r7, #14]
  4042da:	021b      	lsls	r3, r3, #8
  4042dc:	b21a      	sxth	r2, r3
  4042de:	7bfb      	ldrb	r3, [r7, #15]
  4042e0:	b21b      	sxth	r3, r3
  4042e2:	4313      	orrs	r3, r2
  4042e4:	b21b      	sxth	r3, r3
  4042e6:	81bb      	strh	r3, [r7, #12]
	return data;
  4042e8:	89bb      	ldrh	r3, [r7, #12]
}
  4042ea:	4618      	mov	r0, r3
  4042ec:	3714      	adds	r7, #20
  4042ee:	46bd      	mov	sp, r7
  4042f0:	bc80      	pop	{r7}
  4042f2:	4770      	bx	lr
  4042f4:	40018000 	.word	0x40018000
  4042f8:	40018004 	.word	0x40018004
  4042fc:	4001800c 	.word	0x4001800c
  404300:	40018020 	.word	0x40018020
  404304:	40018030 	.word	0x40018030

00404308 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  404308:	b580      	push	{r7, lr}
  40430a:	b082      	sub	sp, #8
  40430c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40430e:	4b16      	ldr	r3, [pc, #88]	; (404368 <Reset_Handler+0x60>)
  404310:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  404312:	4b16      	ldr	r3, [pc, #88]	; (40436c <Reset_Handler+0x64>)
  404314:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  404316:	687a      	ldr	r2, [r7, #4]
  404318:	683b      	ldr	r3, [r7, #0]
  40431a:	429a      	cmp	r2, r3
  40431c:	d00c      	beq.n	404338 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40431e:	e007      	b.n	404330 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  404320:	683b      	ldr	r3, [r7, #0]
  404322:	1d1a      	adds	r2, r3, #4
  404324:	603a      	str	r2, [r7, #0]
  404326:	687a      	ldr	r2, [r7, #4]
  404328:	1d11      	adds	r1, r2, #4
  40432a:	6079      	str	r1, [r7, #4]
  40432c:	6812      	ldr	r2, [r2, #0]
  40432e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  404330:	683b      	ldr	r3, [r7, #0]
  404332:	4a0f      	ldr	r2, [pc, #60]	; (404370 <Reset_Handler+0x68>)
  404334:	4293      	cmp	r3, r2
  404336:	d3f3      	bcc.n	404320 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404338:	4b0e      	ldr	r3, [pc, #56]	; (404374 <Reset_Handler+0x6c>)
  40433a:	603b      	str	r3, [r7, #0]
  40433c:	e004      	b.n	404348 <Reset_Handler+0x40>
                *pDest++ = 0;
  40433e:	683b      	ldr	r3, [r7, #0]
  404340:	1d1a      	adds	r2, r3, #4
  404342:	603a      	str	r2, [r7, #0]
  404344:	2200      	movs	r2, #0
  404346:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404348:	683b      	ldr	r3, [r7, #0]
  40434a:	4a0b      	ldr	r2, [pc, #44]	; (404378 <Reset_Handler+0x70>)
  40434c:	4293      	cmp	r3, r2
  40434e:	d3f6      	bcc.n	40433e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  404350:	4b0a      	ldr	r3, [pc, #40]	; (40437c <Reset_Handler+0x74>)
  404352:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404354:	4a0a      	ldr	r2, [pc, #40]	; (404380 <Reset_Handler+0x78>)
  404356:	687b      	ldr	r3, [r7, #4]
  404358:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40435c:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  40435e:	4b09      	ldr	r3, [pc, #36]	; (404384 <Reset_Handler+0x7c>)
  404360:	4798      	blx	r3

        /* Branch to main function */
        main();
  404362:	4b09      	ldr	r3, [pc, #36]	; (404388 <Reset_Handler+0x80>)
  404364:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  404366:	e7fe      	b.n	404366 <Reset_Handler+0x5e>
  404368:	00407dcc 	.word	0x00407dcc
  40436c:	20000000 	.word	0x20000000
  404370:	20000470 	.word	0x20000470
  404374:	20000470 	.word	0x20000470
  404378:	20000fd0 	.word	0x20000fd0
  40437c:	00400000 	.word	0x00400000
  404380:	e000ed00 	.word	0xe000ed00
  404384:	004069a9 	.word	0x004069a9
  404388:	004043c5 	.word	0x004043c5

0040438c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40438c:	b480      	push	{r7}
  40438e:	af00      	add	r7, sp, #0
        while (1) {
        }
  404390:	e7fe      	b.n	404390 <Dummy_Handler+0x4>
  404392:	bf00      	nop

00404394 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  404394:	b480      	push	{r7}
  404396:	b083      	sub	sp, #12
  404398:	af00      	add	r7, sp, #0
  40439a:	4603      	mov	r3, r0
  40439c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40439e:	4908      	ldr	r1, [pc, #32]	; (4043c0 <NVIC_EnableIRQ+0x2c>)
  4043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4043a4:	095b      	lsrs	r3, r3, #5
  4043a6:	79fa      	ldrb	r2, [r7, #7]
  4043a8:	f002 021f 	and.w	r2, r2, #31
  4043ac:	2001      	movs	r0, #1
  4043ae:	fa00 f202 	lsl.w	r2, r0, r2
  4043b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4043b6:	bf00      	nop
  4043b8:	370c      	adds	r7, #12
  4043ba:	46bd      	mov	sp, r7
  4043bc:	bc80      	pop	{r7}
  4043be:	4770      	bx	lr
  4043c0:	e000e100 	.word	0xe000e100

004043c4 <main>:
/******** Global Variables ********/
uint8_t SBtest, SBtest1;
uint16_t DBtest, DBtest1, DBtest2;

int main(void)
{
  4043c4:	b580      	push	{r7, lr}
  4043c6:	b090      	sub	sp, #64	; 0x40
  4043c8:	af00      	add	r7, sp, #0
	setup();
  4043ca:	4b24      	ldr	r3, [pc, #144]	; (40445c <main+0x98>)
  4043cc:	4798      	blx	r3
	//Comms
	struct frame_info frame;
	struct message_info message;
	//Optical
	struct Position robotPosition;
	robotPosition.x = 0;
  4043ce:	f04f 0300 	mov.w	r3, #0
  4043d2:	61fb      	str	r3, [r7, #28]
	robotPosition.y = 0;
  4043d4:	f04f 0300 	mov.w	r3, #0
  4043d8:	623b      	str	r3, [r7, #32]
	while(1)
	{
		switch (robotState)
  4043da:	4b21      	ldr	r3, [pc, #132]	; (404460 <main+0x9c>)
  4043dc:	781b      	ldrb	r3, [r3, #0]
  4043de:	2b05      	cmp	r3, #5
  4043e0:	d81f      	bhi.n	404422 <main+0x5e>
  4043e2:	a201      	add	r2, pc, #4	; (adr r2, 4043e8 <main+0x24>)
  4043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4043e8:	00404401 	.word	0x00404401
  4043ec:	00404423 	.word	0x00404423
  4043f0:	00404423 	.word	0x00404423
  4043f4:	00404423 	.word	0x00404423
  4043f8:	0040441d 	.word	0x0040441d
  4043fc:	00404423 	.word	0x00404423
		{
			case TEST:
			if(message.command == STOP_STREAMING)
  404400:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  404404:	2bff      	cmp	r3, #255	; 0xff
  404406:	d102      	bne.n	40440e <main+0x4a>
				robotState = IDLE;
  404408:	4b15      	ldr	r3, [pc, #84]	; (404460 <main+0x9c>)
  40440a:	2205      	movs	r2, #5
  40440c:	701a      	strb	r2, [r3, #0]
			if(streamIntervalFlag)
				testManager(message);	
  40440e:	f107 0328 	add.w	r3, r7, #40	; 0x28
  404412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404416:	4b13      	ldr	r3, [pc, #76]	; (404464 <main+0xa0>)
  404418:	4798      	blx	r3
			break;
  40441a:	e002      	b.n	404422 <main+0x5e>
			case MANUAL:
			break;
			
			case DOCKING:
			//if battery low or manual command set
				dockRobot();
  40441c:	4b12      	ldr	r3, [pc, #72]	; (404468 <main+0xa4>)
  40441e:	4798      	blx	r3
			break;
  404420:	bf00      	nop
			case IDLE:
			//idle
			break;
		}
		
		if(FrameBufferInfoGetFull(&frame) == 0)	//Check for a received XBee Message
  404422:	f107 0334 	add.w	r3, r7, #52	; 0x34
  404426:	4618      	mov	r0, r3
  404428:	4b10      	ldr	r3, [pc, #64]	; (40446c <main+0xa8>)
  40442a:	4798      	blx	r3
  40442c:	4603      	mov	r3, r0
  40442e:	2b00      	cmp	r3, #0
  404430:	d1d3      	bne.n	4043da <main+0x16>
		{
			InterpretXbeeAPIFrame(frame); //Interpret the received XBee Message
  404432:	f107 0334 	add.w	r3, r7, #52	; 0x34
  404436:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40443a:	4b0d      	ldr	r3, [pc, #52]	; (404470 <main+0xac>)
  40443c:	4798      	blx	r3

			if(MessageBufferInfoGetFull(&message) == 0) //Check for a message from the swarm
  40443e:	f107 0328 	add.w	r3, r7, #40	; 0x28
  404442:	4618      	mov	r0, r3
  404444:	4b0b      	ldr	r3, [pc, #44]	; (404474 <main+0xb0>)
  404446:	4798      	blx	r3
  404448:	4603      	mov	r3, r0
  40444a:	2b00      	cmp	r3, #0
  40444c:	d1c5      	bne.n	4043da <main+0x16>
			{
				InterpretSwarmMessage(message);	//Interpret the message
  40444e:	f107 0328 	add.w	r3, r7, #40	; 0x28
  404452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404456:	4b08      	ldr	r3, [pc, #32]	; (404478 <main+0xb4>)
  404458:	4798      	blx	r3
			}
		}
	}
  40445a:	e7be      	b.n	4043da <main+0x16>
  40445c:	0040447d 	.word	0x0040447d
  404460:	20000fc9 	.word	0x20000fc9
  404464:	00403e55 	.word	0x00403e55
  404468:	0040349d 	.word	0x0040349d
  40446c:	00400a29 	.word	0x00400a29
  404470:	00400185 	.word	0x00400185
  404474:	00400ccd 	.word	0x00400ccd
  404478:	0040014d 	.word	0x0040014d

0040447c <setup>:
}

void setup(void)
{
  40447c:	b580      	push	{r7, lr}
  40447e:	af00      	add	r7, sp, #0
	REG_WDT_MR = (1 << 15); 				//WDT Disable
  404480:	4b83      	ldr	r3, [pc, #524]	; (404690 <setup+0x214>)
  404482:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404486:	601a      	str	r2, [r3, #0]

	/******** CLOCK Setup @ 100MHz ********/
	REG_EFC_FMR = ((1<<26) | (5<<8));		//Set Flash Wait State for 100MHz
  404488:	4b82      	ldr	r3, [pc, #520]	; (404694 <setup+0x218>)
  40448a:	4a83      	ldr	r2, [pc, #524]	; (404698 <setup+0x21c>)
  40448c:	601a      	str	r2, [r3, #0]
	REG_PMC_WPMR = 0x504D4300;				//Disable PMC write protect
  40448e:	4b83      	ldr	r3, [pc, #524]	; (40469c <setup+0x220>)
  404490:	4a83      	ldr	r2, [pc, #524]	; (4046a0 <setup+0x224>)
  404492:	601a      	str	r2, [r3, #0]
	REG_CKGR_MOR |= (0x37<<16) | (0x14<<8); //Set 5ms main xtal osc. Start up time. Start Up Time = 8 * MOSCXTST / SLCK => MOSCXTST = 20
  404494:	4a83      	ldr	r2, [pc, #524]	; (4046a4 <setup+0x228>)
  404496:	4b83      	ldr	r3, [pc, #524]	; (4046a4 <setup+0x228>)
  404498:	681b      	ldr	r3, [r3, #0]
  40449a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40449e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  4044a2:	6013      	str	r3, [r2, #0]
	REG_CKGR_MOR |= (0x37<<16) | (1<<0);	//Enable the external crystal connected to XIN and XOUT
  4044a4:	4a7f      	ldr	r2, [pc, #508]	; (4046a4 <setup+0x228>)
  4044a6:	4b7f      	ldr	r3, [pc, #508]	; (4046a4 <setup+0x228>)
  4044a8:	681b      	ldr	r3, [r3, #0]
  4044aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4044ae:	f043 0301 	orr.w	r3, r3, #1
  4044b2:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & 0x01));			//Wait for the main crystal oscillator to stabilize
  4044b4:	bf00      	nop
  4044b6:	4b7c      	ldr	r3, [pc, #496]	; (4046a8 <setup+0x22c>)
  4044b8:	681b      	ldr	r3, [r3, #0]
  4044ba:	f003 0301 	and.w	r3, r3, #1
  4044be:	2b00      	cmp	r3, #0
  4044c0:	d0f9      	beq.n	4044b6 <setup+0x3a>
	REG_CKGR_MOR |= (0x37<<16) | (1<<24);	//MAINCK source set to external xtal
  4044c2:	4a78      	ldr	r2, [pc, #480]	; (4046a4 <setup+0x228>)
  4044c4:	4b77      	ldr	r3, [pc, #476]	; (4046a4 <setup+0x228>)
  4044c6:	681b      	ldr	r3, [r3, #0]
  4044c8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4044cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4044d0:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & 0x10000));			//Wait for the source changeover to be complete
  4044d2:	bf00      	nop
  4044d4:	4b74      	ldr	r3, [pc, #464]	; (4046a8 <setup+0x22c>)
  4044d6:	681b      	ldr	r3, [r3, #0]
  4044d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4044dc:	2b00      	cmp	r3, #0
  4044de:	d0f9      	beq.n	4044d4 <setup+0x58>
	REG_CKGR_MOR = 0x01371401;				//Disable the RC oscillator
  4044e0:	4b70      	ldr	r3, [pc, #448]	; (4046a4 <setup+0x228>)
  4044e2:	4a72      	ldr	r2, [pc, #456]	; (4046ac <setup+0x230>)
  4044e4:	601a      	str	r2, [r3, #0]
	REG_CKGR_PLLAR |= (1<<29) | (0x03<<0) | (0x18<<16) | (0x3F<<8); //Sets PLL to Divide by 3, Multiply by 25 and wait 63 SLCK cycles
  4044e6:	4972      	ldr	r1, [pc, #456]	; (4046b0 <setup+0x234>)
  4044e8:	4b71      	ldr	r3, [pc, #452]	; (4046b0 <setup+0x234>)
  4044ea:	681a      	ldr	r2, [r3, #0]
  4044ec:	4b71      	ldr	r3, [pc, #452]	; (4046b4 <setup+0x238>)
  4044ee:	4313      	orrs	r3, r2
  4044f0:	600b      	str	r3, [r1, #0]
	while(!(REG_PMC_SR & 0x02));			//Wait for PLL LOCKA bit to be set
  4044f2:	bf00      	nop
  4044f4:	4b6c      	ldr	r3, [pc, #432]	; (4046a8 <setup+0x22c>)
  4044f6:	681b      	ldr	r3, [r3, #0]
  4044f8:	f003 0302 	and.w	r3, r3, #2
  4044fc:	2b00      	cmp	r3, #0
  4044fe:	d0f9      	beq.n	4044f4 <setup+0x78>
	REG_PMC_MCKR = (2<<0);					//Set PLLA_CLK as MCK
  404500:	4b6d      	ldr	r3, [pc, #436]	; (4046b8 <setup+0x23c>)
  404502:	2202      	movs	r2, #2
  404504:	601a      	str	r2, [r3, #0]
	while(!(REG_PMC_SR & 0x08));			//Wait for MCK ready
  404506:	bf00      	nop
  404508:	4b67      	ldr	r3, [pc, #412]	; (4046a8 <setup+0x22c>)
  40450a:	681b      	ldr	r3, [r3, #0]
  40450c:	f003 0308 	and.w	r3, r3, #8
  404510:	2b00      	cmp	r3, #0
  404512:	d0f9      	beq.n	404508 <setup+0x8c>
	
	/******** PIO Controller Setup ********/
	REG_PMC_PCER0 |= (1<<11);	//Enable clock access to PIO controller A
  404514:	4a69      	ldr	r2, [pc, #420]	; (4046bc <setup+0x240>)
  404516:	4b69      	ldr	r3, [pc, #420]	; (4046bc <setup+0x240>)
  404518:	681b      	ldr	r3, [r3, #0]
  40451a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40451e:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<12);	//Enable clock access to PIO controller B
  404520:	4a66      	ldr	r2, [pc, #408]	; (4046bc <setup+0x240>)
  404522:	4b66      	ldr	r3, [pc, #408]	; (4046bc <setup+0x240>)
  404524:	681b      	ldr	r3, [r3, #0]
  404526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40452a:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<13);	//Enable clock access to PIO controller C
  40452c:	4a63      	ldr	r2, [pc, #396]	; (4046bc <setup+0x240>)
  40452e:	4b63      	ldr	r3, [pc, #396]	; (4046bc <setup+0x240>)
  404530:	681b      	ldr	r3, [r3, #0]
  404532:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404536:	6013      	str	r3, [r2, #0]
	REG_PIOA_WPMR = 0x50494F00; //Disable PIOA write protect
  404538:	4b61      	ldr	r3, [pc, #388]	; (4046c0 <setup+0x244>)
  40453a:	4a62      	ldr	r2, [pc, #392]	; (4046c4 <setup+0x248>)
  40453c:	601a      	str	r2, [r3, #0]
	REG_PIOB_WPMR = 0x50494F00; //Disable PIOB write protect
  40453e:	4b62      	ldr	r3, [pc, #392]	; (4046c8 <setup+0x24c>)
  404540:	4a60      	ldr	r2, [pc, #384]	; (4046c4 <setup+0x248>)
  404542:	601a      	str	r2, [r3, #0]
	REG_PIOC_WPMR = 0x50494F00; //Disable PIOC write protect
  404544:	4b61      	ldr	r3, [pc, #388]	; (4046cc <setup+0x250>)
  404546:	4a5f      	ldr	r2, [pc, #380]	; (4046c4 <setup+0x248>)
  404548:	601a      	str	r2, [r3, #0]
	
	motor_init();
  40454a:	4b61      	ldr	r3, [pc, #388]	; (4046d0 <setup+0x254>)
  40454c:	4798      	blx	r3
	SPI_Init();
  40454e:	4b61      	ldr	r3, [pc, #388]	; (4046d4 <setup+0x258>)
  404550:	4798      	blx	r3
	//mouseInit(); //May require further testing - Adam
	CommunicationSetup();
  404552:	4b61      	ldr	r3, [pc, #388]	; (4046d8 <setup+0x25c>)
  404554:	4798      	blx	r3
	initImu();
  404556:	4b61      	ldr	r3, [pc, #388]	; (4046dc <setup+0x260>)
  404558:	4798      	blx	r3
	twi0Init();
  40455a:	4b61      	ldr	r3, [pc, #388]	; (4046e0 <setup+0x264>)
  40455c:	4798      	blx	r3

	/******** LED Setup ********/
	REG_PIOA_PER |= ((1<<28) | (1<<27));	//Enable PIO control of D1 & D3.
  40455e:	4a61      	ldr	r2, [pc, #388]	; (4046e4 <setup+0x268>)
  404560:	4b60      	ldr	r3, [pc, #384]	; (4046e4 <setup+0x268>)
  404562:	681b      	ldr	r3, [r3, #0]
  404564:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
  404568:	6013      	str	r3, [r2, #0]
	REG_PIOC_PER |= (1<<8);					//Enable PIO control of D2
  40456a:	4a5f      	ldr	r2, [pc, #380]	; (4046e8 <setup+0x26c>)
  40456c:	4b5e      	ldr	r3, [pc, #376]	; (4046e8 <setup+0x26c>)
  40456e:	681b      	ldr	r3, [r3, #0]
  404570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404574:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= ((1<<28) | (1<<27));	//Set D1 & D3 as outputs
  404576:	4a5d      	ldr	r2, [pc, #372]	; (4046ec <setup+0x270>)
  404578:	4b5c      	ldr	r3, [pc, #368]	; (4046ec <setup+0x270>)
  40457a:	681b      	ldr	r3, [r3, #0]
  40457c:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
  404580:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<8);					//Set D2 as an output
  404582:	4a5b      	ldr	r2, [pc, #364]	; (4046f0 <setup+0x274>)
  404584:	4b5a      	ldr	r3, [pc, #360]	; (4046f0 <setup+0x274>)
  404586:	681b      	ldr	r3, [r3, #0]
  404588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40458c:	6013      	str	r3, [r2, #0]
	D1off;									//D1 starts up off
  40458e:	4a59      	ldr	r2, [pc, #356]	; (4046f4 <setup+0x278>)
  404590:	4b58      	ldr	r3, [pc, #352]	; (4046f4 <setup+0x278>)
  404592:	681b      	ldr	r3, [r3, #0]
  404594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  404598:	6013      	str	r3, [r2, #0]
	D2off;									//D2 starts up off
  40459a:	4a57      	ldr	r2, [pc, #348]	; (4046f8 <setup+0x27c>)
  40459c:	4b56      	ldr	r3, [pc, #344]	; (4046f8 <setup+0x27c>)
  40459e:	681b      	ldr	r3, [r3, #0]
  4045a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4045a4:	6013      	str	r3, [r2, #0]
	D3off;									//D3 starts up off
  4045a6:	4a53      	ldr	r2, [pc, #332]	; (4046f4 <setup+0x278>)
  4045a8:	4b52      	ldr	r3, [pc, #328]	; (4046f4 <setup+0x278>)
  4045aa:	681b      	ldr	r3, [r3, #0]
  4045ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  4045b0:	6013      	str	r3, [r2, #0]
	
	/******** ADC SETUP, 10 bit default SINGLE CONVERSION SINGLE CHANNEL MODE  ********/
	REG_ADC_WPMR = 0x41444300;						//Disable ADC write protect
  4045b2:	4b52      	ldr	r3, [pc, #328]	; (4046fc <setup+0x280>)
  4045b4:	4a52      	ldr	r2, [pc, #328]	; (404700 <setup+0x284>)
  4045b6:	601a      	str	r2, [r3, #0]
	REG_PMC_PCER0 |= (1<<29);						//Enable peripheral clock on ADC
  4045b8:	4a40      	ldr	r2, [pc, #256]	; (4046bc <setup+0x240>)
  4045ba:	4b40      	ldr	r3, [pc, #256]	; (4046bc <setup+0x240>)
  4045bc:	681b      	ldr	r3, [r3, #0]
  4045be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4045c2:	6013      	str	r3, [r2, #0]
	REG_ADC_MR |= ((49<<8) | (3<<16) | (2<<28));	//Prescale ADC conversion by 49 (100MHZ/((49+1)x2))=1MHZ. Startup time is 24 ADC clock cycles. Field 28 must be programmed with value 2.
  4045c4:	494f      	ldr	r1, [pc, #316]	; (404704 <setup+0x288>)
  4045c6:	4b4f      	ldr	r3, [pc, #316]	; (404704 <setup+0x288>)
  4045c8:	681a      	ldr	r2, [r3, #0]
  4045ca:	4b4f      	ldr	r3, [pc, #316]	; (404708 <setup+0x28c>)
  4045cc:	4313      	orrs	r3, r2
  4045ce:	600b      	str	r3, [r1, #0]
	
	/****************TWI2(ID22) SETUP***************/
	REG_PMC_PCER0
	|=	(1<<ID_TWI2);						//Enable clock access to TWI2, Peripheral TWI2_ID = 22
  4045d0:	4a3a      	ldr	r2, [pc, #232]	; (4046bc <setup+0x240>)
  4045d2:	4b3a      	ldr	r3, [pc, #232]	; (4046bc <setup+0x240>)
  4045d4:	681b      	ldr	r3, [r3, #0]
  4045d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4045da:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR
	|=	PIO_PDR_P0							//Enable peripheralB control of PB0 (TWD2)
  4045dc:	4a4b      	ldr	r2, [pc, #300]	; (40470c <setup+0x290>)
  4045de:	4b4b      	ldr	r3, [pc, #300]	; (40470c <setup+0x290>)
  4045e0:	681b      	ldr	r3, [r3, #0]
  4045e2:	f043 0303 	orr.w	r3, r3, #3
  4045e6:	6013      	str	r3, [r2, #0]
	|	PIO_PDR_P1;							//Enable peripheralB control of PB1 (TWCK2)
	REG_PIOB_ABCDSR
	|=	PIO_ABCDSR_P0						//Set peripheral B
  4045e8:	4a49      	ldr	r2, [pc, #292]	; (404710 <setup+0x294>)
  4045ea:	4b49      	ldr	r3, [pc, #292]	; (404710 <setup+0x294>)
  4045ec:	681b      	ldr	r3, [r3, #0]
  4045ee:	f043 0303 	orr.w	r3, r3, #3
  4045f2:	6013      	str	r3, [r2, #0]
	|	PIO_ABCDSR_P1;
	REG_TWI2_CR
  4045f4:	4b47      	ldr	r3, [pc, #284]	; (404714 <setup+0x298>)
	=	TWI_CR_SWRST;						//Software Reset
  4045f6:	2280      	movs	r2, #128	; 0x80
  4045f8:	601a      	str	r2, [r3, #0]
	
	//TWI2 Clock Waveform Setup.
	//1.3uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
	//0.6uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
	REG_TWI2_CWGR
	|=	TWI_CWGR_CKDIV(1)					//Clock speed 400000, fast mode
  4045fa:	4a47      	ldr	r2, [pc, #284]	; (404718 <setup+0x29c>)
  4045fc:	4b46      	ldr	r3, [pc, #280]	; (404718 <setup+0x29c>)
  4045fe:	681b      	ldr	r3, [r3, #0]
  404600:	f443 338e 	orr.w	r3, r3, #72704	; 0x11c00
  404604:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
  404608:	6013      	str	r3, [r2, #0]
	|	TWI_CWGR_CLDIV(63)					//Clock low period 1.3uSec
	|	TWI_CWGR_CHDIV(28);					//Clock high period  0.6uSec
	REG_TWI2_CR
	|=	TWI_CR_MSEN							//Master mode enabled
  40460a:	4a42      	ldr	r2, [pc, #264]	; (404714 <setup+0x298>)
  40460c:	4b41      	ldr	r3, [pc, #260]	; (404714 <setup+0x298>)
  40460e:	681b      	ldr	r3, [r3, #0]
  404610:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  404614:	6013      	str	r3, [r2, #0]

	/****************TIMER0 SETUP***************/
	//Timer0 is used for delay_ms and get_ms functions required by the imu driver
	//TC Channel Mode Register (Pg877)
	REG_PMC_PCER0
	|=	(1<<ID_TC0);						//Enable TC clock (ID_TC0 is the peripheral identifier for timer counter 0)
  404616:	4a29      	ldr	r2, [pc, #164]	; (4046bc <setup+0x240>)
  404618:	4b28      	ldr	r3, [pc, #160]	; (4046bc <setup+0x240>)
  40461a:	681b      	ldr	r3, [r3, #0]
  40461c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  404620:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(ID_TC0);
  404622:	2017      	movs	r0, #23
  404624:	4b3d      	ldr	r3, [pc, #244]	; (40471c <setup+0x2a0>)
  404626:	4798      	blx	r3
	REG_TC0_CMR0
	|=	TC_CMR_TCCLKS_TIMER_CLOCK3			//Prescaler MCK/32
  404628:	4a3d      	ldr	r2, [pc, #244]	; (404720 <setup+0x2a4>)
  40462a:	4b3d      	ldr	r3, [pc, #244]	; (404720 <setup+0x2a4>)
  40462c:	681b      	ldr	r3, [r3, #0]
  40462e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
  404632:	f043 0302 	orr.w	r3, r3, #2
  404636:	6013      	str	r3, [r2, #0]
	|	TC_CMR_WAVE							//Waveform mode
	|	TC_CMR_WAVSEL_UP_RC;				//Clear on RC compare
	//TC interrupt enable register
	REG_TC0_IER0
	|=	TC_IER_CPCS;						//Enable Register C compare interrupt
  404638:	4a3a      	ldr	r2, [pc, #232]	; (404724 <setup+0x2a8>)
  40463a:	4b3a      	ldr	r3, [pc, #232]	; (404724 <setup+0x2a8>)
  40463c:	681b      	ldr	r3, [r3, #0]
  40463e:	f043 0310 	orr.w	r3, r3, #16
  404642:	6013      	str	r3, [r2, #0]
	//Set Register C
	REG_TC0_RC0
  404644:	4b38      	ldr	r3, [pc, #224]	; (404728 <setup+0x2ac>)
	=	3125;								//Trigger once every 1/1000th of a second (100Mhz/32/1000)
  404646:	f640 4235 	movw	r2, #3125	; 0xc35
  40464a:	601a      	str	r2, [r3, #0]
	//Clock control register
	REG_TC0_CCR0
	|=	TC_CCR_CLKEN						//Enable the timer clk.
  40464c:	4a37      	ldr	r2, [pc, #220]	; (40472c <setup+0x2b0>)
  40464e:	4b37      	ldr	r3, [pc, #220]	; (40472c <setup+0x2b0>)
  404650:	681b      	ldr	r3, [r3, #0]
  404652:	f043 0305 	orr.w	r3, r3, #5
  404656:	6013      	str	r3, [r2, #0]
	|	TC_CCR_SWTRG;

	LightSensor_Setup(Mux_RHS_LightSens);
  404658:	20f8      	movs	r0, #248	; 0xf8
  40465a:	4b35      	ldr	r3, [pc, #212]	; (404730 <setup+0x2b4>)
  40465c:	4798      	blx	r3
	LightSensor_Setup(Mux_LHS_LightSens);
  40465e:	20f9      	movs	r0, #249	; 0xf9
  404660:	4b33      	ldr	r3, [pc, #204]	; (404730 <setup+0x2b4>)
  404662:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityA);
  404664:	20fa      	movs	r0, #250	; 0xfa
  404666:	4b33      	ldr	r3, [pc, #204]	; (404734 <setup+0x2b8>)
  404668:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityB);
  40466a:	20ff      	movs	r0, #255	; 0xff
  40466c:	4b31      	ldr	r3, [pc, #196]	; (404734 <setup+0x2b8>)
  40466e:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityC);
  404670:	20fe      	movs	r0, #254	; 0xfe
  404672:	4b30      	ldr	r3, [pc, #192]	; (404734 <setup+0x2b8>)
  404674:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityD);
  404676:	20fd      	movs	r0, #253	; 0xfd
  404678:	4b2e      	ldr	r3, [pc, #184]	; (404734 <setup+0x2b8>)
  40467a:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityE);
  40467c:	20fc      	movs	r0, #252	; 0xfc
  40467e:	4b2d      	ldr	r3, [pc, #180]	; (404734 <setup+0x2b8>)
  404680:	4798      	blx	r3
	Proximity_Setup(Mux_ProximityF);
  404682:	20fb      	movs	r0, #251	; 0xfb
  404684:	4b2b      	ldr	r3, [pc, #172]	; (404734 <setup+0x2b8>)
  404686:	4798      	blx	r3
	FastChargeController_Setup(); //Sets Voltage and Current registers on FCC
  404688:	4b2b      	ldr	r3, [pc, #172]	; (404738 <setup+0x2bc>)
  40468a:	4798      	blx	r3
}
  40468c:	bf00      	nop
  40468e:	bd80      	pop	{r7, pc}
  404690:	400e1454 	.word	0x400e1454
  404694:	400e0a00 	.word	0x400e0a00
  404698:	04000500 	.word	0x04000500
  40469c:	400e04e4 	.word	0x400e04e4
  4046a0:	504d4300 	.word	0x504d4300
  4046a4:	400e0420 	.word	0x400e0420
  4046a8:	400e0468 	.word	0x400e0468
  4046ac:	01371401 	.word	0x01371401
  4046b0:	400e0428 	.word	0x400e0428
  4046b4:	20183f03 	.word	0x20183f03
  4046b8:	400e0430 	.word	0x400e0430
  4046bc:	400e0410 	.word	0x400e0410
  4046c0:	400e0ee4 	.word	0x400e0ee4
  4046c4:	50494f00 	.word	0x50494f00
  4046c8:	400e10e4 	.word	0x400e10e4
  4046cc:	400e12e4 	.word	0x400e12e4
  4046d0:	00402db1 	.word	0x00402db1
  4046d4:	004037ad 	.word	0x004037ad
  4046d8:	004002fd 	.word	0x004002fd
  4046dc:	004039e9 	.word	0x004039e9
  4046e0:	0040405d 	.word	0x0040405d
  4046e4:	400e0e00 	.word	0x400e0e00
  4046e8:	400e1200 	.word	0x400e1200
  4046ec:	400e0e10 	.word	0x400e0e10
  4046f0:	400e1210 	.word	0x400e1210
  4046f4:	400e0e34 	.word	0x400e0e34
  4046f8:	400e1234 	.word	0x400e1234
  4046fc:	400380e4 	.word	0x400380e4
  404700:	41444300 	.word	0x41444300
  404704:	40038004 	.word	0x40038004
  404708:	20033100 	.word	0x20033100
  40470c:	400e1004 	.word	0x400e1004
  404710:	400e1070 	.word	0x400e1070
  404714:	40040000 	.word	0x40040000
  404718:	40040010 	.word	0x40040010
  40471c:	00404395 	.word	0x00404395
  404720:	40010004 	.word	0x40010004
  404724:	40010024 	.word	0x40010024
  404728:	4001001c 	.word	0x4001001c
  40472c:	40010000 	.word	0x40010000
  404730:	00402d55 	.word	0x00402d55
  404734:	00403dd1 	.word	0x00403dd1
  404738:	00400d51 	.word	0x00400d51

0040473c <cos>:
  40473c:	b530      	push	{r4, r5, lr}
  40473e:	4a22      	ldr	r2, [pc, #136]	; (4047c8 <cos+0x8c>)
  404740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404744:	4293      	cmp	r3, r2
  404746:	b087      	sub	sp, #28
  404748:	dd1b      	ble.n	404782 <cos+0x46>
  40474a:	4a20      	ldr	r2, [pc, #128]	; (4047cc <cos+0x90>)
  40474c:	4293      	cmp	r3, r2
  40474e:	dd05      	ble.n	40475c <cos+0x20>
  404750:	4602      	mov	r2, r0
  404752:	460b      	mov	r3, r1
  404754:	f001 f94e 	bl	4059f4 <__aeabi_dsub>
  404758:	b007      	add	sp, #28
  40475a:	bd30      	pop	{r4, r5, pc}
  40475c:	aa02      	add	r2, sp, #8
  40475e:	f000 f837 	bl	4047d0 <__ieee754_rem_pio2>
  404762:	f000 0303 	and.w	r3, r0, #3
  404766:	2b01      	cmp	r3, #1
  404768:	d01a      	beq.n	4047a0 <cos+0x64>
  40476a:	2b02      	cmp	r3, #2
  40476c:	d00f      	beq.n	40478e <cos+0x52>
  40476e:	b31b      	cbz	r3, 4047b8 <cos+0x7c>
  404770:	2401      	movs	r4, #1
  404772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40477a:	9400      	str	r4, [sp, #0]
  40477c:	f000 ff6c 	bl	405658 <__kernel_sin>
  404780:	e7ea      	b.n	404758 <cos+0x1c>
  404782:	2200      	movs	r2, #0
  404784:	2300      	movs	r3, #0
  404786:	f000 fa47 	bl	404c18 <__kernel_cos>
  40478a:	b007      	add	sp, #28
  40478c:	bd30      	pop	{r4, r5, pc}
  40478e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404796:	f000 fa3f 	bl	404c18 <__kernel_cos>
  40479a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40479e:	e7db      	b.n	404758 <cos+0x1c>
  4047a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4047a4:	9300      	str	r3, [sp, #0]
  4047a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4047aa:	4622      	mov	r2, r4
  4047ac:	462b      	mov	r3, r5
  4047ae:	f000 ff53 	bl	405658 <__kernel_sin>
  4047b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4047b6:	e7cf      	b.n	404758 <cos+0x1c>
  4047b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4047bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4047c0:	f000 fa2a 	bl	404c18 <__kernel_cos>
  4047c4:	e7c8      	b.n	404758 <cos+0x1c>
  4047c6:	bf00      	nop
  4047c8:	3fe921fb 	.word	0x3fe921fb
  4047cc:	7fefffff 	.word	0x7fefffff

004047d0 <__ieee754_rem_pio2>:
  4047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047d4:	4e94      	ldr	r6, [pc, #592]	; (404a28 <__ieee754_rem_pio2+0x258>)
  4047d6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4047da:	42b7      	cmp	r7, r6
  4047dc:	b091      	sub	sp, #68	; 0x44
  4047de:	f340 8082 	ble.w	4048e6 <__ieee754_rem_pio2+0x116>
  4047e2:	4692      	mov	sl, r2
  4047e4:	4a91      	ldr	r2, [pc, #580]	; (404a2c <__ieee754_rem_pio2+0x25c>)
  4047e6:	4297      	cmp	r7, r2
  4047e8:	460c      	mov	r4, r1
  4047ea:	dc26      	bgt.n	40483a <__ieee754_rem_pio2+0x6a>
  4047ec:	2900      	cmp	r1, #0
  4047ee:	a384      	add	r3, pc, #528	; (adr r3, 404a00 <__ieee754_rem_pio2+0x230>)
  4047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047f4:	f340 81a8 	ble.w	404b48 <__ieee754_rem_pio2+0x378>
  4047f8:	f001 f8fc 	bl	4059f4 <__aeabi_dsub>
  4047fc:	4b8c      	ldr	r3, [pc, #560]	; (404a30 <__ieee754_rem_pio2+0x260>)
  4047fe:	429f      	cmp	r7, r3
  404800:	4604      	mov	r4, r0
  404802:	460d      	mov	r5, r1
  404804:	f000 8084 	beq.w	404910 <__ieee754_rem_pio2+0x140>
  404808:	a37f      	add	r3, pc, #508	; (adr r3, 404a08 <__ieee754_rem_pio2+0x238>)
  40480a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40480e:	f001 f8f1 	bl	4059f4 <__aeabi_dsub>
  404812:	4602      	mov	r2, r0
  404814:	460b      	mov	r3, r1
  404816:	e9ca 2300 	strd	r2, r3, [sl]
  40481a:	4620      	mov	r0, r4
  40481c:	4629      	mov	r1, r5
  40481e:	f001 f8e9 	bl	4059f4 <__aeabi_dsub>
  404822:	a379      	add	r3, pc, #484	; (adr r3, 404a08 <__ieee754_rem_pio2+0x238>)
  404824:	e9d3 2300 	ldrd	r2, r3, [r3]
  404828:	f001 f8e4 	bl	4059f4 <__aeabi_dsub>
  40482c:	2501      	movs	r5, #1
  40482e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404832:	4628      	mov	r0, r5
  404834:	b011      	add	sp, #68	; 0x44
  404836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40483a:	4a7e      	ldr	r2, [pc, #504]	; (404a34 <__ieee754_rem_pio2+0x264>)
  40483c:	4297      	cmp	r7, r2
  40483e:	f340 8084 	ble.w	40494a <__ieee754_rem_pio2+0x17a>
  404842:	4a7d      	ldr	r2, [pc, #500]	; (404a38 <__ieee754_rem_pio2+0x268>)
  404844:	4297      	cmp	r7, r2
  404846:	dc59      	bgt.n	4048fc <__ieee754_rem_pio2+0x12c>
  404848:	153d      	asrs	r5, r7, #20
  40484a:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  40484e:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  404852:	4619      	mov	r1, r3
  404854:	461f      	mov	r7, r3
  404856:	4606      	mov	r6, r0
  404858:	f001 fd1a 	bl	406290 <__aeabi_d2iz>
  40485c:	f001 fa18 	bl	405c90 <__aeabi_i2d>
  404860:	4680      	mov	r8, r0
  404862:	4689      	mov	r9, r1
  404864:	4602      	mov	r2, r0
  404866:	460b      	mov	r3, r1
  404868:	4630      	mov	r0, r6
  40486a:	4639      	mov	r1, r7
  40486c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  404870:	f001 f8c0 	bl	4059f4 <__aeabi_dsub>
  404874:	2200      	movs	r2, #0
  404876:	4b71      	ldr	r3, [pc, #452]	; (404a3c <__ieee754_rem_pio2+0x26c>)
  404878:	f001 fa70 	bl	405d5c <__aeabi_dmul>
  40487c:	4689      	mov	r9, r1
  40487e:	4680      	mov	r8, r0
  404880:	f001 fd06 	bl	406290 <__aeabi_d2iz>
  404884:	f001 fa04 	bl	405c90 <__aeabi_i2d>
  404888:	4602      	mov	r2, r0
  40488a:	460b      	mov	r3, r1
  40488c:	4606      	mov	r6, r0
  40488e:	460f      	mov	r7, r1
  404890:	4640      	mov	r0, r8
  404892:	4649      	mov	r1, r9
  404894:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  404898:	f001 f8ac 	bl	4059f4 <__aeabi_dsub>
  40489c:	2200      	movs	r2, #0
  40489e:	4b67      	ldr	r3, [pc, #412]	; (404a3c <__ieee754_rem_pio2+0x26c>)
  4048a0:	f001 fa5c 	bl	405d5c <__aeabi_dmul>
  4048a4:	2200      	movs	r2, #0
  4048a6:	2300      	movs	r3, #0
  4048a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  4048ac:	f001 fcbe 	bl	40622c <__aeabi_dcmpeq>
  4048b0:	2800      	cmp	r0, #0
  4048b2:	f000 8175 	beq.w	404ba0 <__ieee754_rem_pio2+0x3d0>
  4048b6:	2300      	movs	r3, #0
  4048b8:	4630      	mov	r0, r6
  4048ba:	4639      	mov	r1, r7
  4048bc:	2200      	movs	r2, #0
  4048be:	f001 fcb5 	bl	40622c <__aeabi_dcmpeq>
  4048c2:	2800      	cmp	r0, #0
  4048c4:	bf14      	ite	ne
  4048c6:	2301      	movne	r3, #1
  4048c8:	2302      	moveq	r3, #2
  4048ca:	4a5d      	ldr	r2, [pc, #372]	; (404a40 <__ieee754_rem_pio2+0x270>)
  4048cc:	9201      	str	r2, [sp, #4]
  4048ce:	2102      	movs	r1, #2
  4048d0:	9100      	str	r1, [sp, #0]
  4048d2:	462a      	mov	r2, r5
  4048d4:	4651      	mov	r1, sl
  4048d6:	a80a      	add	r0, sp, #40	; 0x28
  4048d8:	f000 fac2 	bl	404e60 <__kernel_rem_pio2>
  4048dc:	2c00      	cmp	r4, #0
  4048de:	f2c0 8151 	blt.w	404b84 <__ieee754_rem_pio2+0x3b4>
  4048e2:	4605      	mov	r5, r0
  4048e4:	e006      	b.n	4048f4 <__ieee754_rem_pio2+0x124>
  4048e6:	e9c2 0100 	strd	r0, r1, [r2]
  4048ea:	2500      	movs	r5, #0
  4048ec:	2400      	movs	r4, #0
  4048ee:	e9c2 4502 	strd	r4, r5, [r2, #8]
  4048f2:	2500      	movs	r5, #0
  4048f4:	4628      	mov	r0, r5
  4048f6:	b011      	add	sp, #68	; 0x44
  4048f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048fc:	4602      	mov	r2, r0
  4048fe:	460b      	mov	r3, r1
  404900:	f001 f878 	bl	4059f4 <__aeabi_dsub>
  404904:	2500      	movs	r5, #0
  404906:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40490a:	e9ca 0100 	strd	r0, r1, [sl]
  40490e:	e7f1      	b.n	4048f4 <__ieee754_rem_pio2+0x124>
  404910:	a33f      	add	r3, pc, #252	; (adr r3, 404a10 <__ieee754_rem_pio2+0x240>)
  404912:	e9d3 2300 	ldrd	r2, r3, [r3]
  404916:	f001 f86d 	bl	4059f4 <__aeabi_dsub>
  40491a:	a33f      	add	r3, pc, #252	; (adr r3, 404a18 <__ieee754_rem_pio2+0x248>)
  40491c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404920:	460d      	mov	r5, r1
  404922:	4604      	mov	r4, r0
  404924:	f001 f866 	bl	4059f4 <__aeabi_dsub>
  404928:	4602      	mov	r2, r0
  40492a:	460b      	mov	r3, r1
  40492c:	e9ca 2300 	strd	r2, r3, [sl]
  404930:	4629      	mov	r1, r5
  404932:	4620      	mov	r0, r4
  404934:	f001 f85e 	bl	4059f4 <__aeabi_dsub>
  404938:	a337      	add	r3, pc, #220	; (adr r3, 404a18 <__ieee754_rem_pio2+0x248>)
  40493a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40493e:	f001 f859 	bl	4059f4 <__aeabi_dsub>
  404942:	2501      	movs	r5, #1
  404944:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404948:	e7d4      	b.n	4048f4 <__ieee754_rem_pio2+0x124>
  40494a:	f000 ff3b 	bl	4057c4 <fabs>
  40494e:	a334      	add	r3, pc, #208	; (adr r3, 404a20 <__ieee754_rem_pio2+0x250>)
  404950:	e9d3 2300 	ldrd	r2, r3, [r3]
  404954:	4680      	mov	r8, r0
  404956:	4689      	mov	r9, r1
  404958:	f001 fa00 	bl	405d5c <__aeabi_dmul>
  40495c:	2200      	movs	r2, #0
  40495e:	4b39      	ldr	r3, [pc, #228]	; (404a44 <__ieee754_rem_pio2+0x274>)
  404960:	f001 f84a 	bl	4059f8 <__adddf3>
  404964:	f001 fc94 	bl	406290 <__aeabi_d2iz>
  404968:	4605      	mov	r5, r0
  40496a:	f001 f991 	bl	405c90 <__aeabi_i2d>
  40496e:	a324      	add	r3, pc, #144	; (adr r3, 404a00 <__ieee754_rem_pio2+0x230>)
  404970:	e9d3 2300 	ldrd	r2, r3, [r3]
  404974:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404978:	f001 f9f0 	bl	405d5c <__aeabi_dmul>
  40497c:	4602      	mov	r2, r0
  40497e:	460b      	mov	r3, r1
  404980:	4640      	mov	r0, r8
  404982:	4649      	mov	r1, r9
  404984:	f001 f836 	bl	4059f4 <__aeabi_dsub>
  404988:	a31f      	add	r3, pc, #124	; (adr r3, 404a08 <__ieee754_rem_pio2+0x238>)
  40498a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40498e:	4680      	mov	r8, r0
  404990:	4689      	mov	r9, r1
  404992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404996:	f001 f9e1 	bl	405d5c <__aeabi_dmul>
  40499a:	2d1f      	cmp	r5, #31
  40499c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4049a0:	dc54      	bgt.n	404a4c <__ieee754_rem_pio2+0x27c>
  4049a2:	4b29      	ldr	r3, [pc, #164]	; (404a48 <__ieee754_rem_pio2+0x278>)
  4049a4:	1e6a      	subs	r2, r5, #1
  4049a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4049aa:	429f      	cmp	r7, r3
  4049ac:	d04e      	beq.n	404a4c <__ieee754_rem_pio2+0x27c>
  4049ae:	4602      	mov	r2, r0
  4049b0:	460b      	mov	r3, r1
  4049b2:	4640      	mov	r0, r8
  4049b4:	4649      	mov	r1, r9
  4049b6:	f001 f81d 	bl	4059f4 <__aeabi_dsub>
  4049ba:	4602      	mov	r2, r0
  4049bc:	460b      	mov	r3, r1
  4049be:	e9ca 2300 	strd	r2, r3, [sl]
  4049c2:	4683      	mov	fp, r0
  4049c4:	460e      	mov	r6, r1
  4049c6:	465a      	mov	r2, fp
  4049c8:	4633      	mov	r3, r6
  4049ca:	4640      	mov	r0, r8
  4049cc:	4649      	mov	r1, r9
  4049ce:	f001 f811 	bl	4059f4 <__aeabi_dsub>
  4049d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4049d6:	f001 f80d 	bl	4059f4 <__aeabi_dsub>
  4049da:	2c00      	cmp	r4, #0
  4049dc:	4602      	mov	r2, r0
  4049de:	460b      	mov	r3, r1
  4049e0:	e9ca 2302 	strd	r2, r3, [sl, #8]
  4049e4:	da86      	bge.n	4048f4 <__ieee754_rem_pio2+0x124>
  4049e6:	465b      	mov	r3, fp
  4049e8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  4049ec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4049f0:	e88a 0048 	stmia.w	sl, {r3, r6}
  4049f4:	f8ca 100c 	str.w	r1, [sl, #12]
  4049f8:	f8ca 0008 	str.w	r0, [sl, #8]
  4049fc:	426d      	negs	r5, r5
  4049fe:	e779      	b.n	4048f4 <__ieee754_rem_pio2+0x124>
  404a00:	54400000 	.word	0x54400000
  404a04:	3ff921fb 	.word	0x3ff921fb
  404a08:	1a626331 	.word	0x1a626331
  404a0c:	3dd0b461 	.word	0x3dd0b461
  404a10:	1a600000 	.word	0x1a600000
  404a14:	3dd0b461 	.word	0x3dd0b461
  404a18:	2e037073 	.word	0x2e037073
  404a1c:	3ba3198a 	.word	0x3ba3198a
  404a20:	6dc9c883 	.word	0x6dc9c883
  404a24:	3fe45f30 	.word	0x3fe45f30
  404a28:	3fe921fb 	.word	0x3fe921fb
  404a2c:	4002d97b 	.word	0x4002d97b
  404a30:	3ff921fb 	.word	0x3ff921fb
  404a34:	413921fb 	.word	0x413921fb
  404a38:	7fefffff 	.word	0x7fefffff
  404a3c:	41700000 	.word	0x41700000
  404a40:	00407c48 	.word	0x00407c48
  404a44:	3fe00000 	.word	0x3fe00000
  404a48:	00407bc8 	.word	0x00407bc8
  404a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404a50:	4640      	mov	r0, r8
  404a52:	4649      	mov	r1, r9
  404a54:	f000 ffce 	bl	4059f4 <__aeabi_dsub>
  404a58:	153a      	asrs	r2, r7, #20
  404a5a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  404a5e:	1ad3      	subs	r3, r2, r3
  404a60:	2b10      	cmp	r3, #16
  404a62:	4683      	mov	fp, r0
  404a64:	460e      	mov	r6, r1
  404a66:	9209      	str	r2, [sp, #36]	; 0x24
  404a68:	e9ca 0100 	strd	r0, r1, [sl]
  404a6c:	ddab      	ble.n	4049c6 <__ieee754_rem_pio2+0x1f6>
  404a6e:	a35e      	add	r3, pc, #376	; (adr r3, 404be8 <__ieee754_rem_pio2+0x418>)
  404a70:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404a78:	f001 f970 	bl	405d5c <__aeabi_dmul>
  404a7c:	4606      	mov	r6, r0
  404a7e:	460f      	mov	r7, r1
  404a80:	4602      	mov	r2, r0
  404a82:	460b      	mov	r3, r1
  404a84:	4640      	mov	r0, r8
  404a86:	4649      	mov	r1, r9
  404a88:	f000 ffb4 	bl	4059f4 <__aeabi_dsub>
  404a8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404a90:	4602      	mov	r2, r0
  404a92:	460b      	mov	r3, r1
  404a94:	4640      	mov	r0, r8
  404a96:	4649      	mov	r1, r9
  404a98:	f000 ffac 	bl	4059f4 <__aeabi_dsub>
  404a9c:	4632      	mov	r2, r6
  404a9e:	463b      	mov	r3, r7
  404aa0:	f000 ffa8 	bl	4059f4 <__aeabi_dsub>
  404aa4:	a352      	add	r3, pc, #328	; (adr r3, 404bf0 <__ieee754_rem_pio2+0x420>)
  404aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404aaa:	4606      	mov	r6, r0
  404aac:	460f      	mov	r7, r1
  404aae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404ab2:	f001 f953 	bl	405d5c <__aeabi_dmul>
  404ab6:	4632      	mov	r2, r6
  404ab8:	463b      	mov	r3, r7
  404aba:	f000 ff9b 	bl	4059f4 <__aeabi_dsub>
  404abe:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ac6:	4602      	mov	r2, r0
  404ac8:	460b      	mov	r3, r1
  404aca:	4640      	mov	r0, r8
  404acc:	4649      	mov	r1, r9
  404ace:	f000 ff91 	bl	4059f4 <__aeabi_dsub>
  404ad2:	460b      	mov	r3, r1
  404ad4:	f3c1 570a 	ubfx	r7, r1, #20, #11
  404ad8:	460e      	mov	r6, r1
  404ada:	9909      	ldr	r1, [sp, #36]	; 0x24
  404adc:	1bcf      	subs	r7, r1, r7
  404ade:	4602      	mov	r2, r0
  404ae0:	2f31      	cmp	r7, #49	; 0x31
  404ae2:	4683      	mov	fp, r0
  404ae4:	e9ca 2300 	strd	r2, r3, [sl]
  404ae8:	dd7a      	ble.n	404be0 <__ieee754_rem_pio2+0x410>
  404aea:	a343      	add	r3, pc, #268	; (adr r3, 404bf8 <__ieee754_rem_pio2+0x428>)
  404aec:	e9d3 2300 	ldrd	r2, r3, [r3]
  404af0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404af4:	f001 f932 	bl	405d5c <__aeabi_dmul>
  404af8:	4606      	mov	r6, r0
  404afa:	460f      	mov	r7, r1
  404afc:	4602      	mov	r2, r0
  404afe:	460b      	mov	r3, r1
  404b00:	4640      	mov	r0, r8
  404b02:	4649      	mov	r1, r9
  404b04:	e9cd 8906 	strd	r8, r9, [sp, #24]
  404b08:	f000 ff74 	bl	4059f4 <__aeabi_dsub>
  404b0c:	4602      	mov	r2, r0
  404b0e:	460b      	mov	r3, r1
  404b10:	4680      	mov	r8, r0
  404b12:	4689      	mov	r9, r1
  404b14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404b18:	f000 ff6c 	bl	4059f4 <__aeabi_dsub>
  404b1c:	4632      	mov	r2, r6
  404b1e:	463b      	mov	r3, r7
  404b20:	f000 ff68 	bl	4059f4 <__aeabi_dsub>
  404b24:	a336      	add	r3, pc, #216	; (adr r3, 404c00 <__ieee754_rem_pio2+0x430>)
  404b26:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b2a:	4606      	mov	r6, r0
  404b2c:	460f      	mov	r7, r1
  404b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404b32:	f001 f913 	bl	405d5c <__aeabi_dmul>
  404b36:	4632      	mov	r2, r6
  404b38:	463b      	mov	r3, r7
  404b3a:	f000 ff5b 	bl	4059f4 <__aeabi_dsub>
  404b3e:	4602      	mov	r2, r0
  404b40:	460b      	mov	r3, r1
  404b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404b46:	e734      	b.n	4049b2 <__ieee754_rem_pio2+0x1e2>
  404b48:	f000 ff56 	bl	4059f8 <__adddf3>
  404b4c:	4b30      	ldr	r3, [pc, #192]	; (404c10 <__ieee754_rem_pio2+0x440>)
  404b4e:	429f      	cmp	r7, r3
  404b50:	4604      	mov	r4, r0
  404b52:	460d      	mov	r5, r1
  404b54:	d026      	beq.n	404ba4 <__ieee754_rem_pio2+0x3d4>
  404b56:	a32c      	add	r3, pc, #176	; (adr r3, 404c08 <__ieee754_rem_pio2+0x438>)
  404b58:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b5c:	f000 ff4c 	bl	4059f8 <__adddf3>
  404b60:	4602      	mov	r2, r0
  404b62:	460b      	mov	r3, r1
  404b64:	e9ca 2300 	strd	r2, r3, [sl]
  404b68:	4629      	mov	r1, r5
  404b6a:	4620      	mov	r0, r4
  404b6c:	f000 ff42 	bl	4059f4 <__aeabi_dsub>
  404b70:	a325      	add	r3, pc, #148	; (adr r3, 404c08 <__ieee754_rem_pio2+0x438>)
  404b72:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b76:	f000 ff3f 	bl	4059f8 <__adddf3>
  404b7a:	f04f 35ff 	mov.w	r5, #4294967295
  404b7e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404b82:	e6b7      	b.n	4048f4 <__ieee754_rem_pio2+0x124>
  404b84:	f8da 2004 	ldr.w	r2, [sl, #4]
  404b88:	f8da 300c 	ldr.w	r3, [sl, #12]
  404b8c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404b90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404b94:	4245      	negs	r5, r0
  404b96:	f8ca 2004 	str.w	r2, [sl, #4]
  404b9a:	f8ca 300c 	str.w	r3, [sl, #12]
  404b9e:	e6a9      	b.n	4048f4 <__ieee754_rem_pio2+0x124>
  404ba0:	2303      	movs	r3, #3
  404ba2:	e692      	b.n	4048ca <__ieee754_rem_pio2+0xfa>
  404ba4:	a310      	add	r3, pc, #64	; (adr r3, 404be8 <__ieee754_rem_pio2+0x418>)
  404ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404baa:	f000 ff25 	bl	4059f8 <__adddf3>
  404bae:	a310      	add	r3, pc, #64	; (adr r3, 404bf0 <__ieee754_rem_pio2+0x420>)
  404bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bb4:	460d      	mov	r5, r1
  404bb6:	4604      	mov	r4, r0
  404bb8:	f000 ff1e 	bl	4059f8 <__adddf3>
  404bbc:	4602      	mov	r2, r0
  404bbe:	460b      	mov	r3, r1
  404bc0:	e9ca 2300 	strd	r2, r3, [sl]
  404bc4:	4629      	mov	r1, r5
  404bc6:	4620      	mov	r0, r4
  404bc8:	f000 ff14 	bl	4059f4 <__aeabi_dsub>
  404bcc:	a308      	add	r3, pc, #32	; (adr r3, 404bf0 <__ieee754_rem_pio2+0x420>)
  404bce:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bd2:	f000 ff11 	bl	4059f8 <__adddf3>
  404bd6:	f04f 35ff 	mov.w	r5, #4294967295
  404bda:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404bde:	e689      	b.n	4048f4 <__ieee754_rem_pio2+0x124>
  404be0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404be4:	e6ef      	b.n	4049c6 <__ieee754_rem_pio2+0x1f6>
  404be6:	bf00      	nop
  404be8:	1a600000 	.word	0x1a600000
  404bec:	3dd0b461 	.word	0x3dd0b461
  404bf0:	2e037073 	.word	0x2e037073
  404bf4:	3ba3198a 	.word	0x3ba3198a
  404bf8:	2e000000 	.word	0x2e000000
  404bfc:	3ba3198a 	.word	0x3ba3198a
  404c00:	252049c1 	.word	0x252049c1
  404c04:	397b839a 	.word	0x397b839a
  404c08:	1a626331 	.word	0x1a626331
  404c0c:	3dd0b461 	.word	0x3dd0b461
  404c10:	3ff921fb 	.word	0x3ff921fb
  404c14:	00000000 	.word	0x00000000

00404c18 <__kernel_cos>:
  404c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c1c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  404c20:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  404c24:	b085      	sub	sp, #20
  404c26:	460c      	mov	r4, r1
  404c28:	4692      	mov	sl, r2
  404c2a:	469b      	mov	fp, r3
  404c2c:	4605      	mov	r5, r0
  404c2e:	da6b      	bge.n	404d08 <__kernel_cos+0xf0>
  404c30:	f001 fb2e 	bl	406290 <__aeabi_d2iz>
  404c34:	2800      	cmp	r0, #0
  404c36:	f000 80e8 	beq.w	404e0a <__kernel_cos+0x1f2>
  404c3a:	462a      	mov	r2, r5
  404c3c:	4623      	mov	r3, r4
  404c3e:	4628      	mov	r0, r5
  404c40:	4621      	mov	r1, r4
  404c42:	f001 f88b 	bl	405d5c <__aeabi_dmul>
  404c46:	a374      	add	r3, pc, #464	; (adr r3, 404e18 <__kernel_cos+0x200>)
  404c48:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c4c:	4680      	mov	r8, r0
  404c4e:	4689      	mov	r9, r1
  404c50:	f001 f884 	bl	405d5c <__aeabi_dmul>
  404c54:	a372      	add	r3, pc, #456	; (adr r3, 404e20 <__kernel_cos+0x208>)
  404c56:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c5a:	f000 fecd 	bl	4059f8 <__adddf3>
  404c5e:	4642      	mov	r2, r8
  404c60:	464b      	mov	r3, r9
  404c62:	f001 f87b 	bl	405d5c <__aeabi_dmul>
  404c66:	a370      	add	r3, pc, #448	; (adr r3, 404e28 <__kernel_cos+0x210>)
  404c68:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c6c:	f000 fec2 	bl	4059f4 <__aeabi_dsub>
  404c70:	4642      	mov	r2, r8
  404c72:	464b      	mov	r3, r9
  404c74:	f001 f872 	bl	405d5c <__aeabi_dmul>
  404c78:	a36d      	add	r3, pc, #436	; (adr r3, 404e30 <__kernel_cos+0x218>)
  404c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c7e:	f000 febb 	bl	4059f8 <__adddf3>
  404c82:	4642      	mov	r2, r8
  404c84:	464b      	mov	r3, r9
  404c86:	f001 f869 	bl	405d5c <__aeabi_dmul>
  404c8a:	a36b      	add	r3, pc, #428	; (adr r3, 404e38 <__kernel_cos+0x220>)
  404c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c90:	f000 feb0 	bl	4059f4 <__aeabi_dsub>
  404c94:	4642      	mov	r2, r8
  404c96:	464b      	mov	r3, r9
  404c98:	f001 f860 	bl	405d5c <__aeabi_dmul>
  404c9c:	a368      	add	r3, pc, #416	; (adr r3, 404e40 <__kernel_cos+0x228>)
  404c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ca2:	f000 fea9 	bl	4059f8 <__adddf3>
  404ca6:	4642      	mov	r2, r8
  404ca8:	464b      	mov	r3, r9
  404caa:	f001 f857 	bl	405d5c <__aeabi_dmul>
  404cae:	e9cd 0100 	strd	r0, r1, [sp]
  404cb2:	2200      	movs	r2, #0
  404cb4:	4b64      	ldr	r3, [pc, #400]	; (404e48 <__kernel_cos+0x230>)
  404cb6:	4640      	mov	r0, r8
  404cb8:	4649      	mov	r1, r9
  404cba:	f001 f84f 	bl	405d5c <__aeabi_dmul>
  404cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
  404cc2:	4606      	mov	r6, r0
  404cc4:	460f      	mov	r7, r1
  404cc6:	4640      	mov	r0, r8
  404cc8:	4649      	mov	r1, r9
  404cca:	f001 f847 	bl	405d5c <__aeabi_dmul>
  404cce:	4652      	mov	r2, sl
  404cd0:	4680      	mov	r8, r0
  404cd2:	4689      	mov	r9, r1
  404cd4:	465b      	mov	r3, fp
  404cd6:	4628      	mov	r0, r5
  404cd8:	4621      	mov	r1, r4
  404cda:	f001 f83f 	bl	405d5c <__aeabi_dmul>
  404cde:	4602      	mov	r2, r0
  404ce0:	460b      	mov	r3, r1
  404ce2:	4640      	mov	r0, r8
  404ce4:	4649      	mov	r1, r9
  404ce6:	f000 fe85 	bl	4059f4 <__aeabi_dsub>
  404cea:	4602      	mov	r2, r0
  404cec:	460b      	mov	r3, r1
  404cee:	4630      	mov	r0, r6
  404cf0:	4639      	mov	r1, r7
  404cf2:	f000 fe7f 	bl	4059f4 <__aeabi_dsub>
  404cf6:	4602      	mov	r2, r0
  404cf8:	460b      	mov	r3, r1
  404cfa:	2000      	movs	r0, #0
  404cfc:	4953      	ldr	r1, [pc, #332]	; (404e4c <__kernel_cos+0x234>)
  404cfe:	f000 fe79 	bl	4059f4 <__aeabi_dsub>
  404d02:	b005      	add	sp, #20
  404d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d08:	4602      	mov	r2, r0
  404d0a:	460b      	mov	r3, r1
  404d0c:	f001 f826 	bl	405d5c <__aeabi_dmul>
  404d10:	a341      	add	r3, pc, #260	; (adr r3, 404e18 <__kernel_cos+0x200>)
  404d12:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d16:	4680      	mov	r8, r0
  404d18:	4689      	mov	r9, r1
  404d1a:	f001 f81f 	bl	405d5c <__aeabi_dmul>
  404d1e:	a340      	add	r3, pc, #256	; (adr r3, 404e20 <__kernel_cos+0x208>)
  404d20:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d24:	f000 fe68 	bl	4059f8 <__adddf3>
  404d28:	4642      	mov	r2, r8
  404d2a:	464b      	mov	r3, r9
  404d2c:	f001 f816 	bl	405d5c <__aeabi_dmul>
  404d30:	a33d      	add	r3, pc, #244	; (adr r3, 404e28 <__kernel_cos+0x210>)
  404d32:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d36:	f000 fe5d 	bl	4059f4 <__aeabi_dsub>
  404d3a:	4642      	mov	r2, r8
  404d3c:	464b      	mov	r3, r9
  404d3e:	f001 f80d 	bl	405d5c <__aeabi_dmul>
  404d42:	a33b      	add	r3, pc, #236	; (adr r3, 404e30 <__kernel_cos+0x218>)
  404d44:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d48:	f000 fe56 	bl	4059f8 <__adddf3>
  404d4c:	4642      	mov	r2, r8
  404d4e:	464b      	mov	r3, r9
  404d50:	f001 f804 	bl	405d5c <__aeabi_dmul>
  404d54:	a338      	add	r3, pc, #224	; (adr r3, 404e38 <__kernel_cos+0x220>)
  404d56:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d5a:	f000 fe4b 	bl	4059f4 <__aeabi_dsub>
  404d5e:	4642      	mov	r2, r8
  404d60:	464b      	mov	r3, r9
  404d62:	f000 fffb 	bl	405d5c <__aeabi_dmul>
  404d66:	a336      	add	r3, pc, #216	; (adr r3, 404e40 <__kernel_cos+0x228>)
  404d68:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d6c:	f000 fe44 	bl	4059f8 <__adddf3>
  404d70:	464b      	mov	r3, r9
  404d72:	4642      	mov	r2, r8
  404d74:	f000 fff2 	bl	405d5c <__aeabi_dmul>
  404d78:	4b35      	ldr	r3, [pc, #212]	; (404e50 <__kernel_cos+0x238>)
  404d7a:	429e      	cmp	r6, r3
  404d7c:	e9cd 0100 	strd	r0, r1, [sp]
  404d80:	dd97      	ble.n	404cb2 <__kernel_cos+0x9a>
  404d82:	4b34      	ldr	r3, [pc, #208]	; (404e54 <__kernel_cos+0x23c>)
  404d84:	429e      	cmp	r6, r3
  404d86:	f04f 0200 	mov.w	r2, #0
  404d8a:	dc38      	bgt.n	404dfe <__kernel_cos+0x1e6>
  404d8c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  404d90:	2000      	movs	r0, #0
  404d92:	492e      	ldr	r1, [pc, #184]	; (404e4c <__kernel_cos+0x234>)
  404d94:	4616      	mov	r6, r2
  404d96:	461f      	mov	r7, r3
  404d98:	f000 fe2c 	bl	4059f4 <__aeabi_dsub>
  404d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404da0:	2200      	movs	r2, #0
  404da2:	4b29      	ldr	r3, [pc, #164]	; (404e48 <__kernel_cos+0x230>)
  404da4:	4640      	mov	r0, r8
  404da6:	4649      	mov	r1, r9
  404da8:	f000 ffd8 	bl	405d5c <__aeabi_dmul>
  404dac:	4632      	mov	r2, r6
  404dae:	463b      	mov	r3, r7
  404db0:	f000 fe20 	bl	4059f4 <__aeabi_dsub>
  404db4:	e9dd 2300 	ldrd	r2, r3, [sp]
  404db8:	4606      	mov	r6, r0
  404dba:	460f      	mov	r7, r1
  404dbc:	4640      	mov	r0, r8
  404dbe:	4649      	mov	r1, r9
  404dc0:	f000 ffcc 	bl	405d5c <__aeabi_dmul>
  404dc4:	4652      	mov	r2, sl
  404dc6:	4680      	mov	r8, r0
  404dc8:	4689      	mov	r9, r1
  404dca:	465b      	mov	r3, fp
  404dcc:	4628      	mov	r0, r5
  404dce:	4621      	mov	r1, r4
  404dd0:	f000 ffc4 	bl	405d5c <__aeabi_dmul>
  404dd4:	4602      	mov	r2, r0
  404dd6:	460b      	mov	r3, r1
  404dd8:	4640      	mov	r0, r8
  404dda:	4649      	mov	r1, r9
  404ddc:	f000 fe0a 	bl	4059f4 <__aeabi_dsub>
  404de0:	4602      	mov	r2, r0
  404de2:	460b      	mov	r3, r1
  404de4:	4630      	mov	r0, r6
  404de6:	4639      	mov	r1, r7
  404de8:	f000 fe04 	bl	4059f4 <__aeabi_dsub>
  404dec:	4602      	mov	r2, r0
  404dee:	460b      	mov	r3, r1
  404df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404df4:	f000 fdfe 	bl	4059f4 <__aeabi_dsub>
  404df8:	b005      	add	sp, #20
  404dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dfe:	4b16      	ldr	r3, [pc, #88]	; (404e58 <__kernel_cos+0x240>)
  404e00:	4f16      	ldr	r7, [pc, #88]	; (404e5c <__kernel_cos+0x244>)
  404e02:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404e06:	2600      	movs	r6, #0
  404e08:	e7ca      	b.n	404da0 <__kernel_cos+0x188>
  404e0a:	4910      	ldr	r1, [pc, #64]	; (404e4c <__kernel_cos+0x234>)
  404e0c:	2000      	movs	r0, #0
  404e0e:	b005      	add	sp, #20
  404e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e14:	f3af 8000 	nop.w
  404e18:	be8838d4 	.word	0xbe8838d4
  404e1c:	bda8fae9 	.word	0xbda8fae9
  404e20:	bdb4b1c4 	.word	0xbdb4b1c4
  404e24:	3e21ee9e 	.word	0x3e21ee9e
  404e28:	809c52ad 	.word	0x809c52ad
  404e2c:	3e927e4f 	.word	0x3e927e4f
  404e30:	19cb1590 	.word	0x19cb1590
  404e34:	3efa01a0 	.word	0x3efa01a0
  404e38:	16c15177 	.word	0x16c15177
  404e3c:	3f56c16c 	.word	0x3f56c16c
  404e40:	5555554c 	.word	0x5555554c
  404e44:	3fa55555 	.word	0x3fa55555
  404e48:	3fe00000 	.word	0x3fe00000
  404e4c:	3ff00000 	.word	0x3ff00000
  404e50:	3fd33332 	.word	0x3fd33332
  404e54:	3fe90000 	.word	0x3fe90000
  404e58:	3fe70000 	.word	0x3fe70000
  404e5c:	3fd20000 	.word	0x3fd20000

00404e60 <__kernel_rem_pio2>:
  404e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e64:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  404e68:	4c79      	ldr	r4, [pc, #484]	; (405050 <__kernel_rem_pio2+0x1f0>)
  404e6a:	9ea6      	ldr	r6, [sp, #664]	; 0x298
  404e6c:	4d79      	ldr	r5, [pc, #484]	; (405054 <__kernel_rem_pio2+0x1f4>)
  404e6e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  404e72:	9409      	str	r4, [sp, #36]	; 0x24
  404e74:	4626      	mov	r6, r4
  404e76:	1ed4      	subs	r4, r2, #3
  404e78:	fb85 7504 	smull	r7, r5, r5, r4
  404e7c:	17e4      	asrs	r4, r4, #31
  404e7e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  404e82:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  404e86:	461d      	mov	r5, r3
  404e88:	930c      	str	r3, [sp, #48]	; 0x30
  404e8a:	1c63      	adds	r3, r4, #1
  404e8c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  404e90:	3d01      	subs	r5, #1
  404e92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404e96:	9308      	str	r3, [sp, #32]
  404e98:	462b      	mov	r3, r5
  404e9a:	940d      	str	r4, [sp, #52]	; 0x34
  404e9c:	9502      	str	r5, [sp, #8]
  404e9e:	1b65      	subs	r5, r4, r5
  404ea0:	18f4      	adds	r4, r6, r3
  404ea2:	9004      	str	r0, [sp, #16]
  404ea4:	910a      	str	r1, [sp, #40]	; 0x28
  404ea6:	d416      	bmi.n	404ed6 <__kernel_rem_pio2+0x76>
  404ea8:	442c      	add	r4, r5
  404eaa:	3401      	adds	r4, #1
  404eac:	ae22      	add	r6, sp, #136	; 0x88
  404eae:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  404eb0:	e008      	b.n	404ec4 <__kernel_rem_pio2+0x64>
  404eb2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  404eb6:	f000 feeb 	bl	405c90 <__aeabi_i2d>
  404eba:	3501      	adds	r5, #1
  404ebc:	42a5      	cmp	r5, r4
  404ebe:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404ec2:	d008      	beq.n	404ed6 <__kernel_rem_pio2+0x76>
  404ec4:	2d00      	cmp	r5, #0
  404ec6:	daf4      	bge.n	404eb2 <__kernel_rem_pio2+0x52>
  404ec8:	3501      	adds	r5, #1
  404eca:	2000      	movs	r0, #0
  404ecc:	2100      	movs	r1, #0
  404ece:	42a5      	cmp	r5, r4
  404ed0:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404ed4:	d1f6      	bne.n	404ec4 <__kernel_rem_pio2+0x64>
  404ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ed8:	2b00      	cmp	r3, #0
  404eda:	db31      	blt.n	404f40 <__kernel_rem_pio2+0xe0>
  404edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404ee0:	a974      	add	r1, sp, #464	; 0x1d0
  404ee2:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  404ee6:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  404eea:	9a02      	ldr	r2, [sp, #8]
  404eec:	a924      	add	r1, sp, #144	; 0x90
  404eee:	00db      	lsls	r3, r3, #3
  404ef0:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
  404ef4:	9301      	str	r3, [sp, #4]
  404ef6:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
  404efa:	9b02      	ldr	r3, [sp, #8]
  404efc:	2b00      	cmp	r3, #0
  404efe:	f2c0 8190 	blt.w	405222 <__kernel_rem_pio2+0x3c2>
  404f02:	9b04      	ldr	r3, [sp, #16]
  404f04:	f1a3 0508 	sub.w	r5, r3, #8
  404f08:	9b01      	ldr	r3, [sp, #4]
  404f0a:	464c      	mov	r4, r9
  404f0c:	eb09 0803 	add.w	r8, r9, r3
  404f10:	2600      	movs	r6, #0
  404f12:	2700      	movs	r7, #0
  404f14:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  404f18:	e874 0102 	ldrd	r0, r1, [r4], #-8
  404f1c:	f000 ff1e 	bl	405d5c <__aeabi_dmul>
  404f20:	4602      	mov	r2, r0
  404f22:	460b      	mov	r3, r1
  404f24:	4630      	mov	r0, r6
  404f26:	4639      	mov	r1, r7
  404f28:	f000 fd66 	bl	4059f8 <__adddf3>
  404f2c:	4544      	cmp	r4, r8
  404f2e:	4606      	mov	r6, r0
  404f30:	460f      	mov	r7, r1
  404f32:	d1ef      	bne.n	404f14 <__kernel_rem_pio2+0xb4>
  404f34:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  404f38:	45da      	cmp	sl, fp
  404f3a:	f109 0908 	add.w	r9, r9, #8
  404f3e:	d1dc      	bne.n	404efa <__kernel_rem_pio2+0x9a>
  404f40:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404f42:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  404f46:	3b02      	subs	r3, #2
  404f48:	009b      	lsls	r3, r3, #2
  404f4a:	1d1a      	adds	r2, r3, #4
  404f4c:	a910      	add	r1, sp, #64	; 0x40
  404f4e:	440a      	add	r2, r1
  404f50:	440b      	add	r3, r1
  404f52:	920f      	str	r2, [sp, #60]	; 0x3c
  404f54:	930e      	str	r3, [sp, #56]	; 0x38
  404f56:	ab9c      	add	r3, sp, #624	; 0x270
  404f58:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404f5c:	2d00      	cmp	r5, #0
  404f5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  404f62:	dd2b      	ble.n	404fbc <__kernel_rem_pio2+0x15c>
  404f64:	ab9c      	add	r3, sp, #624	; 0x270
  404f66:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
  404f6a:	3ca8      	subs	r4, #168	; 0xa8
  404f6c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
  404f70:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  404f74:	2200      	movs	r2, #0
  404f76:	4b38      	ldr	r3, [pc, #224]	; (405058 <__kernel_rem_pio2+0x1f8>)
  404f78:	4630      	mov	r0, r6
  404f7a:	4639      	mov	r1, r7
  404f7c:	f000 feee 	bl	405d5c <__aeabi_dmul>
  404f80:	f001 f986 	bl	406290 <__aeabi_d2iz>
  404f84:	f000 fe84 	bl	405c90 <__aeabi_i2d>
  404f88:	2200      	movs	r2, #0
  404f8a:	4b34      	ldr	r3, [pc, #208]	; (40505c <__kernel_rem_pio2+0x1fc>)
  404f8c:	4680      	mov	r8, r0
  404f8e:	4689      	mov	r9, r1
  404f90:	f000 fee4 	bl	405d5c <__aeabi_dmul>
  404f94:	4602      	mov	r2, r0
  404f96:	460b      	mov	r3, r1
  404f98:	4630      	mov	r0, r6
  404f9a:	4639      	mov	r1, r7
  404f9c:	f000 fd2a 	bl	4059f4 <__aeabi_dsub>
  404fa0:	f001 f976 	bl	406290 <__aeabi_d2iz>
  404fa4:	e874 2302 	ldrd	r2, r3, [r4], #-8
  404fa8:	f84a 0f04 	str.w	r0, [sl, #4]!
  404fac:	4649      	mov	r1, r9
  404fae:	4640      	mov	r0, r8
  404fb0:	f000 fd22 	bl	4059f8 <__adddf3>
  404fb4:	455c      	cmp	r4, fp
  404fb6:	4606      	mov	r6, r0
  404fb8:	460f      	mov	r7, r1
  404fba:	d1db      	bne.n	404f74 <__kernel_rem_pio2+0x114>
  404fbc:	9c08      	ldr	r4, [sp, #32]
  404fbe:	4630      	mov	r0, r6
  404fc0:	4639      	mov	r1, r7
  404fc2:	4622      	mov	r2, r4
  404fc4:	f000 fc8c 	bl	4058e0 <scalbn>
  404fc8:	2200      	movs	r2, #0
  404fca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  404fce:	4606      	mov	r6, r0
  404fd0:	460f      	mov	r7, r1
  404fd2:	f000 fec3 	bl	405d5c <__aeabi_dmul>
  404fd6:	f000 fbfb 	bl	4057d0 <floor>
  404fda:	2200      	movs	r2, #0
  404fdc:	4b20      	ldr	r3, [pc, #128]	; (405060 <__kernel_rem_pio2+0x200>)
  404fde:	f000 febd 	bl	405d5c <__aeabi_dmul>
  404fe2:	4602      	mov	r2, r0
  404fe4:	460b      	mov	r3, r1
  404fe6:	4630      	mov	r0, r6
  404fe8:	4639      	mov	r1, r7
  404fea:	f000 fd03 	bl	4059f4 <__aeabi_dsub>
  404fee:	460f      	mov	r7, r1
  404ff0:	4606      	mov	r6, r0
  404ff2:	f001 f94d 	bl	406290 <__aeabi_d2iz>
  404ff6:	4681      	mov	r9, r0
  404ff8:	f000 fe4a 	bl	405c90 <__aeabi_i2d>
  404ffc:	4602      	mov	r2, r0
  404ffe:	460b      	mov	r3, r1
  405000:	4630      	mov	r0, r6
  405002:	4639      	mov	r1, r7
  405004:	f000 fcf6 	bl	4059f4 <__aeabi_dsub>
  405008:	2c00      	cmp	r4, #0
  40500a:	4606      	mov	r6, r0
  40500c:	460f      	mov	r7, r1
  40500e:	f340 80ef 	ble.w	4051f0 <__kernel_rem_pio2+0x390>
  405012:	1e69      	subs	r1, r5, #1
  405014:	aa10      	add	r2, sp, #64	; 0x40
  405016:	f1c4 0318 	rsb	r3, r4, #24
  40501a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40501e:	fa42 f003 	asr.w	r0, r2, r3
  405022:	fa00 f303 	lsl.w	r3, r0, r3
  405026:	1ad3      	subs	r3, r2, r3
  405028:	aa10      	add	r2, sp, #64	; 0x40
  40502a:	f1c4 0817 	rsb	r8, r4, #23
  40502e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  405032:	4481      	add	r9, r0
  405034:	fa43 f808 	asr.w	r8, r3, r8
  405038:	f1b8 0f00 	cmp.w	r8, #0
  40503c:	dd3d      	ble.n	4050ba <__kernel_rem_pio2+0x25a>
  40503e:	2d00      	cmp	r5, #0
  405040:	f109 0901 	add.w	r9, r9, #1
  405044:	f340 82d6 	ble.w	4055f4 <__kernel_rem_pio2+0x794>
  405048:	2200      	movs	r2, #0
  40504a:	4614      	mov	r4, r2
  40504c:	a90f      	add	r1, sp, #60	; 0x3c
  40504e:	e011      	b.n	405074 <__kernel_rem_pio2+0x214>
  405050:	00407d50 	.word	0x00407d50
  405054:	2aaaaaab 	.word	0x2aaaaaab
  405058:	3e700000 	.word	0x3e700000
  40505c:	41700000 	.word	0x41700000
  405060:	40200000 	.word	0x40200000
  405064:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
  405068:	b10b      	cbz	r3, 40506e <__kernel_rem_pio2+0x20e>
  40506a:	6008      	str	r0, [r1, #0]
  40506c:	2401      	movs	r4, #1
  40506e:	3201      	adds	r2, #1
  405070:	4295      	cmp	r5, r2
  405072:	dd0d      	ble.n	405090 <__kernel_rem_pio2+0x230>
  405074:	f851 3f04 	ldr.w	r3, [r1, #4]!
  405078:	2c00      	cmp	r4, #0
  40507a:	d0f3      	beq.n	405064 <__kernel_rem_pio2+0x204>
  40507c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
  405080:	3201      	adds	r2, #1
  405082:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  405086:	4295      	cmp	r5, r2
  405088:	600b      	str	r3, [r1, #0]
  40508a:	f04f 0401 	mov.w	r4, #1
  40508e:	dcf1      	bgt.n	405074 <__kernel_rem_pio2+0x214>
  405090:	9b08      	ldr	r3, [sp, #32]
  405092:	2b00      	cmp	r3, #0
  405094:	dd0d      	ble.n	4050b2 <__kernel_rem_pio2+0x252>
  405096:	2b01      	cmp	r3, #1
  405098:	f000 80b2 	beq.w	405200 <__kernel_rem_pio2+0x3a0>
  40509c:	2b02      	cmp	r3, #2
  40509e:	d108      	bne.n	4050b2 <__kernel_rem_pio2+0x252>
  4050a0:	1e6a      	subs	r2, r5, #1
  4050a2:	ab10      	add	r3, sp, #64	; 0x40
  4050a4:	a910      	add	r1, sp, #64	; 0x40
  4050a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4050aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
  4050ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4050b2:	f1b8 0f02 	cmp.w	r8, #2
  4050b6:	f000 8082 	beq.w	4051be <__kernel_rem_pio2+0x35e>
  4050ba:	2200      	movs	r2, #0
  4050bc:	2300      	movs	r3, #0
  4050be:	4630      	mov	r0, r6
  4050c0:	4639      	mov	r1, r7
  4050c2:	f001 f8b3 	bl	40622c <__aeabi_dcmpeq>
  4050c6:	2800      	cmp	r0, #0
  4050c8:	f000 825e 	beq.w	405588 <__kernel_rem_pio2+0x728>
  4050cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050ce:	f105 3bff 	add.w	fp, r5, #4294967295
  4050d2:	455b      	cmp	r3, fp
  4050d4:	dc10      	bgt.n	4050f8 <__kernel_rem_pio2+0x298>
  4050d6:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  4050da:	aa10      	add	r2, sp, #64	; 0x40
  4050dc:	3b01      	subs	r3, #1
  4050de:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4050e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4050e4:	2200      	movs	r2, #0
  4050e6:	f853 1904 	ldr.w	r1, [r3], #-4
  4050ea:	4283      	cmp	r3, r0
  4050ec:	ea42 0201 	orr.w	r2, r2, r1
  4050f0:	d1f9      	bne.n	4050e6 <__kernel_rem_pio2+0x286>
  4050f2:	2a00      	cmp	r2, #0
  4050f4:	f040 80b2 	bne.w	40525c <__kernel_rem_pio2+0x3fc>
  4050f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050fa:	aa10      	add	r2, sp, #64	; 0x40
  4050fc:	3b01      	subs	r3, #1
  4050fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405102:	2b00      	cmp	r3, #0
  405104:	f040 8274 	bne.w	4055f0 <__kernel_rem_pio2+0x790>
  405108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40510a:	2301      	movs	r3, #1
  40510c:	f852 1904 	ldr.w	r1, [r2], #-4
  405110:	3301      	adds	r3, #1
  405112:	2900      	cmp	r1, #0
  405114:	d0fa      	beq.n	40510c <__kernel_rem_pio2+0x2ac>
  405116:	18e9      	adds	r1, r5, r3
  405118:	1c6a      	adds	r2, r5, #1
  40511a:	428a      	cmp	r2, r1
  40511c:	910b      	str	r1, [sp, #44]	; 0x2c
  40511e:	dc49      	bgt.n	4051b4 <__kernel_rem_pio2+0x354>
  405120:	990d      	ldr	r1, [sp, #52]	; 0x34
  405122:	980c      	ldr	r0, [sp, #48]	; 0x30
  405124:	1851      	adds	r1, r2, r1
  405126:	00db      	lsls	r3, r3, #3
  405128:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  40512c:	9305      	str	r3, [sp, #20]
  40512e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  405130:	4405      	add	r5, r0
  405132:	3901      	subs	r1, #1
  405134:	00e8      	lsls	r0, r5, #3
  405136:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
  40513a:	ab24      	add	r3, sp, #144	; 0x90
  40513c:	00d2      	lsls	r2, r2, #3
  40513e:	eb03 0b00 	add.w	fp, r3, r0
  405142:	ab74      	add	r3, sp, #464	; 0x1d0
  405144:	4413      	add	r3, r2
  405146:	9301      	str	r3, [sp, #4]
  405148:	f1a2 0308 	sub.w	r3, r2, #8
  40514c:	9006      	str	r0, [sp, #24]
  40514e:	9307      	str	r3, [sp, #28]
  405150:	f04f 0900 	mov.w	r9, #0
  405154:	f85a 0f04 	ldr.w	r0, [sl, #4]!
  405158:	f000 fd9a 	bl	405c90 <__aeabi_i2d>
  40515c:	9b02      	ldr	r3, [sp, #8]
  40515e:	2b00      	cmp	r3, #0
  405160:	e8eb 0102 	strd	r0, r1, [fp], #8
  405164:	db28      	blt.n	4051b8 <__kernel_rem_pio2+0x358>
  405166:	9b06      	ldr	r3, [sp, #24]
  405168:	eb03 0409 	add.w	r4, r3, r9
  40516c:	9b07      	ldr	r3, [sp, #28]
  40516e:	eb09 0803 	add.w	r8, r9, r3
  405172:	ab24      	add	r3, sp, #144	; 0x90
  405174:	441c      	add	r4, r3
  405176:	4498      	add	r8, r3
  405178:	9b04      	ldr	r3, [sp, #16]
  40517a:	2600      	movs	r6, #0
  40517c:	f1a3 0508 	sub.w	r5, r3, #8
  405180:	2700      	movs	r7, #0
  405182:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  405186:	e874 0102 	ldrd	r0, r1, [r4], #-8
  40518a:	f000 fde7 	bl	405d5c <__aeabi_dmul>
  40518e:	4602      	mov	r2, r0
  405190:	460b      	mov	r3, r1
  405192:	4630      	mov	r0, r6
  405194:	4639      	mov	r1, r7
  405196:	f000 fc2f 	bl	4059f8 <__adddf3>
  40519a:	4544      	cmp	r4, r8
  40519c:	4606      	mov	r6, r0
  40519e:	460f      	mov	r7, r1
  4051a0:	d1ef      	bne.n	405182 <__kernel_rem_pio2+0x322>
  4051a2:	9b01      	ldr	r3, [sp, #4]
  4051a4:	e8e3 6702 	strd	r6, r7, [r3], #8
  4051a8:	9301      	str	r3, [sp, #4]
  4051aa:	9b05      	ldr	r3, [sp, #20]
  4051ac:	f109 0908 	add.w	r9, r9, #8
  4051b0:	4599      	cmp	r9, r3
  4051b2:	d1cf      	bne.n	405154 <__kernel_rem_pio2+0x2f4>
  4051b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4051b6:	e6ce      	b.n	404f56 <__kernel_rem_pio2+0xf6>
  4051b8:	2600      	movs	r6, #0
  4051ba:	2700      	movs	r7, #0
  4051bc:	e7f1      	b.n	4051a2 <__kernel_rem_pio2+0x342>
  4051be:	4632      	mov	r2, r6
  4051c0:	463b      	mov	r3, r7
  4051c2:	2000      	movs	r0, #0
  4051c4:	49b0      	ldr	r1, [pc, #704]	; (405488 <__kernel_rem_pio2+0x628>)
  4051c6:	f000 fc15 	bl	4059f4 <__aeabi_dsub>
  4051ca:	4606      	mov	r6, r0
  4051cc:	460f      	mov	r7, r1
  4051ce:	2c00      	cmp	r4, #0
  4051d0:	f43f af73 	beq.w	4050ba <__kernel_rem_pio2+0x25a>
  4051d4:	9a08      	ldr	r2, [sp, #32]
  4051d6:	49ac      	ldr	r1, [pc, #688]	; (405488 <__kernel_rem_pio2+0x628>)
  4051d8:	2000      	movs	r0, #0
  4051da:	f000 fb81 	bl	4058e0 <scalbn>
  4051de:	4602      	mov	r2, r0
  4051e0:	460b      	mov	r3, r1
  4051e2:	4630      	mov	r0, r6
  4051e4:	4639      	mov	r1, r7
  4051e6:	f000 fc05 	bl	4059f4 <__aeabi_dsub>
  4051ea:	4606      	mov	r6, r0
  4051ec:	460f      	mov	r7, r1
  4051ee:	e764      	b.n	4050ba <__kernel_rem_pio2+0x25a>
  4051f0:	d110      	bne.n	405214 <__kernel_rem_pio2+0x3b4>
  4051f2:	1e6b      	subs	r3, r5, #1
  4051f4:	aa10      	add	r2, sp, #64	; 0x40
  4051f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4051fa:	ea4f 58e3 	mov.w	r8, r3, asr #23
  4051fe:	e71b      	b.n	405038 <__kernel_rem_pio2+0x1d8>
  405200:	1e6a      	subs	r2, r5, #1
  405202:	ab10      	add	r3, sp, #64	; 0x40
  405204:	a910      	add	r1, sp, #64	; 0x40
  405206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40520a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40520e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  405212:	e74e      	b.n	4050b2 <__kernel_rem_pio2+0x252>
  405214:	2200      	movs	r2, #0
  405216:	4b9d      	ldr	r3, [pc, #628]	; (40548c <__kernel_rem_pio2+0x62c>)
  405218:	f001 f826 	bl	406268 <__aeabi_dcmpge>
  40521c:	b958      	cbnz	r0, 405236 <__kernel_rem_pio2+0x3d6>
  40521e:	4680      	mov	r8, r0
  405220:	e74b      	b.n	4050ba <__kernel_rem_pio2+0x25a>
  405222:	2600      	movs	r6, #0
  405224:	2700      	movs	r7, #0
  405226:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40522a:	45da      	cmp	sl, fp
  40522c:	f109 0908 	add.w	r9, r9, #8
  405230:	f47f ae63 	bne.w	404efa <__kernel_rem_pio2+0x9a>
  405234:	e684      	b.n	404f40 <__kernel_rem_pio2+0xe0>
  405236:	2d00      	cmp	r5, #0
  405238:	f109 0901 	add.w	r9, r9, #1
  40523c:	bfc8      	it	gt
  40523e:	f04f 0802 	movgt.w	r8, #2
  405242:	f73f af01 	bgt.w	405048 <__kernel_rem_pio2+0x1e8>
  405246:	4632      	mov	r2, r6
  405248:	463b      	mov	r3, r7
  40524a:	2000      	movs	r0, #0
  40524c:	498e      	ldr	r1, [pc, #568]	; (405488 <__kernel_rem_pio2+0x628>)
  40524e:	f000 fbd1 	bl	4059f4 <__aeabi_dsub>
  405252:	f04f 0802 	mov.w	r8, #2
  405256:	4606      	mov	r6, r0
  405258:	460f      	mov	r7, r1
  40525a:	e72e      	b.n	4050ba <__kernel_rem_pio2+0x25a>
  40525c:	ab10      	add	r3, sp, #64	; 0x40
  40525e:	9a08      	ldr	r2, [sp, #32]
  405260:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
  405264:	f8cd 9014 	str.w	r9, [sp, #20]
  405268:	3a18      	subs	r2, #24
  40526a:	f8cd 8004 	str.w	r8, [sp, #4]
  40526e:	9208      	str	r2, [sp, #32]
  405270:	b96b      	cbnz	r3, 40528e <__kernel_rem_pio2+0x42e>
  405272:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
  405276:	3b01      	subs	r3, #1
  405278:	a910      	add	r1, sp, #64	; 0x40
  40527a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40527e:	f853 1904 	ldr.w	r1, [r3], #-4
  405282:	f10b 3bff 	add.w	fp, fp, #4294967295
  405286:	3a18      	subs	r2, #24
  405288:	2900      	cmp	r1, #0
  40528a:	d0f8      	beq.n	40527e <__kernel_rem_pio2+0x41e>
  40528c:	9208      	str	r2, [sp, #32]
  40528e:	9a08      	ldr	r2, [sp, #32]
  405290:	497d      	ldr	r1, [pc, #500]	; (405488 <__kernel_rem_pio2+0x628>)
  405292:	2000      	movs	r0, #0
  405294:	f000 fb24 	bl	4058e0 <scalbn>
  405298:	f1bb 0f00 	cmp.w	fp, #0
  40529c:	4604      	mov	r4, r0
  40529e:	460d      	mov	r5, r1
  4052a0:	f2c0 81b8 	blt.w	405614 <__kernel_rem_pio2+0x7b4>
  4052a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  4052a8:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
  4052ac:	aa10      	add	r2, sp, #64	; 0x40
  4052ae:	eb02 068b 	add.w	r6, r2, fp, lsl #2
  4052b2:	eb08 0903 	add.w	r9, r8, r3
  4052b6:	9304      	str	r3, [sp, #16]
  4052b8:	3604      	adds	r6, #4
  4052ba:	f109 0708 	add.w	r7, r9, #8
  4052be:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  4052c2:	f000 fce5 	bl	405c90 <__aeabi_i2d>
  4052c6:	4622      	mov	r2, r4
  4052c8:	462b      	mov	r3, r5
  4052ca:	f000 fd47 	bl	405d5c <__aeabi_dmul>
  4052ce:	2200      	movs	r2, #0
  4052d0:	e967 0102 	strd	r0, r1, [r7, #-8]!
  4052d4:	4b6e      	ldr	r3, [pc, #440]	; (405490 <__kernel_rem_pio2+0x630>)
  4052d6:	4620      	mov	r0, r4
  4052d8:	4629      	mov	r1, r5
  4052da:	f000 fd3f 	bl	405d5c <__aeabi_dmul>
  4052de:	45b8      	cmp	r8, r7
  4052e0:	4604      	mov	r4, r0
  4052e2:	460d      	mov	r5, r1
  4052e4:	d1eb      	bne.n	4052be <__kernel_rem_pio2+0x45e>
  4052e6:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  4052ea:	464b      	mov	r3, r9
  4052ec:	f8cd a008 	str.w	sl, [sp, #8]
  4052f0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4052f4:	f8cd b018 	str.w	fp, [sp, #24]
  4052f8:	f04f 0900 	mov.w	r9, #0
  4052fc:	469b      	mov	fp, r3
  4052fe:	f1ba 0f00 	cmp.w	sl, #0
  405302:	f2c0 812a 	blt.w	40555a <__kernel_rem_pio2+0x6fa>
  405306:	f8df 818c 	ldr.w	r8, [pc, #396]	; 405494 <__kernel_rem_pio2+0x634>
  40530a:	465d      	mov	r5, fp
  40530c:	a35c      	add	r3, pc, #368	; (adr r3, 405480 <__kernel_rem_pio2+0x620>)
  40530e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405312:	2600      	movs	r6, #0
  405314:	2700      	movs	r7, #0
  405316:	2400      	movs	r4, #0
  405318:	e003      	b.n	405322 <__kernel_rem_pio2+0x4c2>
  40531a:	45a1      	cmp	r9, r4
  40531c:	db10      	blt.n	405340 <__kernel_rem_pio2+0x4e0>
  40531e:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
  405322:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  405326:	f000 fd19 	bl	405d5c <__aeabi_dmul>
  40532a:	4602      	mov	r2, r0
  40532c:	460b      	mov	r3, r1
  40532e:	4630      	mov	r0, r6
  405330:	4639      	mov	r1, r7
  405332:	f000 fb61 	bl	4059f8 <__adddf3>
  405336:	3401      	adds	r4, #1
  405338:	45a2      	cmp	sl, r4
  40533a:	4606      	mov	r6, r0
  40533c:	460f      	mov	r7, r1
  40533e:	daec      	bge.n	40531a <__kernel_rem_pio2+0x4ba>
  405340:	9b02      	ldr	r3, [sp, #8]
  405342:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  405346:	f1ab 0b08 	sub.w	fp, fp, #8
  40534a:	e9c3 6700 	strd	r6, r7, [r3]
  40534e:	ab72      	add	r3, sp, #456	; 0x1c8
  405350:	455b      	cmp	r3, fp
  405352:	f109 0901 	add.w	r9, r9, #1
  405356:	d1d2      	bne.n	4052fe <__kernel_rem_pio2+0x49e>
  405358:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  40535a:	f8dd b018 	ldr.w	fp, [sp, #24]
  40535e:	f8dd a008 	ldr.w	sl, [sp, #8]
  405362:	2b03      	cmp	r3, #3
  405364:	f200 8083 	bhi.w	40546e <__kernel_rem_pio2+0x60e>
  405368:	e8df f013 	tbh	[pc, r3, lsl #1]
  40536c:	009600d5 	.word	0x009600d5
  405370:	00040096 	.word	0x00040096
  405374:	f1bb 0f00 	cmp.w	fp, #0
  405378:	f340 8156 	ble.w	405628 <__kernel_rem_pio2+0x7c8>
  40537c:	9b04      	ldr	r3, [sp, #16]
  40537e:	f8cd b008 	str.w	fp, [sp, #8]
  405382:	eb0a 0803 	add.w	r8, sl, r3
  405386:	e9d8 6700 	ldrd	r6, r7, [r8]
  40538a:	46d3      	mov	fp, sl
  40538c:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  405390:	4632      	mov	r2, r6
  405392:	463b      	mov	r3, r7
  405394:	4648      	mov	r0, r9
  405396:	4651      	mov	r1, sl
  405398:	f000 fb2e 	bl	4059f8 <__adddf3>
  40539c:	4604      	mov	r4, r0
  40539e:	460d      	mov	r5, r1
  4053a0:	4602      	mov	r2, r0
  4053a2:	460b      	mov	r3, r1
  4053a4:	4648      	mov	r0, r9
  4053a6:	4651      	mov	r1, sl
  4053a8:	f000 fb24 	bl	4059f4 <__aeabi_dsub>
  4053ac:	4632      	mov	r2, r6
  4053ae:	463b      	mov	r3, r7
  4053b0:	f000 fb22 	bl	4059f8 <__adddf3>
  4053b4:	e9c8 0100 	strd	r0, r1, [r8]
  4053b8:	e968 4502 	strd	r4, r5, [r8, #-8]!
  4053bc:	45c3      	cmp	fp, r8
  4053be:	4626      	mov	r6, r4
  4053c0:	462f      	mov	r7, r5
  4053c2:	d1e3      	bne.n	40538c <__kernel_rem_pio2+0x52c>
  4053c4:	46da      	mov	sl, fp
  4053c6:	f8dd b008 	ldr.w	fp, [sp, #8]
  4053ca:	f1bb 0f01 	cmp.w	fp, #1
  4053ce:	f340 812b 	ble.w	405628 <__kernel_rem_pio2+0x7c8>
  4053d2:	9b04      	ldr	r3, [sp, #16]
  4053d4:	4453      	add	r3, sl
  4053d6:	e9d3 6700 	ldrd	r6, r7, [r3]
  4053da:	4698      	mov	r8, r3
  4053dc:	4699      	mov	r9, r3
  4053de:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  4053e2:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  4053e6:	4630      	mov	r0, r6
  4053e8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4053ec:	461a      	mov	r2, r3
  4053ee:	4639      	mov	r1, r7
  4053f0:	4623      	mov	r3, r4
  4053f2:	f000 fb01 	bl	4059f8 <__adddf3>
  4053f6:	4604      	mov	r4, r0
  4053f8:	460d      	mov	r5, r1
  4053fa:	4602      	mov	r2, r0
  4053fc:	460b      	mov	r3, r1
  4053fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405402:	f000 faf7 	bl	4059f4 <__aeabi_dsub>
  405406:	4632      	mov	r2, r6
  405408:	463b      	mov	r3, r7
  40540a:	f000 faf5 	bl	4059f8 <__adddf3>
  40540e:	e9c9 0100 	strd	r0, r1, [r9]
  405412:	e969 4502 	strd	r4, r5, [r9, #-8]!
  405416:	45cb      	cmp	fp, r9
  405418:	4626      	mov	r6, r4
  40541a:	462f      	mov	r7, r5
  40541c:	d1e1      	bne.n	4053e2 <__kernel_rem_pio2+0x582>
  40541e:	2300      	movs	r3, #0
  405420:	f108 0808 	add.w	r8, r8, #8
  405424:	461d      	mov	r5, r3
  405426:	ac50      	add	r4, sp, #320	; 0x140
  405428:	4618      	mov	r0, r3
  40542a:	4629      	mov	r1, r5
  40542c:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  405430:	f000 fae2 	bl	4059f8 <__adddf3>
  405434:	4544      	cmp	r4, r8
  405436:	4603      	mov	r3, r0
  405438:	460d      	mov	r5, r1
  40543a:	d1f5      	bne.n	405428 <__kernel_rem_pio2+0x5c8>
  40543c:	9a01      	ldr	r2, [sp, #4]
  40543e:	2a00      	cmp	r2, #0
  405440:	f000 80da 	beq.w	4055f8 <__kernel_rem_pio2+0x798>
  405444:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405446:	f8da 4004 	ldr.w	r4, [sl, #4]
  40544a:	f8da 200c 	ldr.w	r2, [sl, #12]
  40544e:	f8da 1000 	ldr.w	r1, [sl]
  405452:	f8da 0008 	ldr.w	r0, [sl, #8]
  405456:	613b      	str	r3, [r7, #16]
  405458:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  40545c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  405460:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  405464:	617d      	str	r5, [r7, #20]
  405466:	607c      	str	r4, [r7, #4]
  405468:	60fb      	str	r3, [r7, #12]
  40546a:	6039      	str	r1, [r7, #0]
  40546c:	60b8      	str	r0, [r7, #8]
  40546e:	9b05      	ldr	r3, [sp, #20]
  405470:	f003 0007 	and.w	r0, r3, #7
  405474:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  405478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40547c:	f3af 8000 	nop.w
  405480:	40000000 	.word	0x40000000
  405484:	3ff921fb 	.word	0x3ff921fb
  405488:	3ff00000 	.word	0x3ff00000
  40548c:	3fe00000 	.word	0x3fe00000
  405490:	3e700000 	.word	0x3e700000
  405494:	00407d60 	.word	0x00407d60
  405498:	9c04      	ldr	r4, [sp, #16]
  40549a:	2600      	movs	r6, #0
  40549c:	3408      	adds	r4, #8
  40549e:	4454      	add	r4, sl
  4054a0:	4633      	mov	r3, r6
  4054a2:	4630      	mov	r0, r6
  4054a4:	4619      	mov	r1, r3
  4054a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  4054aa:	f000 faa5 	bl	4059f8 <__adddf3>
  4054ae:	4554      	cmp	r4, sl
  4054b0:	4606      	mov	r6, r0
  4054b2:	460b      	mov	r3, r1
  4054b4:	d1f5      	bne.n	4054a2 <__kernel_rem_pio2+0x642>
  4054b6:	9a01      	ldr	r2, [sp, #4]
  4054b8:	4630      	mov	r0, r6
  4054ba:	4619      	mov	r1, r3
  4054bc:	2a00      	cmp	r2, #0
  4054be:	d04f      	beq.n	405560 <__kernel_rem_pio2+0x700>
  4054c0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4054c2:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  4054c6:	4632      	mov	r2, r6
  4054c8:	6044      	str	r4, [r0, #4]
  4054ca:	6006      	str	r6, [r0, #0]
  4054cc:	e9da 0100 	ldrd	r0, r1, [sl]
  4054d0:	f000 fa90 	bl	4059f4 <__aeabi_dsub>
  4054d4:	f1bb 0f00 	cmp.w	fp, #0
  4054d8:	4602      	mov	r2, r0
  4054da:	460b      	mov	r3, r1
  4054dc:	dd0d      	ble.n	4054fa <__kernel_rem_pio2+0x69a>
  4054de:	2401      	movs	r4, #1
  4054e0:	4610      	mov	r0, r2
  4054e2:	4619      	mov	r1, r3
  4054e4:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  4054e8:	f000 fa86 	bl	4059f8 <__adddf3>
  4054ec:	3401      	adds	r4, #1
  4054ee:	45a3      	cmp	fp, r4
  4054f0:	4602      	mov	r2, r0
  4054f2:	460b      	mov	r3, r1
  4054f4:	daf4      	bge.n	4054e0 <__kernel_rem_pio2+0x680>
  4054f6:	9901      	ldr	r1, [sp, #4]
  4054f8:	b109      	cbz	r1, 4054fe <__kernel_rem_pio2+0x69e>
  4054fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4054fe:	4619      	mov	r1, r3
  405500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405502:	4610      	mov	r0, r2
  405504:	e9c3 0102 	strd	r0, r1, [r3, #8]
  405508:	9b05      	ldr	r3, [sp, #20]
  40550a:	f003 0007 	and.w	r0, r3, #7
  40550e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  405512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405516:	9b04      	ldr	r3, [sp, #16]
  405518:	2200      	movs	r2, #0
  40551a:	3308      	adds	r3, #8
  40551c:	449a      	add	sl, r3
  40551e:	4613      	mov	r3, r2
  405520:	4610      	mov	r0, r2
  405522:	4619      	mov	r1, r3
  405524:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
  405528:	f000 fa66 	bl	4059f8 <__adddf3>
  40552c:	f10b 3bff 	add.w	fp, fp, #4294967295
  405530:	f1bb 3fff 	cmp.w	fp, #4294967295
  405534:	4602      	mov	r2, r0
  405536:	460b      	mov	r3, r1
  405538:	d1f2      	bne.n	405520 <__kernel_rem_pio2+0x6c0>
  40553a:	9901      	ldr	r1, [sp, #4]
  40553c:	b109      	cbz	r1, 405542 <__kernel_rem_pio2+0x6e2>
  40553e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405542:	4619      	mov	r1, r3
  405544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405546:	4610      	mov	r0, r2
  405548:	e9c3 0100 	strd	r0, r1, [r3]
  40554c:	9b05      	ldr	r3, [sp, #20]
  40554e:	f003 0007 	and.w	r0, r3, #7
  405552:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  405556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40555a:	2600      	movs	r6, #0
  40555c:	2700      	movs	r7, #0
  40555e:	e6ef      	b.n	405340 <__kernel_rem_pio2+0x4e0>
  405560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405562:	4632      	mov	r2, r6
  405564:	e9c3 0100 	strd	r0, r1, [r3]
  405568:	460b      	mov	r3, r1
  40556a:	e9da 0100 	ldrd	r0, r1, [sl]
  40556e:	f000 fa41 	bl	4059f4 <__aeabi_dsub>
  405572:	f1bb 0f00 	cmp.w	fp, #0
  405576:	4602      	mov	r2, r0
  405578:	460b      	mov	r3, r1
  40557a:	dcb0      	bgt.n	4054de <__kernel_rem_pio2+0x67e>
  40557c:	4619      	mov	r1, r3
  40557e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405580:	4610      	mov	r0, r2
  405582:	e9c3 0102 	strd	r0, r1, [r3, #8]
  405586:	e7bf      	b.n	405508 <__kernel_rem_pio2+0x6a8>
  405588:	9b08      	ldr	r3, [sp, #32]
  40558a:	f8cd 9014 	str.w	r9, [sp, #20]
  40558e:	425a      	negs	r2, r3
  405590:	4630      	mov	r0, r6
  405592:	4639      	mov	r1, r7
  405594:	f8cd 8004 	str.w	r8, [sp, #4]
  405598:	f000 f9a2 	bl	4058e0 <scalbn>
  40559c:	2200      	movs	r2, #0
  40559e:	4b2c      	ldr	r3, [pc, #176]	; (405650 <__kernel_rem_pio2+0x7f0>)
  4055a0:	4606      	mov	r6, r0
  4055a2:	460f      	mov	r7, r1
  4055a4:	f000 fe60 	bl	406268 <__aeabi_dcmpge>
  4055a8:	2800      	cmp	r0, #0
  4055aa:	d040      	beq.n	40562e <__kernel_rem_pio2+0x7ce>
  4055ac:	2200      	movs	r2, #0
  4055ae:	4b29      	ldr	r3, [pc, #164]	; (405654 <__kernel_rem_pio2+0x7f4>)
  4055b0:	4630      	mov	r0, r6
  4055b2:	4639      	mov	r1, r7
  4055b4:	f000 fbd2 	bl	405d5c <__aeabi_dmul>
  4055b8:	f000 fe6a 	bl	406290 <__aeabi_d2iz>
  4055bc:	4604      	mov	r4, r0
  4055be:	f000 fb67 	bl	405c90 <__aeabi_i2d>
  4055c2:	2200      	movs	r2, #0
  4055c4:	4b22      	ldr	r3, [pc, #136]	; (405650 <__kernel_rem_pio2+0x7f0>)
  4055c6:	f000 fbc9 	bl	405d5c <__aeabi_dmul>
  4055ca:	460b      	mov	r3, r1
  4055cc:	4602      	mov	r2, r0
  4055ce:	4639      	mov	r1, r7
  4055d0:	4630      	mov	r0, r6
  4055d2:	f000 fa0f 	bl	4059f4 <__aeabi_dsub>
  4055d6:	f000 fe5b 	bl	406290 <__aeabi_d2iz>
  4055da:	9b08      	ldr	r3, [sp, #32]
  4055dc:	3318      	adds	r3, #24
  4055de:	f105 0b01 	add.w	fp, r5, #1
  4055e2:	9308      	str	r3, [sp, #32]
  4055e4:	ab10      	add	r3, sp, #64	; 0x40
  4055e6:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  4055ea:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
  4055ee:	e64e      	b.n	40528e <__kernel_rem_pio2+0x42e>
  4055f0:	2301      	movs	r3, #1
  4055f2:	e590      	b.n	405116 <__kernel_rem_pio2+0x2b6>
  4055f4:	2400      	movs	r4, #0
  4055f6:	e54b      	b.n	405090 <__kernel_rem_pio2+0x230>
  4055f8:	4618      	mov	r0, r3
  4055fa:	4629      	mov	r1, r5
  4055fc:	e9da 2300 	ldrd	r2, r3, [sl]
  405600:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  405604:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405606:	e9c7 0104 	strd	r0, r1, [r7, #16]
  40560a:	e9c7 2300 	strd	r2, r3, [r7]
  40560e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  405612:	e72c      	b.n	40546e <__kernel_rem_pio2+0x60e>
  405614:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  405616:	2b03      	cmp	r3, #3
  405618:	f63f af29 	bhi.w	40546e <__kernel_rem_pio2+0x60e>
  40561c:	e8df f003 	tbb	[pc, r3]
  405620:	02101015 	.word	0x02101015
  405624:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  405628:	2300      	movs	r3, #0
  40562a:	461d      	mov	r5, r3
  40562c:	e706      	b.n	40543c <__kernel_rem_pio2+0x5dc>
  40562e:	4630      	mov	r0, r6
  405630:	4639      	mov	r1, r7
  405632:	f000 fe2d 	bl	406290 <__aeabi_d2iz>
  405636:	ab10      	add	r3, sp, #64	; 0x40
  405638:	46ab      	mov	fp, r5
  40563a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  40563e:	e626      	b.n	40528e <__kernel_rem_pio2+0x42e>
  405640:	2600      	movs	r6, #0
  405642:	4633      	mov	r3, r6
  405644:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  405648:	e735      	b.n	4054b6 <__kernel_rem_pio2+0x656>
  40564a:	2200      	movs	r2, #0
  40564c:	4613      	mov	r3, r2
  40564e:	e774      	b.n	40553a <__kernel_rem_pio2+0x6da>
  405650:	41700000 	.word	0x41700000
  405654:	3e700000 	.word	0x3e700000

00405658 <__kernel_sin>:
  405658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40565c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  405660:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  405664:	b085      	sub	sp, #20
  405666:	460c      	mov	r4, r1
  405668:	4690      	mov	r8, r2
  40566a:	4699      	mov	r9, r3
  40566c:	4605      	mov	r5, r0
  40566e:	da04      	bge.n	40567a <__kernel_sin+0x22>
  405670:	f000 fe0e 	bl	406290 <__aeabi_d2iz>
  405674:	2800      	cmp	r0, #0
  405676:	f000 8085 	beq.w	405784 <__kernel_sin+0x12c>
  40567a:	462a      	mov	r2, r5
  40567c:	4623      	mov	r3, r4
  40567e:	4628      	mov	r0, r5
  405680:	4621      	mov	r1, r4
  405682:	f000 fb6b 	bl	405d5c <__aeabi_dmul>
  405686:	4606      	mov	r6, r0
  405688:	460f      	mov	r7, r1
  40568a:	4602      	mov	r2, r0
  40568c:	460b      	mov	r3, r1
  40568e:	4628      	mov	r0, r5
  405690:	4621      	mov	r1, r4
  405692:	f000 fb63 	bl	405d5c <__aeabi_dmul>
  405696:	a33e      	add	r3, pc, #248	; (adr r3, 405790 <__kernel_sin+0x138>)
  405698:	e9d3 2300 	ldrd	r2, r3, [r3]
  40569c:	4682      	mov	sl, r0
  40569e:	468b      	mov	fp, r1
  4056a0:	4630      	mov	r0, r6
  4056a2:	4639      	mov	r1, r7
  4056a4:	f000 fb5a 	bl	405d5c <__aeabi_dmul>
  4056a8:	a33b      	add	r3, pc, #236	; (adr r3, 405798 <__kernel_sin+0x140>)
  4056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056ae:	f000 f9a1 	bl	4059f4 <__aeabi_dsub>
  4056b2:	4632      	mov	r2, r6
  4056b4:	463b      	mov	r3, r7
  4056b6:	f000 fb51 	bl	405d5c <__aeabi_dmul>
  4056ba:	a339      	add	r3, pc, #228	; (adr r3, 4057a0 <__kernel_sin+0x148>)
  4056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056c0:	f000 f99a 	bl	4059f8 <__adddf3>
  4056c4:	4632      	mov	r2, r6
  4056c6:	463b      	mov	r3, r7
  4056c8:	f000 fb48 	bl	405d5c <__aeabi_dmul>
  4056cc:	a336      	add	r3, pc, #216	; (adr r3, 4057a8 <__kernel_sin+0x150>)
  4056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056d2:	f000 f98f 	bl	4059f4 <__aeabi_dsub>
  4056d6:	4632      	mov	r2, r6
  4056d8:	463b      	mov	r3, r7
  4056da:	f000 fb3f 	bl	405d5c <__aeabi_dmul>
  4056de:	a334      	add	r3, pc, #208	; (adr r3, 4057b0 <__kernel_sin+0x158>)
  4056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056e4:	f000 f988 	bl	4059f8 <__adddf3>
  4056e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4056ea:	e9cd 0100 	strd	r0, r1, [sp]
  4056ee:	b39b      	cbz	r3, 405758 <__kernel_sin+0x100>
  4056f0:	2200      	movs	r2, #0
  4056f2:	4b33      	ldr	r3, [pc, #204]	; (4057c0 <__kernel_sin+0x168>)
  4056f4:	4640      	mov	r0, r8
  4056f6:	4649      	mov	r1, r9
  4056f8:	f000 fb30 	bl	405d5c <__aeabi_dmul>
  4056fc:	e9dd 2300 	ldrd	r2, r3, [sp]
  405700:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405704:	4650      	mov	r0, sl
  405706:	4659      	mov	r1, fp
  405708:	f000 fb28 	bl	405d5c <__aeabi_dmul>
  40570c:	4602      	mov	r2, r0
  40570e:	460b      	mov	r3, r1
  405710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405714:	f000 f96e 	bl	4059f4 <__aeabi_dsub>
  405718:	4632      	mov	r2, r6
  40571a:	463b      	mov	r3, r7
  40571c:	f000 fb1e 	bl	405d5c <__aeabi_dmul>
  405720:	4642      	mov	r2, r8
  405722:	464b      	mov	r3, r9
  405724:	f000 f966 	bl	4059f4 <__aeabi_dsub>
  405728:	a323      	add	r3, pc, #140	; (adr r3, 4057b8 <__kernel_sin+0x160>)
  40572a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40572e:	4606      	mov	r6, r0
  405730:	460f      	mov	r7, r1
  405732:	4650      	mov	r0, sl
  405734:	4659      	mov	r1, fp
  405736:	f000 fb11 	bl	405d5c <__aeabi_dmul>
  40573a:	4602      	mov	r2, r0
  40573c:	460b      	mov	r3, r1
  40573e:	4630      	mov	r0, r6
  405740:	4639      	mov	r1, r7
  405742:	f000 f959 	bl	4059f8 <__adddf3>
  405746:	4602      	mov	r2, r0
  405748:	460b      	mov	r3, r1
  40574a:	4628      	mov	r0, r5
  40574c:	4621      	mov	r1, r4
  40574e:	f000 f951 	bl	4059f4 <__aeabi_dsub>
  405752:	b005      	add	sp, #20
  405754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405758:	4602      	mov	r2, r0
  40575a:	460b      	mov	r3, r1
  40575c:	4630      	mov	r0, r6
  40575e:	4639      	mov	r1, r7
  405760:	f000 fafc 	bl	405d5c <__aeabi_dmul>
  405764:	a314      	add	r3, pc, #80	; (adr r3, 4057b8 <__kernel_sin+0x160>)
  405766:	e9d3 2300 	ldrd	r2, r3, [r3]
  40576a:	f000 f943 	bl	4059f4 <__aeabi_dsub>
  40576e:	4652      	mov	r2, sl
  405770:	465b      	mov	r3, fp
  405772:	f000 faf3 	bl	405d5c <__aeabi_dmul>
  405776:	462a      	mov	r2, r5
  405778:	4623      	mov	r3, r4
  40577a:	f000 f93d 	bl	4059f8 <__adddf3>
  40577e:	b005      	add	sp, #20
  405780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405784:	4628      	mov	r0, r5
  405786:	4621      	mov	r1, r4
  405788:	b005      	add	sp, #20
  40578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40578e:	bf00      	nop
  405790:	5acfd57c 	.word	0x5acfd57c
  405794:	3de5d93a 	.word	0x3de5d93a
  405798:	8a2b9ceb 	.word	0x8a2b9ceb
  40579c:	3e5ae5e6 	.word	0x3e5ae5e6
  4057a0:	57b1fe7d 	.word	0x57b1fe7d
  4057a4:	3ec71de3 	.word	0x3ec71de3
  4057a8:	19c161d5 	.word	0x19c161d5
  4057ac:	3f2a01a0 	.word	0x3f2a01a0
  4057b0:	1110f8a6 	.word	0x1110f8a6
  4057b4:	3f811111 	.word	0x3f811111
  4057b8:	55555549 	.word	0x55555549
  4057bc:	3fc55555 	.word	0x3fc55555
  4057c0:	3fe00000 	.word	0x3fe00000

004057c4 <fabs>:
  4057c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4057c8:	4770      	bx	lr
  4057ca:	bf00      	nop
  4057cc:	0000      	movs	r0, r0
	...

004057d0 <floor>:
  4057d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
  4057d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4057d8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  4057dc:	2e13      	cmp	r6, #19
  4057de:	460b      	mov	r3, r1
  4057e0:	460d      	mov	r5, r1
  4057e2:	4604      	mov	r4, r0
  4057e4:	4688      	mov	r8, r1
  4057e6:	4607      	mov	r7, r0
  4057e8:	dc1c      	bgt.n	405824 <floor+0x54>
  4057ea:	2e00      	cmp	r6, #0
  4057ec:	db3f      	blt.n	40586e <floor+0x9e>
  4057ee:	4a3a      	ldr	r2, [pc, #232]	; (4058d8 <floor+0x108>)
  4057f0:	fa42 f906 	asr.w	r9, r2, r6
  4057f4:	ea01 0209 	and.w	r2, r1, r9
  4057f8:	4302      	orrs	r2, r0
  4057fa:	4686      	mov	lr, r0
  4057fc:	d017      	beq.n	40582e <floor+0x5e>
  4057fe:	a334      	add	r3, pc, #208	; (adr r3, 4058d0 <floor+0x100>)
  405800:	e9d3 2300 	ldrd	r2, r3, [r3]
  405804:	f000 f8f8 	bl	4059f8 <__adddf3>
  405808:	2200      	movs	r2, #0
  40580a:	2300      	movs	r3, #0
  40580c:	f000 fd36 	bl	40627c <__aeabi_dcmpgt>
  405810:	b120      	cbz	r0, 40581c <floor+0x4c>
  405812:	2d00      	cmp	r5, #0
  405814:	db40      	blt.n	405898 <floor+0xc8>
  405816:	ea28 0509 	bic.w	r5, r8, r9
  40581a:	2700      	movs	r7, #0
  40581c:	4638      	mov	r0, r7
  40581e:	4629      	mov	r1, r5
  405820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405824:	2e33      	cmp	r6, #51	; 0x33
  405826:	dd06      	ble.n	405836 <floor+0x66>
  405828:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  40582c:	d02f      	beq.n	40588e <floor+0xbe>
  40582e:	4620      	mov	r0, r4
  405830:	4619      	mov	r1, r3
  405832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405836:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  40583a:	f04f 39ff 	mov.w	r9, #4294967295
  40583e:	fa29 f902 	lsr.w	r9, r9, r2
  405842:	ea10 0f09 	tst.w	r0, r9
  405846:	d0f2      	beq.n	40582e <floor+0x5e>
  405848:	a321      	add	r3, pc, #132	; (adr r3, 4058d0 <floor+0x100>)
  40584a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40584e:	f000 f8d3 	bl	4059f8 <__adddf3>
  405852:	2200      	movs	r2, #0
  405854:	2300      	movs	r3, #0
  405856:	f000 fd11 	bl	40627c <__aeabi_dcmpgt>
  40585a:	2800      	cmp	r0, #0
  40585c:	d0de      	beq.n	40581c <floor+0x4c>
  40585e:	2d00      	cmp	r5, #0
  405860:	db20      	blt.n	4058a4 <floor+0xd4>
  405862:	4645      	mov	r5, r8
  405864:	ea27 0709 	bic.w	r7, r7, r9
  405868:	4638      	mov	r0, r7
  40586a:	4629      	mov	r1, r5
  40586c:	e7d8      	b.n	405820 <floor+0x50>
  40586e:	a318      	add	r3, pc, #96	; (adr r3, 4058d0 <floor+0x100>)
  405870:	e9d3 2300 	ldrd	r2, r3, [r3]
  405874:	f000 f8c0 	bl	4059f8 <__adddf3>
  405878:	2200      	movs	r2, #0
  40587a:	2300      	movs	r3, #0
  40587c:	f000 fcfe 	bl	40627c <__aeabi_dcmpgt>
  405880:	2800      	cmp	r0, #0
  405882:	d0cb      	beq.n	40581c <floor+0x4c>
  405884:	2d00      	cmp	r5, #0
  405886:	db18      	blt.n	4058ba <floor+0xea>
  405888:	2700      	movs	r7, #0
  40588a:	463d      	mov	r5, r7
  40588c:	e7c6      	b.n	40581c <floor+0x4c>
  40588e:	4602      	mov	r2, r0
  405890:	460b      	mov	r3, r1
  405892:	f000 f8b1 	bl	4059f8 <__adddf3>
  405896:	e7cc      	b.n	405832 <floor+0x62>
  405898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40589c:	fa43 f606 	asr.w	r6, r3, r6
  4058a0:	44b0      	add	r8, r6
  4058a2:	e7b8      	b.n	405816 <floor+0x46>
  4058a4:	2e14      	cmp	r6, #20
  4058a6:	d010      	beq.n	4058ca <floor+0xfa>
  4058a8:	2301      	movs	r3, #1
  4058aa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  4058ae:	fa03 f606 	lsl.w	r6, r3, r6
  4058b2:	1937      	adds	r7, r6, r4
  4058b4:	bf28      	it	cs
  4058b6:	4498      	addcs	r8, r3
  4058b8:	e7d3      	b.n	405862 <floor+0x92>
  4058ba:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  4058be:	4b07      	ldr	r3, [pc, #28]	; (4058dc <floor+0x10c>)
  4058c0:	4322      	orrs	r2, r4
  4058c2:	bf18      	it	ne
  4058c4:	461d      	movne	r5, r3
  4058c6:	2700      	movs	r7, #0
  4058c8:	e7a8      	b.n	40581c <floor+0x4c>
  4058ca:	f105 0801 	add.w	r8, r5, #1
  4058ce:	e7c8      	b.n	405862 <floor+0x92>
  4058d0:	8800759c 	.word	0x8800759c
  4058d4:	7e37e43c 	.word	0x7e37e43c
  4058d8:	000fffff 	.word	0x000fffff
  4058dc:	bff00000 	.word	0xbff00000

004058e0 <scalbn>:
  4058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
  4058e6:	4604      	mov	r4, r0
  4058e8:	460d      	mov	r5, r1
  4058ea:	460b      	mov	r3, r1
  4058ec:	4617      	mov	r7, r2
  4058ee:	bb06      	cbnz	r6, 405932 <scalbn+0x52>
  4058f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4058f4:	4303      	orrs	r3, r0
  4058f6:	d025      	beq.n	405944 <scalbn+0x64>
  4058f8:	2200      	movs	r2, #0
  4058fa:	4b35      	ldr	r3, [pc, #212]	; (4059d0 <scalbn+0xf0>)
  4058fc:	f000 fa2e 	bl	405d5c <__aeabi_dmul>
  405900:	4a34      	ldr	r2, [pc, #208]	; (4059d4 <scalbn+0xf4>)
  405902:	4297      	cmp	r7, r2
  405904:	4604      	mov	r4, r0
  405906:	460d      	mov	r5, r1
  405908:	460b      	mov	r3, r1
  40590a:	db2a      	blt.n	405962 <scalbn+0x82>
  40590c:	f3c1 560a 	ubfx	r6, r1, #20, #11
  405910:	3e36      	subs	r6, #54	; 0x36
  405912:	443e      	add	r6, r7
  405914:	f240 72fe 	movw	r2, #2046	; 0x7fe
  405918:	4296      	cmp	r6, r2
  40591a:	dc28      	bgt.n	40596e <scalbn+0x8e>
  40591c:	2e00      	cmp	r6, #0
  40591e:	dd12      	ble.n	405946 <scalbn+0x66>
  405920:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  405924:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  405928:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  40592c:	4620      	mov	r0, r4
  40592e:	4629      	mov	r1, r5
  405930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405932:	f240 72ff 	movw	r2, #2047	; 0x7ff
  405936:	4296      	cmp	r6, r2
  405938:	d1eb      	bne.n	405912 <scalbn+0x32>
  40593a:	4602      	mov	r2, r0
  40593c:	460b      	mov	r3, r1
  40593e:	f000 f85b 	bl	4059f8 <__adddf3>
  405942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405946:	f116 0f35 	cmn.w	r6, #53	; 0x35
  40594a:	da1d      	bge.n	405988 <scalbn+0xa8>
  40594c:	f24c 3350 	movw	r3, #50000	; 0xc350
  405950:	429f      	cmp	r7, r3
  405952:	4622      	mov	r2, r4
  405954:	462b      	mov	r3, r5
  405956:	dc25      	bgt.n	4059a4 <scalbn+0xc4>
  405958:	a119      	add	r1, pc, #100	; (adr r1, 4059c0 <scalbn+0xe0>)
  40595a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40595e:	f000 f83d 	bl	4059dc <copysign>
  405962:	a317      	add	r3, pc, #92	; (adr r3, 4059c0 <scalbn+0xe0>)
  405964:	e9d3 2300 	ldrd	r2, r3, [r3]
  405968:	f000 f9f8 	bl	405d5c <__aeabi_dmul>
  40596c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40596e:	4622      	mov	r2, r4
  405970:	462b      	mov	r3, r5
  405972:	a115      	add	r1, pc, #84	; (adr r1, 4059c8 <scalbn+0xe8>)
  405974:	e9d1 0100 	ldrd	r0, r1, [r1]
  405978:	f000 f830 	bl	4059dc <copysign>
  40597c:	a312      	add	r3, pc, #72	; (adr r3, 4059c8 <scalbn+0xe8>)
  40597e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405982:	f000 f9eb 	bl	405d5c <__aeabi_dmul>
  405986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405988:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  40598c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  405990:	3636      	adds	r6, #54	; 0x36
  405992:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  405996:	4620      	mov	r0, r4
  405998:	4629      	mov	r1, r5
  40599a:	2200      	movs	r2, #0
  40599c:	4b0e      	ldr	r3, [pc, #56]	; (4059d8 <scalbn+0xf8>)
  40599e:	f000 f9dd 	bl	405d5c <__aeabi_dmul>
  4059a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059a4:	a108      	add	r1, pc, #32	; (adr r1, 4059c8 <scalbn+0xe8>)
  4059a6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4059aa:	f000 f817 	bl	4059dc <copysign>
  4059ae:	a306      	add	r3, pc, #24	; (adr r3, 4059c8 <scalbn+0xe8>)
  4059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4059b4:	f000 f9d2 	bl	405d5c <__aeabi_dmul>
  4059b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059ba:	bf00      	nop
  4059bc:	f3af 8000 	nop.w
  4059c0:	c2f8f359 	.word	0xc2f8f359
  4059c4:	01a56e1f 	.word	0x01a56e1f
  4059c8:	8800759c 	.word	0x8800759c
  4059cc:	7e37e43c 	.word	0x7e37e43c
  4059d0:	43500000 	.word	0x43500000
  4059d4:	ffff3cb0 	.word	0xffff3cb0
  4059d8:	3c900000 	.word	0x3c900000

004059dc <copysign>:
  4059dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  4059e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  4059e4:	ea42 0103 	orr.w	r1, r2, r3
  4059e8:	4770      	bx	lr
  4059ea:	bf00      	nop

004059ec <__aeabi_drsub>:
  4059ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4059f0:	e002      	b.n	4059f8 <__adddf3>
  4059f2:	bf00      	nop

004059f4 <__aeabi_dsub>:
  4059f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004059f8 <__adddf3>:
  4059f8:	b530      	push	{r4, r5, lr}
  4059fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4059fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405a02:	ea94 0f05 	teq	r4, r5
  405a06:	bf08      	it	eq
  405a08:	ea90 0f02 	teqeq	r0, r2
  405a0c:	bf1f      	itttt	ne
  405a0e:	ea54 0c00 	orrsne.w	ip, r4, r0
  405a12:	ea55 0c02 	orrsne.w	ip, r5, r2
  405a16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405a1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405a1e:	f000 80e2 	beq.w	405be6 <__adddf3+0x1ee>
  405a22:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405a26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405a2a:	bfb8      	it	lt
  405a2c:	426d      	neglt	r5, r5
  405a2e:	dd0c      	ble.n	405a4a <__adddf3+0x52>
  405a30:	442c      	add	r4, r5
  405a32:	ea80 0202 	eor.w	r2, r0, r2
  405a36:	ea81 0303 	eor.w	r3, r1, r3
  405a3a:	ea82 0000 	eor.w	r0, r2, r0
  405a3e:	ea83 0101 	eor.w	r1, r3, r1
  405a42:	ea80 0202 	eor.w	r2, r0, r2
  405a46:	ea81 0303 	eor.w	r3, r1, r3
  405a4a:	2d36      	cmp	r5, #54	; 0x36
  405a4c:	bf88      	it	hi
  405a4e:	bd30      	pophi	{r4, r5, pc}
  405a50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405a54:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405a58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405a5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405a60:	d002      	beq.n	405a68 <__adddf3+0x70>
  405a62:	4240      	negs	r0, r0
  405a64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405a68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405a6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405a70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405a74:	d002      	beq.n	405a7c <__adddf3+0x84>
  405a76:	4252      	negs	r2, r2
  405a78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405a7c:	ea94 0f05 	teq	r4, r5
  405a80:	f000 80a7 	beq.w	405bd2 <__adddf3+0x1da>
  405a84:	f1a4 0401 	sub.w	r4, r4, #1
  405a88:	f1d5 0e20 	rsbs	lr, r5, #32
  405a8c:	db0d      	blt.n	405aaa <__adddf3+0xb2>
  405a8e:	fa02 fc0e 	lsl.w	ip, r2, lr
  405a92:	fa22 f205 	lsr.w	r2, r2, r5
  405a96:	1880      	adds	r0, r0, r2
  405a98:	f141 0100 	adc.w	r1, r1, #0
  405a9c:	fa03 f20e 	lsl.w	r2, r3, lr
  405aa0:	1880      	adds	r0, r0, r2
  405aa2:	fa43 f305 	asr.w	r3, r3, r5
  405aa6:	4159      	adcs	r1, r3
  405aa8:	e00e      	b.n	405ac8 <__adddf3+0xd0>
  405aaa:	f1a5 0520 	sub.w	r5, r5, #32
  405aae:	f10e 0e20 	add.w	lr, lr, #32
  405ab2:	2a01      	cmp	r2, #1
  405ab4:	fa03 fc0e 	lsl.w	ip, r3, lr
  405ab8:	bf28      	it	cs
  405aba:	f04c 0c02 	orrcs.w	ip, ip, #2
  405abe:	fa43 f305 	asr.w	r3, r3, r5
  405ac2:	18c0      	adds	r0, r0, r3
  405ac4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405ac8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405acc:	d507      	bpl.n	405ade <__adddf3+0xe6>
  405ace:	f04f 0e00 	mov.w	lr, #0
  405ad2:	f1dc 0c00 	rsbs	ip, ip, #0
  405ad6:	eb7e 0000 	sbcs.w	r0, lr, r0
  405ada:	eb6e 0101 	sbc.w	r1, lr, r1
  405ade:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405ae2:	d31b      	bcc.n	405b1c <__adddf3+0x124>
  405ae4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405ae8:	d30c      	bcc.n	405b04 <__adddf3+0x10c>
  405aea:	0849      	lsrs	r1, r1, #1
  405aec:	ea5f 0030 	movs.w	r0, r0, rrx
  405af0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405af4:	f104 0401 	add.w	r4, r4, #1
  405af8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405afc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405b00:	f080 809a 	bcs.w	405c38 <__adddf3+0x240>
  405b04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405b08:	bf08      	it	eq
  405b0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405b0e:	f150 0000 	adcs.w	r0, r0, #0
  405b12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405b16:	ea41 0105 	orr.w	r1, r1, r5
  405b1a:	bd30      	pop	{r4, r5, pc}
  405b1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405b20:	4140      	adcs	r0, r0
  405b22:	eb41 0101 	adc.w	r1, r1, r1
  405b26:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405b2a:	f1a4 0401 	sub.w	r4, r4, #1
  405b2e:	d1e9      	bne.n	405b04 <__adddf3+0x10c>
  405b30:	f091 0f00 	teq	r1, #0
  405b34:	bf04      	itt	eq
  405b36:	4601      	moveq	r1, r0
  405b38:	2000      	moveq	r0, #0
  405b3a:	fab1 f381 	clz	r3, r1
  405b3e:	bf08      	it	eq
  405b40:	3320      	addeq	r3, #32
  405b42:	f1a3 030b 	sub.w	r3, r3, #11
  405b46:	f1b3 0220 	subs.w	r2, r3, #32
  405b4a:	da0c      	bge.n	405b66 <__adddf3+0x16e>
  405b4c:	320c      	adds	r2, #12
  405b4e:	dd08      	ble.n	405b62 <__adddf3+0x16a>
  405b50:	f102 0c14 	add.w	ip, r2, #20
  405b54:	f1c2 020c 	rsb	r2, r2, #12
  405b58:	fa01 f00c 	lsl.w	r0, r1, ip
  405b5c:	fa21 f102 	lsr.w	r1, r1, r2
  405b60:	e00c      	b.n	405b7c <__adddf3+0x184>
  405b62:	f102 0214 	add.w	r2, r2, #20
  405b66:	bfd8      	it	le
  405b68:	f1c2 0c20 	rsble	ip, r2, #32
  405b6c:	fa01 f102 	lsl.w	r1, r1, r2
  405b70:	fa20 fc0c 	lsr.w	ip, r0, ip
  405b74:	bfdc      	itt	le
  405b76:	ea41 010c 	orrle.w	r1, r1, ip
  405b7a:	4090      	lslle	r0, r2
  405b7c:	1ae4      	subs	r4, r4, r3
  405b7e:	bfa2      	ittt	ge
  405b80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405b84:	4329      	orrge	r1, r5
  405b86:	bd30      	popge	{r4, r5, pc}
  405b88:	ea6f 0404 	mvn.w	r4, r4
  405b8c:	3c1f      	subs	r4, #31
  405b8e:	da1c      	bge.n	405bca <__adddf3+0x1d2>
  405b90:	340c      	adds	r4, #12
  405b92:	dc0e      	bgt.n	405bb2 <__adddf3+0x1ba>
  405b94:	f104 0414 	add.w	r4, r4, #20
  405b98:	f1c4 0220 	rsb	r2, r4, #32
  405b9c:	fa20 f004 	lsr.w	r0, r0, r4
  405ba0:	fa01 f302 	lsl.w	r3, r1, r2
  405ba4:	ea40 0003 	orr.w	r0, r0, r3
  405ba8:	fa21 f304 	lsr.w	r3, r1, r4
  405bac:	ea45 0103 	orr.w	r1, r5, r3
  405bb0:	bd30      	pop	{r4, r5, pc}
  405bb2:	f1c4 040c 	rsb	r4, r4, #12
  405bb6:	f1c4 0220 	rsb	r2, r4, #32
  405bba:	fa20 f002 	lsr.w	r0, r0, r2
  405bbe:	fa01 f304 	lsl.w	r3, r1, r4
  405bc2:	ea40 0003 	orr.w	r0, r0, r3
  405bc6:	4629      	mov	r1, r5
  405bc8:	bd30      	pop	{r4, r5, pc}
  405bca:	fa21 f004 	lsr.w	r0, r1, r4
  405bce:	4629      	mov	r1, r5
  405bd0:	bd30      	pop	{r4, r5, pc}
  405bd2:	f094 0f00 	teq	r4, #0
  405bd6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405bda:	bf06      	itte	eq
  405bdc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405be0:	3401      	addeq	r4, #1
  405be2:	3d01      	subne	r5, #1
  405be4:	e74e      	b.n	405a84 <__adddf3+0x8c>
  405be6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405bea:	bf18      	it	ne
  405bec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405bf0:	d029      	beq.n	405c46 <__adddf3+0x24e>
  405bf2:	ea94 0f05 	teq	r4, r5
  405bf6:	bf08      	it	eq
  405bf8:	ea90 0f02 	teqeq	r0, r2
  405bfc:	d005      	beq.n	405c0a <__adddf3+0x212>
  405bfe:	ea54 0c00 	orrs.w	ip, r4, r0
  405c02:	bf04      	itt	eq
  405c04:	4619      	moveq	r1, r3
  405c06:	4610      	moveq	r0, r2
  405c08:	bd30      	pop	{r4, r5, pc}
  405c0a:	ea91 0f03 	teq	r1, r3
  405c0e:	bf1e      	ittt	ne
  405c10:	2100      	movne	r1, #0
  405c12:	2000      	movne	r0, #0
  405c14:	bd30      	popne	{r4, r5, pc}
  405c16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405c1a:	d105      	bne.n	405c28 <__adddf3+0x230>
  405c1c:	0040      	lsls	r0, r0, #1
  405c1e:	4149      	adcs	r1, r1
  405c20:	bf28      	it	cs
  405c22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405c26:	bd30      	pop	{r4, r5, pc}
  405c28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405c2c:	bf3c      	itt	cc
  405c2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405c32:	bd30      	popcc	{r4, r5, pc}
  405c34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405c38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405c3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405c40:	f04f 0000 	mov.w	r0, #0
  405c44:	bd30      	pop	{r4, r5, pc}
  405c46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405c4a:	bf1a      	itte	ne
  405c4c:	4619      	movne	r1, r3
  405c4e:	4610      	movne	r0, r2
  405c50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405c54:	bf1c      	itt	ne
  405c56:	460b      	movne	r3, r1
  405c58:	4602      	movne	r2, r0
  405c5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405c5e:	bf06      	itte	eq
  405c60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405c64:	ea91 0f03 	teqeq	r1, r3
  405c68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405c6c:	bd30      	pop	{r4, r5, pc}
  405c6e:	bf00      	nop

00405c70 <__aeabi_ui2d>:
  405c70:	f090 0f00 	teq	r0, #0
  405c74:	bf04      	itt	eq
  405c76:	2100      	moveq	r1, #0
  405c78:	4770      	bxeq	lr
  405c7a:	b530      	push	{r4, r5, lr}
  405c7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405c80:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405c84:	f04f 0500 	mov.w	r5, #0
  405c88:	f04f 0100 	mov.w	r1, #0
  405c8c:	e750      	b.n	405b30 <__adddf3+0x138>
  405c8e:	bf00      	nop

00405c90 <__aeabi_i2d>:
  405c90:	f090 0f00 	teq	r0, #0
  405c94:	bf04      	itt	eq
  405c96:	2100      	moveq	r1, #0
  405c98:	4770      	bxeq	lr
  405c9a:	b530      	push	{r4, r5, lr}
  405c9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405ca0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405ca4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405ca8:	bf48      	it	mi
  405caa:	4240      	negmi	r0, r0
  405cac:	f04f 0100 	mov.w	r1, #0
  405cb0:	e73e      	b.n	405b30 <__adddf3+0x138>
  405cb2:	bf00      	nop

00405cb4 <__aeabi_f2d>:
  405cb4:	0042      	lsls	r2, r0, #1
  405cb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405cba:	ea4f 0131 	mov.w	r1, r1, rrx
  405cbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405cc2:	bf1f      	itttt	ne
  405cc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405cc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405ccc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405cd0:	4770      	bxne	lr
  405cd2:	f092 0f00 	teq	r2, #0
  405cd6:	bf14      	ite	ne
  405cd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405cdc:	4770      	bxeq	lr
  405cde:	b530      	push	{r4, r5, lr}
  405ce0:	f44f 7460 	mov.w	r4, #896	; 0x380
  405ce4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405ce8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405cec:	e720      	b.n	405b30 <__adddf3+0x138>
  405cee:	bf00      	nop

00405cf0 <__aeabi_ul2d>:
  405cf0:	ea50 0201 	orrs.w	r2, r0, r1
  405cf4:	bf08      	it	eq
  405cf6:	4770      	bxeq	lr
  405cf8:	b530      	push	{r4, r5, lr}
  405cfa:	f04f 0500 	mov.w	r5, #0
  405cfe:	e00a      	b.n	405d16 <__aeabi_l2d+0x16>

00405d00 <__aeabi_l2d>:
  405d00:	ea50 0201 	orrs.w	r2, r0, r1
  405d04:	bf08      	it	eq
  405d06:	4770      	bxeq	lr
  405d08:	b530      	push	{r4, r5, lr}
  405d0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405d0e:	d502      	bpl.n	405d16 <__aeabi_l2d+0x16>
  405d10:	4240      	negs	r0, r0
  405d12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405d16:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405d1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405d1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405d22:	f43f aedc 	beq.w	405ade <__adddf3+0xe6>
  405d26:	f04f 0203 	mov.w	r2, #3
  405d2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405d2e:	bf18      	it	ne
  405d30:	3203      	addne	r2, #3
  405d32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405d36:	bf18      	it	ne
  405d38:	3203      	addne	r2, #3
  405d3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405d3e:	f1c2 0320 	rsb	r3, r2, #32
  405d42:	fa00 fc03 	lsl.w	ip, r0, r3
  405d46:	fa20 f002 	lsr.w	r0, r0, r2
  405d4a:	fa01 fe03 	lsl.w	lr, r1, r3
  405d4e:	ea40 000e 	orr.w	r0, r0, lr
  405d52:	fa21 f102 	lsr.w	r1, r1, r2
  405d56:	4414      	add	r4, r2
  405d58:	e6c1      	b.n	405ade <__adddf3+0xe6>
  405d5a:	bf00      	nop

00405d5c <__aeabi_dmul>:
  405d5c:	b570      	push	{r4, r5, r6, lr}
  405d5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405d62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405d66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405d6a:	bf1d      	ittte	ne
  405d6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405d70:	ea94 0f0c 	teqne	r4, ip
  405d74:	ea95 0f0c 	teqne	r5, ip
  405d78:	f000 f8de 	bleq	405f38 <__aeabi_dmul+0x1dc>
  405d7c:	442c      	add	r4, r5
  405d7e:	ea81 0603 	eor.w	r6, r1, r3
  405d82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405d86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405d8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405d8e:	bf18      	it	ne
  405d90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405d94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405d9c:	d038      	beq.n	405e10 <__aeabi_dmul+0xb4>
  405d9e:	fba0 ce02 	umull	ip, lr, r0, r2
  405da2:	f04f 0500 	mov.w	r5, #0
  405da6:	fbe1 e502 	umlal	lr, r5, r1, r2
  405daa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405dae:	fbe0 e503 	umlal	lr, r5, r0, r3
  405db2:	f04f 0600 	mov.w	r6, #0
  405db6:	fbe1 5603 	umlal	r5, r6, r1, r3
  405dba:	f09c 0f00 	teq	ip, #0
  405dbe:	bf18      	it	ne
  405dc0:	f04e 0e01 	orrne.w	lr, lr, #1
  405dc4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405dc8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405dcc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405dd0:	d204      	bcs.n	405ddc <__aeabi_dmul+0x80>
  405dd2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405dd6:	416d      	adcs	r5, r5
  405dd8:	eb46 0606 	adc.w	r6, r6, r6
  405ddc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405de0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405de4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405de8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405dec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405df0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405df4:	bf88      	it	hi
  405df6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405dfa:	d81e      	bhi.n	405e3a <__aeabi_dmul+0xde>
  405dfc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405e00:	bf08      	it	eq
  405e02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405e06:	f150 0000 	adcs.w	r0, r0, #0
  405e0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405e0e:	bd70      	pop	{r4, r5, r6, pc}
  405e10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405e14:	ea46 0101 	orr.w	r1, r6, r1
  405e18:	ea40 0002 	orr.w	r0, r0, r2
  405e1c:	ea81 0103 	eor.w	r1, r1, r3
  405e20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405e24:	bfc2      	ittt	gt
  405e26:	ebd4 050c 	rsbsgt	r5, r4, ip
  405e2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405e2e:	bd70      	popgt	{r4, r5, r6, pc}
  405e30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405e34:	f04f 0e00 	mov.w	lr, #0
  405e38:	3c01      	subs	r4, #1
  405e3a:	f300 80ab 	bgt.w	405f94 <__aeabi_dmul+0x238>
  405e3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405e42:	bfde      	ittt	le
  405e44:	2000      	movle	r0, #0
  405e46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405e4a:	bd70      	pople	{r4, r5, r6, pc}
  405e4c:	f1c4 0400 	rsb	r4, r4, #0
  405e50:	3c20      	subs	r4, #32
  405e52:	da35      	bge.n	405ec0 <__aeabi_dmul+0x164>
  405e54:	340c      	adds	r4, #12
  405e56:	dc1b      	bgt.n	405e90 <__aeabi_dmul+0x134>
  405e58:	f104 0414 	add.w	r4, r4, #20
  405e5c:	f1c4 0520 	rsb	r5, r4, #32
  405e60:	fa00 f305 	lsl.w	r3, r0, r5
  405e64:	fa20 f004 	lsr.w	r0, r0, r4
  405e68:	fa01 f205 	lsl.w	r2, r1, r5
  405e6c:	ea40 0002 	orr.w	r0, r0, r2
  405e70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405e74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405e78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405e7c:	fa21 f604 	lsr.w	r6, r1, r4
  405e80:	eb42 0106 	adc.w	r1, r2, r6
  405e84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405e88:	bf08      	it	eq
  405e8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405e8e:	bd70      	pop	{r4, r5, r6, pc}
  405e90:	f1c4 040c 	rsb	r4, r4, #12
  405e94:	f1c4 0520 	rsb	r5, r4, #32
  405e98:	fa00 f304 	lsl.w	r3, r0, r4
  405e9c:	fa20 f005 	lsr.w	r0, r0, r5
  405ea0:	fa01 f204 	lsl.w	r2, r1, r4
  405ea4:	ea40 0002 	orr.w	r0, r0, r2
  405ea8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405eac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405eb0:	f141 0100 	adc.w	r1, r1, #0
  405eb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405eb8:	bf08      	it	eq
  405eba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405ebe:	bd70      	pop	{r4, r5, r6, pc}
  405ec0:	f1c4 0520 	rsb	r5, r4, #32
  405ec4:	fa00 f205 	lsl.w	r2, r0, r5
  405ec8:	ea4e 0e02 	orr.w	lr, lr, r2
  405ecc:	fa20 f304 	lsr.w	r3, r0, r4
  405ed0:	fa01 f205 	lsl.w	r2, r1, r5
  405ed4:	ea43 0302 	orr.w	r3, r3, r2
  405ed8:	fa21 f004 	lsr.w	r0, r1, r4
  405edc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ee0:	fa21 f204 	lsr.w	r2, r1, r4
  405ee4:	ea20 0002 	bic.w	r0, r0, r2
  405ee8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405eec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405ef0:	bf08      	it	eq
  405ef2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405ef6:	bd70      	pop	{r4, r5, r6, pc}
  405ef8:	f094 0f00 	teq	r4, #0
  405efc:	d10f      	bne.n	405f1e <__aeabi_dmul+0x1c2>
  405efe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405f02:	0040      	lsls	r0, r0, #1
  405f04:	eb41 0101 	adc.w	r1, r1, r1
  405f08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405f0c:	bf08      	it	eq
  405f0e:	3c01      	subeq	r4, #1
  405f10:	d0f7      	beq.n	405f02 <__aeabi_dmul+0x1a6>
  405f12:	ea41 0106 	orr.w	r1, r1, r6
  405f16:	f095 0f00 	teq	r5, #0
  405f1a:	bf18      	it	ne
  405f1c:	4770      	bxne	lr
  405f1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405f22:	0052      	lsls	r2, r2, #1
  405f24:	eb43 0303 	adc.w	r3, r3, r3
  405f28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405f2c:	bf08      	it	eq
  405f2e:	3d01      	subeq	r5, #1
  405f30:	d0f7      	beq.n	405f22 <__aeabi_dmul+0x1c6>
  405f32:	ea43 0306 	orr.w	r3, r3, r6
  405f36:	4770      	bx	lr
  405f38:	ea94 0f0c 	teq	r4, ip
  405f3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405f40:	bf18      	it	ne
  405f42:	ea95 0f0c 	teqne	r5, ip
  405f46:	d00c      	beq.n	405f62 <__aeabi_dmul+0x206>
  405f48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405f4c:	bf18      	it	ne
  405f4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405f52:	d1d1      	bne.n	405ef8 <__aeabi_dmul+0x19c>
  405f54:	ea81 0103 	eor.w	r1, r1, r3
  405f58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405f5c:	f04f 0000 	mov.w	r0, #0
  405f60:	bd70      	pop	{r4, r5, r6, pc}
  405f62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405f66:	bf06      	itte	eq
  405f68:	4610      	moveq	r0, r2
  405f6a:	4619      	moveq	r1, r3
  405f6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405f70:	d019      	beq.n	405fa6 <__aeabi_dmul+0x24a>
  405f72:	ea94 0f0c 	teq	r4, ip
  405f76:	d102      	bne.n	405f7e <__aeabi_dmul+0x222>
  405f78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405f7c:	d113      	bne.n	405fa6 <__aeabi_dmul+0x24a>
  405f7e:	ea95 0f0c 	teq	r5, ip
  405f82:	d105      	bne.n	405f90 <__aeabi_dmul+0x234>
  405f84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405f88:	bf1c      	itt	ne
  405f8a:	4610      	movne	r0, r2
  405f8c:	4619      	movne	r1, r3
  405f8e:	d10a      	bne.n	405fa6 <__aeabi_dmul+0x24a>
  405f90:	ea81 0103 	eor.w	r1, r1, r3
  405f94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405f98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405f9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405fa0:	f04f 0000 	mov.w	r0, #0
  405fa4:	bd70      	pop	{r4, r5, r6, pc}
  405fa6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405faa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405fae:	bd70      	pop	{r4, r5, r6, pc}

00405fb0 <__aeabi_ddiv>:
  405fb0:	b570      	push	{r4, r5, r6, lr}
  405fb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405fb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405fba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405fbe:	bf1d      	ittte	ne
  405fc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405fc4:	ea94 0f0c 	teqne	r4, ip
  405fc8:	ea95 0f0c 	teqne	r5, ip
  405fcc:	f000 f8a7 	bleq	40611e <__aeabi_ddiv+0x16e>
  405fd0:	eba4 0405 	sub.w	r4, r4, r5
  405fd4:	ea81 0e03 	eor.w	lr, r1, r3
  405fd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405fdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405fe0:	f000 8088 	beq.w	4060f4 <__aeabi_ddiv+0x144>
  405fe4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405fe8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405fec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405ff0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405ff4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405ff8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405ffc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406000:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406004:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406008:	429d      	cmp	r5, r3
  40600a:	bf08      	it	eq
  40600c:	4296      	cmpeq	r6, r2
  40600e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  406012:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406016:	d202      	bcs.n	40601e <__aeabi_ddiv+0x6e>
  406018:	085b      	lsrs	r3, r3, #1
  40601a:	ea4f 0232 	mov.w	r2, r2, rrx
  40601e:	1ab6      	subs	r6, r6, r2
  406020:	eb65 0503 	sbc.w	r5, r5, r3
  406024:	085b      	lsrs	r3, r3, #1
  406026:	ea4f 0232 	mov.w	r2, r2, rrx
  40602a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40602e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  406032:	ebb6 0e02 	subs.w	lr, r6, r2
  406036:	eb75 0e03 	sbcs.w	lr, r5, r3
  40603a:	bf22      	ittt	cs
  40603c:	1ab6      	subcs	r6, r6, r2
  40603e:	4675      	movcs	r5, lr
  406040:	ea40 000c 	orrcs.w	r0, r0, ip
  406044:	085b      	lsrs	r3, r3, #1
  406046:	ea4f 0232 	mov.w	r2, r2, rrx
  40604a:	ebb6 0e02 	subs.w	lr, r6, r2
  40604e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406052:	bf22      	ittt	cs
  406054:	1ab6      	subcs	r6, r6, r2
  406056:	4675      	movcs	r5, lr
  406058:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40605c:	085b      	lsrs	r3, r3, #1
  40605e:	ea4f 0232 	mov.w	r2, r2, rrx
  406062:	ebb6 0e02 	subs.w	lr, r6, r2
  406066:	eb75 0e03 	sbcs.w	lr, r5, r3
  40606a:	bf22      	ittt	cs
  40606c:	1ab6      	subcs	r6, r6, r2
  40606e:	4675      	movcs	r5, lr
  406070:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406074:	085b      	lsrs	r3, r3, #1
  406076:	ea4f 0232 	mov.w	r2, r2, rrx
  40607a:	ebb6 0e02 	subs.w	lr, r6, r2
  40607e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406082:	bf22      	ittt	cs
  406084:	1ab6      	subcs	r6, r6, r2
  406086:	4675      	movcs	r5, lr
  406088:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40608c:	ea55 0e06 	orrs.w	lr, r5, r6
  406090:	d018      	beq.n	4060c4 <__aeabi_ddiv+0x114>
  406092:	ea4f 1505 	mov.w	r5, r5, lsl #4
  406096:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40609a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40609e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4060a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4060a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4060aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4060ae:	d1c0      	bne.n	406032 <__aeabi_ddiv+0x82>
  4060b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4060b4:	d10b      	bne.n	4060ce <__aeabi_ddiv+0x11e>
  4060b6:	ea41 0100 	orr.w	r1, r1, r0
  4060ba:	f04f 0000 	mov.w	r0, #0
  4060be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4060c2:	e7b6      	b.n	406032 <__aeabi_ddiv+0x82>
  4060c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4060c8:	bf04      	itt	eq
  4060ca:	4301      	orreq	r1, r0
  4060cc:	2000      	moveq	r0, #0
  4060ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4060d2:	bf88      	it	hi
  4060d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4060d8:	f63f aeaf 	bhi.w	405e3a <__aeabi_dmul+0xde>
  4060dc:	ebb5 0c03 	subs.w	ip, r5, r3
  4060e0:	bf04      	itt	eq
  4060e2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4060e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4060ea:	f150 0000 	adcs.w	r0, r0, #0
  4060ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4060f2:	bd70      	pop	{r4, r5, r6, pc}
  4060f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4060f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4060fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406100:	bfc2      	ittt	gt
  406102:	ebd4 050c 	rsbsgt	r5, r4, ip
  406106:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40610a:	bd70      	popgt	{r4, r5, r6, pc}
  40610c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406110:	f04f 0e00 	mov.w	lr, #0
  406114:	3c01      	subs	r4, #1
  406116:	e690      	b.n	405e3a <__aeabi_dmul+0xde>
  406118:	ea45 0e06 	orr.w	lr, r5, r6
  40611c:	e68d      	b.n	405e3a <__aeabi_dmul+0xde>
  40611e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406122:	ea94 0f0c 	teq	r4, ip
  406126:	bf08      	it	eq
  406128:	ea95 0f0c 	teqeq	r5, ip
  40612c:	f43f af3b 	beq.w	405fa6 <__aeabi_dmul+0x24a>
  406130:	ea94 0f0c 	teq	r4, ip
  406134:	d10a      	bne.n	40614c <__aeabi_ddiv+0x19c>
  406136:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40613a:	f47f af34 	bne.w	405fa6 <__aeabi_dmul+0x24a>
  40613e:	ea95 0f0c 	teq	r5, ip
  406142:	f47f af25 	bne.w	405f90 <__aeabi_dmul+0x234>
  406146:	4610      	mov	r0, r2
  406148:	4619      	mov	r1, r3
  40614a:	e72c      	b.n	405fa6 <__aeabi_dmul+0x24a>
  40614c:	ea95 0f0c 	teq	r5, ip
  406150:	d106      	bne.n	406160 <__aeabi_ddiv+0x1b0>
  406152:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406156:	f43f aefd 	beq.w	405f54 <__aeabi_dmul+0x1f8>
  40615a:	4610      	mov	r0, r2
  40615c:	4619      	mov	r1, r3
  40615e:	e722      	b.n	405fa6 <__aeabi_dmul+0x24a>
  406160:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406164:	bf18      	it	ne
  406166:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40616a:	f47f aec5 	bne.w	405ef8 <__aeabi_dmul+0x19c>
  40616e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  406172:	f47f af0d 	bne.w	405f90 <__aeabi_dmul+0x234>
  406176:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40617a:	f47f aeeb 	bne.w	405f54 <__aeabi_dmul+0x1f8>
  40617e:	e712      	b.n	405fa6 <__aeabi_dmul+0x24a>

00406180 <__gedf2>:
  406180:	f04f 3cff 	mov.w	ip, #4294967295
  406184:	e006      	b.n	406194 <__cmpdf2+0x4>
  406186:	bf00      	nop

00406188 <__ledf2>:
  406188:	f04f 0c01 	mov.w	ip, #1
  40618c:	e002      	b.n	406194 <__cmpdf2+0x4>
  40618e:	bf00      	nop

00406190 <__cmpdf2>:
  406190:	f04f 0c01 	mov.w	ip, #1
  406194:	f84d cd04 	str.w	ip, [sp, #-4]!
  406198:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40619c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4061a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4061a4:	bf18      	it	ne
  4061a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4061aa:	d01b      	beq.n	4061e4 <__cmpdf2+0x54>
  4061ac:	b001      	add	sp, #4
  4061ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4061b2:	bf0c      	ite	eq
  4061b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4061b8:	ea91 0f03 	teqne	r1, r3
  4061bc:	bf02      	ittt	eq
  4061be:	ea90 0f02 	teqeq	r0, r2
  4061c2:	2000      	moveq	r0, #0
  4061c4:	4770      	bxeq	lr
  4061c6:	f110 0f00 	cmn.w	r0, #0
  4061ca:	ea91 0f03 	teq	r1, r3
  4061ce:	bf58      	it	pl
  4061d0:	4299      	cmppl	r1, r3
  4061d2:	bf08      	it	eq
  4061d4:	4290      	cmpeq	r0, r2
  4061d6:	bf2c      	ite	cs
  4061d8:	17d8      	asrcs	r0, r3, #31
  4061da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4061de:	f040 0001 	orr.w	r0, r0, #1
  4061e2:	4770      	bx	lr
  4061e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4061e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4061ec:	d102      	bne.n	4061f4 <__cmpdf2+0x64>
  4061ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4061f2:	d107      	bne.n	406204 <__cmpdf2+0x74>
  4061f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4061f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4061fc:	d1d6      	bne.n	4061ac <__cmpdf2+0x1c>
  4061fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406202:	d0d3      	beq.n	4061ac <__cmpdf2+0x1c>
  406204:	f85d 0b04 	ldr.w	r0, [sp], #4
  406208:	4770      	bx	lr
  40620a:	bf00      	nop

0040620c <__aeabi_cdrcmple>:
  40620c:	4684      	mov	ip, r0
  40620e:	4610      	mov	r0, r2
  406210:	4662      	mov	r2, ip
  406212:	468c      	mov	ip, r1
  406214:	4619      	mov	r1, r3
  406216:	4663      	mov	r3, ip
  406218:	e000      	b.n	40621c <__aeabi_cdcmpeq>
  40621a:	bf00      	nop

0040621c <__aeabi_cdcmpeq>:
  40621c:	b501      	push	{r0, lr}
  40621e:	f7ff ffb7 	bl	406190 <__cmpdf2>
  406222:	2800      	cmp	r0, #0
  406224:	bf48      	it	mi
  406226:	f110 0f00 	cmnmi.w	r0, #0
  40622a:	bd01      	pop	{r0, pc}

0040622c <__aeabi_dcmpeq>:
  40622c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406230:	f7ff fff4 	bl	40621c <__aeabi_cdcmpeq>
  406234:	bf0c      	ite	eq
  406236:	2001      	moveq	r0, #1
  406238:	2000      	movne	r0, #0
  40623a:	f85d fb08 	ldr.w	pc, [sp], #8
  40623e:	bf00      	nop

00406240 <__aeabi_dcmplt>:
  406240:	f84d ed08 	str.w	lr, [sp, #-8]!
  406244:	f7ff ffea 	bl	40621c <__aeabi_cdcmpeq>
  406248:	bf34      	ite	cc
  40624a:	2001      	movcc	r0, #1
  40624c:	2000      	movcs	r0, #0
  40624e:	f85d fb08 	ldr.w	pc, [sp], #8
  406252:	bf00      	nop

00406254 <__aeabi_dcmple>:
  406254:	f84d ed08 	str.w	lr, [sp, #-8]!
  406258:	f7ff ffe0 	bl	40621c <__aeabi_cdcmpeq>
  40625c:	bf94      	ite	ls
  40625e:	2001      	movls	r0, #1
  406260:	2000      	movhi	r0, #0
  406262:	f85d fb08 	ldr.w	pc, [sp], #8
  406266:	bf00      	nop

00406268 <__aeabi_dcmpge>:
  406268:	f84d ed08 	str.w	lr, [sp, #-8]!
  40626c:	f7ff ffce 	bl	40620c <__aeabi_cdrcmple>
  406270:	bf94      	ite	ls
  406272:	2001      	movls	r0, #1
  406274:	2000      	movhi	r0, #0
  406276:	f85d fb08 	ldr.w	pc, [sp], #8
  40627a:	bf00      	nop

0040627c <__aeabi_dcmpgt>:
  40627c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406280:	f7ff ffc4 	bl	40620c <__aeabi_cdrcmple>
  406284:	bf34      	ite	cc
  406286:	2001      	movcc	r0, #1
  406288:	2000      	movcs	r0, #0
  40628a:	f85d fb08 	ldr.w	pc, [sp], #8
  40628e:	bf00      	nop

00406290 <__aeabi_d2iz>:
  406290:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406294:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406298:	d215      	bcs.n	4062c6 <__aeabi_d2iz+0x36>
  40629a:	d511      	bpl.n	4062c0 <__aeabi_d2iz+0x30>
  40629c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4062a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4062a4:	d912      	bls.n	4062cc <__aeabi_d2iz+0x3c>
  4062a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4062aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4062ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4062b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4062b6:	fa23 f002 	lsr.w	r0, r3, r2
  4062ba:	bf18      	it	ne
  4062bc:	4240      	negne	r0, r0
  4062be:	4770      	bx	lr
  4062c0:	f04f 0000 	mov.w	r0, #0
  4062c4:	4770      	bx	lr
  4062c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4062ca:	d105      	bne.n	4062d8 <__aeabi_d2iz+0x48>
  4062cc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4062d0:	bf08      	it	eq
  4062d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4062d6:	4770      	bx	lr
  4062d8:	f04f 0000 	mov.w	r0, #0
  4062dc:	4770      	bx	lr
  4062de:	bf00      	nop

004062e0 <__aeabi_d2uiz>:
  4062e0:	004a      	lsls	r2, r1, #1
  4062e2:	d211      	bcs.n	406308 <__aeabi_d2uiz+0x28>
  4062e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4062e8:	d211      	bcs.n	40630e <__aeabi_d2uiz+0x2e>
  4062ea:	d50d      	bpl.n	406308 <__aeabi_d2uiz+0x28>
  4062ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4062f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4062f4:	d40e      	bmi.n	406314 <__aeabi_d2uiz+0x34>
  4062f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4062fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4062fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406302:	fa23 f002 	lsr.w	r0, r3, r2
  406306:	4770      	bx	lr
  406308:	f04f 0000 	mov.w	r0, #0
  40630c:	4770      	bx	lr
  40630e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406312:	d102      	bne.n	40631a <__aeabi_d2uiz+0x3a>
  406314:	f04f 30ff 	mov.w	r0, #4294967295
  406318:	4770      	bx	lr
  40631a:	f04f 0000 	mov.w	r0, #0
  40631e:	4770      	bx	lr

00406320 <__aeabi_d2f>:
  406320:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406324:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  406328:	bf24      	itt	cs
  40632a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40632e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  406332:	d90d      	bls.n	406350 <__aeabi_d2f+0x30>
  406334:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406338:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40633c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  406340:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  406344:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  406348:	bf08      	it	eq
  40634a:	f020 0001 	biceq.w	r0, r0, #1
  40634e:	4770      	bx	lr
  406350:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  406354:	d121      	bne.n	40639a <__aeabi_d2f+0x7a>
  406356:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40635a:	bfbc      	itt	lt
  40635c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  406360:	4770      	bxlt	lr
  406362:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406366:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40636a:	f1c2 0218 	rsb	r2, r2, #24
  40636e:	f1c2 0c20 	rsb	ip, r2, #32
  406372:	fa10 f30c 	lsls.w	r3, r0, ip
  406376:	fa20 f002 	lsr.w	r0, r0, r2
  40637a:	bf18      	it	ne
  40637c:	f040 0001 	orrne.w	r0, r0, #1
  406380:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406384:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  406388:	fa03 fc0c 	lsl.w	ip, r3, ip
  40638c:	ea40 000c 	orr.w	r0, r0, ip
  406390:	fa23 f302 	lsr.w	r3, r3, r2
  406394:	ea4f 0343 	mov.w	r3, r3, lsl #1
  406398:	e7cc      	b.n	406334 <__aeabi_d2f+0x14>
  40639a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40639e:	d107      	bne.n	4063b0 <__aeabi_d2f+0x90>
  4063a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4063a4:	bf1e      	ittt	ne
  4063a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4063aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4063ae:	4770      	bxne	lr
  4063b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4063b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4063b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4063bc:	4770      	bx	lr
  4063be:	bf00      	nop

004063c0 <__aeabi_frsub>:
  4063c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4063c4:	e002      	b.n	4063cc <__addsf3>
  4063c6:	bf00      	nop

004063c8 <__aeabi_fsub>:
  4063c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004063cc <__addsf3>:
  4063cc:	0042      	lsls	r2, r0, #1
  4063ce:	bf1f      	itttt	ne
  4063d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4063d4:	ea92 0f03 	teqne	r2, r3
  4063d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4063dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4063e0:	d06a      	beq.n	4064b8 <__addsf3+0xec>
  4063e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4063e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4063ea:	bfc1      	itttt	gt
  4063ec:	18d2      	addgt	r2, r2, r3
  4063ee:	4041      	eorgt	r1, r0
  4063f0:	4048      	eorgt	r0, r1
  4063f2:	4041      	eorgt	r1, r0
  4063f4:	bfb8      	it	lt
  4063f6:	425b      	neglt	r3, r3
  4063f8:	2b19      	cmp	r3, #25
  4063fa:	bf88      	it	hi
  4063fc:	4770      	bxhi	lr
  4063fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  406402:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406406:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40640a:	bf18      	it	ne
  40640c:	4240      	negne	r0, r0
  40640e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406412:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  406416:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40641a:	bf18      	it	ne
  40641c:	4249      	negne	r1, r1
  40641e:	ea92 0f03 	teq	r2, r3
  406422:	d03f      	beq.n	4064a4 <__addsf3+0xd8>
  406424:	f1a2 0201 	sub.w	r2, r2, #1
  406428:	fa41 fc03 	asr.w	ip, r1, r3
  40642c:	eb10 000c 	adds.w	r0, r0, ip
  406430:	f1c3 0320 	rsb	r3, r3, #32
  406434:	fa01 f103 	lsl.w	r1, r1, r3
  406438:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40643c:	d502      	bpl.n	406444 <__addsf3+0x78>
  40643e:	4249      	negs	r1, r1
  406440:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  406444:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  406448:	d313      	bcc.n	406472 <__addsf3+0xa6>
  40644a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40644e:	d306      	bcc.n	40645e <__addsf3+0x92>
  406450:	0840      	lsrs	r0, r0, #1
  406452:	ea4f 0131 	mov.w	r1, r1, rrx
  406456:	f102 0201 	add.w	r2, r2, #1
  40645a:	2afe      	cmp	r2, #254	; 0xfe
  40645c:	d251      	bcs.n	406502 <__addsf3+0x136>
  40645e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  406462:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406466:	bf08      	it	eq
  406468:	f020 0001 	biceq.w	r0, r0, #1
  40646c:	ea40 0003 	orr.w	r0, r0, r3
  406470:	4770      	bx	lr
  406472:	0049      	lsls	r1, r1, #1
  406474:	eb40 0000 	adc.w	r0, r0, r0
  406478:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40647c:	f1a2 0201 	sub.w	r2, r2, #1
  406480:	d1ed      	bne.n	40645e <__addsf3+0x92>
  406482:	fab0 fc80 	clz	ip, r0
  406486:	f1ac 0c08 	sub.w	ip, ip, #8
  40648a:	ebb2 020c 	subs.w	r2, r2, ip
  40648e:	fa00 f00c 	lsl.w	r0, r0, ip
  406492:	bfaa      	itet	ge
  406494:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  406498:	4252      	neglt	r2, r2
  40649a:	4318      	orrge	r0, r3
  40649c:	bfbc      	itt	lt
  40649e:	40d0      	lsrlt	r0, r2
  4064a0:	4318      	orrlt	r0, r3
  4064a2:	4770      	bx	lr
  4064a4:	f092 0f00 	teq	r2, #0
  4064a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4064ac:	bf06      	itte	eq
  4064ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4064b2:	3201      	addeq	r2, #1
  4064b4:	3b01      	subne	r3, #1
  4064b6:	e7b5      	b.n	406424 <__addsf3+0x58>
  4064b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4064bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4064c0:	bf18      	it	ne
  4064c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4064c6:	d021      	beq.n	40650c <__addsf3+0x140>
  4064c8:	ea92 0f03 	teq	r2, r3
  4064cc:	d004      	beq.n	4064d8 <__addsf3+0x10c>
  4064ce:	f092 0f00 	teq	r2, #0
  4064d2:	bf08      	it	eq
  4064d4:	4608      	moveq	r0, r1
  4064d6:	4770      	bx	lr
  4064d8:	ea90 0f01 	teq	r0, r1
  4064dc:	bf1c      	itt	ne
  4064de:	2000      	movne	r0, #0
  4064e0:	4770      	bxne	lr
  4064e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4064e6:	d104      	bne.n	4064f2 <__addsf3+0x126>
  4064e8:	0040      	lsls	r0, r0, #1
  4064ea:	bf28      	it	cs
  4064ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4064f0:	4770      	bx	lr
  4064f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  4064f6:	bf3c      	itt	cc
  4064f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4064fc:	4770      	bxcc	lr
  4064fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  406502:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  406506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40650a:	4770      	bx	lr
  40650c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  406510:	bf16      	itet	ne
  406512:	4608      	movne	r0, r1
  406514:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  406518:	4601      	movne	r1, r0
  40651a:	0242      	lsls	r2, r0, #9
  40651c:	bf06      	itte	eq
  40651e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  406522:	ea90 0f01 	teqeq	r0, r1
  406526:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40652a:	4770      	bx	lr

0040652c <__aeabi_ui2f>:
  40652c:	f04f 0300 	mov.w	r3, #0
  406530:	e004      	b.n	40653c <__aeabi_i2f+0x8>
  406532:	bf00      	nop

00406534 <__aeabi_i2f>:
  406534:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  406538:	bf48      	it	mi
  40653a:	4240      	negmi	r0, r0
  40653c:	ea5f 0c00 	movs.w	ip, r0
  406540:	bf08      	it	eq
  406542:	4770      	bxeq	lr
  406544:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  406548:	4601      	mov	r1, r0
  40654a:	f04f 0000 	mov.w	r0, #0
  40654e:	e01c      	b.n	40658a <__aeabi_l2f+0x2a>

00406550 <__aeabi_ul2f>:
  406550:	ea50 0201 	orrs.w	r2, r0, r1
  406554:	bf08      	it	eq
  406556:	4770      	bxeq	lr
  406558:	f04f 0300 	mov.w	r3, #0
  40655c:	e00a      	b.n	406574 <__aeabi_l2f+0x14>
  40655e:	bf00      	nop

00406560 <__aeabi_l2f>:
  406560:	ea50 0201 	orrs.w	r2, r0, r1
  406564:	bf08      	it	eq
  406566:	4770      	bxeq	lr
  406568:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40656c:	d502      	bpl.n	406574 <__aeabi_l2f+0x14>
  40656e:	4240      	negs	r0, r0
  406570:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406574:	ea5f 0c01 	movs.w	ip, r1
  406578:	bf02      	ittt	eq
  40657a:	4684      	moveq	ip, r0
  40657c:	4601      	moveq	r1, r0
  40657e:	2000      	moveq	r0, #0
  406580:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  406584:	bf08      	it	eq
  406586:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40658a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40658e:	fabc f28c 	clz	r2, ip
  406592:	3a08      	subs	r2, #8
  406594:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  406598:	db10      	blt.n	4065bc <__aeabi_l2f+0x5c>
  40659a:	fa01 fc02 	lsl.w	ip, r1, r2
  40659e:	4463      	add	r3, ip
  4065a0:	fa00 fc02 	lsl.w	ip, r0, r2
  4065a4:	f1c2 0220 	rsb	r2, r2, #32
  4065a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4065ac:	fa20 f202 	lsr.w	r2, r0, r2
  4065b0:	eb43 0002 	adc.w	r0, r3, r2
  4065b4:	bf08      	it	eq
  4065b6:	f020 0001 	biceq.w	r0, r0, #1
  4065ba:	4770      	bx	lr
  4065bc:	f102 0220 	add.w	r2, r2, #32
  4065c0:	fa01 fc02 	lsl.w	ip, r1, r2
  4065c4:	f1c2 0220 	rsb	r2, r2, #32
  4065c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4065cc:	fa21 f202 	lsr.w	r2, r1, r2
  4065d0:	eb43 0002 	adc.w	r0, r3, r2
  4065d4:	bf08      	it	eq
  4065d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4065da:	4770      	bx	lr

004065dc <__aeabi_fmul>:
  4065dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4065e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4065e4:	bf1e      	ittt	ne
  4065e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4065ea:	ea92 0f0c 	teqne	r2, ip
  4065ee:	ea93 0f0c 	teqne	r3, ip
  4065f2:	d06f      	beq.n	4066d4 <__aeabi_fmul+0xf8>
  4065f4:	441a      	add	r2, r3
  4065f6:	ea80 0c01 	eor.w	ip, r0, r1
  4065fa:	0240      	lsls	r0, r0, #9
  4065fc:	bf18      	it	ne
  4065fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  406602:	d01e      	beq.n	406642 <__aeabi_fmul+0x66>
  406604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  406608:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40660c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  406610:	fba0 3101 	umull	r3, r1, r0, r1
  406614:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406618:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40661c:	bf3e      	ittt	cc
  40661e:	0049      	lslcc	r1, r1, #1
  406620:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  406624:	005b      	lslcc	r3, r3, #1
  406626:	ea40 0001 	orr.w	r0, r0, r1
  40662a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40662e:	2afd      	cmp	r2, #253	; 0xfd
  406630:	d81d      	bhi.n	40666e <__aeabi_fmul+0x92>
  406632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  406636:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40663a:	bf08      	it	eq
  40663c:	f020 0001 	biceq.w	r0, r0, #1
  406640:	4770      	bx	lr
  406642:	f090 0f00 	teq	r0, #0
  406646:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40664a:	bf08      	it	eq
  40664c:	0249      	lsleq	r1, r1, #9
  40664e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406652:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  406656:	3a7f      	subs	r2, #127	; 0x7f
  406658:	bfc2      	ittt	gt
  40665a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40665e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406662:	4770      	bxgt	lr
  406664:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406668:	f04f 0300 	mov.w	r3, #0
  40666c:	3a01      	subs	r2, #1
  40666e:	dc5d      	bgt.n	40672c <__aeabi_fmul+0x150>
  406670:	f112 0f19 	cmn.w	r2, #25
  406674:	bfdc      	itt	le
  406676:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40667a:	4770      	bxle	lr
  40667c:	f1c2 0200 	rsb	r2, r2, #0
  406680:	0041      	lsls	r1, r0, #1
  406682:	fa21 f102 	lsr.w	r1, r1, r2
  406686:	f1c2 0220 	rsb	r2, r2, #32
  40668a:	fa00 fc02 	lsl.w	ip, r0, r2
  40668e:	ea5f 0031 	movs.w	r0, r1, rrx
  406692:	f140 0000 	adc.w	r0, r0, #0
  406696:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40669a:	bf08      	it	eq
  40669c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4066a0:	4770      	bx	lr
  4066a2:	f092 0f00 	teq	r2, #0
  4066a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4066aa:	bf02      	ittt	eq
  4066ac:	0040      	lsleq	r0, r0, #1
  4066ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4066b2:	3a01      	subeq	r2, #1
  4066b4:	d0f9      	beq.n	4066aa <__aeabi_fmul+0xce>
  4066b6:	ea40 000c 	orr.w	r0, r0, ip
  4066ba:	f093 0f00 	teq	r3, #0
  4066be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4066c2:	bf02      	ittt	eq
  4066c4:	0049      	lsleq	r1, r1, #1
  4066c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4066ca:	3b01      	subeq	r3, #1
  4066cc:	d0f9      	beq.n	4066c2 <__aeabi_fmul+0xe6>
  4066ce:	ea41 010c 	orr.w	r1, r1, ip
  4066d2:	e78f      	b.n	4065f4 <__aeabi_fmul+0x18>
  4066d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4066d8:	ea92 0f0c 	teq	r2, ip
  4066dc:	bf18      	it	ne
  4066de:	ea93 0f0c 	teqne	r3, ip
  4066e2:	d00a      	beq.n	4066fa <__aeabi_fmul+0x11e>
  4066e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4066e8:	bf18      	it	ne
  4066ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4066ee:	d1d8      	bne.n	4066a2 <__aeabi_fmul+0xc6>
  4066f0:	ea80 0001 	eor.w	r0, r0, r1
  4066f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4066f8:	4770      	bx	lr
  4066fa:	f090 0f00 	teq	r0, #0
  4066fe:	bf17      	itett	ne
  406700:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  406704:	4608      	moveq	r0, r1
  406706:	f091 0f00 	teqne	r1, #0
  40670a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40670e:	d014      	beq.n	40673a <__aeabi_fmul+0x15e>
  406710:	ea92 0f0c 	teq	r2, ip
  406714:	d101      	bne.n	40671a <__aeabi_fmul+0x13e>
  406716:	0242      	lsls	r2, r0, #9
  406718:	d10f      	bne.n	40673a <__aeabi_fmul+0x15e>
  40671a:	ea93 0f0c 	teq	r3, ip
  40671e:	d103      	bne.n	406728 <__aeabi_fmul+0x14c>
  406720:	024b      	lsls	r3, r1, #9
  406722:	bf18      	it	ne
  406724:	4608      	movne	r0, r1
  406726:	d108      	bne.n	40673a <__aeabi_fmul+0x15e>
  406728:	ea80 0001 	eor.w	r0, r0, r1
  40672c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406730:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406734:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406738:	4770      	bx	lr
  40673a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40673e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  406742:	4770      	bx	lr

00406744 <__aeabi_fdiv>:
  406744:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406748:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40674c:	bf1e      	ittt	ne
  40674e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406752:	ea92 0f0c 	teqne	r2, ip
  406756:	ea93 0f0c 	teqne	r3, ip
  40675a:	d069      	beq.n	406830 <__aeabi_fdiv+0xec>
  40675c:	eba2 0203 	sub.w	r2, r2, r3
  406760:	ea80 0c01 	eor.w	ip, r0, r1
  406764:	0249      	lsls	r1, r1, #9
  406766:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40676a:	d037      	beq.n	4067dc <__aeabi_fdiv+0x98>
  40676c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  406770:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  406774:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  406778:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40677c:	428b      	cmp	r3, r1
  40677e:	bf38      	it	cc
  406780:	005b      	lslcc	r3, r3, #1
  406782:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  406786:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40678a:	428b      	cmp	r3, r1
  40678c:	bf24      	itt	cs
  40678e:	1a5b      	subcs	r3, r3, r1
  406790:	ea40 000c 	orrcs.w	r0, r0, ip
  406794:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  406798:	bf24      	itt	cs
  40679a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40679e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4067a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4067a6:	bf24      	itt	cs
  4067a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4067ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4067b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4067b4:	bf24      	itt	cs
  4067b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4067ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4067be:	011b      	lsls	r3, r3, #4
  4067c0:	bf18      	it	ne
  4067c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4067c6:	d1e0      	bne.n	40678a <__aeabi_fdiv+0x46>
  4067c8:	2afd      	cmp	r2, #253	; 0xfd
  4067ca:	f63f af50 	bhi.w	40666e <__aeabi_fmul+0x92>
  4067ce:	428b      	cmp	r3, r1
  4067d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4067d4:	bf08      	it	eq
  4067d6:	f020 0001 	biceq.w	r0, r0, #1
  4067da:	4770      	bx	lr
  4067dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4067e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4067e4:	327f      	adds	r2, #127	; 0x7f
  4067e6:	bfc2      	ittt	gt
  4067e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4067ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4067f0:	4770      	bxgt	lr
  4067f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4067f6:	f04f 0300 	mov.w	r3, #0
  4067fa:	3a01      	subs	r2, #1
  4067fc:	e737      	b.n	40666e <__aeabi_fmul+0x92>
  4067fe:	f092 0f00 	teq	r2, #0
  406802:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406806:	bf02      	ittt	eq
  406808:	0040      	lsleq	r0, r0, #1
  40680a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40680e:	3a01      	subeq	r2, #1
  406810:	d0f9      	beq.n	406806 <__aeabi_fdiv+0xc2>
  406812:	ea40 000c 	orr.w	r0, r0, ip
  406816:	f093 0f00 	teq	r3, #0
  40681a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40681e:	bf02      	ittt	eq
  406820:	0049      	lsleq	r1, r1, #1
  406822:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406826:	3b01      	subeq	r3, #1
  406828:	d0f9      	beq.n	40681e <__aeabi_fdiv+0xda>
  40682a:	ea41 010c 	orr.w	r1, r1, ip
  40682e:	e795      	b.n	40675c <__aeabi_fdiv+0x18>
  406830:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406834:	ea92 0f0c 	teq	r2, ip
  406838:	d108      	bne.n	40684c <__aeabi_fdiv+0x108>
  40683a:	0242      	lsls	r2, r0, #9
  40683c:	f47f af7d 	bne.w	40673a <__aeabi_fmul+0x15e>
  406840:	ea93 0f0c 	teq	r3, ip
  406844:	f47f af70 	bne.w	406728 <__aeabi_fmul+0x14c>
  406848:	4608      	mov	r0, r1
  40684a:	e776      	b.n	40673a <__aeabi_fmul+0x15e>
  40684c:	ea93 0f0c 	teq	r3, ip
  406850:	d104      	bne.n	40685c <__aeabi_fdiv+0x118>
  406852:	024b      	lsls	r3, r1, #9
  406854:	f43f af4c 	beq.w	4066f0 <__aeabi_fmul+0x114>
  406858:	4608      	mov	r0, r1
  40685a:	e76e      	b.n	40673a <__aeabi_fmul+0x15e>
  40685c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406860:	bf18      	it	ne
  406862:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406866:	d1ca      	bne.n	4067fe <__aeabi_fdiv+0xba>
  406868:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40686c:	f47f af5c 	bne.w	406728 <__aeabi_fmul+0x14c>
  406870:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406874:	f47f af3c 	bne.w	4066f0 <__aeabi_fmul+0x114>
  406878:	e75f      	b.n	40673a <__aeabi_fmul+0x15e>
  40687a:	bf00      	nop

0040687c <__gesf2>:
  40687c:	f04f 3cff 	mov.w	ip, #4294967295
  406880:	e006      	b.n	406890 <__cmpsf2+0x4>
  406882:	bf00      	nop

00406884 <__lesf2>:
  406884:	f04f 0c01 	mov.w	ip, #1
  406888:	e002      	b.n	406890 <__cmpsf2+0x4>
  40688a:	bf00      	nop

0040688c <__cmpsf2>:
  40688c:	f04f 0c01 	mov.w	ip, #1
  406890:	f84d cd04 	str.w	ip, [sp, #-4]!
  406894:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406898:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40689c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4068a0:	bf18      	it	ne
  4068a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4068a6:	d011      	beq.n	4068cc <__cmpsf2+0x40>
  4068a8:	b001      	add	sp, #4
  4068aa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4068ae:	bf18      	it	ne
  4068b0:	ea90 0f01 	teqne	r0, r1
  4068b4:	bf58      	it	pl
  4068b6:	ebb2 0003 	subspl.w	r0, r2, r3
  4068ba:	bf88      	it	hi
  4068bc:	17c8      	asrhi	r0, r1, #31
  4068be:	bf38      	it	cc
  4068c0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  4068c4:	bf18      	it	ne
  4068c6:	f040 0001 	orrne.w	r0, r0, #1
  4068ca:	4770      	bx	lr
  4068cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4068d0:	d102      	bne.n	4068d8 <__cmpsf2+0x4c>
  4068d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4068d6:	d105      	bne.n	4068e4 <__cmpsf2+0x58>
  4068d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4068dc:	d1e4      	bne.n	4068a8 <__cmpsf2+0x1c>
  4068de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  4068e2:	d0e1      	beq.n	4068a8 <__cmpsf2+0x1c>
  4068e4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4068e8:	4770      	bx	lr
  4068ea:	bf00      	nop

004068ec <__aeabi_cfrcmple>:
  4068ec:	4684      	mov	ip, r0
  4068ee:	4608      	mov	r0, r1
  4068f0:	4661      	mov	r1, ip
  4068f2:	e7ff      	b.n	4068f4 <__aeabi_cfcmpeq>

004068f4 <__aeabi_cfcmpeq>:
  4068f4:	b50f      	push	{r0, r1, r2, r3, lr}
  4068f6:	f7ff ffc9 	bl	40688c <__cmpsf2>
  4068fa:	2800      	cmp	r0, #0
  4068fc:	bf48      	it	mi
  4068fe:	f110 0f00 	cmnmi.w	r0, #0
  406902:	bd0f      	pop	{r0, r1, r2, r3, pc}

00406904 <__aeabi_fcmpeq>:
  406904:	f84d ed08 	str.w	lr, [sp, #-8]!
  406908:	f7ff fff4 	bl	4068f4 <__aeabi_cfcmpeq>
  40690c:	bf0c      	ite	eq
  40690e:	2001      	moveq	r0, #1
  406910:	2000      	movne	r0, #0
  406912:	f85d fb08 	ldr.w	pc, [sp], #8
  406916:	bf00      	nop

00406918 <__aeabi_fcmplt>:
  406918:	f84d ed08 	str.w	lr, [sp, #-8]!
  40691c:	f7ff ffea 	bl	4068f4 <__aeabi_cfcmpeq>
  406920:	bf34      	ite	cc
  406922:	2001      	movcc	r0, #1
  406924:	2000      	movcs	r0, #0
  406926:	f85d fb08 	ldr.w	pc, [sp], #8
  40692a:	bf00      	nop

0040692c <__aeabi_fcmple>:
  40692c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406930:	f7ff ffe0 	bl	4068f4 <__aeabi_cfcmpeq>
  406934:	bf94      	ite	ls
  406936:	2001      	movls	r0, #1
  406938:	2000      	movhi	r0, #0
  40693a:	f85d fb08 	ldr.w	pc, [sp], #8
  40693e:	bf00      	nop

00406940 <__aeabi_fcmpge>:
  406940:	f84d ed08 	str.w	lr, [sp, #-8]!
  406944:	f7ff ffd2 	bl	4068ec <__aeabi_cfrcmple>
  406948:	bf94      	ite	ls
  40694a:	2001      	movls	r0, #1
  40694c:	2000      	movhi	r0, #0
  40694e:	f85d fb08 	ldr.w	pc, [sp], #8
  406952:	bf00      	nop

00406954 <__aeabi_fcmpgt>:
  406954:	f84d ed08 	str.w	lr, [sp, #-8]!
  406958:	f7ff ffc8 	bl	4068ec <__aeabi_cfrcmple>
  40695c:	bf34      	ite	cc
  40695e:	2001      	movcc	r0, #1
  406960:	2000      	movcs	r0, #0
  406962:	f85d fb08 	ldr.w	pc, [sp], #8
  406966:	bf00      	nop

00406968 <__aeabi_f2uiz>:
  406968:	0042      	lsls	r2, r0, #1
  40696a:	d20e      	bcs.n	40698a <__aeabi_f2uiz+0x22>
  40696c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  406970:	d30b      	bcc.n	40698a <__aeabi_f2uiz+0x22>
  406972:	f04f 039e 	mov.w	r3, #158	; 0x9e
  406976:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40697a:	d409      	bmi.n	406990 <__aeabi_f2uiz+0x28>
  40697c:	ea4f 2300 	mov.w	r3, r0, lsl #8
  406980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406984:	fa23 f002 	lsr.w	r0, r3, r2
  406988:	4770      	bx	lr
  40698a:	f04f 0000 	mov.w	r0, #0
  40698e:	4770      	bx	lr
  406990:	f112 0f61 	cmn.w	r2, #97	; 0x61
  406994:	d101      	bne.n	40699a <__aeabi_f2uiz+0x32>
  406996:	0242      	lsls	r2, r0, #9
  406998:	d102      	bne.n	4069a0 <__aeabi_f2uiz+0x38>
  40699a:	f04f 30ff 	mov.w	r0, #4294967295
  40699e:	4770      	bx	lr
  4069a0:	f04f 0000 	mov.w	r0, #0
  4069a4:	4770      	bx	lr
  4069a6:	bf00      	nop

004069a8 <__libc_init_array>:
  4069a8:	b570      	push	{r4, r5, r6, lr}
  4069aa:	4e0f      	ldr	r6, [pc, #60]	; (4069e8 <__libc_init_array+0x40>)
  4069ac:	4d0f      	ldr	r5, [pc, #60]	; (4069ec <__libc_init_array+0x44>)
  4069ae:	1b76      	subs	r6, r6, r5
  4069b0:	10b6      	asrs	r6, r6, #2
  4069b2:	bf18      	it	ne
  4069b4:	2400      	movne	r4, #0
  4069b6:	d005      	beq.n	4069c4 <__libc_init_array+0x1c>
  4069b8:	3401      	adds	r4, #1
  4069ba:	f855 3b04 	ldr.w	r3, [r5], #4
  4069be:	4798      	blx	r3
  4069c0:	42a6      	cmp	r6, r4
  4069c2:	d1f9      	bne.n	4069b8 <__libc_init_array+0x10>
  4069c4:	4e0a      	ldr	r6, [pc, #40]	; (4069f0 <__libc_init_array+0x48>)
  4069c6:	4d0b      	ldr	r5, [pc, #44]	; (4069f4 <__libc_init_array+0x4c>)
  4069c8:	1b76      	subs	r6, r6, r5
  4069ca:	f001 f9ed 	bl	407da8 <_init>
  4069ce:	10b6      	asrs	r6, r6, #2
  4069d0:	bf18      	it	ne
  4069d2:	2400      	movne	r4, #0
  4069d4:	d006      	beq.n	4069e4 <__libc_init_array+0x3c>
  4069d6:	3401      	adds	r4, #1
  4069d8:	f855 3b04 	ldr.w	r3, [r5], #4
  4069dc:	4798      	blx	r3
  4069de:	42a6      	cmp	r6, r4
  4069e0:	d1f9      	bne.n	4069d6 <__libc_init_array+0x2e>
  4069e2:	bd70      	pop	{r4, r5, r6, pc}
  4069e4:	bd70      	pop	{r4, r5, r6, pc}
  4069e6:	bf00      	nop
  4069e8:	00407db4 	.word	0x00407db4
  4069ec:	00407db4 	.word	0x00407db4
  4069f0:	00407dbc 	.word	0x00407dbc
  4069f4:	00407db4 	.word	0x00407db4

004069f8 <memcmp>:
  4069f8:	2a03      	cmp	r2, #3
  4069fa:	b470      	push	{r4, r5, r6}
  4069fc:	d926      	bls.n	406a4c <memcmp+0x54>
  4069fe:	ea40 0301 	orr.w	r3, r0, r1
  406a02:	079b      	lsls	r3, r3, #30
  406a04:	d011      	beq.n	406a2a <memcmp+0x32>
  406a06:	7804      	ldrb	r4, [r0, #0]
  406a08:	780d      	ldrb	r5, [r1, #0]
  406a0a:	42ac      	cmp	r4, r5
  406a0c:	d122      	bne.n	406a54 <memcmp+0x5c>
  406a0e:	4402      	add	r2, r0
  406a10:	1c43      	adds	r3, r0, #1
  406a12:	e005      	b.n	406a20 <memcmp+0x28>
  406a14:	f813 4b01 	ldrb.w	r4, [r3], #1
  406a18:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  406a1c:	42ac      	cmp	r4, r5
  406a1e:	d119      	bne.n	406a54 <memcmp+0x5c>
  406a20:	4293      	cmp	r3, r2
  406a22:	d1f7      	bne.n	406a14 <memcmp+0x1c>
  406a24:	2000      	movs	r0, #0
  406a26:	bc70      	pop	{r4, r5, r6}
  406a28:	4770      	bx	lr
  406a2a:	460c      	mov	r4, r1
  406a2c:	4603      	mov	r3, r0
  406a2e:	681e      	ldr	r6, [r3, #0]
  406a30:	6825      	ldr	r5, [r4, #0]
  406a32:	42ae      	cmp	r6, r5
  406a34:	4618      	mov	r0, r3
  406a36:	4621      	mov	r1, r4
  406a38:	f103 0304 	add.w	r3, r3, #4
  406a3c:	f104 0404 	add.w	r4, r4, #4
  406a40:	d1e1      	bne.n	406a06 <memcmp+0xe>
  406a42:	3a04      	subs	r2, #4
  406a44:	2a03      	cmp	r2, #3
  406a46:	4618      	mov	r0, r3
  406a48:	4621      	mov	r1, r4
  406a4a:	d8f0      	bhi.n	406a2e <memcmp+0x36>
  406a4c:	2a00      	cmp	r2, #0
  406a4e:	d1da      	bne.n	406a06 <memcmp+0xe>
  406a50:	4610      	mov	r0, r2
  406a52:	e7e8      	b.n	406a26 <memcmp+0x2e>
  406a54:	1b60      	subs	r0, r4, r5
  406a56:	bc70      	pop	{r4, r5, r6}
  406a58:	4770      	bx	lr
  406a5a:	bf00      	nop

00406a5c <memcpy>:
  406a5c:	4684      	mov	ip, r0
  406a5e:	ea41 0300 	orr.w	r3, r1, r0
  406a62:	f013 0303 	ands.w	r3, r3, #3
  406a66:	d16d      	bne.n	406b44 <memcpy+0xe8>
  406a68:	3a40      	subs	r2, #64	; 0x40
  406a6a:	d341      	bcc.n	406af0 <memcpy+0x94>
  406a6c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a70:	f840 3b04 	str.w	r3, [r0], #4
  406a74:	f851 3b04 	ldr.w	r3, [r1], #4
  406a78:	f840 3b04 	str.w	r3, [r0], #4
  406a7c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a80:	f840 3b04 	str.w	r3, [r0], #4
  406a84:	f851 3b04 	ldr.w	r3, [r1], #4
  406a88:	f840 3b04 	str.w	r3, [r0], #4
  406a8c:	f851 3b04 	ldr.w	r3, [r1], #4
  406a90:	f840 3b04 	str.w	r3, [r0], #4
  406a94:	f851 3b04 	ldr.w	r3, [r1], #4
  406a98:	f840 3b04 	str.w	r3, [r0], #4
  406a9c:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa0:	f840 3b04 	str.w	r3, [r0], #4
  406aa4:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa8:	f840 3b04 	str.w	r3, [r0], #4
  406aac:	f851 3b04 	ldr.w	r3, [r1], #4
  406ab0:	f840 3b04 	str.w	r3, [r0], #4
  406ab4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ab8:	f840 3b04 	str.w	r3, [r0], #4
  406abc:	f851 3b04 	ldr.w	r3, [r1], #4
  406ac0:	f840 3b04 	str.w	r3, [r0], #4
  406ac4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ac8:	f840 3b04 	str.w	r3, [r0], #4
  406acc:	f851 3b04 	ldr.w	r3, [r1], #4
  406ad0:	f840 3b04 	str.w	r3, [r0], #4
  406ad4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ad8:	f840 3b04 	str.w	r3, [r0], #4
  406adc:	f851 3b04 	ldr.w	r3, [r1], #4
  406ae0:	f840 3b04 	str.w	r3, [r0], #4
  406ae4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ae8:	f840 3b04 	str.w	r3, [r0], #4
  406aec:	3a40      	subs	r2, #64	; 0x40
  406aee:	d2bd      	bcs.n	406a6c <memcpy+0x10>
  406af0:	3230      	adds	r2, #48	; 0x30
  406af2:	d311      	bcc.n	406b18 <memcpy+0xbc>
  406af4:	f851 3b04 	ldr.w	r3, [r1], #4
  406af8:	f840 3b04 	str.w	r3, [r0], #4
  406afc:	f851 3b04 	ldr.w	r3, [r1], #4
  406b00:	f840 3b04 	str.w	r3, [r0], #4
  406b04:	f851 3b04 	ldr.w	r3, [r1], #4
  406b08:	f840 3b04 	str.w	r3, [r0], #4
  406b0c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b10:	f840 3b04 	str.w	r3, [r0], #4
  406b14:	3a10      	subs	r2, #16
  406b16:	d2ed      	bcs.n	406af4 <memcpy+0x98>
  406b18:	320c      	adds	r2, #12
  406b1a:	d305      	bcc.n	406b28 <memcpy+0xcc>
  406b1c:	f851 3b04 	ldr.w	r3, [r1], #4
  406b20:	f840 3b04 	str.w	r3, [r0], #4
  406b24:	3a04      	subs	r2, #4
  406b26:	d2f9      	bcs.n	406b1c <memcpy+0xc0>
  406b28:	3204      	adds	r2, #4
  406b2a:	d008      	beq.n	406b3e <memcpy+0xe2>
  406b2c:	07d2      	lsls	r2, r2, #31
  406b2e:	bf1c      	itt	ne
  406b30:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b34:	f800 3b01 	strbne.w	r3, [r0], #1
  406b38:	d301      	bcc.n	406b3e <memcpy+0xe2>
  406b3a:	880b      	ldrh	r3, [r1, #0]
  406b3c:	8003      	strh	r3, [r0, #0]
  406b3e:	4660      	mov	r0, ip
  406b40:	4770      	bx	lr
  406b42:	bf00      	nop
  406b44:	2a08      	cmp	r2, #8
  406b46:	d313      	bcc.n	406b70 <memcpy+0x114>
  406b48:	078b      	lsls	r3, r1, #30
  406b4a:	d08d      	beq.n	406a68 <memcpy+0xc>
  406b4c:	f010 0303 	ands.w	r3, r0, #3
  406b50:	d08a      	beq.n	406a68 <memcpy+0xc>
  406b52:	f1c3 0304 	rsb	r3, r3, #4
  406b56:	1ad2      	subs	r2, r2, r3
  406b58:	07db      	lsls	r3, r3, #31
  406b5a:	bf1c      	itt	ne
  406b5c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b60:	f800 3b01 	strbne.w	r3, [r0], #1
  406b64:	d380      	bcc.n	406a68 <memcpy+0xc>
  406b66:	f831 3b02 	ldrh.w	r3, [r1], #2
  406b6a:	f820 3b02 	strh.w	r3, [r0], #2
  406b6e:	e77b      	b.n	406a68 <memcpy+0xc>
  406b70:	3a04      	subs	r2, #4
  406b72:	d3d9      	bcc.n	406b28 <memcpy+0xcc>
  406b74:	3a01      	subs	r2, #1
  406b76:	f811 3b01 	ldrb.w	r3, [r1], #1
  406b7a:	f800 3b01 	strb.w	r3, [r0], #1
  406b7e:	d2f9      	bcs.n	406b74 <memcpy+0x118>
  406b80:	780b      	ldrb	r3, [r1, #0]
  406b82:	7003      	strb	r3, [r0, #0]
  406b84:	784b      	ldrb	r3, [r1, #1]
  406b86:	7043      	strb	r3, [r0, #1]
  406b88:	788b      	ldrb	r3, [r1, #2]
  406b8a:	7083      	strb	r3, [r0, #2]
  406b8c:	4660      	mov	r0, ip
  406b8e:	4770      	bx	lr

00406b90 <memset>:
  406b90:	b470      	push	{r4, r5, r6}
  406b92:	0784      	lsls	r4, r0, #30
  406b94:	d046      	beq.n	406c24 <memset+0x94>
  406b96:	1e54      	subs	r4, r2, #1
  406b98:	2a00      	cmp	r2, #0
  406b9a:	d041      	beq.n	406c20 <memset+0x90>
  406b9c:	b2cd      	uxtb	r5, r1
  406b9e:	4603      	mov	r3, r0
  406ba0:	e002      	b.n	406ba8 <memset+0x18>
  406ba2:	1e62      	subs	r2, r4, #1
  406ba4:	b3e4      	cbz	r4, 406c20 <memset+0x90>
  406ba6:	4614      	mov	r4, r2
  406ba8:	f803 5b01 	strb.w	r5, [r3], #1
  406bac:	079a      	lsls	r2, r3, #30
  406bae:	d1f8      	bne.n	406ba2 <memset+0x12>
  406bb0:	2c03      	cmp	r4, #3
  406bb2:	d92e      	bls.n	406c12 <memset+0x82>
  406bb4:	b2cd      	uxtb	r5, r1
  406bb6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406bba:	2c0f      	cmp	r4, #15
  406bbc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406bc0:	d919      	bls.n	406bf6 <memset+0x66>
  406bc2:	f103 0210 	add.w	r2, r3, #16
  406bc6:	4626      	mov	r6, r4
  406bc8:	3e10      	subs	r6, #16
  406bca:	2e0f      	cmp	r6, #15
  406bcc:	f842 5c10 	str.w	r5, [r2, #-16]
  406bd0:	f842 5c0c 	str.w	r5, [r2, #-12]
  406bd4:	f842 5c08 	str.w	r5, [r2, #-8]
  406bd8:	f842 5c04 	str.w	r5, [r2, #-4]
  406bdc:	f102 0210 	add.w	r2, r2, #16
  406be0:	d8f2      	bhi.n	406bc8 <memset+0x38>
  406be2:	f1a4 0210 	sub.w	r2, r4, #16
  406be6:	f022 020f 	bic.w	r2, r2, #15
  406bea:	f004 040f 	and.w	r4, r4, #15
  406bee:	3210      	adds	r2, #16
  406bf0:	2c03      	cmp	r4, #3
  406bf2:	4413      	add	r3, r2
  406bf4:	d90d      	bls.n	406c12 <memset+0x82>
  406bf6:	461e      	mov	r6, r3
  406bf8:	4622      	mov	r2, r4
  406bfa:	3a04      	subs	r2, #4
  406bfc:	2a03      	cmp	r2, #3
  406bfe:	f846 5b04 	str.w	r5, [r6], #4
  406c02:	d8fa      	bhi.n	406bfa <memset+0x6a>
  406c04:	1f22      	subs	r2, r4, #4
  406c06:	f022 0203 	bic.w	r2, r2, #3
  406c0a:	3204      	adds	r2, #4
  406c0c:	4413      	add	r3, r2
  406c0e:	f004 0403 	and.w	r4, r4, #3
  406c12:	b12c      	cbz	r4, 406c20 <memset+0x90>
  406c14:	b2c9      	uxtb	r1, r1
  406c16:	441c      	add	r4, r3
  406c18:	f803 1b01 	strb.w	r1, [r3], #1
  406c1c:	42a3      	cmp	r3, r4
  406c1e:	d1fb      	bne.n	406c18 <memset+0x88>
  406c20:	bc70      	pop	{r4, r5, r6}
  406c22:	4770      	bx	lr
  406c24:	4614      	mov	r4, r2
  406c26:	4603      	mov	r3, r0
  406c28:	e7c2      	b.n	406bb0 <memset+0x20>
  406c2a:	bf00      	nop

00406c2c <register_fini>:
  406c2c:	4b02      	ldr	r3, [pc, #8]	; (406c38 <register_fini+0xc>)
  406c2e:	b113      	cbz	r3, 406c36 <register_fini+0xa>
  406c30:	4802      	ldr	r0, [pc, #8]	; (406c3c <register_fini+0x10>)
  406c32:	f000 b805 	b.w	406c40 <atexit>
  406c36:	4770      	bx	lr
  406c38:	00000000 	.word	0x00000000
  406c3c:	00406c4d 	.word	0x00406c4d

00406c40 <atexit>:
  406c40:	2300      	movs	r3, #0
  406c42:	4601      	mov	r1, r0
  406c44:	461a      	mov	r2, r3
  406c46:	4618      	mov	r0, r3
  406c48:	f000 b814 	b.w	406c74 <__register_exitproc>

00406c4c <__libc_fini_array>:
  406c4c:	b538      	push	{r3, r4, r5, lr}
  406c4e:	4d07      	ldr	r5, [pc, #28]	; (406c6c <__libc_fini_array+0x20>)
  406c50:	4c07      	ldr	r4, [pc, #28]	; (406c70 <__libc_fini_array+0x24>)
  406c52:	1b2c      	subs	r4, r5, r4
  406c54:	10a4      	asrs	r4, r4, #2
  406c56:	d005      	beq.n	406c64 <__libc_fini_array+0x18>
  406c58:	3c01      	subs	r4, #1
  406c5a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406c5e:	4798      	blx	r3
  406c60:	2c00      	cmp	r4, #0
  406c62:	d1f9      	bne.n	406c58 <__libc_fini_array+0xc>
  406c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406c68:	f001 b8a8 	b.w	407dbc <_fini>
  406c6c:	00407dcc 	.word	0x00407dcc
  406c70:	00407dc8 	.word	0x00407dc8

00406c74 <__register_exitproc>:
  406c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406c78:	4c25      	ldr	r4, [pc, #148]	; (406d10 <__register_exitproc+0x9c>)
  406c7a:	6825      	ldr	r5, [r4, #0]
  406c7c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406c80:	4606      	mov	r6, r0
  406c82:	4688      	mov	r8, r1
  406c84:	4692      	mov	sl, r2
  406c86:	4699      	mov	r9, r3
  406c88:	b3c4      	cbz	r4, 406cfc <__register_exitproc+0x88>
  406c8a:	6860      	ldr	r0, [r4, #4]
  406c8c:	281f      	cmp	r0, #31
  406c8e:	dc17      	bgt.n	406cc0 <__register_exitproc+0x4c>
  406c90:	1c43      	adds	r3, r0, #1
  406c92:	b176      	cbz	r6, 406cb2 <__register_exitproc+0x3e>
  406c94:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  406c98:	2201      	movs	r2, #1
  406c9a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  406c9e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  406ca2:	4082      	lsls	r2, r0
  406ca4:	4311      	orrs	r1, r2
  406ca6:	2e02      	cmp	r6, #2
  406ca8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  406cac:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  406cb0:	d01e      	beq.n	406cf0 <__register_exitproc+0x7c>
  406cb2:	3002      	adds	r0, #2
  406cb4:	6063      	str	r3, [r4, #4]
  406cb6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  406cba:	2000      	movs	r0, #0
  406cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406cc0:	4b14      	ldr	r3, [pc, #80]	; (406d14 <__register_exitproc+0xa0>)
  406cc2:	b303      	cbz	r3, 406d06 <__register_exitproc+0x92>
  406cc4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406cc8:	f3af 8000 	nop.w
  406ccc:	4604      	mov	r4, r0
  406cce:	b1d0      	cbz	r0, 406d06 <__register_exitproc+0x92>
  406cd0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406cd4:	2700      	movs	r7, #0
  406cd6:	e880 0088 	stmia.w	r0, {r3, r7}
  406cda:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406cde:	4638      	mov	r0, r7
  406ce0:	2301      	movs	r3, #1
  406ce2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406ce6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  406cea:	2e00      	cmp	r6, #0
  406cec:	d0e1      	beq.n	406cb2 <__register_exitproc+0x3e>
  406cee:	e7d1      	b.n	406c94 <__register_exitproc+0x20>
  406cf0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406cf4:	430a      	orrs	r2, r1
  406cf6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  406cfa:	e7da      	b.n	406cb2 <__register_exitproc+0x3e>
  406cfc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406d00:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406d04:	e7c1      	b.n	406c8a <__register_exitproc+0x16>
  406d06:	f04f 30ff 	mov.w	r0, #4294967295
  406d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406d0e:	bf00      	nop
  406d10:	00407da4 	.word	0x00407da4
  406d14:	00000000 	.word	0x00000000

00406d18 <reg>:
  406d18:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
  406d28:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
  406d38:	2a292827 67646334 00000049              '()*4cdgI...

00406d44 <hw>:
  406d44:	04000068 01410080 01000000 00001333     h.....A.....3...

00406d54 <test>:
  406d54:	00000083 00004000 00000200 00c800c8     .....@..........
  406d64:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
  406d74:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....

00406d84 <mpu_6500_st_tb>:
  406d84:	0a560a3c 0a8b0a70 0ac10aa6 0af80add     <.V.p...........
  406d94:	0b310b15 0b6b0b4e 0ba50b88 0be10bc3     ..1.N.k.........
  406da4:	0c1e0c00 0c5d0c3d 0c9c0c7c 0cdd0cbd     ....=.].|.......
  406db4:	0d1f0cfe 0d630d41 0da80d85 0dee0dcb     ....A.c.........
  406dc4:	0e360e12 0e7f0e5a 0eca0ea4 0f160eef     ..6.Z...........
  406dd4:	0f630f3c 0fb30f8b 10030fdb 1056102c     <.c.........,.V.
  406de4:	10aa1080 110010d4 1157112b 11b01183     ........+.W.....
  406df4:	120b11de 12681239 12c71297 132712f7     ....9.h.......'.
  406e04:	138a1359 13ef13bc 14551422 14be1489     Y.......".U.....
  406e14:	152914f3 1595155f 160415cd 1676163d     ..)._.......=.v.
  406e24:	16e916af 175f1724 17d8179b 18521815     ....$._.......R.
  406e34:	18cf1891 194f190f 19d11990 1a561a13     ......O.......V.
  406e44:	1ade1a9a 1b681b22 1bf51bae 1c851c3d     ....".h.....=...
  406e54:	1d181cce 1dad1d62 1e461df9 1ee21e94     ....b.....F.....
  406e64:	1f811f31 20231fd1 20c82075 2171211c     1.....# u . .!q!
  406e74:	221d21c7 22cd2274 23802326 243623da     .!."t"."&#.#.#6$
  406e84:	24f12493 25af254f 2671260f 273626d3     .$.$O%.%.&q&.&6'
  406e94:	2800279b 28ce2867 29a02936 2a762a0b     .'.(g(.(6).).*v*
  406ea4:	2b512ae3 2c302bc0 2d132ca1 2dfb2d86     .*Q+.+0,.,.-.-.-
  406eb4:	2ee82e71 2fd92f60 30cf3053 31ca314c     q...`/./S0.0L1.1
  406ec4:	32ca324a 33d0334c 34da3454 35ea3562     J2.2L3.3T4.4b5.5
  406ed4:	37003674 381b378d 393c38aa 3a6239ce     t6.7.7.8.8<9.9b:
  406ee4:	3b8f3af8 3cc13c27 3dfa3d5d 3f383e98     .:.;'<.<]=.=.>8?
  406ef4:	407e3fda 41ca4123 431c4272 447643c8     .?~@#A.ArB.C.CvD
  406f04:	45d64525 473d4689 48ac47f4 4a224966     %E.E.F=G.G.HfI"J
  406f14:	4b9f4adf 4d244c61 4eb14dea 50464f7b     .J.KaL$M.M.N{OFP
  406f24:	51e35114 538952b5 5536545e 56ed5611     .Q.Q.R.S^T6U.V.V
  406f34:	58ac57cb 5a74598f 5c465b5c 5e215d32     .W.X.YtZ\[F\2]!^
  406f44:	60055f12 61f360fb 63eb62ee 65ed64eb     ._.`.`.a.b.c.d.e
  406f54:	67fa66f2 6a116904 6c336b20 6e5f6d48     .f.g.i.j k3lHm_n
  406f64:	70976f7a 72db71b8 752a7401 77857656     zo.p.q.r.t*uVv.w
  406f74:	79ec78b7 7c5f7b24 7edf7d9d 816c8024     .x.y${_|.}.~$.l.

00406f84 <dmp_memory>:
  406f84:	00700000 24000000 02000000 00000300     ..p....$........
  406f94:	54006500 0000efff 0b0080fa 01008212     .e.T............
  406fa4:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
  406fb4:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
  406fc4:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
  406fd4:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
  406fe4:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
  406ff4:	00000020 00000000 00000040 00000060      .......@...`...
  407004:	00000c00 6e180c00 92060000 dfc0160a     .......n........
  407014:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
  407024:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
  407034:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
  407044:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
  407054:	00000000 b5421900 a2390000 65b30000     ......B...9....e
  407064:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
  407074:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
  407084:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
  407094:	00000100 00003200 000046ff 0000d463     .....2...F..c...
  4070a4:	00000010 0000d604 0000cc04 0000cc04     ................
  4070b4:	72100000 40000000 00000000 00000000     ...r...@........
  4070c4:	02000600 07000500 00000000 00006400     .............d..
  4070d4:	00000000 05000000 64000500 00002000     ...........d. ..
	...
  4070ec:	00400000 00030000 32000000 000098f8     ..@........2....
  4070fc:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
  407130:	00100000 00000040 06000000 6ab20000     ....@..........j
  407140:	00000200 83fb0100 00006800 00fcd900     .........h......
  407150:	83fff17c 00000000 00006500 e8036400     |........e...d..
  407160:	28006400 25000000 00000000 0000a016     .d.(...%........
  407170:	00100000 00100000 00002f00 f4010000     ........./......
  407180:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
  407198:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
  4071a8:	00000000 00060000 14000000 4d250000     ..............%M
  4071b8:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
  4071d4:	00001b00 00000000 00000000 00000000     ................
  4071e4:	00006400 00000800 00000000 00000000     .d..............
	...
  407244:	00001b00 00000000 00000000 0e000e00     ................
  407254:	c70a0000 00000400 32000000 9cffffff     ...........2....
  407264:	2b0b0000 02000000 01000000 64000000     ...+...........d
  407274:	0000e5ff 00000000 00000000 00000000     ................
  407284:	01000000 00000000 00000100 00000000     ................
  407294:	00800100 00800100 00800100 d3262400     .............$&.
	...
  4072ac:	10000600 3c009600 00000000 00000000     .......<........
	...
  4072c4:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
  4072ec:	0084d717 00000003 00000000 00000000     ................
  4072fc:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
  40731c:	85180302 00400000 03000000 03000000     ......@.........
	...
  407334:	00000040 00000000 00000000 00000000     @...............
	...
  407368:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
  407384:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
  407394:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
  4073a4:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
  4073b4:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
  4073c4:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
  4073d4:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
  4073e4:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
  4073f4:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
  407404:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
  407414:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
  407424:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
  407434:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
  407444:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
  407454:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
  407464:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
  407474:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
  407484:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
  407494:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
  4074a4:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
  4074b4:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
  4074c4:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
  4074d4:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
  4074e4:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
  4074f4:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
  407504:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
  407514:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
  407524:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
  407534:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
  407544:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
  407554:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
  407564:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
  407574:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
  407584:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
  407594:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
  4075a4:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
  4075b4:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
  4075c4:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
  4075d4:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
  4075e4:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
  4075f4:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
  407604:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
  407614:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
  407624:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
  407634:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
  407644:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
  407654:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
  407664:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
  407674:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
  407684:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
  407694:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
  4076a4:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
  4076b4:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
  4076c4:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
  4076d4:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
  4076e4:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
  4076f4:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
  407704:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
  407714:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
  407724:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
  407734:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
  407744:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
  407754:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
  407764:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
  407774:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
  407784:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
  407794:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
  4077a4:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
  4077b4:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
  4077c4:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
  4077d4:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
  4077e4:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
  4077f4:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
  407804:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
  407814:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
  407824:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
  407834:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
  407844:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
  407854:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
  407864:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
  407874:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
  407884:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
  407894:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
  4078a4:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
  4078b4:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
  4078c4:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
  4078d4:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
  4078e4:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
  4078f4:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
  407904:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
  407914:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
  407924:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
  407934:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
  407944:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
  407954:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
  407964:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
  407974:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
  407984:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
  407994:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
  4079a4:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
  4079b4:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
  4079c4:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
  4079d4:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
  4079e4:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
  4079f4:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
  407a04:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
  407a14:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
  407a24:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
  407a34:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
  407a44:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
  407a54:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
  407a64:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
  407a74:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
  407a84:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
  407a94:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
  407aa4:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
  407ab4:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
  407ac4:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
  407ad4:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
  407ae4:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
  407af4:	a890d8ff a899890d 21988010 89d82eda     ...........!....
  407b04:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
  407b14:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
  407b24:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
  407b34:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
  407b44:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
  407b54:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
  407b64:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
  407b74:	d800d9a6 0400fff1                                ......

00407b7a <sStartAddress>:
  407b7a:	cd4c0400 c90c006c 5636002c 46260076     ..L.l...,.6Vv.&F
  407b8a:	f2fe0066 f1aac4ab afbbdfdf aab8dfdf     f...............
  407b9a:	98b48db3 005d350d aab80000 88b0aaaa     .....5].........
  407baa:	00c7c5c3 b1d80000 a38bf3b9 b409b691     ................
  407bba:	b1da00d9 a38bf3b9 b4dab691 21fb00da              ..............

00407bc8 <npio2_hw>:
  407bc8:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  407bd8:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  407be8:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  407bf8:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  407c08:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  407c18:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  407c28:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  407c38:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00407c48 <two_over_pi>:
  407c48:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  407c58:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  407c68:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  407c78:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  407c88:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  407c98:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  407ca8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  407cb8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  407cc8:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  407cd8:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  407ce8:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  407cf8:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  407d08:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  407d18:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  407d28:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  407d38:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  407d48:	0060e27b 00c08c6b                       {.`.k...

00407d50 <init_jk>:
  407d50:	00000002 00000003 00000004 00000006     ................

00407d60 <PIo2>:
  407d60:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  407d70:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  407d80:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  407d90:	80000000 36e38222 00000000 3569f31d     ...."..6......i5
  407da0:	00000043                                C...

00407da4 <_global_impure_ptr>:
  407da4:	20000048                                H.. 

00407da8 <_init>:
  407da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407daa:	bf00      	nop
  407dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407dae:	bc08      	pop	{r3}
  407db0:	469e      	mov	lr, r3
  407db2:	4770      	bx	lr

00407db4 <__init_array_start>:
  407db4:	00406c2d 	.word	0x00406c2d

00407db8 <__frame_dummy_init_array_entry>:
  407db8:	004000e5                                ..@.

00407dbc <_fini>:
  407dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407dbe:	bf00      	nop
  407dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407dc2:	bc08      	pop	{r3}
  407dc4:	469e      	mov	lr, r3
  407dc6:	4770      	bx	lr

00407dc8 <__fini_array_start>:
  407dc8:	004000c1 	.word	0x004000c1
