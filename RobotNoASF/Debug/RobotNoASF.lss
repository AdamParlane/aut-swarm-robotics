
RobotNoASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000078d8  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000470  20000000  004078d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b28  20000470  00407d48  00020470  2**2
                  ALLOC
  3 .stack        00000400  20000f98  00408870  00020470  2**0
                  ALLOC
  4 .heap         00000200  20001398  00408c70  00020470  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002049a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000abe8  00000000  00000000  000204f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001942  00000000  00000000  0002b0db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002cd0  00000000  00000000  0002ca1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005a0  00000000  00000000  0002f6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e8  00000000  00000000  0002fc8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000f57e  00000000  00000000  00030175  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000076b7  00000000  00000000  0003f6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003a75a  00000000  00000000  00046daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001d04  00000000  00000000  00081504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	98 13 00 20 d5 3d 40 00 59 3e 40 00 59 3e 40 00     ... .=@.Y>@.Y>@.
  400010:	59 3e 40 00 59 3e 40 00 59 3e 40 00 00 00 00 00     Y>@.Y>@.Y>@.....
	...
  40002c:	59 3e 40 00 59 3e 40 00 00 00 00 00 59 3e 40 00     Y>@.Y>@.....Y>@.
  40003c:	59 3e 40 00 59 3e 40 00 59 3e 40 00 59 3e 40 00     Y>@.Y>@.Y>@.Y>@.
  40004c:	59 3e 40 00 59 3e 40 00 59 3e 40 00 59 3e 40 00     Y>@.Y>@.Y>@.Y>@.
  40005c:	00 00 00 00 59 3e 40 00 59 3e 40 00 59 3e 40 00     ....Y>@.Y>@.Y>@.
  40006c:	59 3e 40 00 59 3e 40 00 59 3e 40 00 59 3e 40 00     Y>@.Y>@.Y>@.Y>@.
  40007c:	59 3e 40 00 11 04 40 00 59 3e 40 00 00 00 00 00     Y>@...@.Y>@.....
  40008c:	59 3e 40 00 59 3e 40 00 59 3e 40 00 59 3e 40 00     Y>@.Y>@.Y>@.Y>@.
  40009c:	b9 3a 40 00 59 3e 40 00 59 3e 40 00 59 3e 40 00     .:@.Y>@.Y>@.Y>@.
  4000ac:	59 3e 40 00 59 3e 40 00 59 3e 40 00 59 3e 40 00     Y>@.Y>@.Y>@.Y>@.
  4000bc:	59 3e 40 00                                         Y>@.

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000470 	.word	0x20000470
  4000dc:	00000000 	.word	0x00000000
  4000e0:	004078d8 	.word	0x004078d8

004000e4 <frame_dummy>:
  4000e4:	4b0c      	ldr	r3, [pc, #48]	; (400118 <frame_dummy+0x34>)
  4000e6:	b143      	cbz	r3, 4000fa <frame_dummy+0x16>
  4000e8:	480c      	ldr	r0, [pc, #48]	; (40011c <frame_dummy+0x38>)
  4000ea:	490d      	ldr	r1, [pc, #52]	; (400120 <frame_dummy+0x3c>)
  4000ec:	b510      	push	{r4, lr}
  4000ee:	f3af 8000 	nop.w
  4000f2:	480c      	ldr	r0, [pc, #48]	; (400124 <frame_dummy+0x40>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b923      	cbnz	r3, 400102 <frame_dummy+0x1e>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	480a      	ldr	r0, [pc, #40]	; (400124 <frame_dummy+0x40>)
  4000fc:	6803      	ldr	r3, [r0, #0]
  4000fe:	b933      	cbnz	r3, 40010e <frame_dummy+0x2a>
  400100:	4770      	bx	lr
  400102:	4b09      	ldr	r3, [pc, #36]	; (400128 <frame_dummy+0x44>)
  400104:	2b00      	cmp	r3, #0
  400106:	d0f7      	beq.n	4000f8 <frame_dummy+0x14>
  400108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40010c:	4718      	bx	r3
  40010e:	4b06      	ldr	r3, [pc, #24]	; (400128 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f5      	beq.n	400100 <frame_dummy+0x1c>
  400114:	4718      	bx	r3
  400116:	bf00      	nop
  400118:	00000000 	.word	0x00000000
  40011c:	004078d8 	.word	0x004078d8
  400120:	20000474 	.word	0x20000474
  400124:	004078d8 	.word	0x004078d8
  400128:	00000000 	.word	0x00000000

0040012c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40012c:	b480      	push	{r7}
  40012e:	b083      	sub	sp, #12
  400130:	af00      	add	r7, sp, #0
  400132:	4603      	mov	r3, r0
  400134:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400136:	4908      	ldr	r1, [pc, #32]	; (400158 <NVIC_EnableIRQ+0x2c>)
  400138:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40013c:	095b      	lsrs	r3, r3, #5
  40013e:	79fa      	ldrb	r2, [r7, #7]
  400140:	f002 021f 	and.w	r2, r2, #31
  400144:	2001      	movs	r0, #1
  400146:	fa00 f202 	lsl.w	r2, r0, r2
  40014a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40014e:	bf00      	nop
  400150:	370c      	adds	r7, #12
  400152:	46bd      	mov	sp, r7
  400154:	bc80      	pop	{r7}
  400156:	4770      	bx	lr
  400158:	e000e100 	.word	0xe000e100

0040015c <InterpretSwarmMessage>:
void UART3_Write(uint8_t data);								//Writes a byte to UART3
void SendXbeeAPIFrame(uint8_t * frame_data, int len);		//Sends an XBee API Frame


void InterpretSwarmMessage(struct message_info message)
{
  40015c:	b590      	push	{r4, r7, lr}
  40015e:	b097      	sub	sp, #92	; 0x5c
  400160:	af02      	add	r7, sp, #8
  400162:	1d3b      	adds	r3, r7, #4
  400164:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//copy information from the message info structure to local variables
	int index = message.index;
  400168:	687b      	ldr	r3, [r7, #4]
  40016a:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t message_command = message.command;
  40016c:	7a3b      	ldrb	r3, [r7, #8]
  40016e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	int length = message.length;
  400172:	68fb      	ldr	r3, [r7, #12]
  400174:	647b      	str	r3, [r7, #68]	; 0x44
	
	uint8_t data[50];			//Array used to form reply message
	uint16_t batteryVoltage;	//Variable to store battery voltage
	
	//Behaviour depends on type of message received
	switch(message_command)
  400176:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
  40017a:	2b01      	cmp	r3, #1
  40017c:	d014      	beq.n	4001a8 <InterpretSwarmMessage+0x4c>
  40017e:	2b10      	cmp	r3, #16
  400180:	d032      	beq.n	4001e8 <InterpretSwarmMessage+0x8c>
  400182:	2b00      	cmp	r3, #0
  400184:	d000      	beq.n	400188 <InterpretSwarmMessage+0x2c>
			
			break;

		default:

			break;
  400186:	e030      	b.n	4001ea <InterpretSwarmMessage+0x8e>
			data[0] = 0x00;	
  400188:	2300      	movs	r3, #0
  40018a:	743b      	strb	r3, [r7, #16]
			SendXbeeAPITransmitRequest(BROADCAST_64,UNKNOWN_16,data,1);  //Send the Message
  40018c:	f107 0210 	add.w	r2, r7, #16
  400190:	2301      	movs	r3, #1
  400192:	9300      	str	r3, [sp, #0]
  400194:	4613      	mov	r3, r2
  400196:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40019a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40019e:	f04f 0100 	mov.w	r1, #0
  4001a2:	4c14      	ldr	r4, [pc, #80]	; (4001f4 <InterpretSwarmMessage+0x98>)
  4001a4:	47a0      	blx	r4
			break;
  4001a6:	e020      	b.n	4001ea <InterpretSwarmMessage+0x8e>
			batteryVoltage = ADC_ReadCH(BV); //Reads the battery voltage using the ADC
  4001a8:	200e      	movs	r0, #14
  4001aa:	4b13      	ldr	r3, [pc, #76]	; (4001f8 <InterpretSwarmMessage+0x9c>)
  4001ac:	4798      	blx	r3
  4001ae:	4603      	mov	r3, r0
  4001b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			data[0] = BATTERY_DATA;
  4001b4:	2301      	movs	r3, #1
  4001b6:	743b      	strb	r3, [r7, #16]
			data[1] = (batteryVoltage & (0xFF00)) >> 8;
  4001b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
  4001bc:	0a1b      	lsrs	r3, r3, #8
  4001be:	b29b      	uxth	r3, r3
  4001c0:	b2db      	uxtb	r3, r3
  4001c2:	747b      	strb	r3, [r7, #17]
			data[2] = batteryVoltage & (0xFF);
  4001c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
  4001c8:	b2db      	uxtb	r3, r3
  4001ca:	74bb      	strb	r3, [r7, #18]
			SendXbeeAPITransmitRequest(BROADCAST_64,UNKNOWN_16,data,3); //Send the formed Message, NOTE: To convert this number to voltage multiply by 5/1000
  4001cc:	f107 0210 	add.w	r2, r7, #16
  4001d0:	2303      	movs	r3, #3
  4001d2:	9300      	str	r3, [sp, #0]
  4001d4:	4613      	mov	r3, r2
  4001d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4001da:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4001de:	f04f 0100 	mov.w	r1, #0
  4001e2:	4c04      	ldr	r4, [pc, #16]	; (4001f4 <InterpretSwarmMessage+0x98>)
  4001e4:	47a0      	blx	r4
			break;
  4001e6:	e000      	b.n	4001ea <InterpretSwarmMessage+0x8e>
			break;
  4001e8:	bf00      	nop
	}
}
  4001ea:	bf00      	nop
  4001ec:	3754      	adds	r7, #84	; 0x54
  4001ee:	46bd      	mov	sp, r7
  4001f0:	bd90      	pop	{r4, r7, pc}
  4001f2:	bf00      	nop
  4001f4:	00400729 	.word	0x00400729
  4001f8:	00403b51 	.word	0x00403b51

004001fc <InterpretXbeeAPIFrame>:



void InterpretXbeeAPIFrame(struct frame_info frame)
{
  4001fc:	b580      	push	{r7, lr}
  4001fe:	b08a      	sub	sp, #40	; 0x28
  400200:	af00      	add	r7, sp, #0
  400202:	1d3b      	adds	r3, r7, #4
  400204:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//copy information from the frame info structure to local variables
	int index = frame.index;
  400208:	687b      	ldr	r3, [r7, #4]
  40020a:	623b      	str	r3, [r7, #32]
	uint8_t frame_type = frame.type;
  40020c:	7a3b      	ldrb	r3, [r7, #8]
  40020e:	77fb      	strb	r3, [r7, #31]
	int length = frame.length;
  400210:	68fb      	ldr	r3, [r7, #12]
  400212:	61bb      	str	r3, [r7, #24]

	//Temporary variable to store value from buffer
	uint8_t temp;

	//Behaviour depends on type of frame received
	switch(frame_type)
  400214:	7ffb      	ldrb	r3, [r7, #31]
  400216:	3b88      	subs	r3, #136	; 0x88
  400218:	2b1b      	cmp	r3, #27
  40021a:	f200 809a 	bhi.w	400352 <InterpretXbeeAPIFrame+0x156>
  40021e:	a201      	add	r2, pc, #4	; (adr r2, 400224 <InterpretXbeeAPIFrame+0x28>)
  400220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400224:	00400353 	.word	0x00400353
  400228:	00400353 	.word	0x00400353
  40022c:	00400353 	.word	0x00400353
  400230:	00400353 	.word	0x00400353
  400234:	00400353 	.word	0x00400353
  400238:	00400353 	.word	0x00400353
  40023c:	00400353 	.word	0x00400353
  400240:	00400353 	.word	0x00400353
  400244:	00400295 	.word	0x00400295
  400248:	00400353 	.word	0x00400353
  40024c:	00400353 	.word	0x00400353
  400250:	00400353 	.word	0x00400353
  400254:	00400353 	.word	0x00400353
  400258:	00400353 	.word	0x00400353
  40025c:	00400353 	.word	0x00400353
  400260:	00400353 	.word	0x00400353
  400264:	00400353 	.word	0x00400353
  400268:	00400353 	.word	0x00400353
  40026c:	00400353 	.word	0x00400353
  400270:	00400353 	.word	0x00400353
  400274:	00400353 	.word	0x00400353
  400278:	00400353 	.word	0x00400353
  40027c:	00400353 	.word	0x00400353
  400280:	00400353 	.word	0x00400353
  400284:	00400353 	.word	0x00400353
  400288:	00400353 	.word	0x00400353
  40028c:	00400353 	.word	0x00400353
  400290:	00400353 	.word	0x00400353
			//XBEE: Transmit Status Received (N/H)
			break;
		
		case ZIGBEE_RECEIVE_PACKET:
			//XBEE: Data Packet Received
			FrameBufferOut = index;	//Update the location we read from within the FrameBuffer
  400294:	4a32      	ldr	r2, [pc, #200]	; (400360 <InterpretXbeeAPIFrame+0x164>)
  400296:	6a3b      	ldr	r3, [r7, #32]
  400298:	6013      	str	r3, [r2, #0]

			//The source's 64-Bit address
			FrameBufferGet(&temp);		
  40029a:	f107 0317 	add.w	r3, r7, #23
  40029e:	4618      	mov	r0, r3
  4002a0:	4b30      	ldr	r3, [pc, #192]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002a2:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002a4:	f107 0317 	add.w	r3, r7, #23
  4002a8:	4618      	mov	r0, r3
  4002aa:	4b2e      	ldr	r3, [pc, #184]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002ac:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002ae:	f107 0317 	add.w	r3, r7, #23
  4002b2:	4618      	mov	r0, r3
  4002b4:	4b2b      	ldr	r3, [pc, #172]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002b6:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002b8:	f107 0317 	add.w	r3, r7, #23
  4002bc:	4618      	mov	r0, r3
  4002be:	4b29      	ldr	r3, [pc, #164]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002c0:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002c2:	f107 0317 	add.w	r3, r7, #23
  4002c6:	4618      	mov	r0, r3
  4002c8:	4b26      	ldr	r3, [pc, #152]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002ca:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002cc:	f107 0317 	add.w	r3, r7, #23
  4002d0:	4618      	mov	r0, r3
  4002d2:	4b24      	ldr	r3, [pc, #144]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002d4:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002d6:	f107 0317 	add.w	r3, r7, #23
  4002da:	4618      	mov	r0, r3
  4002dc:	4b21      	ldr	r3, [pc, #132]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002de:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002e0:	f107 0317 	add.w	r3, r7, #23
  4002e4:	4618      	mov	r0, r3
  4002e6:	4b1f      	ldr	r3, [pc, #124]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002e8:	4798      	blx	r3
			
			//The source's 16-Bit address
			FrameBufferGet(&temp);
  4002ea:	f107 0317 	add.w	r3, r7, #23
  4002ee:	4618      	mov	r0, r3
  4002f0:	4b1c      	ldr	r3, [pc, #112]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002f2:	4798      	blx	r3
			FrameBufferGet(&temp);
  4002f4:	f107 0317 	add.w	r3, r7, #23
  4002f8:	4618      	mov	r0, r3
  4002fa:	4b1a      	ldr	r3, [pc, #104]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  4002fc:	4798      	blx	r3
			
			//Receive options
			FrameBufferGet(&temp);	
  4002fe:	f107 0317 	add.w	r3, r7, #23
  400302:	4618      	mov	r0, r3
  400304:	4b17      	ldr	r3, [pc, #92]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  400306:	4798      	blx	r3
			
			//Received Data
			if(FrameBufferGet(&temp) == 0)
  400308:	f107 0317 	add.w	r3, r7, #23
  40030c:	4618      	mov	r0, r3
  40030e:	4b15      	ldr	r3, [pc, #84]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  400310:	4798      	blx	r3
  400312:	4603      	mov	r3, r0
  400314:	2b00      	cmp	r3, #0
  400316:	d11e      	bne.n	400356 <InterpretXbeeAPIFrame+0x15a>
			{
				MessageBufferInfoPut(MessageBufferIn,temp,1); //Store information about received message
  400318:	4b13      	ldr	r3, [pc, #76]	; (400368 <InterpretXbeeAPIFrame+0x16c>)
  40031a:	681b      	ldr	r3, [r3, #0]
  40031c:	7df9      	ldrb	r1, [r7, #23]
  40031e:	2201      	movs	r2, #1
  400320:	4618      	mov	r0, r3
  400322:	4b12      	ldr	r3, [pc, #72]	; (40036c <InterpretXbeeAPIFrame+0x170>)
  400324:	4798      	blx	r3
				for(int i = 1; i <= length-12; i++)
  400326:	2301      	movs	r3, #1
  400328:	627b      	str	r3, [r7, #36]	; 0x24
  40032a:	e00b      	b.n	400344 <InterpretXbeeAPIFrame+0x148>
				{
					//Take data from FrameBuffer and put it into the MessageBuffer 
					FrameBufferGet(&temp);
  40032c:	f107 0317 	add.w	r3, r7, #23
  400330:	4618      	mov	r0, r3
  400332:	4b0c      	ldr	r3, [pc, #48]	; (400364 <InterpretXbeeAPIFrame+0x168>)
  400334:	4798      	blx	r3
					MessageBufferPut(temp);
  400336:	7dfb      	ldrb	r3, [r7, #23]
  400338:	4618      	mov	r0, r3
  40033a:	4b0d      	ldr	r3, [pc, #52]	; (400370 <InterpretXbeeAPIFrame+0x174>)
  40033c:	4798      	blx	r3
				for(int i = 1; i <= length-12; i++)
  40033e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400340:	3301      	adds	r3, #1
  400342:	627b      	str	r3, [r7, #36]	; 0x24
  400344:	69bb      	ldr	r3, [r7, #24]
  400346:	f1a3 020c 	sub.w	r2, r3, #12
  40034a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40034c:	429a      	cmp	r2, r3
  40034e:	daed      	bge.n	40032c <InterpretXbeeAPIFrame+0x130>
				}
			}
			break;
  400350:	e001      	b.n	400356 <InterpretXbeeAPIFrame+0x15a>
			//XBEE: Many To One Route Request Indicator Received (N/H);
			break;

		default:
			//WARNING ERROR XBEE: unhandled message received;
			break;
  400352:	bf00      	nop
  400354:	e000      	b.n	400358 <InterpretXbeeAPIFrame+0x15c>
			break;
  400356:	bf00      	nop
	}
}
  400358:	bf00      	nop
  40035a:	3728      	adds	r7, #40	; 0x28
  40035c:	46bd      	mov	sp, r7
  40035e:	bd80      	pop	{r7, pc}
  400360:	20000f84 	.word	0x20000f84
  400364:	00400939 	.word	0x00400939
  400368:	200004c8 	.word	0x200004c8
  40036c:	00400c09 	.word	0x00400c09
  400370:	00400b51 	.word	0x00400b51

00400374 <CommunicationSetup>:

void CommunicationSetup(void)
{
  400374:	b580      	push	{r7, lr}
  400376:	af00      	add	r7, sp, #0
	REG_PMC_PCER0 |= (1 << 16);				//Enable clock access to UART3
  400378:	4a1a      	ldr	r2, [pc, #104]	; (4003e4 <CommunicationSetup+0x70>)
  40037a:	4b1a      	ldr	r3, [pc, #104]	; (4003e4 <CommunicationSetup+0x70>)
  40037c:	681b      	ldr	r3, [r3, #0]
  40037e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400382:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR |= (1<<11)|(1<<10);		//Enable peripheral control of PB10 (URXD3) and PB11 (UTXD3) both connected to peripheral B
  400384:	4a18      	ldr	r2, [pc, #96]	; (4003e8 <CommunicationSetup+0x74>)
  400386:	4b18      	ldr	r3, [pc, #96]	; (4003e8 <CommunicationSetup+0x74>)
  400388:	681b      	ldr	r3, [r3, #0]
  40038a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
  40038e:	6013      	str	r3, [r2, #0]
	REG_UART3_MR |= (0<<14) | (0x4<<9);		//set as no parity, normal mode
  400390:	4a16      	ldr	r2, [pc, #88]	; (4003ec <CommunicationSetup+0x78>)
  400392:	4b16      	ldr	r3, [pc, #88]	; (4003ec <CommunicationSetup+0x78>)
  400394:	681b      	ldr	r3, [r3, #0]
  400396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40039a:	6013      	str	r3, [r2, #0]
	REG_UART3_BRGR = 651;					//Set Baud rate for 9600 from a 100MHZ clock
  40039c:	4b14      	ldr	r3, [pc, #80]	; (4003f0 <CommunicationSetup+0x7c>)
  40039e:	f240 228b 	movw	r2, #651	; 0x28b
  4003a2:	601a      	str	r2, [r3, #0]
	REG_UART3_CR |= (1<<2)|(1<<3)|(1<<8);	//Reset receiver, transmitter and status bits
  4003a4:	4a13      	ldr	r2, [pc, #76]	; (4003f4 <CommunicationSetup+0x80>)
  4003a6:	4b13      	ldr	r3, [pc, #76]	; (4003f4 <CommunicationSetup+0x80>)
  4003a8:	681b      	ldr	r3, [r3, #0]
  4003aa:	f443 7386 	orr.w	r3, r3, #268	; 0x10c
  4003ae:	6013      	str	r3, [r2, #0]
	REG_UART3_CR |= (1<<4)|(1<<6);			//Enable receiver and transmitter
  4003b0:	4a10      	ldr	r2, [pc, #64]	; (4003f4 <CommunicationSetup+0x80>)
  4003b2:	4b10      	ldr	r3, [pc, #64]	; (4003f4 <CommunicationSetup+0x80>)
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  4003ba:	6013      	str	r3, [r2, #0]
	REG_UART3_IER |= (1<<0);				//ENABLE UART RXRDY interrupt
  4003bc:	4a0e      	ldr	r2, [pc, #56]	; (4003f8 <CommunicationSetup+0x84>)
  4003be:	4b0e      	ldr	r3, [pc, #56]	; (4003f8 <CommunicationSetup+0x84>)
  4003c0:	681b      	ldr	r3, [r3, #0]
  4003c2:	f043 0301 	orr.w	r3, r3, #1
  4003c6:	6013      	str	r3, [r2, #0]
	
	NVIC_EnableIRQ(16);						//ENABLE the UART3 system interrupts
  4003c8:	2010      	movs	r0, #16
  4003ca:	4b0c      	ldr	r3, [pc, #48]	; (4003fc <CommunicationSetup+0x88>)
  4003cc:	4798      	blx	r3

	//Initializes buffers to beginning of arrays
	FrameBufferInit();
  4003ce:	4b0c      	ldr	r3, [pc, #48]	; (400400 <CommunicationSetup+0x8c>)
  4003d0:	4798      	blx	r3
	FrameBufferInfoInit();
  4003d2:	4b0c      	ldr	r3, [pc, #48]	; (400404 <CommunicationSetup+0x90>)
  4003d4:	4798      	blx	r3
	MessageBufferInit();
  4003d6:	4b0c      	ldr	r3, [pc, #48]	; (400408 <CommunicationSetup+0x94>)
  4003d8:	4798      	blx	r3
	MessageBufferInfoInit();
  4003da:	4b0c      	ldr	r3, [pc, #48]	; (40040c <CommunicationSetup+0x98>)
  4003dc:	4798      	blx	r3
}
  4003de:	bf00      	nop
  4003e0:	bd80      	pop	{r7, pc}
  4003e2:	bf00      	nop
  4003e4:	400e0410 	.word	0x400e0410
  4003e8:	400e1004 	.word	0x400e1004
  4003ec:	40048004 	.word	0x40048004
  4003f0:	40048020 	.word	0x40048020
  4003f4:	40048000 	.word	0x40048000
  4003f8:	40048008 	.word	0x40048008
  4003fc:	0040012d 	.word	0x0040012d
  400400:	00400881 	.word	0x00400881
  400404:	004009a9 	.word	0x004009a9
  400408:	00400b25 	.word	0x00400b25
  40040c:	00400bdd 	.word	0x00400bdd

00400410 <UART3_Handler>:


/******** UART3 Interrupt Handler ********/
void UART3_Handler(void)
{
  400410:	b580      	push	{r7, lr}
  400412:	b082      	sub	sp, #8
  400414:	af00      	add	r7, sp, #0
	static int check;				//Checksum calculation
	static int frame_start_index;	//The position in the FrameBuffer where the data of this XBee Frame is stored
	static int frame_type;			//The type of received XBee Frame
	

	if(REG_UART3_IMR == UART_IMR_RXRDY)	//if we receive data
  400416:	4b5a      	ldr	r3, [pc, #360]	; (400580 <UART3_Handler+0x170>)
  400418:	681b      	ldr	r3, [r3, #0]
  40041a:	2b01      	cmp	r3, #1
  40041c:	f040 80ab 	bne.w	400576 <UART3_Handler+0x166>
	{
		temp = REG_UART3_RHR;	//store the incoming data in a temporary variable 
  400420:	4b58      	ldr	r3, [pc, #352]	; (400584 <UART3_Handler+0x174>)
  400422:	681b      	ldr	r3, [r3, #0]
  400424:	71fb      	strb	r3, [r7, #7]

		if(temp == FRAME_DELIMITER && receiveState != CASE_START ) //if we receive a start byte out of sequence
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	2b7e      	cmp	r3, #126	; 0x7e
  40042a:	d107      	bne.n	40043c <UART3_Handler+0x2c>
  40042c:	4b56      	ldr	r3, [pc, #344]	; (400588 <UART3_Handler+0x178>)
  40042e:	781b      	ldrb	r3, [r3, #0]
  400430:	2b00      	cmp	r3, #0
  400432:	d003      	beq.n	40043c <UART3_Handler+0x2c>
		{
			receiveState = CASE_START;	//reset back to the start state	
  400434:	4b54      	ldr	r3, [pc, #336]	; (400588 <UART3_Handler+0x178>)
  400436:	2200      	movs	r2, #0
  400438:	701a      	strb	r2, [r3, #0]
  40043a:	e011      	b.n	400460 <UART3_Handler+0x50>
		}
		else if(temp == ESCAPE_BYTE) //if the next byte needs to be escaped
  40043c:	79fb      	ldrb	r3, [r7, #7]
  40043e:	2b7d      	cmp	r3, #125	; 0x7d
  400440:	d103      	bne.n	40044a <UART3_Handler+0x3a>
		{
			escape = true;	//set the flag
  400442:	4b52      	ldr	r3, [pc, #328]	; (40058c <UART3_Handler+0x17c>)
  400444:	2201      	movs	r2, #1
  400446:	701a      	strb	r2, [r3, #0]
  400448:	e00a      	b.n	400460 <UART3_Handler+0x50>
		}
		else if(escape) //if the current byte needs to be escaped
  40044a:	4b50      	ldr	r3, [pc, #320]	; (40058c <UART3_Handler+0x17c>)
  40044c:	781b      	ldrb	r3, [r3, #0]
  40044e:	2b00      	cmp	r3, #0
  400450:	d006      	beq.n	400460 <UART3_Handler+0x50>
		{
			temp ^= 0x20;	//reverse the escape procedure
  400452:	79fb      	ldrb	r3, [r7, #7]
  400454:	f083 0320 	eor.w	r3, r3, #32
  400458:	71fb      	strb	r3, [r7, #7]
			escape = false;	//reset the flag
  40045a:	4b4c      	ldr	r3, [pc, #304]	; (40058c <UART3_Handler+0x17c>)
  40045c:	2200      	movs	r2, #0
  40045e:	701a      	strb	r2, [r3, #0]
		}

		if(escape == false)	//we only go through the receive states if the data has been escaped
  400460:	4b4a      	ldr	r3, [pc, #296]	; (40058c <UART3_Handler+0x17c>)
  400462:	781b      	ldrb	r3, [r3, #0]
  400464:	f083 0301 	eor.w	r3, r3, #1
  400468:	b2db      	uxtb	r3, r3
  40046a:	2b00      	cmp	r3, #0
  40046c:	f000 8083 	beq.w	400576 <UART3_Handler+0x166>
		{
			switch(receiveState)
  400470:	4b45      	ldr	r3, [pc, #276]	; (400588 <UART3_Handler+0x178>)
  400472:	781b      	ldrb	r3, [r3, #0]
  400474:	2b05      	cmp	r3, #5
  400476:	d87e      	bhi.n	400576 <UART3_Handler+0x166>
  400478:	a201      	add	r2, pc, #4	; (adr r2, 400480 <UART3_Handler+0x70>)
  40047a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40047e:	bf00      	nop
  400480:	00400499 	.word	0x00400499
  400484:	004004b9 	.word	0x004004b9
  400488:	004004c9 	.word	0x004004c9
  40048c:	004004d7 	.word	0x004004d7
  400490:	00400503 	.word	0x00400503
  400494:	00400535 	.word	0x00400535
			{
				case CASE_START:
					if(temp == FRAME_DELIMITER)
  400498:	79fb      	ldrb	r3, [r7, #7]
  40049a:	2b7e      	cmp	r3, #126	; 0x7e
  40049c:	d168      	bne.n	400570 <UART3_Handler+0x160>
					{
						//reset our book-keeping variables and updates the receive state
						length = 0;
  40049e:	4b3c      	ldr	r3, [pc, #240]	; (400590 <UART3_Handler+0x180>)
  4004a0:	2200      	movs	r2, #0
  4004a2:	601a      	str	r2, [r3, #0]
						index = 0;
  4004a4:	4b3b      	ldr	r3, [pc, #236]	; (400594 <UART3_Handler+0x184>)
  4004a6:	2200      	movs	r2, #0
  4004a8:	601a      	str	r2, [r3, #0]
						check = 0;
  4004aa:	4b3b      	ldr	r3, [pc, #236]	; (400598 <UART3_Handler+0x188>)
  4004ac:	2200      	movs	r2, #0
  4004ae:	601a      	str	r2, [r3, #0]
						receiveState = CASE_LENGTH_MSB;
  4004b0:	4b35      	ldr	r3, [pc, #212]	; (400588 <UART3_Handler+0x178>)
  4004b2:	2201      	movs	r2, #1
  4004b4:	701a      	strb	r2, [r3, #0]
					}
					break;
  4004b6:	e05b      	b.n	400570 <UART3_Handler+0x160>

				case CASE_LENGTH_MSB:
					//Calculates the length using the first length byte and updates the receive state
					length = temp*256;
  4004b8:	79fb      	ldrb	r3, [r7, #7]
  4004ba:	021b      	lsls	r3, r3, #8
  4004bc:	4a34      	ldr	r2, [pc, #208]	; (400590 <UART3_Handler+0x180>)
  4004be:	6013      	str	r3, [r2, #0]
					receiveState = CASE_LENGTH_LSB;
  4004c0:	4b31      	ldr	r3, [pc, #196]	; (400588 <UART3_Handler+0x178>)
  4004c2:	2202      	movs	r2, #2
  4004c4:	701a      	strb	r2, [r3, #0]
					break;
  4004c6:	e056      	b.n	400576 <UART3_Handler+0x166>

				case CASE_LENGTH_LSB:
					//Calculates the length using the second length byte and updates the receive state
					length =+ temp;
  4004c8:	79fb      	ldrb	r3, [r7, #7]
  4004ca:	4a31      	ldr	r2, [pc, #196]	; (400590 <UART3_Handler+0x180>)
  4004cc:	6013      	str	r3, [r2, #0]
					receiveState = CASE_FRAME_TYPE;
  4004ce:	4b2e      	ldr	r3, [pc, #184]	; (400588 <UART3_Handler+0x178>)
  4004d0:	2203      	movs	r2, #3
  4004d2:	701a      	strb	r2, [r3, #0]
					break;
  4004d4:	e04f      	b.n	400576 <UART3_Handler+0x166>

				case CASE_FRAME_TYPE:
					frame_type = temp;					//Receives and stores the Frame type
  4004d6:	79fb      	ldrb	r3, [r7, #7]
  4004d8:	4a30      	ldr	r2, [pc, #192]	; (40059c <UART3_Handler+0x18c>)
  4004da:	6013      	str	r3, [r2, #0]
					check += temp;						//Calculates the checksum over the received byte
  4004dc:	79fa      	ldrb	r2, [r7, #7]
  4004de:	4b2e      	ldr	r3, [pc, #184]	; (400598 <UART3_Handler+0x188>)
  4004e0:	681b      	ldr	r3, [r3, #0]
  4004e2:	4413      	add	r3, r2
  4004e4:	4a2c      	ldr	r2, [pc, #176]	; (400598 <UART3_Handler+0x188>)
  4004e6:	6013      	str	r3, [r2, #0]
					index++;							//Updates the number of received bytes that count towards the XBee frame length
  4004e8:	4b2a      	ldr	r3, [pc, #168]	; (400594 <UART3_Handler+0x184>)
  4004ea:	681b      	ldr	r3, [r3, #0]
  4004ec:	3301      	adds	r3, #1
  4004ee:	4a29      	ldr	r2, [pc, #164]	; (400594 <UART3_Handler+0x184>)
  4004f0:	6013      	str	r3, [r2, #0]
					frame_start_index = FrameBufferIn;	//Stores the location of the Frame Data in the FrameBuffer
  4004f2:	4b2b      	ldr	r3, [pc, #172]	; (4005a0 <UART3_Handler+0x190>)
  4004f4:	681b      	ldr	r3, [r3, #0]
  4004f6:	4a2b      	ldr	r2, [pc, #172]	; (4005a4 <UART3_Handler+0x194>)
  4004f8:	6013      	str	r3, [r2, #0]
					receiveState = CASE_DATA;			//Updates the receive state
  4004fa:	4b23      	ldr	r3, [pc, #140]	; (400588 <UART3_Handler+0x178>)
  4004fc:	2204      	movs	r2, #4
  4004fe:	701a      	strb	r2, [r3, #0]
					break;
  400500:	e039      	b.n	400576 <UART3_Handler+0x166>

				case CASE_DATA:	
					FrameBufferPut(temp); //Stores the Received data into the FrameBuffer
  400502:	79fb      	ldrb	r3, [r7, #7]
  400504:	4618      	mov	r0, r3
  400506:	4b28      	ldr	r3, [pc, #160]	; (4005a8 <UART3_Handler+0x198>)
  400508:	4798      	blx	r3
					check += temp; //Calculates the checksum over the received byte
  40050a:	79fa      	ldrb	r2, [r7, #7]
  40050c:	4b22      	ldr	r3, [pc, #136]	; (400598 <UART3_Handler+0x188>)
  40050e:	681b      	ldr	r3, [r3, #0]
  400510:	4413      	add	r3, r2
  400512:	4a21      	ldr	r2, [pc, #132]	; (400598 <UART3_Handler+0x188>)
  400514:	6013      	str	r3, [r2, #0]
					index++; //Updates the number of received bytes that count towards the XBee frame length
  400516:	4b1f      	ldr	r3, [pc, #124]	; (400594 <UART3_Handler+0x184>)
  400518:	681b      	ldr	r3, [r3, #0]
  40051a:	3301      	adds	r3, #1
  40051c:	4a1d      	ldr	r2, [pc, #116]	; (400594 <UART3_Handler+0x184>)
  40051e:	6013      	str	r3, [r2, #0]

					if(index == length) //Checks if we have received all the data and if we have updates the receive state
  400520:	4b1c      	ldr	r3, [pc, #112]	; (400594 <UART3_Handler+0x184>)
  400522:	681a      	ldr	r2, [r3, #0]
  400524:	4b1a      	ldr	r3, [pc, #104]	; (400590 <UART3_Handler+0x180>)
  400526:	681b      	ldr	r3, [r3, #0]
  400528:	429a      	cmp	r2, r3
  40052a:	d123      	bne.n	400574 <UART3_Handler+0x164>
					{
						receiveState = CASE_CHECKSUM;
  40052c:	4b16      	ldr	r3, [pc, #88]	; (400588 <UART3_Handler+0x178>)
  40052e:	2205      	movs	r2, #5
  400530:	701a      	strb	r2, [r3, #0]
					}
					
					break;
  400532:	e01f      	b.n	400574 <UART3_Handler+0x164>
				
				case CASE_CHECKSUM:
					check += temp;		//Calculates the checksum over the received byte
  400534:	79fa      	ldrb	r2, [r7, #7]
  400536:	4b18      	ldr	r3, [pc, #96]	; (400598 <UART3_Handler+0x188>)
  400538:	681b      	ldr	r3, [r3, #0]
  40053a:	4413      	add	r3, r2
  40053c:	4a16      	ldr	r2, [pc, #88]	; (400598 <UART3_Handler+0x188>)
  40053e:	6013      	str	r3, [r2, #0]
					check &= 0xFF;		//Final Step of checksum calculation for XBee Frame
  400540:	4b15      	ldr	r3, [pc, #84]	; (400598 <UART3_Handler+0x188>)
  400542:	681b      	ldr	r3, [r3, #0]
  400544:	b2db      	uxtb	r3, r3
  400546:	4a14      	ldr	r2, [pc, #80]	; (400598 <UART3_Handler+0x188>)
  400548:	6013      	str	r3, [r2, #0]
					if(check == 0xFF)	//Verifies the calculated checksum value
  40054a:	4b13      	ldr	r3, [pc, #76]	; (400598 <UART3_Handler+0x188>)
  40054c:	681b      	ldr	r3, [r3, #0]
  40054e:	2bff      	cmp	r3, #255	; 0xff
  400550:	d10a      	bne.n	400568 <UART3_Handler+0x158>
					{
						FrameBufferInfoPut(frame_start_index, frame_type, index -1); //Stores Frame info in buffer
  400552:	4b14      	ldr	r3, [pc, #80]	; (4005a4 <UART3_Handler+0x194>)
  400554:	6818      	ldr	r0, [r3, #0]
  400556:	4b11      	ldr	r3, [pc, #68]	; (40059c <UART3_Handler+0x18c>)
  400558:	681b      	ldr	r3, [r3, #0]
  40055a:	b2d9      	uxtb	r1, r3
  40055c:	4b0d      	ldr	r3, [pc, #52]	; (400594 <UART3_Handler+0x184>)
  40055e:	681b      	ldr	r3, [r3, #0]
  400560:	3b01      	subs	r3, #1
  400562:	461a      	mov	r2, r3
  400564:	4b11      	ldr	r3, [pc, #68]	; (4005ac <UART3_Handler+0x19c>)
  400566:	4798      	blx	r3
					}
					receiveState = CASE_START; //Resets receive state d
  400568:	4b07      	ldr	r3, [pc, #28]	; (400588 <UART3_Handler+0x178>)
  40056a:	2200      	movs	r2, #0
  40056c:	701a      	strb	r2, [r3, #0]
				break;
  40056e:	e002      	b.n	400576 <UART3_Handler+0x166>
					break;
  400570:	bf00      	nop
  400572:	e000      	b.n	400576 <UART3_Handler+0x166>
					break;
  400574:	bf00      	nop
			}
		}
	}
}
  400576:	bf00      	nop
  400578:	3708      	adds	r7, #8
  40057a:	46bd      	mov	sp, r7
  40057c:	bd80      	pop	{r7, pc}
  40057e:	bf00      	nop
  400580:	40048010 	.word	0x40048010
  400584:	40048018 	.word	0x40048018
  400588:	2000048c 	.word	0x2000048c
  40058c:	2000048d 	.word	0x2000048d
  400590:	20000490 	.word	0x20000490
  400594:	20000494 	.word	0x20000494
  400598:	20000498 	.word	0x20000498
  40059c:	2000049c 	.word	0x2000049c
  4005a0:	20000f90 	.word	0x20000f90
  4005a4:	200004a0 	.word	0x200004a0
  4005a8:	004008ad 	.word	0x004008ad
  4005ac:	004009d5 	.word	0x004009d5

004005b0 <UART3_Write>:

void UART3_Write(uint8_t data)
{
  4005b0:	b480      	push	{r7}
  4005b2:	b083      	sub	sp, #12
  4005b4:	af00      	add	r7, sp, #0
  4005b6:	4603      	mov	r3, r0
  4005b8:	71fb      	strb	r3, [r7, #7]
	while(!(REG_UART3_SR & (1<<1)));	//wait till TXRDY
  4005ba:	bf00      	nop
  4005bc:	4b06      	ldr	r3, [pc, #24]	; (4005d8 <UART3_Write+0x28>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	f003 0302 	and.w	r3, r3, #2
  4005c4:	2b00      	cmp	r3, #0
  4005c6:	d0f9      	beq.n	4005bc <UART3_Write+0xc>
	REG_UART3_THR = data;				//place data in TX register
  4005c8:	4a04      	ldr	r2, [pc, #16]	; (4005dc <UART3_Write+0x2c>)
  4005ca:	79fb      	ldrb	r3, [r7, #7]
  4005cc:	6013      	str	r3, [r2, #0]
}
  4005ce:	bf00      	nop
  4005d0:	370c      	adds	r7, #12
  4005d2:	46bd      	mov	sp, r7
  4005d4:	bc80      	pop	{r7}
  4005d6:	4770      	bx	lr
  4005d8:	40048014 	.word	0x40048014
  4005dc:	4004801c 	.word	0x4004801c

004005e0 <SendXbeeAPIFrame>:

void SendXbeeAPIFrame(uint8_t * frame_data, int len)
{
  4005e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4005e4:	b08b      	sub	sp, #44	; 0x2c
  4005e6:	af00      	add	r7, sp, #0
  4005e8:	6078      	str	r0, [r7, #4]
  4005ea:	6039      	str	r1, [r7, #0]
  4005ec:	466a      	mov	r2, sp
  4005ee:	4691      	mov	r9, r2
	uint16_t length = len;		//length of API Frame Data
  4005f0:	683a      	ldr	r2, [r7, #0]
  4005f2:	837a      	strh	r2, [r7, #26]
	uint8_t data[length + 4];	//Array to store the full Frame
  4005f4:	8b7a      	ldrh	r2, [r7, #26]
  4005f6:	f102 0804 	add.w	r8, r2, #4
  4005fa:	f108 32ff 	add.w	r2, r8, #4294967295
  4005fe:	617a      	str	r2, [r7, #20]
  400600:	4642      	mov	r2, r8
  400602:	4611      	mov	r1, r2
  400604:	f04f 0200 	mov.w	r2, #0
  400608:	00d6      	lsls	r6, r2, #3
  40060a:	ea46 7651 	orr.w	r6, r6, r1, lsr #29
  40060e:	00cd      	lsls	r5, r1, #3
  400610:	4642      	mov	r2, r8
  400612:	4611      	mov	r1, r2
  400614:	f04f 0200 	mov.w	r2, #0
  400618:	00d4      	lsls	r4, r2, #3
  40061a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
  40061e:	00cb      	lsls	r3, r1, #3
  400620:	4643      	mov	r3, r8
  400622:	3307      	adds	r3, #7
  400624:	08db      	lsrs	r3, r3, #3
  400626:	00db      	lsls	r3, r3, #3
  400628:	ebad 0d03 	sub.w	sp, sp, r3
  40062c:	466b      	mov	r3, sp
  40062e:	3300      	adds	r3, #0
  400630:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;		//Variable to store checksum calculation
  400632:	2300      	movs	r3, #0
  400634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t data_length;

	//Forms XBee Frame Header with start delimiter and length
	data[0] = FRAME_DELIMITER;
  400638:	693b      	ldr	r3, [r7, #16]
  40063a:	227e      	movs	r2, #126	; 0x7e
  40063c:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t) (length >> 7) & 0xFF;
  40063e:	8b7b      	ldrh	r3, [r7, #26]
  400640:	09db      	lsrs	r3, r3, #7
  400642:	b29b      	uxth	r3, r3
  400644:	b2da      	uxtb	r2, r3
  400646:	693b      	ldr	r3, [r7, #16]
  400648:	705a      	strb	r2, [r3, #1]
	data[2] = length & 0xFF;
  40064a:	8b7b      	ldrh	r3, [r7, #26]
  40064c:	b2da      	uxtb	r2, r3
  40064e:	693b      	ldr	r3, [r7, #16]
  400650:	709a      	strb	r2, [r3, #2]

	//Copies frame data into the full frame array
	memcpy(data + 3, frame_data, length);
  400652:	693b      	ldr	r3, [r7, #16]
  400654:	3303      	adds	r3, #3
  400656:	8b7a      	ldrh	r2, [r7, #26]
  400658:	6879      	ldr	r1, [r7, #4]
  40065a:	4618      	mov	r0, r3
  40065c:	4b30      	ldr	r3, [pc, #192]	; (400720 <SendXbeeAPIFrame+0x140>)
  40065e:	4798      	blx	r3
	
	//Calculates the checksum over the frame data array
	for(int i = 0; i < length; i++)
  400660:	2300      	movs	r3, #0
  400662:	623b      	str	r3, [r7, #32]
  400664:	e00b      	b.n	40067e <SendXbeeAPIFrame+0x9e>
	{
		checksum += frame_data[i];
  400666:	6a3b      	ldr	r3, [r7, #32]
  400668:	687a      	ldr	r2, [r7, #4]
  40066a:	4413      	add	r3, r2
  40066c:	781a      	ldrb	r2, [r3, #0]
  40066e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400672:	4413      	add	r3, r2
  400674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 0; i < length; i++)
  400678:	6a3b      	ldr	r3, [r7, #32]
  40067a:	3301      	adds	r3, #1
  40067c:	623b      	str	r3, [r7, #32]
  40067e:	8b7a      	ldrh	r2, [r7, #26]
  400680:	6a3b      	ldr	r3, [r7, #32]
  400682:	429a      	cmp	r2, r3
  400684:	dcef      	bgt.n	400666 <SendXbeeAPIFrame+0x86>
	}
	
	data[length+3] = 0xFF - checksum;	//Completes final step in checksum calculation and copies it to the full frame array
  400686:	8b7b      	ldrh	r3, [r7, #26]
  400688:	3303      	adds	r3, #3
  40068a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  40068e:	43d2      	mvns	r2, r2
  400690:	b2d1      	uxtb	r1, r2
  400692:	693a      	ldr	r2, [r7, #16]
  400694:	54d1      	strb	r1, [r2, r3]
	data_length = sizeof(data);			//Gets the length of full message
  400696:	4643      	mov	r3, r8
  400698:	73fb      	strb	r3, [r7, #15]
	UART3_Write(data[0]);				//Writes the Frame Delimiter as this shouldn't be escaped
  40069a:	693b      	ldr	r3, [r7, #16]
  40069c:	781b      	ldrb	r3, [r3, #0]
  40069e:	4618      	mov	r0, r3
  4006a0:	4b20      	ldr	r3, [pc, #128]	; (400724 <SendXbeeAPIFrame+0x144>)
  4006a2:	4798      	blx	r3

	//Sends the message out the UART, escaping characters on the fly as needed
	for(int i = 1; i <data_length; i++)
  4006a4:	2301      	movs	r3, #1
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	e02f      	b.n	40070a <SendXbeeAPIFrame+0x12a>
	{
		//Checks for bytes that need to be escaped
		if(data[i] == 0x7E || data[i] == 0x7D || data[i] == 0x11 || data[i] == 0x13) 
  4006aa:	693a      	ldr	r2, [r7, #16]
  4006ac:	69fb      	ldr	r3, [r7, #28]
  4006ae:	4413      	add	r3, r2
  4006b0:	781b      	ldrb	r3, [r3, #0]
  4006b2:	2b7e      	cmp	r3, #126	; 0x7e
  4006b4:	d011      	beq.n	4006da <SendXbeeAPIFrame+0xfa>
  4006b6:	693a      	ldr	r2, [r7, #16]
  4006b8:	69fb      	ldr	r3, [r7, #28]
  4006ba:	4413      	add	r3, r2
  4006bc:	781b      	ldrb	r3, [r3, #0]
  4006be:	2b7d      	cmp	r3, #125	; 0x7d
  4006c0:	d00b      	beq.n	4006da <SendXbeeAPIFrame+0xfa>
  4006c2:	693a      	ldr	r2, [r7, #16]
  4006c4:	69fb      	ldr	r3, [r7, #28]
  4006c6:	4413      	add	r3, r2
  4006c8:	781b      	ldrb	r3, [r3, #0]
  4006ca:	2b11      	cmp	r3, #17
  4006cc:	d005      	beq.n	4006da <SendXbeeAPIFrame+0xfa>
  4006ce:	693a      	ldr	r2, [r7, #16]
  4006d0:	69fb      	ldr	r3, [r7, #28]
  4006d2:	4413      	add	r3, r2
  4006d4:	781b      	ldrb	r3, [r3, #0]
  4006d6:	2b13      	cmp	r3, #19
  4006d8:	d10d      	bne.n	4006f6 <SendXbeeAPIFrame+0x116>
		{
			UART3_Write(ESCAPE_BYTE);	//Writes the escape byte
  4006da:	207d      	movs	r0, #125	; 0x7d
  4006dc:	4b11      	ldr	r3, [pc, #68]	; (400724 <SendXbeeAPIFrame+0x144>)
  4006de:	4798      	blx	r3
			UART3_Write(data[i]^0x20);	//Writes the escaped byte
  4006e0:	693a      	ldr	r2, [r7, #16]
  4006e2:	69fb      	ldr	r3, [r7, #28]
  4006e4:	4413      	add	r3, r2
  4006e6:	781b      	ldrb	r3, [r3, #0]
  4006e8:	f083 0320 	eor.w	r3, r3, #32
  4006ec:	b2db      	uxtb	r3, r3
  4006ee:	4618      	mov	r0, r3
  4006f0:	4b0c      	ldr	r3, [pc, #48]	; (400724 <SendXbeeAPIFrame+0x144>)
  4006f2:	4798      	blx	r3
  4006f4:	e006      	b.n	400704 <SendXbeeAPIFrame+0x124>
		}
		else
		{
			UART3_Write(data[i]);	//Writes the byte
  4006f6:	693a      	ldr	r2, [r7, #16]
  4006f8:	69fb      	ldr	r3, [r7, #28]
  4006fa:	4413      	add	r3, r2
  4006fc:	781b      	ldrb	r3, [r3, #0]
  4006fe:	4618      	mov	r0, r3
  400700:	4b08      	ldr	r3, [pc, #32]	; (400724 <SendXbeeAPIFrame+0x144>)
  400702:	4798      	blx	r3
	for(int i = 1; i <data_length; i++)
  400704:	69fb      	ldr	r3, [r7, #28]
  400706:	3301      	adds	r3, #1
  400708:	61fb      	str	r3, [r7, #28]
  40070a:	7bfa      	ldrb	r2, [r7, #15]
  40070c:	69fb      	ldr	r3, [r7, #28]
  40070e:	429a      	cmp	r2, r3
  400710:	dccb      	bgt.n	4006aa <SendXbeeAPIFrame+0xca>
  400712:	46cd      	mov	sp, r9
		}
	}
}
  400714:	bf00      	nop
  400716:	372c      	adds	r7, #44	; 0x2c
  400718:	46bd      	mov	sp, r7
  40071a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40071e:	bf00      	nop
  400720:	00406561 	.word	0x00406561
  400724:	004005b1 	.word	0x004005b1

00400728 <SendXbeeAPITransmitRequest>:

//Sends an XBee Transmit Request Frame
void SendXbeeAPITransmitRequest(uint64_t destination_64, uint16_t destination_16, uint8_t *data, uint8_t  bytes)
{
  400728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40072c:	b095      	sub	sp, #84	; 0x54
  40072e:	af00      	add	r7, sp, #0
  400730:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
  400734:	63bb      	str	r3, [r7, #56]	; 0x38
  400736:	4613      	mov	r3, r2
  400738:	87fb      	strh	r3, [r7, #62]	; 0x3e
  40073a:	466b      	mov	r3, sp
  40073c:	607b      	str	r3, [r7, #4]
	//array to store message
	uint8_t frame_data[bytes + 14];
  40073e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
  400742:	f103 020e 	add.w	r2, r3, #14
  400746:	1e53      	subs	r3, r2, #1
  400748:	64fb      	str	r3, [r7, #76]	; 0x4c
  40074a:	4613      	mov	r3, r2
  40074c:	f04f 0400 	mov.w	r4, #0
  400750:	00e6      	lsls	r6, r4, #3
  400752:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  400756:	00dd      	lsls	r5, r3, #3
  400758:	4613      	mov	r3, r2
  40075a:	f04f 0400 	mov.w	r4, #0
  40075e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  400762:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  400766:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  40076a:	4613      	mov	r3, r2
  40076c:	3307      	adds	r3, #7
  40076e:	08db      	lsrs	r3, r3, #3
  400770:	00db      	lsls	r3, r3, #3
  400772:	ebad 0d03 	sub.w	sp, sp, r3
  400776:	466b      	mov	r3, sp
  400778:	3300      	adds	r3, #0
  40077a:	64bb      	str	r3, [r7, #72]	; 0x48

	frame_data[0] = ZIGBEE_TRANSMIT_REQUEST;	//Frame type
  40077c:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40077e:	2310      	movs	r3, #16
  400780:	7013      	strb	r3, [r2, #0]
	frame_data[1] = 150;						//frame ID (assigned arbitrary at the moment)
  400782:	6cba      	ldr	r2, [r7, #72]	; 0x48
  400784:	2396      	movs	r3, #150	; 0x96
  400786:	7053      	strb	r3, [r2, #1]

	//Destination 64-Bit Address
	frame_data[2] = (destination_64 & (0xFF00000000000000)) >> 56;
  400788:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  40078c:	0e22      	lsrs	r2, r4, #24
  40078e:	623a      	str	r2, [r7, #32]
  400790:	2200      	movs	r2, #0
  400792:	627a      	str	r2, [r7, #36]	; 0x24
  400794:	f897 3020 	ldrb.w	r3, [r7, #32]
  400798:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40079a:	7093      	strb	r3, [r2, #2]
	frame_data[3] = (destination_64 & (0xFF000000000000)) >> 48;
  40079c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4007a0:	0c22      	lsrs	r2, r4, #16
  4007a2:	61ba      	str	r2, [r7, #24]
  4007a4:	2200      	movs	r2, #0
  4007a6:	61fa      	str	r2, [r7, #28]
  4007a8:	7e3a      	ldrb	r2, [r7, #24]
  4007aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007ac:	70da      	strb	r2, [r3, #3]
	frame_data[4] = (destination_64 & (0xFF0000000000)) >> 40;
  4007ae:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4007b2:	0a22      	lsrs	r2, r4, #8
  4007b4:	613a      	str	r2, [r7, #16]
  4007b6:	2200      	movs	r2, #0
  4007b8:	617a      	str	r2, [r7, #20]
  4007ba:	7c3a      	ldrb	r2, [r7, #16]
  4007bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007be:	711a      	strb	r2, [r3, #4]
	frame_data[5] = (destination_64 & (0xFF00000000)) >> 32;
  4007c0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4007c4:	0022      	movs	r2, r4
  4007c6:	60ba      	str	r2, [r7, #8]
  4007c8:	2200      	movs	r2, #0
  4007ca:	60fa      	str	r2, [r7, #12]
  4007cc:	7a3a      	ldrb	r2, [r7, #8]
  4007ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007d0:	715a      	strb	r2, [r3, #5]
	frame_data[6] = (destination_64 & (0xFF000000)) >> 24;
  4007d2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4007d6:	0e1a      	lsrs	r2, r3, #24
  4007d8:	633a      	str	r2, [r7, #48]	; 0x30
  4007da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4007dc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4007e0:	633a      	str	r2, [r7, #48]	; 0x30
  4007e2:	0e22      	lsrs	r2, r4, #24
  4007e4:	637a      	str	r2, [r7, #52]	; 0x34
  4007e6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
  4007ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4007ec:	719a      	strb	r2, [r3, #6]
	frame_data[7] = (destination_64 & (0xFF0000)) >> 16;
  4007ee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4007f2:	0c1a      	lsrs	r2, r3, #16
  4007f4:	62ba      	str	r2, [r7, #40]	; 0x28
  4007f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4007f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4007fc:	62ba      	str	r2, [r7, #40]	; 0x28
  4007fe:	0c22      	lsrs	r2, r4, #16
  400800:	62fa      	str	r2, [r7, #44]	; 0x2c
  400802:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  400806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400808:	71da      	strb	r2, [r3, #7]
	frame_data[8] = (destination_64 & (0xFF00)) >> 8;
  40080a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  40080e:	ea4f 2a13 	mov.w	sl, r3, lsr #8
  400812:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
  400816:	ea4f 2b14 	mov.w	fp, r4, lsr #8
  40081a:	fa5f f28a 	uxtb.w	r2, sl
  40081e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400820:	721a      	strb	r2, [r3, #8]
	frame_data[9] = destination_64 & (0xFF);
  400822:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
  400826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400828:	725a      	strb	r2, [r3, #9]

	//Destination 16-Bit Address
	frame_data[10] = (destination_16 & (0xFF00)) >> 8;
  40082a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
  40082c:	0a1b      	lsrs	r3, r3, #8
  40082e:	b29b      	uxth	r3, r3
  400830:	b2da      	uxtb	r2, r3
  400832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400834:	729a      	strb	r2, [r3, #10]
	frame_data[11] = destination_16 & (0xFF);
  400836:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
  400838:	b2da      	uxtb	r2, r3
  40083a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40083c:	72da      	strb	r2, [r3, #11]

	//Broadcast radius
	frame_data[12] = 0x00;  
  40083e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400840:	2200      	movs	r2, #0
  400842:	731a      	strb	r2, [r3, #12]

	//Options
	frame_data[13] = 0x00;  
  400844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400846:	2200      	movs	r2, #0
  400848:	735a      	strb	r2, [r3, #13]

	//Copies message data to frame array
	memcpy(frame_data + 14, data, bytes);
  40084a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40084c:	330e      	adds	r3, #14
  40084e:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
  400852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  400854:	4618      	mov	r0, r3
  400856:	4b08      	ldr	r3, [pc, #32]	; (400878 <SendXbeeAPITransmitRequest+0x150>)
  400858:	4798      	blx	r3

	//Sends the message
	SendXbeeAPIFrame(frame_data,bytes+14);
  40085a:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40085c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
  400860:	330e      	adds	r3, #14
  400862:	4619      	mov	r1, r3
  400864:	4610      	mov	r0, r2
  400866:	4b05      	ldr	r3, [pc, #20]	; (40087c <SendXbeeAPITransmitRequest+0x154>)
  400868:	4798      	blx	r3
  40086a:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
  40086e:	bf00      	nop
  400870:	3754      	adds	r7, #84	; 0x54
  400872:	46bd      	mov	sp, r7
  400874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400878:	00406561 	.word	0x00406561
  40087c:	004005e1 	.word	0x004005e1

00400880 <FrameBufferInit>:


/****** Buffer functions *******/

void FrameBufferInit(void)
{
  400880:	b480      	push	{r7}
  400882:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	FrameBufferIn = 0;
  400884:	4b06      	ldr	r3, [pc, #24]	; (4008a0 <FrameBufferInit+0x20>)
  400886:	2200      	movs	r2, #0
  400888:	601a      	str	r2, [r3, #0]
	FrameBufferOut = 0;
  40088a:	4b06      	ldr	r3, [pc, #24]	; (4008a4 <FrameBufferInit+0x24>)
  40088c:	2200      	movs	r2, #0
  40088e:	601a      	str	r2, [r3, #0]
	FrameBufferUse = 0;
  400890:	4b05      	ldr	r3, [pc, #20]	; (4008a8 <FrameBufferInit+0x28>)
  400892:	2200      	movs	r2, #0
  400894:	601a      	str	r2, [r3, #0]
}
  400896:	bf00      	nop
  400898:	46bd      	mov	sp, r7
  40089a:	bc80      	pop	{r7}
  40089c:	4770      	bx	lr
  40089e:	bf00      	nop
  4008a0:	20000f90 	.word	0x20000f90
  4008a4:	20000f84 	.word	0x20000f84
  4008a8:	20000f94 	.word	0x20000f94

004008ac <FrameBufferPut>:

int FrameBufferPut(uint8_t new)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b083      	sub	sp, #12
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	4603      	mov	r3, r0
  4008b4:	71fb      	strb	r3, [r7, #7]
	//Check if the Buffer is full
	if(FrameBufferIn == (( FrameBufferOut - 1 + FRAME_BUFFER_SIZE) % FRAME_BUFFER_SIZE))
  4008b6:	4b1b      	ldr	r3, [pc, #108]	; (400924 <FrameBufferPut+0x78>)
  4008b8:	681b      	ldr	r3, [r3, #0]
  4008ba:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
  4008be:	4b1a      	ldr	r3, [pc, #104]	; (400928 <FrameBufferPut+0x7c>)
  4008c0:	fb83 1302 	smull	r1, r3, r3, r2
  4008c4:	1219      	asrs	r1, r3, #8
  4008c6:	17d3      	asrs	r3, r2, #31
  4008c8:	1acb      	subs	r3, r1, r3
  4008ca:	f240 31e9 	movw	r1, #1001	; 0x3e9
  4008ce:	fb01 f303 	mul.w	r3, r1, r3
  4008d2:	1ad3      	subs	r3, r2, r3
  4008d4:	4a15      	ldr	r2, [pc, #84]	; (40092c <FrameBufferPut+0x80>)
  4008d6:	6812      	ldr	r2, [r2, #0]
  4008d8:	4293      	cmp	r3, r2
  4008da:	d102      	bne.n	4008e2 <FrameBufferPut+0x36>
	{
		return -1; // FrameBuffer Full
  4008dc:	f04f 33ff 	mov.w	r3, #4294967295
  4008e0:	e01a      	b.n	400918 <FrameBufferPut+0x6c>
	}

	//Put the new byte in to the buffer
	FrameBuffer[FrameBufferIn] = new;
  4008e2:	4b12      	ldr	r3, [pc, #72]	; (40092c <FrameBufferPut+0x80>)
  4008e4:	681b      	ldr	r3, [r3, #0]
  4008e6:	4912      	ldr	r1, [pc, #72]	; (400930 <FrameBufferPut+0x84>)
  4008e8:	79fa      	ldrb	r2, [r7, #7]
  4008ea:	54ca      	strb	r2, [r1, r3]

	//Update our buffer variables
	FrameBufferIn = (FrameBufferIn + 1) % FRAME_BUFFER_SIZE;
  4008ec:	4b0f      	ldr	r3, [pc, #60]	; (40092c <FrameBufferPut+0x80>)
  4008ee:	681b      	ldr	r3, [r3, #0]
  4008f0:	1c5a      	adds	r2, r3, #1
  4008f2:	4b0d      	ldr	r3, [pc, #52]	; (400928 <FrameBufferPut+0x7c>)
  4008f4:	fb83 1302 	smull	r1, r3, r3, r2
  4008f8:	1219      	asrs	r1, r3, #8
  4008fa:	17d3      	asrs	r3, r2, #31
  4008fc:	1acb      	subs	r3, r1, r3
  4008fe:	f240 31e9 	movw	r1, #1001	; 0x3e9
  400902:	fb01 f303 	mul.w	r3, r1, r3
  400906:	1ad3      	subs	r3, r2, r3
  400908:	4a08      	ldr	r2, [pc, #32]	; (40092c <FrameBufferPut+0x80>)
  40090a:	6013      	str	r3, [r2, #0]
	FrameBufferUse++;
  40090c:	4b09      	ldr	r3, [pc, #36]	; (400934 <FrameBufferPut+0x88>)
  40090e:	681b      	ldr	r3, [r3, #0]
  400910:	3301      	adds	r3, #1
  400912:	4a08      	ldr	r2, [pc, #32]	; (400934 <FrameBufferPut+0x88>)
  400914:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400916:	2300      	movs	r3, #0
}
  400918:	4618      	mov	r0, r3
  40091a:	370c      	adds	r7, #12
  40091c:	46bd      	mov	sp, r7
  40091e:	bc80      	pop	{r7}
  400920:	4770      	bx	lr
  400922:	bf00      	nop
  400924:	20000f84 	.word	0x20000f84
  400928:	4178749f 	.word	0x4178749f
  40092c:	20000f90 	.word	0x20000f90
  400930:	200004d0 	.word	0x200004d0
  400934:	20000f94 	.word	0x20000f94

00400938 <FrameBufferGet>:

int FrameBufferGet(uint8_t *old)
{
  400938:	b480      	push	{r7}
  40093a:	b083      	sub	sp, #12
  40093c:	af00      	add	r7, sp, #0
  40093e:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(FrameBufferIn == FrameBufferOut)
  400940:	4b14      	ldr	r3, [pc, #80]	; (400994 <FrameBufferGet+0x5c>)
  400942:	681a      	ldr	r2, [r3, #0]
  400944:	4b14      	ldr	r3, [pc, #80]	; (400998 <FrameBufferGet+0x60>)
  400946:	681b      	ldr	r3, [r3, #0]
  400948:	429a      	cmp	r2, r3
  40094a:	d102      	bne.n	400952 <FrameBufferGet+0x1a>
	{
		return -1; // FrameBuffer Empty - nothing to get
  40094c:	f04f 33ff 	mov.w	r3, #4294967295
  400950:	e01b      	b.n	40098a <FrameBufferGet+0x52>
	}
	
	//fetch the info struct from the buffer
	*old = FrameBuffer[FrameBufferOut];
  400952:	4b11      	ldr	r3, [pc, #68]	; (400998 <FrameBufferGet+0x60>)
  400954:	681b      	ldr	r3, [r3, #0]
  400956:	4a11      	ldr	r2, [pc, #68]	; (40099c <FrameBufferGet+0x64>)
  400958:	5cd2      	ldrb	r2, [r2, r3]
  40095a:	687b      	ldr	r3, [r7, #4]
  40095c:	701a      	strb	r2, [r3, #0]

	//Update our buffer variables
	FrameBufferOut = (FrameBufferOut + 1) % FRAME_BUFFER_SIZE;
  40095e:	4b0e      	ldr	r3, [pc, #56]	; (400998 <FrameBufferGet+0x60>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	1c5a      	adds	r2, r3, #1
  400964:	4b0e      	ldr	r3, [pc, #56]	; (4009a0 <FrameBufferGet+0x68>)
  400966:	fb83 1302 	smull	r1, r3, r3, r2
  40096a:	1219      	asrs	r1, r3, #8
  40096c:	17d3      	asrs	r3, r2, #31
  40096e:	1acb      	subs	r3, r1, r3
  400970:	f240 31e9 	movw	r1, #1001	; 0x3e9
  400974:	fb01 f303 	mul.w	r3, r1, r3
  400978:	1ad3      	subs	r3, r2, r3
  40097a:	4a07      	ldr	r2, [pc, #28]	; (400998 <FrameBufferGet+0x60>)
  40097c:	6013      	str	r3, [r2, #0]
	FrameBufferUse--;
  40097e:	4b09      	ldr	r3, [pc, #36]	; (4009a4 <FrameBufferGet+0x6c>)
  400980:	681b      	ldr	r3, [r3, #0]
  400982:	3b01      	subs	r3, #1
  400984:	4a07      	ldr	r2, [pc, #28]	; (4009a4 <FrameBufferGet+0x6c>)
  400986:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400988:	2300      	movs	r3, #0
}
  40098a:	4618      	mov	r0, r3
  40098c:	370c      	adds	r7, #12
  40098e:	46bd      	mov	sp, r7
  400990:	bc80      	pop	{r7}
  400992:	4770      	bx	lr
  400994:	20000f90 	.word	0x20000f90
  400998:	20000f84 	.word	0x20000f84
  40099c:	200004d0 	.word	0x200004d0
  4009a0:	4178749f 	.word	0x4178749f
  4009a4:	20000f94 	.word	0x20000f94

004009a8 <FrameBufferInfoInit>:

void FrameBufferInfoInit(void)
{
  4009a8:	b480      	push	{r7}
  4009aa:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	FrameBufferInfoIn = 0;
  4009ac:	4b06      	ldr	r3, [pc, #24]	; (4009c8 <FrameBufferInfoInit+0x20>)
  4009ae:	2200      	movs	r2, #0
  4009b0:	601a      	str	r2, [r3, #0]
	FrameBufferInfoOut = 0;
  4009b2:	4b06      	ldr	r3, [pc, #24]	; (4009cc <FrameBufferInfoInit+0x24>)
  4009b4:	2200      	movs	r2, #0
  4009b6:	601a      	str	r2, [r3, #0]
	FrameBufferInfoUse = 0;
  4009b8:	4b05      	ldr	r3, [pc, #20]	; (4009d0 <FrameBufferInfoInit+0x28>)
  4009ba:	2200      	movs	r2, #0
  4009bc:	601a      	str	r2, [r3, #0]
}
  4009be:	bf00      	nop
  4009c0:	46bd      	mov	sp, r7
  4009c2:	bc80      	pop	{r7}
  4009c4:	4770      	bx	lr
  4009c6:	bf00      	nop
  4009c8:	20000f88 	.word	0x20000f88
  4009cc:	20000f8c 	.word	0x20000f8c
  4009d0:	200004c0 	.word	0x200004c0

004009d4 <FrameBufferInfoPut>:

int FrameBufferInfoPut(int ind, uint8_t typ, int len)
{
  4009d4:	b480      	push	{r7}
  4009d6:	b085      	sub	sp, #20
  4009d8:	af00      	add	r7, sp, #0
  4009da:	60f8      	str	r0, [r7, #12]
  4009dc:	460b      	mov	r3, r1
  4009de:	607a      	str	r2, [r7, #4]
  4009e0:	72fb      	strb	r3, [r7, #11]
	//Check if the Buffer is full
	if(FrameBufferInfoIn == (( FrameBufferInfoOut -1 + FRAME_BUFFER_INFO_SIZE) % FRAME_BUFFER_INFO_SIZE))
  4009e2:	4b2a      	ldr	r3, [pc, #168]	; (400a8c <FrameBufferInfoPut+0xb8>)
  4009e4:	681b      	ldr	r3, [r3, #0]
  4009e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
  4009ea:	4b29      	ldr	r3, [pc, #164]	; (400a90 <FrameBufferInfoPut+0xbc>)
  4009ec:	fb83 1302 	smull	r1, r3, r3, r2
  4009f0:	4413      	add	r3, r2
  4009f2:	1159      	asrs	r1, r3, #5
  4009f4:	17d3      	asrs	r3, r2, #31
  4009f6:	1ac9      	subs	r1, r1, r3
  4009f8:	460b      	mov	r3, r1
  4009fa:	005b      	lsls	r3, r3, #1
  4009fc:	440b      	add	r3, r1
  4009fe:	0119      	lsls	r1, r3, #4
  400a00:	440b      	add	r3, r1
  400a02:	1ad1      	subs	r1, r2, r3
  400a04:	4b23      	ldr	r3, [pc, #140]	; (400a94 <FrameBufferInfoPut+0xc0>)
  400a06:	681b      	ldr	r3, [r3, #0]
  400a08:	4299      	cmp	r1, r3
  400a0a:	d102      	bne.n	400a12 <FrameBufferInfoPut+0x3e>
	{
		return -1; // FrameBufferInfo Full
  400a0c:	f04f 33ff 	mov.w	r3, #4294967295
  400a10:	e037      	b.n	400a82 <FrameBufferInfoPut+0xae>
	}

	//Put the new data in to the buffer
	FrameBufferInfo[FrameBufferInfoIn].index = ind;
  400a12:	4b20      	ldr	r3, [pc, #128]	; (400a94 <FrameBufferInfoPut+0xc0>)
  400a14:	681a      	ldr	r2, [r3, #0]
  400a16:	4920      	ldr	r1, [pc, #128]	; (400a98 <FrameBufferInfoPut+0xc4>)
  400a18:	4613      	mov	r3, r2
  400a1a:	005b      	lsls	r3, r3, #1
  400a1c:	4413      	add	r3, r2
  400a1e:	009b      	lsls	r3, r3, #2
  400a20:	440b      	add	r3, r1
  400a22:	68fa      	ldr	r2, [r7, #12]
  400a24:	601a      	str	r2, [r3, #0]
	FrameBufferInfo[FrameBufferInfoIn].type = typ;
  400a26:	4b1b      	ldr	r3, [pc, #108]	; (400a94 <FrameBufferInfoPut+0xc0>)
  400a28:	681a      	ldr	r2, [r3, #0]
  400a2a:	491b      	ldr	r1, [pc, #108]	; (400a98 <FrameBufferInfoPut+0xc4>)
  400a2c:	4613      	mov	r3, r2
  400a2e:	005b      	lsls	r3, r3, #1
  400a30:	4413      	add	r3, r2
  400a32:	009b      	lsls	r3, r3, #2
  400a34:	440b      	add	r3, r1
  400a36:	3304      	adds	r3, #4
  400a38:	7afa      	ldrb	r2, [r7, #11]
  400a3a:	701a      	strb	r2, [r3, #0]
	FrameBufferInfo[FrameBufferInfoIn].length = len;
  400a3c:	4b15      	ldr	r3, [pc, #84]	; (400a94 <FrameBufferInfoPut+0xc0>)
  400a3e:	681a      	ldr	r2, [r3, #0]
  400a40:	4915      	ldr	r1, [pc, #84]	; (400a98 <FrameBufferInfoPut+0xc4>)
  400a42:	4613      	mov	r3, r2
  400a44:	005b      	lsls	r3, r3, #1
  400a46:	4413      	add	r3, r2
  400a48:	009b      	lsls	r3, r3, #2
  400a4a:	440b      	add	r3, r1
  400a4c:	3308      	adds	r3, #8
  400a4e:	687a      	ldr	r2, [r7, #4]
  400a50:	601a      	str	r2, [r3, #0]

	//Update our buffer variables
	FrameBufferInfoIn = (FrameBufferInfoIn + 1) % FRAME_BUFFER_INFO_SIZE;
  400a52:	4b10      	ldr	r3, [pc, #64]	; (400a94 <FrameBufferInfoPut+0xc0>)
  400a54:	681b      	ldr	r3, [r3, #0]
  400a56:	1c5a      	adds	r2, r3, #1
  400a58:	4b0d      	ldr	r3, [pc, #52]	; (400a90 <FrameBufferInfoPut+0xbc>)
  400a5a:	fb83 1302 	smull	r1, r3, r3, r2
  400a5e:	4413      	add	r3, r2
  400a60:	1159      	asrs	r1, r3, #5
  400a62:	17d3      	asrs	r3, r2, #31
  400a64:	1ac9      	subs	r1, r1, r3
  400a66:	460b      	mov	r3, r1
  400a68:	005b      	lsls	r3, r3, #1
  400a6a:	440b      	add	r3, r1
  400a6c:	0119      	lsls	r1, r3, #4
  400a6e:	440b      	add	r3, r1
  400a70:	1ad1      	subs	r1, r2, r3
  400a72:	4b08      	ldr	r3, [pc, #32]	; (400a94 <FrameBufferInfoPut+0xc0>)
  400a74:	6019      	str	r1, [r3, #0]
	FrameBufferInfoUse++;
  400a76:	4b09      	ldr	r3, [pc, #36]	; (400a9c <FrameBufferInfoPut+0xc8>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	3301      	adds	r3, #1
  400a7c:	4a07      	ldr	r2, [pc, #28]	; (400a9c <FrameBufferInfoPut+0xc8>)
  400a7e:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400a80:	2300      	movs	r3, #0
}
  400a82:	4618      	mov	r0, r3
  400a84:	3714      	adds	r7, #20
  400a86:	46bd      	mov	sp, r7
  400a88:	bc80      	pop	{r7}
  400a8a:	4770      	bx	lr
  400a8c:	20000f8c 	.word	0x20000f8c
  400a90:	a0a0a0a1 	.word	0xa0a0a0a1
  400a94:	20000f88 	.word	0x20000f88
  400a98:	200008bc 	.word	0x200008bc
  400a9c:	200004c0 	.word	0x200004c0

00400aa0 <FrameBufferInfoGetFull>:

int FrameBufferInfoGetFull(struct frame_info * info)
{
  400aa0:	b480      	push	{r7}
  400aa2:	b083      	sub	sp, #12
  400aa4:	af00      	add	r7, sp, #0
  400aa6:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(FrameBufferInfoIn == FrameBufferInfoOut)
  400aa8:	4b19      	ldr	r3, [pc, #100]	; (400b10 <FrameBufferInfoGetFull+0x70>)
  400aaa:	681a      	ldr	r2, [r3, #0]
  400aac:	4b19      	ldr	r3, [pc, #100]	; (400b14 <FrameBufferInfoGetFull+0x74>)
  400aae:	681b      	ldr	r3, [r3, #0]
  400ab0:	429a      	cmp	r2, r3
  400ab2:	d102      	bne.n	400aba <FrameBufferInfoGetFull+0x1a>
	{
		return -1; // FrameBufferInfo Empty - nothing to get
  400ab4:	f04f 33ff 	mov.w	r3, #4294967295
  400ab8:	e024      	b.n	400b04 <FrameBufferInfoGetFull+0x64>
	}

	//fetch the info struct from the buffer
	*info = FrameBufferInfo[FrameBufferInfoOut];
  400aba:	4b16      	ldr	r3, [pc, #88]	; (400b14 <FrameBufferInfoGetFull+0x74>)
  400abc:	681a      	ldr	r2, [r3, #0]
  400abe:	6878      	ldr	r0, [r7, #4]
  400ac0:	4915      	ldr	r1, [pc, #84]	; (400b18 <FrameBufferInfoGetFull+0x78>)
  400ac2:	4613      	mov	r3, r2
  400ac4:	005b      	lsls	r3, r3, #1
  400ac6:	4413      	add	r3, r2
  400ac8:	009b      	lsls	r3, r3, #2
  400aca:	18ca      	adds	r2, r1, r3
  400acc:	4603      	mov	r3, r0
  400ace:	ca07      	ldmia	r2, {r0, r1, r2}
  400ad0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Update our buffer variables
	FrameBufferInfoOut = (FrameBufferInfoOut + 1) % FRAME_BUFFER_INFO_SIZE;
  400ad4:	4b0f      	ldr	r3, [pc, #60]	; (400b14 <FrameBufferInfoGetFull+0x74>)
  400ad6:	681b      	ldr	r3, [r3, #0]
  400ad8:	1c5a      	adds	r2, r3, #1
  400ada:	4b10      	ldr	r3, [pc, #64]	; (400b1c <FrameBufferInfoGetFull+0x7c>)
  400adc:	fb83 1302 	smull	r1, r3, r3, r2
  400ae0:	4413      	add	r3, r2
  400ae2:	1159      	asrs	r1, r3, #5
  400ae4:	17d3      	asrs	r3, r2, #31
  400ae6:	1ac9      	subs	r1, r1, r3
  400ae8:	460b      	mov	r3, r1
  400aea:	005b      	lsls	r3, r3, #1
  400aec:	440b      	add	r3, r1
  400aee:	0119      	lsls	r1, r3, #4
  400af0:	440b      	add	r3, r1
  400af2:	1ad1      	subs	r1, r2, r3
  400af4:	4b07      	ldr	r3, [pc, #28]	; (400b14 <FrameBufferInfoGetFull+0x74>)
  400af6:	6019      	str	r1, [r3, #0]
	FrameBufferInfoUse--;
  400af8:	4b09      	ldr	r3, [pc, #36]	; (400b20 <FrameBufferInfoGetFull+0x80>)
  400afa:	681b      	ldr	r3, [r3, #0]
  400afc:	3b01      	subs	r3, #1
  400afe:	4a08      	ldr	r2, [pc, #32]	; (400b20 <FrameBufferInfoGetFull+0x80>)
  400b00:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400b02:	2300      	movs	r3, #0
}
  400b04:	4618      	mov	r0, r3
  400b06:	370c      	adds	r7, #12
  400b08:	46bd      	mov	sp, r7
  400b0a:	bc80      	pop	{r7}
  400b0c:	4770      	bx	lr
  400b0e:	bf00      	nop
  400b10:	20000f88 	.word	0x20000f88
  400b14:	20000f8c 	.word	0x20000f8c
  400b18:	200008bc 	.word	0x200008bc
  400b1c:	a0a0a0a1 	.word	0xa0a0a0a1
  400b20:	200004c0 	.word	0x200004c0

00400b24 <MessageBufferInit>:

void MessageBufferInit(void)
{
  400b24:	b480      	push	{r7}
  400b26:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	MessageBufferIn = 0;
  400b28:	4b06      	ldr	r3, [pc, #24]	; (400b44 <MessageBufferInit+0x20>)
  400b2a:	2200      	movs	r2, #0
  400b2c:	601a      	str	r2, [r3, #0]
	MessageBufferOut = 0;
  400b2e:	4b06      	ldr	r3, [pc, #24]	; (400b48 <MessageBufferInit+0x24>)
  400b30:	2200      	movs	r2, #0
  400b32:	601a      	str	r2, [r3, #0]
	MessageBufferUse = 0;
  400b34:	4b05      	ldr	r3, [pc, #20]	; (400b4c <MessageBufferInit+0x28>)
  400b36:	2200      	movs	r2, #0
  400b38:	601a      	str	r2, [r3, #0]
}
  400b3a:	bf00      	nop
  400b3c:	46bd      	mov	sp, r7
  400b3e:	bc80      	pop	{r7}
  400b40:	4770      	bx	lr
  400b42:	bf00      	nop
  400b44:	200004c8 	.word	0x200004c8
  400b48:	20000b24 	.word	0x20000b24
  400b4c:	200004c4 	.word	0x200004c4

00400b50 <MessageBufferPut>:

int MessageBufferPut(uint8_t new)
{
  400b50:	b480      	push	{r7}
  400b52:	b083      	sub	sp, #12
  400b54:	af00      	add	r7, sp, #0
  400b56:	4603      	mov	r3, r0
  400b58:	71fb      	strb	r3, [r7, #7]
	//Check if the Buffer is full
	if(MessageBufferIn == (( MessageBufferOut - 1 + MESSAGE_BUFFER_SIZE) % MESSAGE_BUFFER_SIZE))
  400b5a:	4b1b      	ldr	r3, [pc, #108]	; (400bc8 <MessageBufferPut+0x78>)
  400b5c:	681b      	ldr	r3, [r3, #0]
  400b5e:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
  400b62:	4b1a      	ldr	r3, [pc, #104]	; (400bcc <MessageBufferPut+0x7c>)
  400b64:	fb83 1302 	smull	r1, r3, r3, r2
  400b68:	1199      	asrs	r1, r3, #6
  400b6a:	17d3      	asrs	r3, r2, #31
  400b6c:	1acb      	subs	r3, r1, r3
  400b6e:	f240 11f5 	movw	r1, #501	; 0x1f5
  400b72:	fb01 f303 	mul.w	r3, r1, r3
  400b76:	1ad3      	subs	r3, r2, r3
  400b78:	4a15      	ldr	r2, [pc, #84]	; (400bd0 <MessageBufferPut+0x80>)
  400b7a:	6812      	ldr	r2, [r2, #0]
  400b7c:	4293      	cmp	r3, r2
  400b7e:	d102      	bne.n	400b86 <MessageBufferPut+0x36>
	{
		return -1; // MessageBuffer Full
  400b80:	f04f 33ff 	mov.w	r3, #4294967295
  400b84:	e01a      	b.n	400bbc <MessageBufferPut+0x6c>
	}

	//Put the new byte in to the buffer
	MessageBuffer[MessageBufferIn] = new;
  400b86:	4b12      	ldr	r3, [pc, #72]	; (400bd0 <MessageBufferPut+0x80>)
  400b88:	681b      	ldr	r3, [r3, #0]
  400b8a:	4912      	ldr	r1, [pc, #72]	; (400bd4 <MessageBufferPut+0x84>)
  400b8c:	79fa      	ldrb	r2, [r7, #7]
  400b8e:	54ca      	strb	r2, [r1, r3]

	//Update our buffer variables
	MessageBufferIn = (MessageBufferIn + 1) % MESSAGE_BUFFER_SIZE;
  400b90:	4b0f      	ldr	r3, [pc, #60]	; (400bd0 <MessageBufferPut+0x80>)
  400b92:	681b      	ldr	r3, [r3, #0]
  400b94:	1c5a      	adds	r2, r3, #1
  400b96:	4b0d      	ldr	r3, [pc, #52]	; (400bcc <MessageBufferPut+0x7c>)
  400b98:	fb83 1302 	smull	r1, r3, r3, r2
  400b9c:	1199      	asrs	r1, r3, #6
  400b9e:	17d3      	asrs	r3, r2, #31
  400ba0:	1acb      	subs	r3, r1, r3
  400ba2:	f240 11f5 	movw	r1, #501	; 0x1f5
  400ba6:	fb01 f303 	mul.w	r3, r1, r3
  400baa:	1ad3      	subs	r3, r2, r3
  400bac:	4a08      	ldr	r2, [pc, #32]	; (400bd0 <MessageBufferPut+0x80>)
  400bae:	6013      	str	r3, [r2, #0]
	MessageBufferUse++;
  400bb0:	4b09      	ldr	r3, [pc, #36]	; (400bd8 <MessageBufferPut+0x88>)
  400bb2:	681b      	ldr	r3, [r3, #0]
  400bb4:	3301      	adds	r3, #1
  400bb6:	4a08      	ldr	r2, [pc, #32]	; (400bd8 <MessageBufferPut+0x88>)
  400bb8:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400bba:	2300      	movs	r3, #0
}
  400bbc:	4618      	mov	r0, r3
  400bbe:	370c      	adds	r7, #12
  400bc0:	46bd      	mov	sp, r7
  400bc2:	bc80      	pop	{r7}
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	20000b24 	.word	0x20000b24
  400bcc:	20b3dd41 	.word	0x20b3dd41
  400bd0:	200004c8 	.word	0x200004c8
  400bd4:	20000d8c 	.word	0x20000d8c
  400bd8:	200004c4 	.word	0x200004c4

00400bdc <MessageBufferInfoInit>:
	MessageBufferUse--;
	return 0; // No errors
}

void MessageBufferInfoInit(void)
{
  400bdc:	b480      	push	{r7}
  400bde:	af00      	add	r7, sp, #0
	//Initialize all usage variables to the beginning of the array
	MessageBufferInfoIn = 0;
  400be0:	4b06      	ldr	r3, [pc, #24]	; (400bfc <MessageBufferInfoInit+0x20>)
  400be2:	2200      	movs	r2, #0
  400be4:	601a      	str	r2, [r3, #0]
	MessageBufferInfoOut = 0;
  400be6:	4b06      	ldr	r3, [pc, #24]	; (400c00 <MessageBufferInfoInit+0x24>)
  400be8:	2200      	movs	r2, #0
  400bea:	601a      	str	r2, [r3, #0]
	MessageBufferInfoUse = 0;
  400bec:	4b05      	ldr	r3, [pc, #20]	; (400c04 <MessageBufferInfoInit+0x28>)
  400bee:	2200      	movs	r2, #0
  400bf0:	601a      	str	r2, [r3, #0]
}
  400bf2:	bf00      	nop
  400bf4:	46bd      	mov	sp, r7
  400bf6:	bc80      	pop	{r7}
  400bf8:	4770      	bx	lr
  400bfa:	bf00      	nop
  400bfc:	20000b20 	.word	0x20000b20
  400c00:	200004cc 	.word	0x200004cc
  400c04:	200004bc 	.word	0x200004bc

00400c08 <MessageBufferInfoPut>:

int MessageBufferInfoPut(int ind, uint8_t cmd, int len)
{
  400c08:	b480      	push	{r7}
  400c0a:	b085      	sub	sp, #20
  400c0c:	af00      	add	r7, sp, #0
  400c0e:	60f8      	str	r0, [r7, #12]
  400c10:	460b      	mov	r3, r1
  400c12:	607a      	str	r2, [r7, #4]
  400c14:	72fb      	strb	r3, [r7, #11]
	//Check if the Buffer is full
	if(MessageBufferInfoIn == (( MessageBufferInfoOut - 1 + MESSAGE_BUFFER_INFO_SIZE) % MESSAGE_BUFFER_INFO_SIZE))
  400c16:	4b2a      	ldr	r3, [pc, #168]	; (400cc0 <MessageBufferInfoPut+0xb8>)
  400c18:	681b      	ldr	r3, [r3, #0]
  400c1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
  400c1e:	4b29      	ldr	r3, [pc, #164]	; (400cc4 <MessageBufferInfoPut+0xbc>)
  400c20:	fb83 1302 	smull	r1, r3, r3, r2
  400c24:	4413      	add	r3, r2
  400c26:	1159      	asrs	r1, r3, #5
  400c28:	17d3      	asrs	r3, r2, #31
  400c2a:	1ac9      	subs	r1, r1, r3
  400c2c:	460b      	mov	r3, r1
  400c2e:	005b      	lsls	r3, r3, #1
  400c30:	440b      	add	r3, r1
  400c32:	0119      	lsls	r1, r3, #4
  400c34:	440b      	add	r3, r1
  400c36:	1ad1      	subs	r1, r2, r3
  400c38:	4b23      	ldr	r3, [pc, #140]	; (400cc8 <MessageBufferInfoPut+0xc0>)
  400c3a:	681b      	ldr	r3, [r3, #0]
  400c3c:	4299      	cmp	r1, r3
  400c3e:	d102      	bne.n	400c46 <MessageBufferInfoPut+0x3e>
	{
		return -1; // MessageBufferInfo Full
  400c40:	f04f 33ff 	mov.w	r3, #4294967295
  400c44:	e037      	b.n	400cb6 <MessageBufferInfoPut+0xae>
	}
	
	//Put the new data in to the buffer
	MessageBufferInfo[MessageBufferInfoIn].index = ind;
  400c46:	4b20      	ldr	r3, [pc, #128]	; (400cc8 <MessageBufferInfoPut+0xc0>)
  400c48:	681a      	ldr	r2, [r3, #0]
  400c4a:	4920      	ldr	r1, [pc, #128]	; (400ccc <MessageBufferInfoPut+0xc4>)
  400c4c:	4613      	mov	r3, r2
  400c4e:	005b      	lsls	r3, r3, #1
  400c50:	4413      	add	r3, r2
  400c52:	009b      	lsls	r3, r3, #2
  400c54:	440b      	add	r3, r1
  400c56:	68fa      	ldr	r2, [r7, #12]
  400c58:	601a      	str	r2, [r3, #0]
	MessageBufferInfo[MessageBufferInfoIn].command = cmd;
  400c5a:	4b1b      	ldr	r3, [pc, #108]	; (400cc8 <MessageBufferInfoPut+0xc0>)
  400c5c:	681a      	ldr	r2, [r3, #0]
  400c5e:	491b      	ldr	r1, [pc, #108]	; (400ccc <MessageBufferInfoPut+0xc4>)
  400c60:	4613      	mov	r3, r2
  400c62:	005b      	lsls	r3, r3, #1
  400c64:	4413      	add	r3, r2
  400c66:	009b      	lsls	r3, r3, #2
  400c68:	440b      	add	r3, r1
  400c6a:	3304      	adds	r3, #4
  400c6c:	7afa      	ldrb	r2, [r7, #11]
  400c6e:	701a      	strb	r2, [r3, #0]
	MessageBufferInfo[MessageBufferInfoIn].length = len;
  400c70:	4b15      	ldr	r3, [pc, #84]	; (400cc8 <MessageBufferInfoPut+0xc0>)
  400c72:	681a      	ldr	r2, [r3, #0]
  400c74:	4915      	ldr	r1, [pc, #84]	; (400ccc <MessageBufferInfoPut+0xc4>)
  400c76:	4613      	mov	r3, r2
  400c78:	005b      	lsls	r3, r3, #1
  400c7a:	4413      	add	r3, r2
  400c7c:	009b      	lsls	r3, r3, #2
  400c7e:	440b      	add	r3, r1
  400c80:	3308      	adds	r3, #8
  400c82:	687a      	ldr	r2, [r7, #4]
  400c84:	601a      	str	r2, [r3, #0]

	//Update our buffer variables
	MessageBufferInfoIn = (MessageBufferInfoIn + 1) % MESSAGE_BUFFER_INFO_SIZE;
  400c86:	4b10      	ldr	r3, [pc, #64]	; (400cc8 <MessageBufferInfoPut+0xc0>)
  400c88:	681b      	ldr	r3, [r3, #0]
  400c8a:	1c5a      	adds	r2, r3, #1
  400c8c:	4b0d      	ldr	r3, [pc, #52]	; (400cc4 <MessageBufferInfoPut+0xbc>)
  400c8e:	fb83 1302 	smull	r1, r3, r3, r2
  400c92:	4413      	add	r3, r2
  400c94:	1159      	asrs	r1, r3, #5
  400c96:	17d3      	asrs	r3, r2, #31
  400c98:	1ac9      	subs	r1, r1, r3
  400c9a:	460b      	mov	r3, r1
  400c9c:	005b      	lsls	r3, r3, #1
  400c9e:	440b      	add	r3, r1
  400ca0:	0119      	lsls	r1, r3, #4
  400ca2:	440b      	add	r3, r1
  400ca4:	1ad1      	subs	r1, r2, r3
  400ca6:	4b08      	ldr	r3, [pc, #32]	; (400cc8 <MessageBufferInfoPut+0xc0>)
  400ca8:	6019      	str	r1, [r3, #0]
	MessageBufferInfoUse++;
  400caa:	4b09      	ldr	r3, [pc, #36]	; (400cd0 <MessageBufferInfoPut+0xc8>)
  400cac:	681b      	ldr	r3, [r3, #0]
  400cae:	3301      	adds	r3, #1
  400cb0:	4a07      	ldr	r2, [pc, #28]	; (400cd0 <MessageBufferInfoPut+0xc8>)
  400cb2:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400cb4:	2300      	movs	r3, #0
}
  400cb6:	4618      	mov	r0, r3
  400cb8:	3714      	adds	r7, #20
  400cba:	46bd      	mov	sp, r7
  400cbc:	bc80      	pop	{r7}
  400cbe:	4770      	bx	lr
  400cc0:	200004cc 	.word	0x200004cc
  400cc4:	a0a0a0a1 	.word	0xa0a0a0a1
  400cc8:	20000b20 	.word	0x20000b20
  400ccc:	20000b28 	.word	0x20000b28
  400cd0:	200004bc 	.word	0x200004bc

00400cd4 <MessageBufferInfoGetFull>:

int MessageBufferInfoGetFull(struct message_info * info)
{
  400cd4:	b480      	push	{r7}
  400cd6:	b083      	sub	sp, #12
  400cd8:	af00      	add	r7, sp, #0
  400cda:	6078      	str	r0, [r7, #4]
	//Check to see if the buffer if empty
	if(MessageBufferInfoIn == MessageBufferInfoOut)
  400cdc:	4b19      	ldr	r3, [pc, #100]	; (400d44 <MessageBufferInfoGetFull+0x70>)
  400cde:	681a      	ldr	r2, [r3, #0]
  400ce0:	4b19      	ldr	r3, [pc, #100]	; (400d48 <MessageBufferInfoGetFull+0x74>)
  400ce2:	681b      	ldr	r3, [r3, #0]
  400ce4:	429a      	cmp	r2, r3
  400ce6:	d102      	bne.n	400cee <MessageBufferInfoGetFull+0x1a>
	{
		return -1; // MessageBufferInfo Empty - nothing to get
  400ce8:	f04f 33ff 	mov.w	r3, #4294967295
  400cec:	e024      	b.n	400d38 <MessageBufferInfoGetFull+0x64>
	}

	//fetch the info struct from the buffer
	*info = MessageBufferInfo[MessageBufferInfoOut];
  400cee:	4b16      	ldr	r3, [pc, #88]	; (400d48 <MessageBufferInfoGetFull+0x74>)
  400cf0:	681a      	ldr	r2, [r3, #0]
  400cf2:	6878      	ldr	r0, [r7, #4]
  400cf4:	4915      	ldr	r1, [pc, #84]	; (400d4c <MessageBufferInfoGetFull+0x78>)
  400cf6:	4613      	mov	r3, r2
  400cf8:	005b      	lsls	r3, r3, #1
  400cfa:	4413      	add	r3, r2
  400cfc:	009b      	lsls	r3, r3, #2
  400cfe:	18ca      	adds	r2, r1, r3
  400d00:	4603      	mov	r3, r0
  400d02:	ca07      	ldmia	r2, {r0, r1, r2}
  400d04:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Update our buffer variables
	MessageBufferInfoOut = (MessageBufferInfoOut + 1) % MESSAGE_BUFFER_INFO_SIZE;
  400d08:	4b0f      	ldr	r3, [pc, #60]	; (400d48 <MessageBufferInfoGetFull+0x74>)
  400d0a:	681b      	ldr	r3, [r3, #0]
  400d0c:	1c5a      	adds	r2, r3, #1
  400d0e:	4b10      	ldr	r3, [pc, #64]	; (400d50 <MessageBufferInfoGetFull+0x7c>)
  400d10:	fb83 1302 	smull	r1, r3, r3, r2
  400d14:	4413      	add	r3, r2
  400d16:	1159      	asrs	r1, r3, #5
  400d18:	17d3      	asrs	r3, r2, #31
  400d1a:	1ac9      	subs	r1, r1, r3
  400d1c:	460b      	mov	r3, r1
  400d1e:	005b      	lsls	r3, r3, #1
  400d20:	440b      	add	r3, r1
  400d22:	0119      	lsls	r1, r3, #4
  400d24:	440b      	add	r3, r1
  400d26:	1ad1      	subs	r1, r2, r3
  400d28:	4b07      	ldr	r3, [pc, #28]	; (400d48 <MessageBufferInfoGetFull+0x74>)
  400d2a:	6019      	str	r1, [r3, #0]
	MessageBufferInfoUse--;
  400d2c:	4b09      	ldr	r3, [pc, #36]	; (400d54 <MessageBufferInfoGetFull+0x80>)
  400d2e:	681b      	ldr	r3, [r3, #0]
  400d30:	3b01      	subs	r3, #1
  400d32:	4a08      	ldr	r2, [pc, #32]	; (400d54 <MessageBufferInfoGetFull+0x80>)
  400d34:	6013      	str	r3, [r2, #0]
	return 0; // No errors
  400d36:	2300      	movs	r3, #0
}
  400d38:	4618      	mov	r0, r3
  400d3a:	370c      	adds	r7, #12
  400d3c:	46bd      	mov	sp, r7
  400d3e:	bc80      	pop	{r7}
  400d40:	4770      	bx	lr
  400d42:	bf00      	nop
  400d44:	20000b20 	.word	0x20000b20
  400d48:	200004cc 	.word	0x200004cc
  400d4c:	20000b28 	.word	0x20000b28
  400d50:	a0a0a0a1 	.word	0xa0a0a0a1
  400d54:	200004bc 	.word	0x200004bc

00400d58 <FastChargeController_Setup>:
#include "twimux_interface.h"


/******** Fast Charge Controller Registry Setup ********/
void FastChargeController_Setup(void)
{
  400d58:	b580      	push	{r7, lr}
  400d5a:	af00      	add	r7, sp, #0
	//Chip disable (CD) line on PB2 set to enable
	REG_PIOB_PER |= (1<<2);		//Give control of PB2 to PIOB controller
  400d5c:	4a11      	ldr	r2, [pc, #68]	; (400da4 <FastChargeController_Setup+0x4c>)
  400d5e:	4b11      	ldr	r3, [pc, #68]	; (400da4 <FastChargeController_Setup+0x4c>)
  400d60:	681b      	ldr	r3, [r3, #0]
  400d62:	f043 0304 	orr.w	r3, r3, #4
  400d66:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<2);		//Set PB2 as an output
  400d68:	4a0f      	ldr	r2, [pc, #60]	; (400da8 <FastChargeController_Setup+0x50>)
  400d6a:	4b0f      	ldr	r3, [pc, #60]	; (400da8 <FastChargeController_Setup+0x50>)
  400d6c:	681b      	ldr	r3, [r3, #0]
  400d6e:	f043 0304 	orr.w	r3, r3, #4
  400d72:	6013      	str	r3, [r2, #0]
	REG_PIOB_CODR |= (1<<2);	//Set PB2 to low
  400d74:	4a0d      	ldr	r2, [pc, #52]	; (400dac <FastChargeController_Setup+0x54>)
  400d76:	4b0d      	ldr	r3, [pc, #52]	; (400dac <FastChargeController_Setup+0x54>)
  400d78:	681b      	ldr	r3, [r3, #0]
  400d7a:	f043 0304 	orr.w	r3, r3, #4
  400d7e:	6013      	str	r3, [r2, #0]
	twi0Write(TWI0_FCHARGE_ADDR, controlReg, initControl);	// Ensures that CE bit is clear in case safety timer has gone off in previous charge.
  400d80:	2204      	movs	r2, #4
  400d82:	2102      	movs	r1, #2
  400d84:	206b      	movs	r0, #107	; 0x6b
  400d86:	4b0a      	ldr	r3, [pc, #40]	; (400db0 <FastChargeController_Setup+0x58>)
  400d88:	4798      	blx	r3
	twi0Write(TWI0_FCHARGE_ADDR, battVReg, initBattV);		// Vreg = 4.0v, input current = 2.5A
  400d8a:	2266      	movs	r2, #102	; 0x66
  400d8c:	2103      	movs	r1, #3
  400d8e:	206b      	movs	r0, #107	; 0x6b
  400d90:	4b07      	ldr	r3, [pc, #28]	; (400db0 <FastChargeController_Setup+0x58>)
  400d92:	4798      	blx	r3
	twi0Write(TWI0_FCHARGE_ADDR, chargeReg, initCharge);		// charge current set to max Ic=2875mA, termination current Iterm=100mA (default)
  400d94:	22fa      	movs	r2, #250	; 0xfa
  400d96:	2105      	movs	r1, #5
  400d98:	206b      	movs	r0, #107	; 0x6b
  400d9a:	4b05      	ldr	r3, [pc, #20]	; (400db0 <FastChargeController_Setup+0x58>)
  400d9c:	4798      	blx	r3
}
  400d9e:	bf00      	nop
  400da0:	bd80      	pop	{r7, pc}
  400da2:	bf00      	nop
  400da4:	400e1000 	.word	0x400e1000
  400da8:	400e1010 	.word	0x400e1010
  400dac:	400e1034 	.word	0x400e1034
  400db0:	00403c8d 	.word	0x00403c8d

00400db4 <reg_int_cb>:
//SWARM ROBOT CONFIGURATION/////////////////////////////////////////////

extern uint32_t systemTimestamp;

static inline int reg_int_cb(struct int_param_s *int_param)
{
  400db4:	b480      	push	{r7}
  400db6:	b083      	sub	sp, #12
  400db8:	af00      	add	r7, sp, #0
  400dba:	6078      	str	r0, [r7, #4]
	//I guess we aren't using interrupt callback
	return 0;
  400dbc:	2300      	movs	r3, #0
}
  400dbe:	4618      	mov	r0, r3
  400dc0:	370c      	adds	r7, #12
  400dc2:	46bd      	mov	sp, r7
  400dc4:	bc80      	pop	{r7}
  400dc6:	4770      	bx	lr

00400dc8 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
  400dc8:	b590      	push	{r4, r7, lr}
  400dca:	b085      	sub	sp, #20
  400dcc:	af00      	add	r7, sp, #0
  400dce:	4603      	mov	r3, r0
  400dd0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
  400dd2:	4b29      	ldr	r3, [pc, #164]	; (400e78 <set_int_enable+0xb0>)
  400dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  400dd8:	2b00      	cmp	r3, #0
  400dda:	d01c      	beq.n	400e16 <set_int_enable+0x4e>
        if (enable)
  400ddc:	79fb      	ldrb	r3, [r7, #7]
  400dde:	2b00      	cmp	r3, #0
  400de0:	d002      	beq.n	400de8 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
  400de2:	2302      	movs	r3, #2
  400de4:	73fb      	strb	r3, [r7, #15]
  400de6:	e001      	b.n	400dec <set_int_enable+0x24>
        else
            tmp = 0x00;
  400de8:	2300      	movs	r3, #0
  400dea:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
  400dec:	4b22      	ldr	r3, [pc, #136]	; (400e78 <set_int_enable+0xb0>)
  400dee:	685b      	ldr	r3, [r3, #4]
  400df0:	7818      	ldrb	r0, [r3, #0]
  400df2:	4b21      	ldr	r3, [pc, #132]	; (400e78 <set_int_enable+0xb0>)
  400df4:	681b      	ldr	r3, [r3, #0]
  400df6:	7c59      	ldrb	r1, [r3, #17]
  400df8:	f107 030f 	add.w	r3, r7, #15
  400dfc:	2201      	movs	r2, #1
  400dfe:	4c1f      	ldr	r4, [pc, #124]	; (400e7c <set_int_enable+0xb4>)
  400e00:	47a0      	blx	r4
  400e02:	4603      	mov	r3, r0
  400e04:	2b00      	cmp	r3, #0
  400e06:	d002      	beq.n	400e0e <set_int_enable+0x46>
            return -1;
  400e08:	f04f 33ff 	mov.w	r3, #4294967295
  400e0c:	e030      	b.n	400e70 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
  400e0e:	7bfa      	ldrb	r2, [r7, #15]
  400e10:	4b19      	ldr	r3, [pc, #100]	; (400e78 <set_int_enable+0xb0>)
  400e12:	745a      	strb	r2, [r3, #17]
  400e14:	e02b      	b.n	400e6e <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
  400e16:	4b18      	ldr	r3, [pc, #96]	; (400e78 <set_int_enable+0xb0>)
  400e18:	7a9b      	ldrb	r3, [r3, #10]
  400e1a:	2b00      	cmp	r3, #0
  400e1c:	d102      	bne.n	400e24 <set_int_enable+0x5c>
            return -1;
  400e1e:	f04f 33ff 	mov.w	r3, #4294967295
  400e22:	e025      	b.n	400e70 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
  400e24:	79fb      	ldrb	r3, [r7, #7]
  400e26:	2b00      	cmp	r3, #0
  400e28:	d005      	beq.n	400e36 <set_int_enable+0x6e>
  400e2a:	4b13      	ldr	r3, [pc, #76]	; (400e78 <set_int_enable+0xb0>)
  400e2c:	7c5b      	ldrb	r3, [r3, #17]
  400e2e:	2b00      	cmp	r3, #0
  400e30:	d001      	beq.n	400e36 <set_int_enable+0x6e>
            return 0;
  400e32:	2300      	movs	r3, #0
  400e34:	e01c      	b.n	400e70 <set_int_enable+0xa8>
        if (enable)
  400e36:	79fb      	ldrb	r3, [r7, #7]
  400e38:	2b00      	cmp	r3, #0
  400e3a:	d002      	beq.n	400e42 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
  400e3c:	2301      	movs	r3, #1
  400e3e:	73fb      	strb	r3, [r7, #15]
  400e40:	e001      	b.n	400e46 <set_int_enable+0x7e>
        else
            tmp = 0x00;
  400e42:	2300      	movs	r3, #0
  400e44:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
  400e46:	4b0c      	ldr	r3, [pc, #48]	; (400e78 <set_int_enable+0xb0>)
  400e48:	685b      	ldr	r3, [r3, #4]
  400e4a:	7818      	ldrb	r0, [r3, #0]
  400e4c:	4b0a      	ldr	r3, [pc, #40]	; (400e78 <set_int_enable+0xb0>)
  400e4e:	681b      	ldr	r3, [r3, #0]
  400e50:	7c59      	ldrb	r1, [r3, #17]
  400e52:	f107 030f 	add.w	r3, r7, #15
  400e56:	2201      	movs	r2, #1
  400e58:	4c08      	ldr	r4, [pc, #32]	; (400e7c <set_int_enable+0xb4>)
  400e5a:	47a0      	blx	r4
  400e5c:	4603      	mov	r3, r0
  400e5e:	2b00      	cmp	r3, #0
  400e60:	d002      	beq.n	400e68 <set_int_enable+0xa0>
            return -1;
  400e62:	f04f 33ff 	mov.w	r3, #4294967295
  400e66:	e003      	b.n	400e70 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
  400e68:	7bfa      	ldrb	r2, [r7, #15]
  400e6a:	4b03      	ldr	r3, [pc, #12]	; (400e78 <set_int_enable+0xb0>)
  400e6c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
  400e6e:	2300      	movs	r3, #0
}
  400e70:	4618      	mov	r0, r3
  400e72:	3714      	adds	r7, #20
  400e74:	46bd      	mov	sp, r7
  400e76:	bd90      	pop	{r4, r7, pc}
  400e78:	20000000 	.word	0x20000000
  400e7c:	0040391d 	.word	0x0040391d

00400e80 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
  400e80:	b590      	push	{r4, r7, lr}
  400e82:	b085      	sub	sp, #20
  400e84:	af00      	add	r7, sp, #0
  400e86:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
  400e88:	2380      	movs	r3, #128	; 0x80
  400e8a:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
  400e8c:	4b5f      	ldr	r3, [pc, #380]	; (40100c <mpu_init+0x18c>)
  400e8e:	685b      	ldr	r3, [r3, #4]
  400e90:	7818      	ldrb	r0, [r3, #0]
  400e92:	4b5e      	ldr	r3, [pc, #376]	; (40100c <mpu_init+0x18c>)
  400e94:	681b      	ldr	r3, [r3, #0]
  400e96:	7d59      	ldrb	r1, [r3, #21]
  400e98:	f107 0308 	add.w	r3, r7, #8
  400e9c:	2201      	movs	r2, #1
  400e9e:	4c5c      	ldr	r4, [pc, #368]	; (401010 <mpu_init+0x190>)
  400ea0:	47a0      	blx	r4
  400ea2:	4603      	mov	r3, r0
  400ea4:	2b00      	cmp	r3, #0
  400ea6:	d002      	beq.n	400eae <mpu_init+0x2e>
        return -1;
  400ea8:	f04f 33ff 	mov.w	r3, #4294967295
  400eac:	e0a9      	b.n	401002 <mpu_init+0x182>
    delay_ms(100);
  400eae:	2064      	movs	r0, #100	; 0x64
  400eb0:	4b58      	ldr	r3, [pc, #352]	; (401014 <mpu_init+0x194>)
  400eb2:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
  400eb4:	2300      	movs	r3, #0
  400eb6:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
  400eb8:	4b54      	ldr	r3, [pc, #336]	; (40100c <mpu_init+0x18c>)
  400eba:	685b      	ldr	r3, [r3, #4]
  400ebc:	7818      	ldrb	r0, [r3, #0]
  400ebe:	4b53      	ldr	r3, [pc, #332]	; (40100c <mpu_init+0x18c>)
  400ec0:	681b      	ldr	r3, [r3, #0]
  400ec2:	7d59      	ldrb	r1, [r3, #21]
  400ec4:	f107 0308 	add.w	r3, r7, #8
  400ec8:	2201      	movs	r2, #1
  400eca:	4c51      	ldr	r4, [pc, #324]	; (401010 <mpu_init+0x190>)
  400ecc:	47a0      	blx	r4
  400ece:	4603      	mov	r3, r0
  400ed0:	2b00      	cmp	r3, #0
  400ed2:	d002      	beq.n	400eda <mpu_init+0x5a>
        return -1;
  400ed4:	f04f 33ff 	mov.w	r3, #4294967295
  400ed8:	e093      	b.n	401002 <mpu_init+0x182>

   st.chip_cfg.accel_half = 0;
  400eda:	4b4c      	ldr	r3, [pc, #304]	; (40100c <mpu_init+0x18c>)
  400edc:	2200      	movs	r2, #0
  400ede:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
  400ee0:	2348      	movs	r3, #72	; 0x48
  400ee2:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
  400ee4:	4b49      	ldr	r3, [pc, #292]	; (40100c <mpu_init+0x18c>)
  400ee6:	685b      	ldr	r3, [r3, #4]
  400ee8:	7818      	ldrb	r0, [r3, #0]
  400eea:	4b48      	ldr	r3, [pc, #288]	; (40100c <mpu_init+0x18c>)
  400eec:	681b      	ldr	r3, [r3, #0]
  400eee:	7a19      	ldrb	r1, [r3, #8]
  400ef0:	f107 0308 	add.w	r3, r7, #8
  400ef4:	2201      	movs	r2, #1
  400ef6:	4c46      	ldr	r4, [pc, #280]	; (401010 <mpu_init+0x190>)
  400ef8:	47a0      	blx	r4
  400efa:	4603      	mov	r3, r0
  400efc:	2b00      	cmp	r3, #0
  400efe:	d002      	beq.n	400f06 <mpu_init+0x86>
        return -1;
  400f00:	f04f 33ff 	mov.w	r3, #4294967295
  400f04:	e07d      	b.n	401002 <mpu_init+0x182>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
  400f06:	4b41      	ldr	r3, [pc, #260]	; (40100c <mpu_init+0x18c>)
  400f08:	22ff      	movs	r2, #255	; 0xff
  400f0a:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
  400f0c:	4b3f      	ldr	r3, [pc, #252]	; (40100c <mpu_init+0x18c>)
  400f0e:	22ff      	movs	r2, #255	; 0xff
  400f10:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
  400f12:	4b3e      	ldr	r3, [pc, #248]	; (40100c <mpu_init+0x18c>)
  400f14:	22ff      	movs	r2, #255	; 0xff
  400f16:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
  400f18:	4b3c      	ldr	r3, [pc, #240]	; (40100c <mpu_init+0x18c>)
  400f1a:	22ff      	movs	r2, #255	; 0xff
  400f1c:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
  400f1e:	4b3b      	ldr	r3, [pc, #236]	; (40100c <mpu_init+0x18c>)
  400f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400f24:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
  400f26:	4b39      	ldr	r3, [pc, #228]	; (40100c <mpu_init+0x18c>)
  400f28:	22ff      	movs	r2, #255	; 0xff
  400f2a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
  400f2c:	4b37      	ldr	r3, [pc, #220]	; (40100c <mpu_init+0x18c>)
  400f2e:	22ff      	movs	r2, #255	; 0xff
  400f30:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
  400f32:	4b36      	ldr	r3, [pc, #216]	; (40100c <mpu_init+0x18c>)
  400f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
  400f38:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
  400f3a:	4b34      	ldr	r3, [pc, #208]	; (40100c <mpu_init+0x18c>)
  400f3c:	2201      	movs	r2, #1
  400f3e:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
  400f40:	4b32      	ldr	r3, [pc, #200]	; (40100c <mpu_init+0x18c>)
  400f42:	2201      	movs	r2, #1
  400f44:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
  400f48:	4b30      	ldr	r3, [pc, #192]	; (40100c <mpu_init+0x18c>)
  400f4a:	2200      	movs	r2, #0
  400f4c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
  400f50:	4b2e      	ldr	r3, [pc, #184]	; (40100c <mpu_init+0x18c>)
  400f52:	2200      	movs	r2, #0
  400f54:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
  400f56:	4b2d      	ldr	r3, [pc, #180]	; (40100c <mpu_init+0x18c>)
  400f58:	2200      	movs	r2, #0
  400f5a:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
  400f5c:	220c      	movs	r2, #12
  400f5e:	2100      	movs	r1, #0
  400f60:	482d      	ldr	r0, [pc, #180]	; (401018 <mpu_init+0x198>)
  400f62:	4b2e      	ldr	r3, [pc, #184]	; (40101c <mpu_init+0x19c>)
  400f64:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
  400f66:	4b29      	ldr	r3, [pc, #164]	; (40100c <mpu_init+0x18c>)
  400f68:	2200      	movs	r2, #0
  400f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
  400f6e:	4b27      	ldr	r3, [pc, #156]	; (40100c <mpu_init+0x18c>)
  400f70:	2200      	movs	r2, #0
  400f72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
  400f76:	4b25      	ldr	r3, [pc, #148]	; (40100c <mpu_init+0x18c>)
  400f78:	2200      	movs	r2, #0
  400f7a:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
  400f7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400f80:	4b27      	ldr	r3, [pc, #156]	; (401020 <mpu_init+0x1a0>)
  400f82:	4798      	blx	r3
  400f84:	4603      	mov	r3, r0
  400f86:	2b00      	cmp	r3, #0
  400f88:	d002      	beq.n	400f90 <mpu_init+0x110>
        return -1;
  400f8a:	f04f 33ff 	mov.w	r3, #4294967295
  400f8e:	e038      	b.n	401002 <mpu_init+0x182>
    if (mpu_set_accel_fsr(2))
  400f90:	2002      	movs	r0, #2
  400f92:	4b24      	ldr	r3, [pc, #144]	; (401024 <mpu_init+0x1a4>)
  400f94:	4798      	blx	r3
  400f96:	4603      	mov	r3, r0
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d002      	beq.n	400fa2 <mpu_init+0x122>
        return -1;
  400f9c:	f04f 33ff 	mov.w	r3, #4294967295
  400fa0:	e02f      	b.n	401002 <mpu_init+0x182>
    if (mpu_set_lpf(42))
  400fa2:	202a      	movs	r0, #42	; 0x2a
  400fa4:	4b20      	ldr	r3, [pc, #128]	; (401028 <mpu_init+0x1a8>)
  400fa6:	4798      	blx	r3
  400fa8:	4603      	mov	r3, r0
  400faa:	2b00      	cmp	r3, #0
  400fac:	d002      	beq.n	400fb4 <mpu_init+0x134>
        return -1;
  400fae:	f04f 33ff 	mov.w	r3, #4294967295
  400fb2:	e026      	b.n	401002 <mpu_init+0x182>
    if (mpu_set_sample_rate(50))
  400fb4:	2032      	movs	r0, #50	; 0x32
  400fb6:	4b1d      	ldr	r3, [pc, #116]	; (40102c <mpu_init+0x1ac>)
  400fb8:	4798      	blx	r3
  400fba:	4603      	mov	r3, r0
  400fbc:	2b00      	cmp	r3, #0
  400fbe:	d002      	beq.n	400fc6 <mpu_init+0x146>
        return -1;
  400fc0:	f04f 33ff 	mov.w	r3, #4294967295
  400fc4:	e01d      	b.n	401002 <mpu_init+0x182>
    if (mpu_configure_fifo(0))
  400fc6:	2000      	movs	r0, #0
  400fc8:	4b19      	ldr	r3, [pc, #100]	; (401030 <mpu_init+0x1b0>)
  400fca:	4798      	blx	r3
  400fcc:	4603      	mov	r3, r0
  400fce:	2b00      	cmp	r3, #0
  400fd0:	d002      	beq.n	400fd8 <mpu_init+0x158>
        return -1;
  400fd2:	f04f 33ff 	mov.w	r3, #4294967295
  400fd6:	e014      	b.n	401002 <mpu_init+0x182>

    if (int_param)
  400fd8:	687b      	ldr	r3, [r7, #4]
  400fda:	2b00      	cmp	r3, #0
  400fdc:	d002      	beq.n	400fe4 <mpu_init+0x164>
        reg_int_cb(int_param);
  400fde:	6878      	ldr	r0, [r7, #4]
  400fe0:	4b14      	ldr	r3, [pc, #80]	; (401034 <mpu_init+0x1b4>)
  400fe2:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
    setup_compass();
  400fe4:	4b14      	ldr	r3, [pc, #80]	; (401038 <mpu_init+0x1b8>)
  400fe6:	4798      	blx	r3
    if (mpu_set_compass_sample_rate(10))
  400fe8:	200a      	movs	r0, #10
  400fea:	4b14      	ldr	r3, [pc, #80]	; (40103c <mpu_init+0x1bc>)
  400fec:	4798      	blx	r3
  400fee:	4603      	mov	r3, r0
  400ff0:	2b00      	cmp	r3, #0
  400ff2:	d002      	beq.n	400ffa <mpu_init+0x17a>
        return -1;
  400ff4:	f04f 33ff 	mov.w	r3, #4294967295
  400ff8:	e003      	b.n	401002 <mpu_init+0x182>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
  400ffa:	2000      	movs	r0, #0
  400ffc:	4b10      	ldr	r3, [pc, #64]	; (401040 <mpu_init+0x1c0>)
  400ffe:	4798      	blx	r3
    return 0;
  401000:	2300      	movs	r3, #0
}
  401002:	4618      	mov	r0, r3
  401004:	3714      	adds	r7, #20
  401006:	46bd      	mov	sp, r7
  401008:	bd90      	pop	{r4, r7, pc}
  40100a:	bf00      	nop
  40100c:	20000000 	.word	0x20000000
  401010:	0040391d 	.word	0x0040391d
  401014:	004038ed 	.word	0x004038ed
  401018:	20000016 	.word	0x20000016
  40101c:	00406695 	.word	0x00406695
  401020:	004013f9 	.word	0x004013f9
  401024:	00401515 	.word	0x00401515
  401028:	004015e9 	.word	0x004015e9
  40102c:	004016b9 	.word	0x004016b9
  401030:	0040182d 	.word	0x0040182d
  401034:	00400db5 	.word	0x00400db5
  401038:	00401fe5 	.word	0x00401fe5
  40103c:	004017a9 	.word	0x004017a9
  401040:	004018d9 	.word	0x004018d9

00401044 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
  401044:	b590      	push	{r4, r7, lr}
  401046:	b085      	sub	sp, #20
  401048:	af00      	add	r7, sp, #0
  40104a:	4603      	mov	r3, r0
  40104c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
  40104e:	79fb      	ldrb	r3, [r7, #7]
  401050:	2b28      	cmp	r3, #40	; 0x28
  401052:	d902      	bls.n	40105a <mpu_lp_accel_mode+0x16>
        return -1;
  401054:	f04f 33ff 	mov.w	r3, #4294967295
  401058:	e085      	b.n	401166 <mpu_lp_accel_mode+0x122>

    if (!rate) {
  40105a:	79fb      	ldrb	r3, [r7, #7]
  40105c:	2b00      	cmp	r3, #0
  40105e:	d11c      	bne.n	40109a <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
  401060:	2000      	movs	r0, #0
  401062:	4b43      	ldr	r3, [pc, #268]	; (401170 <mpu_lp_accel_mode+0x12c>)
  401064:	4798      	blx	r3
        tmp[0] = 0;
  401066:	2300      	movs	r3, #0
  401068:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
  40106a:	2307      	movs	r3, #7
  40106c:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
  40106e:	4b41      	ldr	r3, [pc, #260]	; (401174 <mpu_lp_accel_mode+0x130>)
  401070:	685b      	ldr	r3, [r3, #4]
  401072:	7818      	ldrb	r0, [r3, #0]
  401074:	4b3f      	ldr	r3, [pc, #252]	; (401174 <mpu_lp_accel_mode+0x130>)
  401076:	681b      	ldr	r3, [r3, #0]
  401078:	7d59      	ldrb	r1, [r3, #21]
  40107a:	f107 030c 	add.w	r3, r7, #12
  40107e:	2202      	movs	r2, #2
  401080:	4c3d      	ldr	r4, [pc, #244]	; (401178 <mpu_lp_accel_mode+0x134>)
  401082:	47a0      	blx	r4
  401084:	4603      	mov	r3, r0
  401086:	2b00      	cmp	r3, #0
  401088:	d002      	beq.n	401090 <mpu_lp_accel_mode+0x4c>
            return -1;
  40108a:	f04f 33ff 	mov.w	r3, #4294967295
  40108e:	e06a      	b.n	401166 <mpu_lp_accel_mode+0x122>
        st.chip_cfg.lp_accel_mode = 0;
  401090:	4b38      	ldr	r3, [pc, #224]	; (401174 <mpu_lp_accel_mode+0x130>)
  401092:	2200      	movs	r2, #0
  401094:	751a      	strb	r2, [r3, #20]
        return 0;
  401096:	2300      	movs	r3, #0
  401098:	e065      	b.n	401166 <mpu_lp_accel_mode+0x122>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
  40109a:	2001      	movs	r0, #1
  40109c:	4b34      	ldr	r3, [pc, #208]	; (401170 <mpu_lp_accel_mode+0x12c>)
  40109e:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
  4010a0:	79fb      	ldrb	r3, [r7, #7]
  4010a2:	2b01      	cmp	r3, #1
  4010a4:	d102      	bne.n	4010ac <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
  4010a6:	2302      	movs	r3, #2
  4010a8:	733b      	strb	r3, [r7, #12]
  4010aa:	e02b      	b.n	401104 <mpu_lp_accel_mode+0xc0>
    else if (rate == 2)
  4010ac:	79fb      	ldrb	r3, [r7, #7]
  4010ae:	2b02      	cmp	r3, #2
  4010b0:	d102      	bne.n	4010b8 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
  4010b2:	2303      	movs	r3, #3
  4010b4:	733b      	strb	r3, [r7, #12]
  4010b6:	e025      	b.n	401104 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 5)
  4010b8:	79fb      	ldrb	r3, [r7, #7]
  4010ba:	2b05      	cmp	r3, #5
  4010bc:	d802      	bhi.n	4010c4 <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
  4010be:	2304      	movs	r3, #4
  4010c0:	733b      	strb	r3, [r7, #12]
  4010c2:	e01f      	b.n	401104 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 10)
  4010c4:	79fb      	ldrb	r3, [r7, #7]
  4010c6:	2b0a      	cmp	r3, #10
  4010c8:	d802      	bhi.n	4010d0 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
  4010ca:	2305      	movs	r3, #5
  4010cc:	733b      	strb	r3, [r7, #12]
  4010ce:	e019      	b.n	401104 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 20)
  4010d0:	79fb      	ldrb	r3, [r7, #7]
  4010d2:	2b14      	cmp	r3, #20
  4010d4:	d802      	bhi.n	4010dc <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
  4010d6:	2306      	movs	r3, #6
  4010d8:	733b      	strb	r3, [r7, #12]
  4010da:	e013      	b.n	401104 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 40)
  4010dc:	79fb      	ldrb	r3, [r7, #7]
  4010de:	2b28      	cmp	r3, #40	; 0x28
  4010e0:	d802      	bhi.n	4010e8 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
  4010e2:	2307      	movs	r3, #7
  4010e4:	733b      	strb	r3, [r7, #12]
  4010e6:	e00d      	b.n	401104 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 80)
  4010e8:	79fb      	ldrb	r3, [r7, #7]
  4010ea:	2b50      	cmp	r3, #80	; 0x50
  4010ec:	d802      	bhi.n	4010f4 <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
  4010ee:	2308      	movs	r3, #8
  4010f0:	733b      	strb	r3, [r7, #12]
  4010f2:	e007      	b.n	401104 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 160)
  4010f4:	79fb      	ldrb	r3, [r7, #7]
  4010f6:	2ba0      	cmp	r3, #160	; 0xa0
  4010f8:	d802      	bhi.n	401100 <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
  4010fa:	2309      	movs	r3, #9
  4010fc:	733b      	strb	r3, [r7, #12]
  4010fe:	e001      	b.n	401104 <mpu_lp_accel_mode+0xc0>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
  401100:	230a      	movs	r3, #10
  401102:	733b      	strb	r3, [r7, #12]
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
  401104:	4b1b      	ldr	r3, [pc, #108]	; (401174 <mpu_lp_accel_mode+0x130>)
  401106:	685b      	ldr	r3, [r3, #4]
  401108:	7818      	ldrb	r0, [r3, #0]
  40110a:	4b1a      	ldr	r3, [pc, #104]	; (401174 <mpu_lp_accel_mode+0x130>)
  40110c:	681b      	ldr	r3, [r3, #0]
  40110e:	7a59      	ldrb	r1, [r3, #9]
  401110:	f107 030c 	add.w	r3, r7, #12
  401114:	2201      	movs	r2, #1
  401116:	4c18      	ldr	r4, [pc, #96]	; (401178 <mpu_lp_accel_mode+0x134>)
  401118:	47a0      	blx	r4
  40111a:	4603      	mov	r3, r0
  40111c:	2b00      	cmp	r3, #0
  40111e:	d002      	beq.n	401126 <mpu_lp_accel_mode+0xe2>
        return -1;
  401120:	f04f 33ff 	mov.w	r3, #4294967295
  401124:	e01f      	b.n	401166 <mpu_lp_accel_mode+0x122>
    tmp[0] = BIT_LPA_CYCLE;
  401126:	2320      	movs	r3, #32
  401128:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
  40112a:	4b12      	ldr	r3, [pc, #72]	; (401174 <mpu_lp_accel_mode+0x130>)
  40112c:	685b      	ldr	r3, [r3, #4]
  40112e:	7818      	ldrb	r0, [r3, #0]
  401130:	4b10      	ldr	r3, [pc, #64]	; (401174 <mpu_lp_accel_mode+0x130>)
  401132:	681b      	ldr	r3, [r3, #0]
  401134:	7d59      	ldrb	r1, [r3, #21]
  401136:	f107 030c 	add.w	r3, r7, #12
  40113a:	2201      	movs	r2, #1
  40113c:	4c0e      	ldr	r4, [pc, #56]	; (401178 <mpu_lp_accel_mode+0x134>)
  40113e:	47a0      	blx	r4
  401140:	4603      	mov	r3, r0
  401142:	2b00      	cmp	r3, #0
  401144:	d002      	beq.n	40114c <mpu_lp_accel_mode+0x108>
        return -1;
  401146:	f04f 33ff 	mov.w	r3, #4294967295
  40114a:	e00c      	b.n	401166 <mpu_lp_accel_mode+0x122>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
  40114c:	4b09      	ldr	r3, [pc, #36]	; (401174 <mpu_lp_accel_mode+0x130>)
  40114e:	2208      	movs	r2, #8
  401150:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
  401152:	4b08      	ldr	r3, [pc, #32]	; (401174 <mpu_lp_accel_mode+0x130>)
  401154:	2200      	movs	r2, #0
  401156:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
  401158:	4b06      	ldr	r3, [pc, #24]	; (401174 <mpu_lp_accel_mode+0x130>)
  40115a:	2201      	movs	r2, #1
  40115c:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
  40115e:	2000      	movs	r0, #0
  401160:	4b06      	ldr	r3, [pc, #24]	; (40117c <mpu_lp_accel_mode+0x138>)
  401162:	4798      	blx	r3

    return 0;
  401164:	2300      	movs	r3, #0
}
  401166:	4618      	mov	r0, r3
  401168:	3714      	adds	r7, #20
  40116a:	46bd      	mov	sp, r7
  40116c:	bd90      	pop	{r4, r7, pc}
  40116e:	bf00      	nop
  401170:	00401c3d 	.word	0x00401c3d
  401174:	20000000 	.word	0x20000000
  401178:	0040391d 	.word	0x0040391d
  40117c:	0040182d 	.word	0x0040182d

00401180 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
  401180:	b590      	push	{r4, r7, lr}
  401182:	b083      	sub	sp, #12
  401184:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  401186:	4b7e      	ldr	r3, [pc, #504]	; (401380 <mpu_reset_fifo+0x200>)
  401188:	7a9b      	ldrb	r3, [r3, #10]
  40118a:	2b00      	cmp	r3, #0
  40118c:	d102      	bne.n	401194 <mpu_reset_fifo+0x14>
        return -1;
  40118e:	f04f 33ff 	mov.w	r3, #4294967295
  401192:	e0f1      	b.n	401378 <mpu_reset_fifo+0x1f8>

    data = 0;
  401194:	2300      	movs	r3, #0
  401196:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401198:	4b79      	ldr	r3, [pc, #484]	; (401380 <mpu_reset_fifo+0x200>)
  40119a:	685b      	ldr	r3, [r3, #4]
  40119c:	7818      	ldrb	r0, [r3, #0]
  40119e:	4b78      	ldr	r3, [pc, #480]	; (401380 <mpu_reset_fifo+0x200>)
  4011a0:	681b      	ldr	r3, [r3, #0]
  4011a2:	7c59      	ldrb	r1, [r3, #17]
  4011a4:	1dfb      	adds	r3, r7, #7
  4011a6:	2201      	movs	r2, #1
  4011a8:	4c76      	ldr	r4, [pc, #472]	; (401384 <mpu_reset_fifo+0x204>)
  4011aa:	47a0      	blx	r4
  4011ac:	4603      	mov	r3, r0
  4011ae:	2b00      	cmp	r3, #0
  4011b0:	d002      	beq.n	4011b8 <mpu_reset_fifo+0x38>
        return -1;
  4011b2:	f04f 33ff 	mov.w	r3, #4294967295
  4011b6:	e0df      	b.n	401378 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
  4011b8:	4b71      	ldr	r3, [pc, #452]	; (401380 <mpu_reset_fifo+0x200>)
  4011ba:	685b      	ldr	r3, [r3, #4]
  4011bc:	7818      	ldrb	r0, [r3, #0]
  4011be:	4b70      	ldr	r3, [pc, #448]	; (401380 <mpu_reset_fifo+0x200>)
  4011c0:	681b      	ldr	r3, [r3, #0]
  4011c2:	7959      	ldrb	r1, [r3, #5]
  4011c4:	1dfb      	adds	r3, r7, #7
  4011c6:	2201      	movs	r2, #1
  4011c8:	4c6e      	ldr	r4, [pc, #440]	; (401384 <mpu_reset_fifo+0x204>)
  4011ca:	47a0      	blx	r4
  4011cc:	4603      	mov	r3, r0
  4011ce:	2b00      	cmp	r3, #0
  4011d0:	d002      	beq.n	4011d8 <mpu_reset_fifo+0x58>
        return -1;
  4011d2:	f04f 33ff 	mov.w	r3, #4294967295
  4011d6:	e0cf      	b.n	401378 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4011d8:	4b69      	ldr	r3, [pc, #420]	; (401380 <mpu_reset_fifo+0x200>)
  4011da:	685b      	ldr	r3, [r3, #4]
  4011dc:	7818      	ldrb	r0, [r3, #0]
  4011de:	4b68      	ldr	r3, [pc, #416]	; (401380 <mpu_reset_fifo+0x200>)
  4011e0:	681b      	ldr	r3, [r3, #0]
  4011e2:	7919      	ldrb	r1, [r3, #4]
  4011e4:	1dfb      	adds	r3, r7, #7
  4011e6:	2201      	movs	r2, #1
  4011e8:	4c66      	ldr	r4, [pc, #408]	; (401384 <mpu_reset_fifo+0x204>)
  4011ea:	47a0      	blx	r4
  4011ec:	4603      	mov	r3, r0
  4011ee:	2b00      	cmp	r3, #0
  4011f0:	d002      	beq.n	4011f8 <mpu_reset_fifo+0x78>
        return -1;
  4011f2:	f04f 33ff 	mov.w	r3, #4294967295
  4011f6:	e0bf      	b.n	401378 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
  4011f8:	4b61      	ldr	r3, [pc, #388]	; (401380 <mpu_reset_fifo+0x200>)
  4011fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4011fe:	2b00      	cmp	r3, #0
  401200:	d05c      	beq.n	4012bc <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
  401202:	230c      	movs	r3, #12
  401204:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  401206:	4b5e      	ldr	r3, [pc, #376]	; (401380 <mpu_reset_fifo+0x200>)
  401208:	685b      	ldr	r3, [r3, #4]
  40120a:	7818      	ldrb	r0, [r3, #0]
  40120c:	4b5c      	ldr	r3, [pc, #368]	; (401380 <mpu_reset_fifo+0x200>)
  40120e:	681b      	ldr	r3, [r3, #0]
  401210:	7919      	ldrb	r1, [r3, #4]
  401212:	1dfb      	adds	r3, r7, #7
  401214:	2201      	movs	r2, #1
  401216:	4c5b      	ldr	r4, [pc, #364]	; (401384 <mpu_reset_fifo+0x204>)
  401218:	47a0      	blx	r4
  40121a:	4603      	mov	r3, r0
  40121c:	2b00      	cmp	r3, #0
  40121e:	d002      	beq.n	401226 <mpu_reset_fifo+0xa6>
            return -1;
  401220:	f04f 33ff 	mov.w	r3, #4294967295
  401224:	e0a8      	b.n	401378 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
  401226:	2032      	movs	r0, #50	; 0x32
  401228:	4b57      	ldr	r3, [pc, #348]	; (401388 <mpu_reset_fifo+0x208>)
  40122a:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
  40122c:	23c0      	movs	r3, #192	; 0xc0
  40122e:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
  401230:	4b53      	ldr	r3, [pc, #332]	; (401380 <mpu_reset_fifo+0x200>)
  401232:	7a9b      	ldrb	r3, [r3, #10]
  401234:	f003 0301 	and.w	r3, r3, #1
  401238:	2b00      	cmp	r3, #0
  40123a:	d004      	beq.n	401246 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
  40123c:	79fb      	ldrb	r3, [r7, #7]
  40123e:	f043 0320 	orr.w	r3, r3, #32
  401242:	b2db      	uxtb	r3, r3
  401244:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  401246:	4b4e      	ldr	r3, [pc, #312]	; (401380 <mpu_reset_fifo+0x200>)
  401248:	685b      	ldr	r3, [r3, #4]
  40124a:	7818      	ldrb	r0, [r3, #0]
  40124c:	4b4c      	ldr	r3, [pc, #304]	; (401380 <mpu_reset_fifo+0x200>)
  40124e:	681b      	ldr	r3, [r3, #0]
  401250:	7919      	ldrb	r1, [r3, #4]
  401252:	1dfb      	adds	r3, r7, #7
  401254:	2201      	movs	r2, #1
  401256:	4c4b      	ldr	r4, [pc, #300]	; (401384 <mpu_reset_fifo+0x204>)
  401258:	47a0      	blx	r4
  40125a:	4603      	mov	r3, r0
  40125c:	2b00      	cmp	r3, #0
  40125e:	d002      	beq.n	401266 <mpu_reset_fifo+0xe6>
            return -1;
  401260:	f04f 33ff 	mov.w	r3, #4294967295
  401264:	e088      	b.n	401378 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
  401266:	4b46      	ldr	r3, [pc, #280]	; (401380 <mpu_reset_fifo+0x200>)
  401268:	7c5b      	ldrb	r3, [r3, #17]
  40126a:	2b00      	cmp	r3, #0
  40126c:	d002      	beq.n	401274 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
  40126e:	2302      	movs	r3, #2
  401270:	71fb      	strb	r3, [r7, #7]
  401272:	e001      	b.n	401278 <mpu_reset_fifo+0xf8>
        else
            data = 0;
  401274:	2300      	movs	r3, #0
  401276:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401278:	4b41      	ldr	r3, [pc, #260]	; (401380 <mpu_reset_fifo+0x200>)
  40127a:	685b      	ldr	r3, [r3, #4]
  40127c:	7818      	ldrb	r0, [r3, #0]
  40127e:	4b40      	ldr	r3, [pc, #256]	; (401380 <mpu_reset_fifo+0x200>)
  401280:	681b      	ldr	r3, [r3, #0]
  401282:	7c59      	ldrb	r1, [r3, #17]
  401284:	1dfb      	adds	r3, r7, #7
  401286:	2201      	movs	r2, #1
  401288:	4c3e      	ldr	r4, [pc, #248]	; (401384 <mpu_reset_fifo+0x204>)
  40128a:	47a0      	blx	r4
  40128c:	4603      	mov	r3, r0
  40128e:	2b00      	cmp	r3, #0
  401290:	d002      	beq.n	401298 <mpu_reset_fifo+0x118>
            return -1;
  401292:	f04f 33ff 	mov.w	r3, #4294967295
  401296:	e06f      	b.n	401378 <mpu_reset_fifo+0x1f8>
        data = 0;
  401298:	2300      	movs	r3, #0
  40129a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
  40129c:	4b38      	ldr	r3, [pc, #224]	; (401380 <mpu_reset_fifo+0x200>)
  40129e:	685b      	ldr	r3, [r3, #4]
  4012a0:	7818      	ldrb	r0, [r3, #0]
  4012a2:	4b37      	ldr	r3, [pc, #220]	; (401380 <mpu_reset_fifo+0x200>)
  4012a4:	681b      	ldr	r3, [r3, #0]
  4012a6:	7959      	ldrb	r1, [r3, #5]
  4012a8:	1dfb      	adds	r3, r7, #7
  4012aa:	2201      	movs	r2, #1
  4012ac:	4c35      	ldr	r4, [pc, #212]	; (401384 <mpu_reset_fifo+0x204>)
  4012ae:	47a0      	blx	r4
  4012b0:	4603      	mov	r3, r0
  4012b2:	2b00      	cmp	r3, #0
  4012b4:	d05f      	beq.n	401376 <mpu_reset_fifo+0x1f6>
            return -1;
  4012b6:	f04f 33ff 	mov.w	r3, #4294967295
  4012ba:	e05d      	b.n	401378 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
  4012bc:	2304      	movs	r3, #4
  4012be:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4012c0:	4b2f      	ldr	r3, [pc, #188]	; (401380 <mpu_reset_fifo+0x200>)
  4012c2:	685b      	ldr	r3, [r3, #4]
  4012c4:	7818      	ldrb	r0, [r3, #0]
  4012c6:	4b2e      	ldr	r3, [pc, #184]	; (401380 <mpu_reset_fifo+0x200>)
  4012c8:	681b      	ldr	r3, [r3, #0]
  4012ca:	7919      	ldrb	r1, [r3, #4]
  4012cc:	1dfb      	adds	r3, r7, #7
  4012ce:	2201      	movs	r2, #1
  4012d0:	4c2c      	ldr	r4, [pc, #176]	; (401384 <mpu_reset_fifo+0x204>)
  4012d2:	47a0      	blx	r4
  4012d4:	4603      	mov	r3, r0
  4012d6:	2b00      	cmp	r3, #0
  4012d8:	d002      	beq.n	4012e0 <mpu_reset_fifo+0x160>
            return -1;
  4012da:	f04f 33ff 	mov.w	r3, #4294967295
  4012de:	e04b      	b.n	401378 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
  4012e0:	4b27      	ldr	r3, [pc, #156]	; (401380 <mpu_reset_fifo+0x200>)
  4012e2:	7c9b      	ldrb	r3, [r3, #18]
  4012e4:	2b00      	cmp	r3, #0
  4012e6:	d105      	bne.n	4012f4 <mpu_reset_fifo+0x174>
  4012e8:	4b25      	ldr	r3, [pc, #148]	; (401380 <mpu_reset_fifo+0x200>)
  4012ea:	7a9b      	ldrb	r3, [r3, #10]
  4012ec:	f003 0301 	and.w	r3, r3, #1
  4012f0:	2b00      	cmp	r3, #0
  4012f2:	d102      	bne.n	4012fa <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
  4012f4:	2340      	movs	r3, #64	; 0x40
  4012f6:	71fb      	strb	r3, [r7, #7]
  4012f8:	e001      	b.n	4012fe <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
  4012fa:	2360      	movs	r3, #96	; 0x60
  4012fc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
  4012fe:	4b20      	ldr	r3, [pc, #128]	; (401380 <mpu_reset_fifo+0x200>)
  401300:	685b      	ldr	r3, [r3, #4]
  401302:	7818      	ldrb	r0, [r3, #0]
  401304:	4b1e      	ldr	r3, [pc, #120]	; (401380 <mpu_reset_fifo+0x200>)
  401306:	681b      	ldr	r3, [r3, #0]
  401308:	7919      	ldrb	r1, [r3, #4]
  40130a:	1dfb      	adds	r3, r7, #7
  40130c:	2201      	movs	r2, #1
  40130e:	4c1d      	ldr	r4, [pc, #116]	; (401384 <mpu_reset_fifo+0x204>)
  401310:	47a0      	blx	r4
  401312:	4603      	mov	r3, r0
  401314:	2b00      	cmp	r3, #0
  401316:	d002      	beq.n	40131e <mpu_reset_fifo+0x19e>
            return -1;
  401318:	f04f 33ff 	mov.w	r3, #4294967295
  40131c:	e02c      	b.n	401378 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
  40131e:	2032      	movs	r0, #50	; 0x32
  401320:	4b19      	ldr	r3, [pc, #100]	; (401388 <mpu_reset_fifo+0x208>)
  401322:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
  401324:	4b16      	ldr	r3, [pc, #88]	; (401380 <mpu_reset_fifo+0x200>)
  401326:	7c5b      	ldrb	r3, [r3, #17]
  401328:	2b00      	cmp	r3, #0
  40132a:	d002      	beq.n	401332 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
  40132c:	2301      	movs	r3, #1
  40132e:	71fb      	strb	r3, [r7, #7]
  401330:	e001      	b.n	401336 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
  401332:	2300      	movs	r3, #0
  401334:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
  401336:	4b12      	ldr	r3, [pc, #72]	; (401380 <mpu_reset_fifo+0x200>)
  401338:	685b      	ldr	r3, [r3, #4]
  40133a:	7818      	ldrb	r0, [r3, #0]
  40133c:	4b10      	ldr	r3, [pc, #64]	; (401380 <mpu_reset_fifo+0x200>)
  40133e:	681b      	ldr	r3, [r3, #0]
  401340:	7c59      	ldrb	r1, [r3, #17]
  401342:	1dfb      	adds	r3, r7, #7
  401344:	2201      	movs	r2, #1
  401346:	4c0f      	ldr	r4, [pc, #60]	; (401384 <mpu_reset_fifo+0x204>)
  401348:	47a0      	blx	r4
  40134a:	4603      	mov	r3, r0
  40134c:	2b00      	cmp	r3, #0
  40134e:	d002      	beq.n	401356 <mpu_reset_fifo+0x1d6>
            return -1;
  401350:	f04f 33ff 	mov.w	r3, #4294967295
  401354:	e010      	b.n	401378 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
  401356:	4b0a      	ldr	r3, [pc, #40]	; (401380 <mpu_reset_fifo+0x200>)
  401358:	685b      	ldr	r3, [r3, #4]
  40135a:	7818      	ldrb	r0, [r3, #0]
  40135c:	4b08      	ldr	r3, [pc, #32]	; (401380 <mpu_reset_fifo+0x200>)
  40135e:	681b      	ldr	r3, [r3, #0]
  401360:	7959      	ldrb	r1, [r3, #5]
  401362:	4b0a      	ldr	r3, [pc, #40]	; (40138c <mpu_reset_fifo+0x20c>)
  401364:	2201      	movs	r2, #1
  401366:	4c07      	ldr	r4, [pc, #28]	; (401384 <mpu_reset_fifo+0x204>)
  401368:	47a0      	blx	r4
  40136a:	4603      	mov	r3, r0
  40136c:	2b00      	cmp	r3, #0
  40136e:	d002      	beq.n	401376 <mpu_reset_fifo+0x1f6>
            return -1;
  401370:	f04f 33ff 	mov.w	r3, #4294967295
  401374:	e000      	b.n	401378 <mpu_reset_fifo+0x1f8>
    }
    return 0;
  401376:	2300      	movs	r3, #0
}
  401378:	4618      	mov	r0, r3
  40137a:	370c      	adds	r7, #12
  40137c:	46bd      	mov	sp, r7
  40137e:	bd90      	pop	{r4, r7, pc}
  401380:	20000000 	.word	0x20000000
  401384:	0040391d 	.word	0x0040391d
  401388:	004038ed 	.word	0x004038ed
  40138c:	20000010 	.word	0x20000010

00401390 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
  401390:	b480      	push	{r7}
  401392:	b083      	sub	sp, #12
  401394:	af00      	add	r7, sp, #0
  401396:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
  401398:	4b16      	ldr	r3, [pc, #88]	; (4013f4 <mpu_get_gyro_fsr+0x64>)
  40139a:	7a1b      	ldrb	r3, [r3, #8]
  40139c:	2b03      	cmp	r3, #3
  40139e:	d81e      	bhi.n	4013de <mpu_get_gyro_fsr+0x4e>
  4013a0:	a201      	add	r2, pc, #4	; (adr r2, 4013a8 <mpu_get_gyro_fsr+0x18>)
  4013a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4013a6:	bf00      	nop
  4013a8:	004013b9 	.word	0x004013b9
  4013ac:	004013c1 	.word	0x004013c1
  4013b0:	004013cb 	.word	0x004013cb
  4013b4:	004013d5 	.word	0x004013d5
    case INV_FSR_250DPS:
        fsr[0] = 250;
  4013b8:	687b      	ldr	r3, [r7, #4]
  4013ba:	22fa      	movs	r2, #250	; 0xfa
  4013bc:	801a      	strh	r2, [r3, #0]
        break;
  4013be:	e012      	b.n	4013e6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
  4013c0:	687b      	ldr	r3, [r7, #4]
  4013c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4013c6:	801a      	strh	r2, [r3, #0]
        break;
  4013c8:	e00d      	b.n	4013e6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
  4013ca:	687b      	ldr	r3, [r7, #4]
  4013cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4013d0:	801a      	strh	r2, [r3, #0]
        break;
  4013d2:	e008      	b.n	4013e6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
  4013d4:	687b      	ldr	r3, [r7, #4]
  4013d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  4013da:	801a      	strh	r2, [r3, #0]
        break;
  4013dc:	e003      	b.n	4013e6 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
  4013de:	687b      	ldr	r3, [r7, #4]
  4013e0:	2200      	movs	r2, #0
  4013e2:	801a      	strh	r2, [r3, #0]
        break;
  4013e4:	bf00      	nop
    }
    return 0;
  4013e6:	2300      	movs	r3, #0
}
  4013e8:	4618      	mov	r0, r3
  4013ea:	370c      	adds	r7, #12
  4013ec:	46bd      	mov	sp, r7
  4013ee:	bc80      	pop	{r7}
  4013f0:	4770      	bx	lr
  4013f2:	bf00      	nop
  4013f4:	20000000 	.word	0x20000000

004013f8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
  4013f8:	b590      	push	{r4, r7, lr}
  4013fa:	b085      	sub	sp, #20
  4013fc:	af00      	add	r7, sp, #0
  4013fe:	4603      	mov	r3, r0
  401400:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  401402:	4b25      	ldr	r3, [pc, #148]	; (401498 <mpu_set_gyro_fsr+0xa0>)
  401404:	7a9b      	ldrb	r3, [r3, #10]
  401406:	2b00      	cmp	r3, #0
  401408:	d102      	bne.n	401410 <mpu_set_gyro_fsr+0x18>
        return -1;
  40140a:	f04f 33ff 	mov.w	r3, #4294967295
  40140e:	e03f      	b.n	401490 <mpu_set_gyro_fsr+0x98>

    switch (fsr) {
  401410:	88fb      	ldrh	r3, [r7, #6]
  401412:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  401416:	d00f      	beq.n	401438 <mpu_set_gyro_fsr+0x40>
  401418:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40141c:	dc02      	bgt.n	401424 <mpu_set_gyro_fsr+0x2c>
  40141e:	2bfa      	cmp	r3, #250	; 0xfa
  401420:	d007      	beq.n	401432 <mpu_set_gyro_fsr+0x3a>
  401422:	e012      	b.n	40144a <mpu_set_gyro_fsr+0x52>
  401424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401428:	d009      	beq.n	40143e <mpu_set_gyro_fsr+0x46>
  40142a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40142e:	d009      	beq.n	401444 <mpu_set_gyro_fsr+0x4c>
  401430:	e00b      	b.n	40144a <mpu_set_gyro_fsr+0x52>
    case 250:
        data = INV_FSR_250DPS << 3;
  401432:	2300      	movs	r3, #0
  401434:	73fb      	strb	r3, [r7, #15]
        break;
  401436:	e00b      	b.n	401450 <mpu_set_gyro_fsr+0x58>
    case 500:
        data = INV_FSR_500DPS << 3;
  401438:	2308      	movs	r3, #8
  40143a:	73fb      	strb	r3, [r7, #15]
        break;
  40143c:	e008      	b.n	401450 <mpu_set_gyro_fsr+0x58>
    case 1000:
        data = INV_FSR_1000DPS << 3;
  40143e:	2310      	movs	r3, #16
  401440:	73fb      	strb	r3, [r7, #15]
        break;
  401442:	e005      	b.n	401450 <mpu_set_gyro_fsr+0x58>
    case 2000:
        data = INV_FSR_2000DPS << 3;
  401444:	2318      	movs	r3, #24
  401446:	73fb      	strb	r3, [r7, #15]
        break;
  401448:	e002      	b.n	401450 <mpu_set_gyro_fsr+0x58>
    default:
        return -1;
  40144a:	f04f 33ff 	mov.w	r3, #4294967295
  40144e:	e01f      	b.n	401490 <mpu_set_gyro_fsr+0x98>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
  401450:	4b11      	ldr	r3, [pc, #68]	; (401498 <mpu_set_gyro_fsr+0xa0>)
  401452:	7a1a      	ldrb	r2, [r3, #8]
  401454:	7bfb      	ldrb	r3, [r7, #15]
  401456:	08db      	lsrs	r3, r3, #3
  401458:	b2db      	uxtb	r3, r3
  40145a:	429a      	cmp	r2, r3
  40145c:	d101      	bne.n	401462 <mpu_set_gyro_fsr+0x6a>
        return 0;
  40145e:	2300      	movs	r3, #0
  401460:	e016      	b.n	401490 <mpu_set_gyro_fsr+0x98>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
  401462:	4b0d      	ldr	r3, [pc, #52]	; (401498 <mpu_set_gyro_fsr+0xa0>)
  401464:	685b      	ldr	r3, [r3, #4]
  401466:	7818      	ldrb	r0, [r3, #0]
  401468:	4b0b      	ldr	r3, [pc, #44]	; (401498 <mpu_set_gyro_fsr+0xa0>)
  40146a:	681b      	ldr	r3, [r3, #0]
  40146c:	7999      	ldrb	r1, [r3, #6]
  40146e:	f107 030f 	add.w	r3, r7, #15
  401472:	2201      	movs	r2, #1
  401474:	4c09      	ldr	r4, [pc, #36]	; (40149c <mpu_set_gyro_fsr+0xa4>)
  401476:	47a0      	blx	r4
  401478:	4603      	mov	r3, r0
  40147a:	2b00      	cmp	r3, #0
  40147c:	d002      	beq.n	401484 <mpu_set_gyro_fsr+0x8c>
        return -1;
  40147e:	f04f 33ff 	mov.w	r3, #4294967295
  401482:	e005      	b.n	401490 <mpu_set_gyro_fsr+0x98>
    st.chip_cfg.gyro_fsr = data >> 3;
  401484:	7bfb      	ldrb	r3, [r7, #15]
  401486:	08db      	lsrs	r3, r3, #3
  401488:	b2da      	uxtb	r2, r3
  40148a:	4b03      	ldr	r3, [pc, #12]	; (401498 <mpu_set_gyro_fsr+0xa0>)
  40148c:	721a      	strb	r2, [r3, #8]
    return 0;
  40148e:	2300      	movs	r3, #0
}
  401490:	4618      	mov	r0, r3
  401492:	3714      	adds	r7, #20
  401494:	46bd      	mov	sp, r7
  401496:	bd90      	pop	{r4, r7, pc}
  401498:	20000000 	.word	0x20000000
  40149c:	0040391d 	.word	0x0040391d

004014a0 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
  4014a0:	b480      	push	{r7}
  4014a2:	b083      	sub	sp, #12
  4014a4:	af00      	add	r7, sp, #0
  4014a6:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
  4014a8:	4b19      	ldr	r3, [pc, #100]	; (401510 <mpu_get_accel_fsr+0x70>)
  4014aa:	7a5b      	ldrb	r3, [r3, #9]
  4014ac:	2b03      	cmp	r3, #3
  4014ae:	d81b      	bhi.n	4014e8 <mpu_get_accel_fsr+0x48>
  4014b0:	a201      	add	r2, pc, #4	; (adr r2, 4014b8 <mpu_get_accel_fsr+0x18>)
  4014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014b6:	bf00      	nop
  4014b8:	004014c9 	.word	0x004014c9
  4014bc:	004014d1 	.word	0x004014d1
  4014c0:	004014d9 	.word	0x004014d9
  4014c4:	004014e1 	.word	0x004014e1
    case INV_FSR_2G:
        fsr[0] = 2;
  4014c8:	687b      	ldr	r3, [r7, #4]
  4014ca:	2202      	movs	r2, #2
  4014cc:	701a      	strb	r2, [r3, #0]
        break;
  4014ce:	e00e      	b.n	4014ee <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
  4014d0:	687b      	ldr	r3, [r7, #4]
  4014d2:	2204      	movs	r2, #4
  4014d4:	701a      	strb	r2, [r3, #0]
        break;
  4014d6:	e00a      	b.n	4014ee <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
  4014d8:	687b      	ldr	r3, [r7, #4]
  4014da:	2208      	movs	r2, #8
  4014dc:	701a      	strb	r2, [r3, #0]
        break;
  4014de:	e006      	b.n	4014ee <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
  4014e0:	687b      	ldr	r3, [r7, #4]
  4014e2:	2210      	movs	r2, #16
  4014e4:	701a      	strb	r2, [r3, #0]
        break;
  4014e6:	e002      	b.n	4014ee <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
  4014e8:	f04f 33ff 	mov.w	r3, #4294967295
  4014ec:	e00a      	b.n	401504 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
  4014ee:	4b08      	ldr	r3, [pc, #32]	; (401510 <mpu_get_accel_fsr+0x70>)
  4014f0:	7cdb      	ldrb	r3, [r3, #19]
  4014f2:	2b00      	cmp	r3, #0
  4014f4:	d005      	beq.n	401502 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
  4014f6:	687b      	ldr	r3, [r7, #4]
  4014f8:	781b      	ldrb	r3, [r3, #0]
  4014fa:	005b      	lsls	r3, r3, #1
  4014fc:	b2da      	uxtb	r2, r3
  4014fe:	687b      	ldr	r3, [r7, #4]
  401500:	701a      	strb	r2, [r3, #0]
    return 0;
  401502:	2300      	movs	r3, #0
}
  401504:	4618      	mov	r0, r3
  401506:	370c      	adds	r7, #12
  401508:	46bd      	mov	sp, r7
  40150a:	bc80      	pop	{r7}
  40150c:	4770      	bx	lr
  40150e:	bf00      	nop
  401510:	20000000 	.word	0x20000000

00401514 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
  401514:	b590      	push	{r4, r7, lr}
  401516:	b085      	sub	sp, #20
  401518:	af00      	add	r7, sp, #0
  40151a:	4603      	mov	r3, r0
  40151c:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  40151e:	4b30      	ldr	r3, [pc, #192]	; (4015e0 <mpu_set_accel_fsr+0xcc>)
  401520:	7a9b      	ldrb	r3, [r3, #10]
  401522:	2b00      	cmp	r3, #0
  401524:	d102      	bne.n	40152c <mpu_set_accel_fsr+0x18>
        return -1;
  401526:	f04f 33ff 	mov.w	r3, #4294967295
  40152a:	e054      	b.n	4015d6 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
  40152c:	79fb      	ldrb	r3, [r7, #7]
  40152e:	3b02      	subs	r3, #2
  401530:	2b0e      	cmp	r3, #14
  401532:	d82d      	bhi.n	401590 <mpu_set_accel_fsr+0x7c>
  401534:	a201      	add	r2, pc, #4	; (adr r2, 40153c <mpu_set_accel_fsr+0x28>)
  401536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40153a:	bf00      	nop
  40153c:	00401579 	.word	0x00401579
  401540:	00401591 	.word	0x00401591
  401544:	0040157f 	.word	0x0040157f
  401548:	00401591 	.word	0x00401591
  40154c:	00401591 	.word	0x00401591
  401550:	00401591 	.word	0x00401591
  401554:	00401585 	.word	0x00401585
  401558:	00401591 	.word	0x00401591
  40155c:	00401591 	.word	0x00401591
  401560:	00401591 	.word	0x00401591
  401564:	00401591 	.word	0x00401591
  401568:	00401591 	.word	0x00401591
  40156c:	00401591 	.word	0x00401591
  401570:	00401591 	.word	0x00401591
  401574:	0040158b 	.word	0x0040158b
    case 2:
        data = INV_FSR_2G << 3;
  401578:	2300      	movs	r3, #0
  40157a:	73fb      	strb	r3, [r7, #15]
        break;
  40157c:	e00b      	b.n	401596 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
  40157e:	2308      	movs	r3, #8
  401580:	73fb      	strb	r3, [r7, #15]
        break;
  401582:	e008      	b.n	401596 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
  401584:	2310      	movs	r3, #16
  401586:	73fb      	strb	r3, [r7, #15]
        break;
  401588:	e005      	b.n	401596 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
  40158a:	2318      	movs	r3, #24
  40158c:	73fb      	strb	r3, [r7, #15]
        break;
  40158e:	e002      	b.n	401596 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
  401590:	f04f 33ff 	mov.w	r3, #4294967295
  401594:	e01f      	b.n	4015d6 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
  401596:	4b12      	ldr	r3, [pc, #72]	; (4015e0 <mpu_set_accel_fsr+0xcc>)
  401598:	7a5a      	ldrb	r2, [r3, #9]
  40159a:	7bfb      	ldrb	r3, [r7, #15]
  40159c:	08db      	lsrs	r3, r3, #3
  40159e:	b2db      	uxtb	r3, r3
  4015a0:	429a      	cmp	r2, r3
  4015a2:	d101      	bne.n	4015a8 <mpu_set_accel_fsr+0x94>
        return 0;
  4015a4:	2300      	movs	r3, #0
  4015a6:	e016      	b.n	4015d6 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
  4015a8:	4b0d      	ldr	r3, [pc, #52]	; (4015e0 <mpu_set_accel_fsr+0xcc>)
  4015aa:	685b      	ldr	r3, [r3, #4]
  4015ac:	7818      	ldrb	r0, [r3, #0]
  4015ae:	4b0c      	ldr	r3, [pc, #48]	; (4015e0 <mpu_set_accel_fsr+0xcc>)
  4015b0:	681b      	ldr	r3, [r3, #0]
  4015b2:	79d9      	ldrb	r1, [r3, #7]
  4015b4:	f107 030f 	add.w	r3, r7, #15
  4015b8:	2201      	movs	r2, #1
  4015ba:	4c0a      	ldr	r4, [pc, #40]	; (4015e4 <mpu_set_accel_fsr+0xd0>)
  4015bc:	47a0      	blx	r4
  4015be:	4603      	mov	r3, r0
  4015c0:	2b00      	cmp	r3, #0
  4015c2:	d002      	beq.n	4015ca <mpu_set_accel_fsr+0xb6>
        return -1;
  4015c4:	f04f 33ff 	mov.w	r3, #4294967295
  4015c8:	e005      	b.n	4015d6 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
  4015ca:	7bfb      	ldrb	r3, [r7, #15]
  4015cc:	08db      	lsrs	r3, r3, #3
  4015ce:	b2da      	uxtb	r2, r3
  4015d0:	4b03      	ldr	r3, [pc, #12]	; (4015e0 <mpu_set_accel_fsr+0xcc>)
  4015d2:	725a      	strb	r2, [r3, #9]
    return 0;
  4015d4:	2300      	movs	r3, #0
}
  4015d6:	4618      	mov	r0, r3
  4015d8:	3714      	adds	r7, #20
  4015da:	46bd      	mov	sp, r7
  4015dc:	bd90      	pop	{r4, r7, pc}
  4015de:	bf00      	nop
  4015e0:	20000000 	.word	0x20000000
  4015e4:	0040391d 	.word	0x0040391d

004015e8 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
  4015e8:	b590      	push	{r4, r7, lr}
  4015ea:	b085      	sub	sp, #20
  4015ec:	af00      	add	r7, sp, #0
  4015ee:	4603      	mov	r3, r0
  4015f0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  4015f2:	4b23      	ldr	r3, [pc, #140]	; (401680 <mpu_set_lpf+0x98>)
  4015f4:	7a9b      	ldrb	r3, [r3, #10]
  4015f6:	2b00      	cmp	r3, #0
  4015f8:	d102      	bne.n	401600 <mpu_set_lpf+0x18>
        return -1;
  4015fa:	f04f 33ff 	mov.w	r3, #4294967295
  4015fe:	e03b      	b.n	401678 <mpu_set_lpf+0x90>

    if (lpf >= 188)
  401600:	88fb      	ldrh	r3, [r7, #6]
  401602:	2bbb      	cmp	r3, #187	; 0xbb
  401604:	d902      	bls.n	40160c <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
  401606:	2301      	movs	r3, #1
  401608:	73fb      	strb	r3, [r7, #15]
  40160a:	e019      	b.n	401640 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
  40160c:	88fb      	ldrh	r3, [r7, #6]
  40160e:	2b61      	cmp	r3, #97	; 0x61
  401610:	d902      	bls.n	401618 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
  401612:	2302      	movs	r3, #2
  401614:	73fb      	strb	r3, [r7, #15]
  401616:	e013      	b.n	401640 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
  401618:	88fb      	ldrh	r3, [r7, #6]
  40161a:	2b29      	cmp	r3, #41	; 0x29
  40161c:	d902      	bls.n	401624 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
  40161e:	2303      	movs	r3, #3
  401620:	73fb      	strb	r3, [r7, #15]
  401622:	e00d      	b.n	401640 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
  401624:	88fb      	ldrh	r3, [r7, #6]
  401626:	2b13      	cmp	r3, #19
  401628:	d902      	bls.n	401630 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
  40162a:	2304      	movs	r3, #4
  40162c:	73fb      	strb	r3, [r7, #15]
  40162e:	e007      	b.n	401640 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
  401630:	88fb      	ldrh	r3, [r7, #6]
  401632:	2b09      	cmp	r3, #9
  401634:	d902      	bls.n	40163c <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
  401636:	2305      	movs	r3, #5
  401638:	73fb      	strb	r3, [r7, #15]
  40163a:	e001      	b.n	401640 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
  40163c:	2306      	movs	r3, #6
  40163e:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
  401640:	4b0f      	ldr	r3, [pc, #60]	; (401680 <mpu_set_lpf+0x98>)
  401642:	7ada      	ldrb	r2, [r3, #11]
  401644:	7bfb      	ldrb	r3, [r7, #15]
  401646:	429a      	cmp	r2, r3
  401648:	d101      	bne.n	40164e <mpu_set_lpf+0x66>
        return 0;
  40164a:	2300      	movs	r3, #0
  40164c:	e014      	b.n	401678 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
  40164e:	4b0c      	ldr	r3, [pc, #48]	; (401680 <mpu_set_lpf+0x98>)
  401650:	685b      	ldr	r3, [r3, #4]
  401652:	7818      	ldrb	r0, [r3, #0]
  401654:	4b0a      	ldr	r3, [pc, #40]	; (401680 <mpu_set_lpf+0x98>)
  401656:	681b      	ldr	r3, [r3, #0]
  401658:	7899      	ldrb	r1, [r3, #2]
  40165a:	f107 030f 	add.w	r3, r7, #15
  40165e:	2201      	movs	r2, #1
  401660:	4c08      	ldr	r4, [pc, #32]	; (401684 <mpu_set_lpf+0x9c>)
  401662:	47a0      	blx	r4
  401664:	4603      	mov	r3, r0
  401666:	2b00      	cmp	r3, #0
  401668:	d002      	beq.n	401670 <mpu_set_lpf+0x88>
        return -1;
  40166a:	f04f 33ff 	mov.w	r3, #4294967295
  40166e:	e003      	b.n	401678 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
  401670:	7bfa      	ldrb	r2, [r7, #15]
  401672:	4b03      	ldr	r3, [pc, #12]	; (401680 <mpu_set_lpf+0x98>)
  401674:	72da      	strb	r2, [r3, #11]
    return 0;
  401676:	2300      	movs	r3, #0
}
  401678:	4618      	mov	r0, r3
  40167a:	3714      	adds	r7, #20
  40167c:	46bd      	mov	sp, r7
  40167e:	bd90      	pop	{r4, r7, pc}
  401680:	20000000 	.word	0x20000000
  401684:	0040391d 	.word	0x0040391d

00401688 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
  401688:	b480      	push	{r7}
  40168a:	b083      	sub	sp, #12
  40168c:	af00      	add	r7, sp, #0
  40168e:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
  401690:	4b08      	ldr	r3, [pc, #32]	; (4016b4 <mpu_get_sample_rate+0x2c>)
  401692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401696:	2b00      	cmp	r3, #0
  401698:	d002      	beq.n	4016a0 <mpu_get_sample_rate+0x18>
        return -1;
  40169a:	f04f 33ff 	mov.w	r3, #4294967295
  40169e:	e004      	b.n	4016aa <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
  4016a0:	4b04      	ldr	r3, [pc, #16]	; (4016b4 <mpu_get_sample_rate+0x2c>)
  4016a2:	89da      	ldrh	r2, [r3, #14]
  4016a4:	687b      	ldr	r3, [r7, #4]
  4016a6:	801a      	strh	r2, [r3, #0]
    return 0;
  4016a8:	2300      	movs	r3, #0
}
  4016aa:	4618      	mov	r0, r3
  4016ac:	370c      	adds	r7, #12
  4016ae:	46bd      	mov	sp, r7
  4016b0:	bc80      	pop	{r7}
  4016b2:	4770      	bx	lr
  4016b4:	20000000 	.word	0x20000000

004016b8 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
  4016b8:	b590      	push	{r4, r7, lr}
  4016ba:	b085      	sub	sp, #20
  4016bc:	af00      	add	r7, sp, #0
  4016be:	4603      	mov	r3, r0
  4016c0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
  4016c2:	4b34      	ldr	r3, [pc, #208]	; (401794 <mpu_set_sample_rate+0xdc>)
  4016c4:	7a9b      	ldrb	r3, [r3, #10]
  4016c6:	2b00      	cmp	r3, #0
  4016c8:	d102      	bne.n	4016d0 <mpu_set_sample_rate+0x18>
        return -1;
  4016ca:	f04f 33ff 	mov.w	r3, #4294967295
  4016ce:	e05c      	b.n	40178a <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
  4016d0:	4b30      	ldr	r3, [pc, #192]	; (401794 <mpu_set_sample_rate+0xdc>)
  4016d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4016d6:	2b00      	cmp	r3, #0
  4016d8:	d002      	beq.n	4016e0 <mpu_set_sample_rate+0x28>
        return -1;
  4016da:	f04f 33ff 	mov.w	r3, #4294967295
  4016de:	e054      	b.n	40178a <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
  4016e0:	4b2c      	ldr	r3, [pc, #176]	; (401794 <mpu_set_sample_rate+0xdc>)
  4016e2:	7d1b      	ldrb	r3, [r3, #20]
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	d00f      	beq.n	401708 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
  4016e8:	88fb      	ldrh	r3, [r7, #6]
  4016ea:	2b00      	cmp	r3, #0
  4016ec:	d009      	beq.n	401702 <mpu_set_sample_rate+0x4a>
  4016ee:	88fb      	ldrh	r3, [r7, #6]
  4016f0:	2b28      	cmp	r3, #40	; 0x28
  4016f2:	d806      	bhi.n	401702 <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
  4016f4:	88fb      	ldrh	r3, [r7, #6]
  4016f6:	b2db      	uxtb	r3, r3
  4016f8:	4618      	mov	r0, r3
  4016fa:	4b27      	ldr	r3, [pc, #156]	; (401798 <mpu_set_sample_rate+0xe0>)
  4016fc:	4798      	blx	r3
                return 0;
  4016fe:	2300      	movs	r3, #0
  401700:	e043      	b.n	40178a <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
  401702:	2000      	movs	r0, #0
  401704:	4b24      	ldr	r3, [pc, #144]	; (401798 <mpu_set_sample_rate+0xe0>)
  401706:	4798      	blx	r3
        }
        if (rate < 4)
  401708:	88fb      	ldrh	r3, [r7, #6]
  40170a:	2b03      	cmp	r3, #3
  40170c:	d802      	bhi.n	401714 <mpu_set_sample_rate+0x5c>
            rate = 4;
  40170e:	2304      	movs	r3, #4
  401710:	80fb      	strh	r3, [r7, #6]
  401712:	e006      	b.n	401722 <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
  401714:	88fb      	ldrh	r3, [r7, #6]
  401716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40171a:	d902      	bls.n	401722 <mpu_set_sample_rate+0x6a>
            rate = 1000;
  40171c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401720:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
  401722:	88fb      	ldrh	r3, [r7, #6]
  401724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401728:	fb92 f3f3 	sdiv	r3, r2, r3
  40172c:	b2db      	uxtb	r3, r3
  40172e:	3b01      	subs	r3, #1
  401730:	b2db      	uxtb	r3, r3
  401732:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
  401734:	4b17      	ldr	r3, [pc, #92]	; (401794 <mpu_set_sample_rate+0xdc>)
  401736:	685b      	ldr	r3, [r3, #4]
  401738:	7818      	ldrb	r0, [r3, #0]
  40173a:	4b16      	ldr	r3, [pc, #88]	; (401794 <mpu_set_sample_rate+0xdc>)
  40173c:	681b      	ldr	r3, [r3, #0]
  40173e:	7859      	ldrb	r1, [r3, #1]
  401740:	f107 030f 	add.w	r3, r7, #15
  401744:	2201      	movs	r2, #1
  401746:	4c15      	ldr	r4, [pc, #84]	; (40179c <mpu_set_sample_rate+0xe4>)
  401748:	47a0      	blx	r4
  40174a:	4603      	mov	r3, r0
  40174c:	2b00      	cmp	r3, #0
  40174e:	d002      	beq.n	401756 <mpu_set_sample_rate+0x9e>
            return -1;
  401750:	f04f 33ff 	mov.w	r3, #4294967295
  401754:	e019      	b.n	40178a <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
  401756:	7bfb      	ldrb	r3, [r7, #15]
  401758:	3301      	adds	r3, #1
  40175a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40175e:	fb92 f3f3 	sdiv	r3, r2, r3
  401762:	b29a      	uxth	r2, r3
  401764:	4b0b      	ldr	r3, [pc, #44]	; (401794 <mpu_set_sample_rate+0xdc>)
  401766:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
  401768:	4b0a      	ldr	r3, [pc, #40]	; (401794 <mpu_set_sample_rate+0xdc>)
  40176a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  40176c:	2b64      	cmp	r3, #100	; 0x64
  40176e:	bf28      	it	cs
  401770:	2364      	movcs	r3, #100	; 0x64
  401772:	b29b      	uxth	r3, r3
  401774:	4618      	mov	r0, r3
  401776:	4b0a      	ldr	r3, [pc, #40]	; (4017a0 <mpu_set_sample_rate+0xe8>)
  401778:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
  40177a:	4b06      	ldr	r3, [pc, #24]	; (401794 <mpu_set_sample_rate+0xdc>)
  40177c:	89db      	ldrh	r3, [r3, #14]
  40177e:	085b      	lsrs	r3, r3, #1
  401780:	b29b      	uxth	r3, r3
  401782:	4618      	mov	r0, r3
  401784:	4b07      	ldr	r3, [pc, #28]	; (4017a4 <mpu_set_sample_rate+0xec>)
  401786:	4798      	blx	r3
        return 0;
  401788:	2300      	movs	r3, #0
    }
}
  40178a:	4618      	mov	r0, r3
  40178c:	3714      	adds	r7, #20
  40178e:	46bd      	mov	sp, r7
  401790:	bd90      	pop	{r4, r7, pc}
  401792:	bf00      	nop
  401794:	20000000 	.word	0x20000000
  401798:	00401045 	.word	0x00401045
  40179c:	0040391d 	.word	0x0040391d
  4017a0:	004017a9 	.word	0x004017a9
  4017a4:	004015e9 	.word	0x004015e9

004017a8 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
  4017a8:	b590      	push	{r4, r7, lr}
  4017aa:	b085      	sub	sp, #20
  4017ac:	af00      	add	r7, sp, #0
  4017ae:	4603      	mov	r3, r0
  4017b0:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
  4017b2:	88fb      	ldrh	r3, [r7, #6]
  4017b4:	2b00      	cmp	r3, #0
  4017b6:	d007      	beq.n	4017c8 <mpu_set_compass_sample_rate+0x20>
  4017b8:	4b1a      	ldr	r3, [pc, #104]	; (401824 <mpu_set_compass_sample_rate+0x7c>)
  4017ba:	89db      	ldrh	r3, [r3, #14]
  4017bc:	88fa      	ldrh	r2, [r7, #6]
  4017be:	429a      	cmp	r2, r3
  4017c0:	d802      	bhi.n	4017c8 <mpu_set_compass_sample_rate+0x20>
  4017c2:	88fb      	ldrh	r3, [r7, #6]
  4017c4:	2b64      	cmp	r3, #100	; 0x64
  4017c6:	d902      	bls.n	4017ce <mpu_set_compass_sample_rate+0x26>
        return -1;
  4017c8:	f04f 33ff 	mov.w	r3, #4294967295
  4017cc:	e026      	b.n	40181c <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
  4017ce:	4b15      	ldr	r3, [pc, #84]	; (401824 <mpu_set_compass_sample_rate+0x7c>)
  4017d0:	89da      	ldrh	r2, [r3, #14]
  4017d2:	88fb      	ldrh	r3, [r7, #6]
  4017d4:	fbb2 f3f3 	udiv	r3, r2, r3
  4017d8:	b29b      	uxth	r3, r3
  4017da:	b2db      	uxtb	r3, r3
  4017dc:	3b01      	subs	r3, #1
  4017de:	b2db      	uxtb	r3, r3
  4017e0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
  4017e2:	4b10      	ldr	r3, [pc, #64]	; (401824 <mpu_set_compass_sample_rate+0x7c>)
  4017e4:	685b      	ldr	r3, [r3, #4]
  4017e6:	7818      	ldrb	r0, [r3, #0]
  4017e8:	4b0e      	ldr	r3, [pc, #56]	; (401824 <mpu_set_compass_sample_rate+0x7c>)
  4017ea:	681b      	ldr	r3, [r3, #0]
  4017ec:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
  4017f0:	f107 030f 	add.w	r3, r7, #15
  4017f4:	2201      	movs	r2, #1
  4017f6:	4c0c      	ldr	r4, [pc, #48]	; (401828 <mpu_set_compass_sample_rate+0x80>)
  4017f8:	47a0      	blx	r4
  4017fa:	4603      	mov	r3, r0
  4017fc:	2b00      	cmp	r3, #0
  4017fe:	d002      	beq.n	401806 <mpu_set_compass_sample_rate+0x5e>
        return -1;
  401800:	f04f 33ff 	mov.w	r3, #4294967295
  401804:	e00a      	b.n	40181c <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
  401806:	4b07      	ldr	r3, [pc, #28]	; (401824 <mpu_set_compass_sample_rate+0x7c>)
  401808:	89db      	ldrh	r3, [r3, #14]
  40180a:	461a      	mov	r2, r3
  40180c:	7bfb      	ldrb	r3, [r7, #15]
  40180e:	3301      	adds	r3, #1
  401810:	fb92 f3f3 	sdiv	r3, r2, r3
  401814:	b29a      	uxth	r2, r3
  401816:	4b03      	ldr	r3, [pc, #12]	; (401824 <mpu_set_compass_sample_rate+0x7c>)
  401818:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
  40181a:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
  40181c:	4618      	mov	r0, r3
  40181e:	3714      	adds	r7, #20
  401820:	46bd      	mov	sp, r7
  401822:	bd90      	pop	{r4, r7, pc}
  401824:	20000000 	.word	0x20000000
  401828:	0040391d 	.word	0x0040391d

0040182c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
  40182c:	b580      	push	{r7, lr}
  40182e:	b084      	sub	sp, #16
  401830:	af00      	add	r7, sp, #0
  401832:	4603      	mov	r3, r0
  401834:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
  401836:	2300      	movs	r3, #0
  401838:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
  40183a:	79fb      	ldrb	r3, [r7, #7]
  40183c:	f023 0301 	bic.w	r3, r3, #1
  401840:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
  401842:	4b22      	ldr	r3, [pc, #136]	; (4018cc <mpu_configure_fifo+0xa0>)
  401844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401848:	2b00      	cmp	r3, #0
  40184a:	d001      	beq.n	401850 <mpu_configure_fifo+0x24>
        return 0;
  40184c:	2300      	movs	r3, #0
  40184e:	e038      	b.n	4018c2 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
  401850:	4b1e      	ldr	r3, [pc, #120]	; (4018cc <mpu_configure_fifo+0xa0>)
  401852:	7a9b      	ldrb	r3, [r3, #10]
  401854:	2b00      	cmp	r3, #0
  401856:	d102      	bne.n	40185e <mpu_configure_fifo+0x32>
            return -1;
  401858:	f04f 33ff 	mov.w	r3, #4294967295
  40185c:	e031      	b.n	4018c2 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
  40185e:	4b1b      	ldr	r3, [pc, #108]	; (4018cc <mpu_configure_fifo+0xa0>)
  401860:	7c1b      	ldrb	r3, [r3, #16]
  401862:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
  401864:	4b19      	ldr	r3, [pc, #100]	; (4018cc <mpu_configure_fifo+0xa0>)
  401866:	7a9a      	ldrb	r2, [r3, #10]
  401868:	79fb      	ldrb	r3, [r7, #7]
  40186a:	4013      	ands	r3, r2
  40186c:	b2da      	uxtb	r2, r3
  40186e:	4b17      	ldr	r3, [pc, #92]	; (4018cc <mpu_configure_fifo+0xa0>)
  401870:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
  401872:	4b16      	ldr	r3, [pc, #88]	; (4018cc <mpu_configure_fifo+0xa0>)
  401874:	7c1b      	ldrb	r3, [r3, #16]
  401876:	79fa      	ldrb	r2, [r7, #7]
  401878:	429a      	cmp	r2, r3
  40187a:	d003      	beq.n	401884 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
  40187c:	f04f 33ff 	mov.w	r3, #4294967295
  401880:	60fb      	str	r3, [r7, #12]
  401882:	e001      	b.n	401888 <mpu_configure_fifo+0x5c>
        else
            result = 0;
  401884:	2300      	movs	r3, #0
  401886:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
  401888:	79fb      	ldrb	r3, [r7, #7]
  40188a:	2b00      	cmp	r3, #0
  40188c:	d103      	bne.n	401896 <mpu_configure_fifo+0x6a>
  40188e:	4b0f      	ldr	r3, [pc, #60]	; (4018cc <mpu_configure_fifo+0xa0>)
  401890:	7d1b      	ldrb	r3, [r3, #20]
  401892:	2b00      	cmp	r3, #0
  401894:	d003      	beq.n	40189e <mpu_configure_fifo+0x72>
            set_int_enable(1);
  401896:	2001      	movs	r0, #1
  401898:	4b0d      	ldr	r3, [pc, #52]	; (4018d0 <mpu_configure_fifo+0xa4>)
  40189a:	4798      	blx	r3
  40189c:	e002      	b.n	4018a4 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
  40189e:	2000      	movs	r0, #0
  4018a0:	4b0b      	ldr	r3, [pc, #44]	; (4018d0 <mpu_configure_fifo+0xa4>)
  4018a2:	4798      	blx	r3
        if (sensors) {
  4018a4:	79fb      	ldrb	r3, [r7, #7]
  4018a6:	2b00      	cmp	r3, #0
  4018a8:	d00a      	beq.n	4018c0 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
  4018aa:	4b0a      	ldr	r3, [pc, #40]	; (4018d4 <mpu_configure_fifo+0xa8>)
  4018ac:	4798      	blx	r3
  4018ae:	4603      	mov	r3, r0
  4018b0:	2b00      	cmp	r3, #0
  4018b2:	d005      	beq.n	4018c0 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
  4018b4:	4a05      	ldr	r2, [pc, #20]	; (4018cc <mpu_configure_fifo+0xa0>)
  4018b6:	7afb      	ldrb	r3, [r7, #11]
  4018b8:	7413      	strb	r3, [r2, #16]
                return -1;
  4018ba:	f04f 33ff 	mov.w	r3, #4294967295
  4018be:	e000      	b.n	4018c2 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
  4018c0:	68fb      	ldr	r3, [r7, #12]
}
  4018c2:	4618      	mov	r0, r3
  4018c4:	3710      	adds	r7, #16
  4018c6:	46bd      	mov	sp, r7
  4018c8:	bd80      	pop	{r7, pc}
  4018ca:	bf00      	nop
  4018cc:	20000000 	.word	0x20000000
  4018d0:	00400dc9 	.word	0x00400dc9
  4018d4:	00401181 	.word	0x00401181

004018d8 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
  4018d8:	b590      	push	{r4, r7, lr}
  4018da:	b085      	sub	sp, #20
  4018dc:	af00      	add	r7, sp, #0
  4018de:	4603      	mov	r3, r0
  4018e0:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
  4018e2:	79fb      	ldrb	r3, [r7, #7]
  4018e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018e8:	2b00      	cmp	r3, #0
  4018ea:	d002      	beq.n	4018f2 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
  4018ec:	2301      	movs	r3, #1
  4018ee:	73fb      	strb	r3, [r7, #15]
  4018f0:	e007      	b.n	401902 <mpu_set_sensors+0x2a>
    else if (sensors)
  4018f2:	79fb      	ldrb	r3, [r7, #7]
  4018f4:	2b00      	cmp	r3, #0
  4018f6:	d002      	beq.n	4018fe <mpu_set_sensors+0x26>
        data = 0;
  4018f8:	2300      	movs	r3, #0
  4018fa:	73fb      	strb	r3, [r7, #15]
  4018fc:	e001      	b.n	401902 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
  4018fe:	2340      	movs	r3, #64	; 0x40
  401900:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
  401902:	4b63      	ldr	r3, [pc, #396]	; (401a90 <mpu_set_sensors+0x1b8>)
  401904:	685b      	ldr	r3, [r3, #4]
  401906:	7818      	ldrb	r0, [r3, #0]
  401908:	4b61      	ldr	r3, [pc, #388]	; (401a90 <mpu_set_sensors+0x1b8>)
  40190a:	681b      	ldr	r3, [r3, #0]
  40190c:	7d59      	ldrb	r1, [r3, #21]
  40190e:	f107 030f 	add.w	r3, r7, #15
  401912:	2201      	movs	r2, #1
  401914:	4c5f      	ldr	r4, [pc, #380]	; (401a94 <mpu_set_sensors+0x1bc>)
  401916:	47a0      	blx	r4
  401918:	4603      	mov	r3, r0
  40191a:	2b00      	cmp	r3, #0
  40191c:	d005      	beq.n	40192a <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
  40191e:	4b5c      	ldr	r3, [pc, #368]	; (401a90 <mpu_set_sensors+0x1b8>)
  401920:	2200      	movs	r2, #0
  401922:	729a      	strb	r2, [r3, #10]
        return -1;
  401924:	f04f 33ff 	mov.w	r3, #4294967295
  401928:	e0ae      	b.n	401a88 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
  40192a:	7bfb      	ldrb	r3, [r7, #15]
  40192c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  401930:	b2da      	uxtb	r2, r3
  401932:	4b57      	ldr	r3, [pc, #348]	; (401a90 <mpu_set_sensors+0x1b8>)
  401934:	731a      	strb	r2, [r3, #12]

    data = 0;
  401936:	2300      	movs	r3, #0
  401938:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
  40193a:	79fb      	ldrb	r3, [r7, #7]
  40193c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401940:	2b00      	cmp	r3, #0
  401942:	d104      	bne.n	40194e <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
  401944:	7bfb      	ldrb	r3, [r7, #15]
  401946:	f043 0304 	orr.w	r3, r3, #4
  40194a:	b2db      	uxtb	r3, r3
  40194c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
  40194e:	79fb      	ldrb	r3, [r7, #7]
  401950:	f003 0320 	and.w	r3, r3, #32
  401954:	2b00      	cmp	r3, #0
  401956:	d104      	bne.n	401962 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
  401958:	7bfb      	ldrb	r3, [r7, #15]
  40195a:	f043 0302 	orr.w	r3, r3, #2
  40195e:	b2db      	uxtb	r3, r3
  401960:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
  401962:	79fb      	ldrb	r3, [r7, #7]
  401964:	f003 0310 	and.w	r3, r3, #16
  401968:	2b00      	cmp	r3, #0
  40196a:	d104      	bne.n	401976 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
  40196c:	7bfb      	ldrb	r3, [r7, #15]
  40196e:	f043 0301 	orr.w	r3, r3, #1
  401972:	b2db      	uxtb	r3, r3
  401974:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
  401976:	79fb      	ldrb	r3, [r7, #7]
  401978:	f003 0308 	and.w	r3, r3, #8
  40197c:	2b00      	cmp	r3, #0
  40197e:	d104      	bne.n	40198a <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
  401980:	7bfb      	ldrb	r3, [r7, #15]
  401982:	f043 0338 	orr.w	r3, r3, #56	; 0x38
  401986:	b2db      	uxtb	r3, r3
  401988:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
  40198a:	4b41      	ldr	r3, [pc, #260]	; (401a90 <mpu_set_sensors+0x1b8>)
  40198c:	685b      	ldr	r3, [r3, #4]
  40198e:	7818      	ldrb	r0, [r3, #0]
  401990:	4b3f      	ldr	r3, [pc, #252]	; (401a90 <mpu_set_sensors+0x1b8>)
  401992:	681b      	ldr	r3, [r3, #0]
  401994:	7d99      	ldrb	r1, [r3, #22]
  401996:	f107 030f 	add.w	r3, r7, #15
  40199a:	2201      	movs	r2, #1
  40199c:	4c3d      	ldr	r4, [pc, #244]	; (401a94 <mpu_set_sensors+0x1bc>)
  40199e:	47a0      	blx	r4
  4019a0:	4603      	mov	r3, r0
  4019a2:	2b00      	cmp	r3, #0
  4019a4:	d005      	beq.n	4019b2 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
  4019a6:	4b3a      	ldr	r3, [pc, #232]	; (401a90 <mpu_set_sensors+0x1b8>)
  4019a8:	2200      	movs	r2, #0
  4019aa:	729a      	strb	r2, [r3, #10]
        return -1;
  4019ac:	f04f 33ff 	mov.w	r3, #4294967295
  4019b0:	e06a      	b.n	401a88 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
  4019b2:	79fb      	ldrb	r3, [r7, #7]
  4019b4:	2b00      	cmp	r3, #0
  4019b6:	d005      	beq.n	4019c4 <mpu_set_sensors+0xec>
  4019b8:	79fb      	ldrb	r3, [r7, #7]
  4019ba:	2b08      	cmp	r3, #8
  4019bc:	d002      	beq.n	4019c4 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
  4019be:	2000      	movs	r0, #0
  4019c0:	4b35      	ldr	r3, [pc, #212]	; (401a98 <mpu_set_sensors+0x1c0>)
  4019c2:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
  4019c4:	4b32      	ldr	r3, [pc, #200]	; (401a90 <mpu_set_sensors+0x1b8>)
  4019c6:	685b      	ldr	r3, [r3, #4]
  4019c8:	7818      	ldrb	r0, [r3, #0]
  4019ca:	4b31      	ldr	r3, [pc, #196]	; (401a90 <mpu_set_sensors+0x1b8>)
  4019cc:	681b      	ldr	r3, [r3, #0]
  4019ce:	7919      	ldrb	r1, [r3, #4]
  4019d0:	f107 030e 	add.w	r3, r7, #14
  4019d4:	2201      	movs	r2, #1
  4019d6:	4c31      	ldr	r4, [pc, #196]	; (401a9c <mpu_set_sensors+0x1c4>)
  4019d8:	47a0      	blx	r4
  4019da:	4603      	mov	r3, r0
  4019dc:	2b00      	cmp	r3, #0
  4019de:	d002      	beq.n	4019e6 <mpu_set_sensors+0x10e>
        return -1;
  4019e0:	f04f 33ff 	mov.w	r3, #4294967295
  4019e4:	e050      	b.n	401a88 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
  4019e6:	79fb      	ldrb	r3, [r7, #7]
  4019e8:	f003 0301 	and.w	r3, r3, #1
  4019ec:	2b00      	cmp	r3, #0
  4019ee:	d007      	beq.n	401a00 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
  4019f0:	2311      	movs	r3, #17
  4019f2:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
  4019f4:	7bbb      	ldrb	r3, [r7, #14]
  4019f6:	f043 0320 	orr.w	r3, r3, #32
  4019fa:	b2db      	uxtb	r3, r3
  4019fc:	73bb      	strb	r3, [r7, #14]
  4019fe:	e006      	b.n	401a0e <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
  401a00:	2310      	movs	r3, #16
  401a02:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
  401a04:	7bbb      	ldrb	r3, [r7, #14]
  401a06:	f023 0320 	bic.w	r3, r3, #32
  401a0a:	b2db      	uxtb	r3, r3
  401a0c:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
  401a0e:	4b20      	ldr	r3, [pc, #128]	; (401a90 <mpu_set_sensors+0x1b8>)
  401a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401a14:	2b00      	cmp	r3, #0
  401a16:	d005      	beq.n	401a24 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
  401a18:	7bbb      	ldrb	r3, [r7, #14]
  401a1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401a1e:	b2db      	uxtb	r3, r3
  401a20:	73bb      	strb	r3, [r7, #14]
  401a22:	e004      	b.n	401a2e <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
  401a24:	7bbb      	ldrb	r3, [r7, #14]
  401a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401a2a:	b2db      	uxtb	r3, r3
  401a2c:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
  401a2e:	4b18      	ldr	r3, [pc, #96]	; (401a90 <mpu_set_sensors+0x1b8>)
  401a30:	685b      	ldr	r3, [r3, #4]
  401a32:	7818      	ldrb	r0, [r3, #0]
  401a34:	4b16      	ldr	r3, [pc, #88]	; (401a90 <mpu_set_sensors+0x1b8>)
  401a36:	681b      	ldr	r3, [r3, #0]
  401a38:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
  401a3c:	f107 030f 	add.w	r3, r7, #15
  401a40:	2201      	movs	r2, #1
  401a42:	4c14      	ldr	r4, [pc, #80]	; (401a94 <mpu_set_sensors+0x1bc>)
  401a44:	47a0      	blx	r4
  401a46:	4603      	mov	r3, r0
  401a48:	2b00      	cmp	r3, #0
  401a4a:	d002      	beq.n	401a52 <mpu_set_sensors+0x17a>
        return -1;
  401a4c:	f04f 33ff 	mov.w	r3, #4294967295
  401a50:	e01a      	b.n	401a88 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
  401a52:	4b0f      	ldr	r3, [pc, #60]	; (401a90 <mpu_set_sensors+0x1b8>)
  401a54:	685b      	ldr	r3, [r3, #4]
  401a56:	7818      	ldrb	r0, [r3, #0]
  401a58:	4b0d      	ldr	r3, [pc, #52]	; (401a90 <mpu_set_sensors+0x1b8>)
  401a5a:	681b      	ldr	r3, [r3, #0]
  401a5c:	7919      	ldrb	r1, [r3, #4]
  401a5e:	f107 030e 	add.w	r3, r7, #14
  401a62:	2201      	movs	r2, #1
  401a64:	4c0b      	ldr	r4, [pc, #44]	; (401a94 <mpu_set_sensors+0x1bc>)
  401a66:	47a0      	blx	r4
  401a68:	4603      	mov	r3, r0
  401a6a:	2b00      	cmp	r3, #0
  401a6c:	d002      	beq.n	401a74 <mpu_set_sensors+0x19c>
        return -1;
  401a6e:	f04f 33ff 	mov.w	r3, #4294967295
  401a72:	e009      	b.n	401a88 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
  401a74:	4a06      	ldr	r2, [pc, #24]	; (401a90 <mpu_set_sensors+0x1b8>)
  401a76:	79fb      	ldrb	r3, [r7, #7]
  401a78:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
  401a7a:	4b05      	ldr	r3, [pc, #20]	; (401a90 <mpu_set_sensors+0x1b8>)
  401a7c:	2200      	movs	r2, #0
  401a7e:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
  401a80:	2032      	movs	r0, #50	; 0x32
  401a82:	4b07      	ldr	r3, [pc, #28]	; (401aa0 <mpu_set_sensors+0x1c8>)
  401a84:	4798      	blx	r3
    return 0;
  401a86:	2300      	movs	r3, #0
}
  401a88:	4618      	mov	r0, r3
  401a8a:	3714      	adds	r7, #20
  401a8c:	46bd      	mov	sp, r7
  401a8e:	bd90      	pop	{r4, r7, pc}
  401a90:	20000000 	.word	0x20000000
  401a94:	0040391d 	.word	0x0040391d
  401a98:	00401c3d 	.word	0x00401c3d
  401a9c:	004039d9 	.word	0x004039d9
  401aa0:	004038ed 	.word	0x004038ed

00401aa4 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
  401aa4:	b590      	push	{r4, r7, lr}
  401aa6:	b085      	sub	sp, #20
  401aa8:	af00      	add	r7, sp, #0
  401aaa:	4603      	mov	r3, r0
  401aac:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
  401aae:	4b5f      	ldr	r3, [pc, #380]	; (401c2c <mpu_set_bypass+0x188>)
  401ab0:	7c9b      	ldrb	r3, [r3, #18]
  401ab2:	79fa      	ldrb	r2, [r7, #7]
  401ab4:	429a      	cmp	r2, r3
  401ab6:	d101      	bne.n	401abc <mpu_set_bypass+0x18>
        return 0;
  401ab8:	2300      	movs	r3, #0
  401aba:	e0b2      	b.n	401c22 <mpu_set_bypass+0x17e>

    if (bypass_on) {
  401abc:	79fb      	ldrb	r3, [r7, #7]
  401abe:	2b00      	cmp	r3, #0
  401ac0:	d050      	beq.n	401b64 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401ac2:	4b5a      	ldr	r3, [pc, #360]	; (401c2c <mpu_set_bypass+0x188>)
  401ac4:	685b      	ldr	r3, [r3, #4]
  401ac6:	7818      	ldrb	r0, [r3, #0]
  401ac8:	4b58      	ldr	r3, [pc, #352]	; (401c2c <mpu_set_bypass+0x188>)
  401aca:	681b      	ldr	r3, [r3, #0]
  401acc:	7919      	ldrb	r1, [r3, #4]
  401ace:	f107 030f 	add.w	r3, r7, #15
  401ad2:	2201      	movs	r2, #1
  401ad4:	4c56      	ldr	r4, [pc, #344]	; (401c30 <mpu_set_bypass+0x18c>)
  401ad6:	47a0      	blx	r4
  401ad8:	4603      	mov	r3, r0
  401ada:	2b00      	cmp	r3, #0
  401adc:	d002      	beq.n	401ae4 <mpu_set_bypass+0x40>
            return -1;
  401ade:	f04f 33ff 	mov.w	r3, #4294967295
  401ae2:	e09e      	b.n	401c22 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
  401ae4:	7bfb      	ldrb	r3, [r7, #15]
  401ae6:	f023 0320 	bic.w	r3, r3, #32
  401aea:	b2db      	uxtb	r3, r3
  401aec:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401aee:	4b4f      	ldr	r3, [pc, #316]	; (401c2c <mpu_set_bypass+0x188>)
  401af0:	685b      	ldr	r3, [r3, #4]
  401af2:	7818      	ldrb	r0, [r3, #0]
  401af4:	4b4d      	ldr	r3, [pc, #308]	; (401c2c <mpu_set_bypass+0x188>)
  401af6:	681b      	ldr	r3, [r3, #0]
  401af8:	7919      	ldrb	r1, [r3, #4]
  401afa:	f107 030f 	add.w	r3, r7, #15
  401afe:	2201      	movs	r2, #1
  401b00:	4c4c      	ldr	r4, [pc, #304]	; (401c34 <mpu_set_bypass+0x190>)
  401b02:	47a0      	blx	r4
  401b04:	4603      	mov	r3, r0
  401b06:	2b00      	cmp	r3, #0
  401b08:	d002      	beq.n	401b10 <mpu_set_bypass+0x6c>
            return -1;
  401b0a:	f04f 33ff 	mov.w	r3, #4294967295
  401b0e:	e088      	b.n	401c22 <mpu_set_bypass+0x17e>
        delay_ms(3);
  401b10:	2003      	movs	r0, #3
  401b12:	4b49      	ldr	r3, [pc, #292]	; (401c38 <mpu_set_bypass+0x194>)
  401b14:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
  401b16:	2302      	movs	r3, #2
  401b18:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
  401b1a:	4b44      	ldr	r3, [pc, #272]	; (401c2c <mpu_set_bypass+0x188>)
  401b1c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401b20:	2b00      	cmp	r3, #0
  401b22:	d004      	beq.n	401b2e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
  401b24:	7bfb      	ldrb	r3, [r7, #15]
  401b26:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401b2a:	b2db      	uxtb	r3, r3
  401b2c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
  401b2e:	4b3f      	ldr	r3, [pc, #252]	; (401c2c <mpu_set_bypass+0x188>)
  401b30:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401b34:	2b00      	cmp	r3, #0
  401b36:	d004      	beq.n	401b42 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401b38:	7bfb      	ldrb	r3, [r7, #15]
  401b3a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401b3e:	b2db      	uxtb	r3, r3
  401b40:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401b42:	4b3a      	ldr	r3, [pc, #232]	; (401c2c <mpu_set_bypass+0x188>)
  401b44:	685b      	ldr	r3, [r3, #4]
  401b46:	7818      	ldrb	r0, [r3, #0]
  401b48:	4b38      	ldr	r3, [pc, #224]	; (401c2c <mpu_set_bypass+0x188>)
  401b4a:	681b      	ldr	r3, [r3, #0]
  401b4c:	7dd9      	ldrb	r1, [r3, #23]
  401b4e:	f107 030f 	add.w	r3, r7, #15
  401b52:	2201      	movs	r2, #1
  401b54:	4c37      	ldr	r4, [pc, #220]	; (401c34 <mpu_set_bypass+0x190>)
  401b56:	47a0      	blx	r4
  401b58:	4603      	mov	r3, r0
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d05d      	beq.n	401c1a <mpu_set_bypass+0x176>
            return -1;
  401b5e:	f04f 33ff 	mov.w	r3, #4294967295
  401b62:	e05e      	b.n	401c22 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401b64:	4b31      	ldr	r3, [pc, #196]	; (401c2c <mpu_set_bypass+0x188>)
  401b66:	685b      	ldr	r3, [r3, #4]
  401b68:	7818      	ldrb	r0, [r3, #0]
  401b6a:	4b30      	ldr	r3, [pc, #192]	; (401c2c <mpu_set_bypass+0x188>)
  401b6c:	681b      	ldr	r3, [r3, #0]
  401b6e:	7919      	ldrb	r1, [r3, #4]
  401b70:	f107 030f 	add.w	r3, r7, #15
  401b74:	2201      	movs	r2, #1
  401b76:	4c2e      	ldr	r4, [pc, #184]	; (401c30 <mpu_set_bypass+0x18c>)
  401b78:	47a0      	blx	r4
  401b7a:	4603      	mov	r3, r0
  401b7c:	2b00      	cmp	r3, #0
  401b7e:	d002      	beq.n	401b86 <mpu_set_bypass+0xe2>
            return -1;
  401b80:	f04f 33ff 	mov.w	r3, #4294967295
  401b84:	e04d      	b.n	401c22 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
  401b86:	4b29      	ldr	r3, [pc, #164]	; (401c2c <mpu_set_bypass+0x188>)
  401b88:	7a9b      	ldrb	r3, [r3, #10]
  401b8a:	f003 0301 	and.w	r3, r3, #1
  401b8e:	2b00      	cmp	r3, #0
  401b90:	d005      	beq.n	401b9e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
  401b92:	7bfb      	ldrb	r3, [r7, #15]
  401b94:	f043 0320 	orr.w	r3, r3, #32
  401b98:	b2db      	uxtb	r3, r3
  401b9a:	73fb      	strb	r3, [r7, #15]
  401b9c:	e004      	b.n	401ba8 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
  401b9e:	7bfb      	ldrb	r3, [r7, #15]
  401ba0:	f023 0320 	bic.w	r3, r3, #32
  401ba4:	b2db      	uxtb	r3, r3
  401ba6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
  401ba8:	4b20      	ldr	r3, [pc, #128]	; (401c2c <mpu_set_bypass+0x188>)
  401baa:	685b      	ldr	r3, [r3, #4]
  401bac:	7818      	ldrb	r0, [r3, #0]
  401bae:	4b1f      	ldr	r3, [pc, #124]	; (401c2c <mpu_set_bypass+0x188>)
  401bb0:	681b      	ldr	r3, [r3, #0]
  401bb2:	7919      	ldrb	r1, [r3, #4]
  401bb4:	f107 030f 	add.w	r3, r7, #15
  401bb8:	2201      	movs	r2, #1
  401bba:	4c1e      	ldr	r4, [pc, #120]	; (401c34 <mpu_set_bypass+0x190>)
  401bbc:	47a0      	blx	r4
  401bbe:	4603      	mov	r3, r0
  401bc0:	2b00      	cmp	r3, #0
  401bc2:	d002      	beq.n	401bca <mpu_set_bypass+0x126>
            return -1;
  401bc4:	f04f 33ff 	mov.w	r3, #4294967295
  401bc8:	e02b      	b.n	401c22 <mpu_set_bypass+0x17e>
        delay_ms(3);
  401bca:	2003      	movs	r0, #3
  401bcc:	4b1a      	ldr	r3, [pc, #104]	; (401c38 <mpu_set_bypass+0x194>)
  401bce:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
  401bd0:	4b16      	ldr	r3, [pc, #88]	; (401c2c <mpu_set_bypass+0x188>)
  401bd2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401bd6:	2b00      	cmp	r3, #0
  401bd8:	d002      	beq.n	401be0 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
  401bda:	2380      	movs	r3, #128	; 0x80
  401bdc:	73fb      	strb	r3, [r7, #15]
  401bde:	e001      	b.n	401be4 <mpu_set_bypass+0x140>
        else
            tmp = 0;
  401be0:	2300      	movs	r3, #0
  401be2:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
  401be4:	4b11      	ldr	r3, [pc, #68]	; (401c2c <mpu_set_bypass+0x188>)
  401be6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401bea:	2b00      	cmp	r3, #0
  401bec:	d004      	beq.n	401bf8 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401bee:	7bfb      	ldrb	r3, [r7, #15]
  401bf0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401bf4:	b2db      	uxtb	r3, r3
  401bf6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401bf8:	4b0c      	ldr	r3, [pc, #48]	; (401c2c <mpu_set_bypass+0x188>)
  401bfa:	685b      	ldr	r3, [r3, #4]
  401bfc:	7818      	ldrb	r0, [r3, #0]
  401bfe:	4b0b      	ldr	r3, [pc, #44]	; (401c2c <mpu_set_bypass+0x188>)
  401c00:	681b      	ldr	r3, [r3, #0]
  401c02:	7dd9      	ldrb	r1, [r3, #23]
  401c04:	f107 030f 	add.w	r3, r7, #15
  401c08:	2201      	movs	r2, #1
  401c0a:	4c0a      	ldr	r4, [pc, #40]	; (401c34 <mpu_set_bypass+0x190>)
  401c0c:	47a0      	blx	r4
  401c0e:	4603      	mov	r3, r0
  401c10:	2b00      	cmp	r3, #0
  401c12:	d002      	beq.n	401c1a <mpu_set_bypass+0x176>
            return -1;
  401c14:	f04f 33ff 	mov.w	r3, #4294967295
  401c18:	e003      	b.n	401c22 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
  401c1a:	4a04      	ldr	r2, [pc, #16]	; (401c2c <mpu_set_bypass+0x188>)
  401c1c:	79fb      	ldrb	r3, [r7, #7]
  401c1e:	7493      	strb	r3, [r2, #18]
    return 0;
  401c20:	2300      	movs	r3, #0
}
  401c22:	4618      	mov	r0, r3
  401c24:	3714      	adds	r7, #20
  401c26:	46bd      	mov	sp, r7
  401c28:	bd90      	pop	{r4, r7, pc}
  401c2a:	bf00      	nop
  401c2c:	20000000 	.word	0x20000000
  401c30:	004039d9 	.word	0x004039d9
  401c34:	0040391d 	.word	0x0040391d
  401c38:	004038ed 	.word	0x004038ed

00401c3c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
  401c3c:	b590      	push	{r4, r7, lr}
  401c3e:	b085      	sub	sp, #20
  401c40:	af00      	add	r7, sp, #0
  401c42:	4603      	mov	r3, r0
  401c44:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
  401c46:	4b1e      	ldr	r3, [pc, #120]	; (401cc0 <mpu_set_int_latched+0x84>)
  401c48:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401c4c:	79fa      	ldrb	r2, [r7, #7]
  401c4e:	429a      	cmp	r2, r3
  401c50:	d101      	bne.n	401c56 <mpu_set_int_latched+0x1a>
        return 0;
  401c52:	2300      	movs	r3, #0
  401c54:	e030      	b.n	401cb8 <mpu_set_int_latched+0x7c>

    if (enable)
  401c56:	79fb      	ldrb	r3, [r7, #7]
  401c58:	2b00      	cmp	r3, #0
  401c5a:	d002      	beq.n	401c62 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
  401c5c:	2330      	movs	r3, #48	; 0x30
  401c5e:	73fb      	strb	r3, [r7, #15]
  401c60:	e001      	b.n	401c66 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
  401c62:	2300      	movs	r3, #0
  401c64:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
  401c66:	4b16      	ldr	r3, [pc, #88]	; (401cc0 <mpu_set_int_latched+0x84>)
  401c68:	7c9b      	ldrb	r3, [r3, #18]
  401c6a:	2b00      	cmp	r3, #0
  401c6c:	d004      	beq.n	401c78 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
  401c6e:	7bfb      	ldrb	r3, [r7, #15]
  401c70:	f043 0302 	orr.w	r3, r3, #2
  401c74:	b2db      	uxtb	r3, r3
  401c76:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
  401c78:	4b11      	ldr	r3, [pc, #68]	; (401cc0 <mpu_set_int_latched+0x84>)
  401c7a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  401c7e:	2b00      	cmp	r3, #0
  401c80:	d004      	beq.n	401c8c <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
  401c82:	7bfb      	ldrb	r3, [r7, #15]
  401c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401c88:	b2db      	uxtb	r3, r3
  401c8a:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
  401c8c:	4b0c      	ldr	r3, [pc, #48]	; (401cc0 <mpu_set_int_latched+0x84>)
  401c8e:	685b      	ldr	r3, [r3, #4]
  401c90:	7818      	ldrb	r0, [r3, #0]
  401c92:	4b0b      	ldr	r3, [pc, #44]	; (401cc0 <mpu_set_int_latched+0x84>)
  401c94:	681b      	ldr	r3, [r3, #0]
  401c96:	7dd9      	ldrb	r1, [r3, #23]
  401c98:	f107 030f 	add.w	r3, r7, #15
  401c9c:	2201      	movs	r2, #1
  401c9e:	4c09      	ldr	r4, [pc, #36]	; (401cc4 <mpu_set_int_latched+0x88>)
  401ca0:	47a0      	blx	r4
  401ca2:	4603      	mov	r3, r0
  401ca4:	2b00      	cmp	r3, #0
  401ca6:	d002      	beq.n	401cae <mpu_set_int_latched+0x72>
        return -1;
  401ca8:	f04f 33ff 	mov.w	r3, #4294967295
  401cac:	e004      	b.n	401cb8 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
  401cae:	4a04      	ldr	r2, [pc, #16]	; (401cc0 <mpu_set_int_latched+0x84>)
  401cb0:	79fb      	ldrb	r3, [r7, #7]
  401cb2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
  401cb6:	2300      	movs	r3, #0
}
  401cb8:	4618      	mov	r0, r3
  401cba:	3714      	adds	r7, #20
  401cbc:	46bd      	mov	sp, r7
  401cbe:	bd90      	pop	{r4, r7, pc}
  401cc0:	20000000 	.word	0x20000000
  401cc4:	0040391d 	.word	0x0040391d

00401cc8 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
  401cc8:	b590      	push	{r4, r7, lr}
  401cca:	b085      	sub	sp, #20
  401ccc:	af00      	add	r7, sp, #0
  401cce:	4603      	mov	r3, r0
  401cd0:	603a      	str	r2, [r7, #0]
  401cd2:	80fb      	strh	r3, [r7, #6]
  401cd4:	460b      	mov	r3, r1
  401cd6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
  401cd8:	683b      	ldr	r3, [r7, #0]
  401cda:	2b00      	cmp	r3, #0
  401cdc:	d102      	bne.n	401ce4 <mpu_write_mem+0x1c>
        return -1;
  401cde:	f04f 33ff 	mov.w	r3, #4294967295
  401ce2:	e03d      	b.n	401d60 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
  401ce4:	4b20      	ldr	r3, [pc, #128]	; (401d68 <mpu_write_mem+0xa0>)
  401ce6:	7a9b      	ldrb	r3, [r3, #10]
  401ce8:	2b00      	cmp	r3, #0
  401cea:	d102      	bne.n	401cf2 <mpu_write_mem+0x2a>
        return -1;
  401cec:	f04f 33ff 	mov.w	r3, #4294967295
  401cf0:	e036      	b.n	401d60 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
  401cf2:	88fb      	ldrh	r3, [r7, #6]
  401cf4:	0a1b      	lsrs	r3, r3, #8
  401cf6:	b29b      	uxth	r3, r3
  401cf8:	b2db      	uxtb	r3, r3
  401cfa:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
  401cfc:	88fb      	ldrh	r3, [r7, #6]
  401cfe:	b2db      	uxtb	r3, r3
  401d00:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
  401d02:	7b7b      	ldrb	r3, [r7, #13]
  401d04:	461a      	mov	r2, r3
  401d06:	88bb      	ldrh	r3, [r7, #4]
  401d08:	4413      	add	r3, r2
  401d0a:	4a17      	ldr	r2, [pc, #92]	; (401d68 <mpu_write_mem+0xa0>)
  401d0c:	6852      	ldr	r2, [r2, #4]
  401d0e:	8952      	ldrh	r2, [r2, #10]
  401d10:	4293      	cmp	r3, r2
  401d12:	dd02      	ble.n	401d1a <mpu_write_mem+0x52>
        return -1;
  401d14:	f04f 33ff 	mov.w	r3, #4294967295
  401d18:	e022      	b.n	401d60 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
  401d1a:	4b13      	ldr	r3, [pc, #76]	; (401d68 <mpu_write_mem+0xa0>)
  401d1c:	685b      	ldr	r3, [r3, #4]
  401d1e:	7818      	ldrb	r0, [r3, #0]
  401d20:	4b11      	ldr	r3, [pc, #68]	; (401d68 <mpu_write_mem+0xa0>)
  401d22:	681b      	ldr	r3, [r3, #0]
  401d24:	7ed9      	ldrb	r1, [r3, #27]
  401d26:	f107 030c 	add.w	r3, r7, #12
  401d2a:	2202      	movs	r2, #2
  401d2c:	4c0f      	ldr	r4, [pc, #60]	; (401d6c <mpu_write_mem+0xa4>)
  401d2e:	47a0      	blx	r4
  401d30:	4603      	mov	r3, r0
  401d32:	2b00      	cmp	r3, #0
  401d34:	d002      	beq.n	401d3c <mpu_write_mem+0x74>
        return -1;
  401d36:	f04f 33ff 	mov.w	r3, #4294967295
  401d3a:	e011      	b.n	401d60 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
  401d3c:	4b0a      	ldr	r3, [pc, #40]	; (401d68 <mpu_write_mem+0xa0>)
  401d3e:	685b      	ldr	r3, [r3, #4]
  401d40:	7818      	ldrb	r0, [r3, #0]
  401d42:	4b09      	ldr	r3, [pc, #36]	; (401d68 <mpu_write_mem+0xa0>)
  401d44:	681b      	ldr	r3, [r3, #0]
  401d46:	7e19      	ldrb	r1, [r3, #24]
  401d48:	88bb      	ldrh	r3, [r7, #4]
  401d4a:	b2da      	uxtb	r2, r3
  401d4c:	683b      	ldr	r3, [r7, #0]
  401d4e:	4c07      	ldr	r4, [pc, #28]	; (401d6c <mpu_write_mem+0xa4>)
  401d50:	47a0      	blx	r4
  401d52:	4603      	mov	r3, r0
  401d54:	2b00      	cmp	r3, #0
  401d56:	d002      	beq.n	401d5e <mpu_write_mem+0x96>
        return -1;
  401d58:	f04f 33ff 	mov.w	r3, #4294967295
  401d5c:	e000      	b.n	401d60 <mpu_write_mem+0x98>
    return 0;
  401d5e:	2300      	movs	r3, #0
}
  401d60:	4618      	mov	r0, r3
  401d62:	3714      	adds	r7, #20
  401d64:	46bd      	mov	sp, r7
  401d66:	bd90      	pop	{r4, r7, pc}
  401d68:	20000000 	.word	0x20000000
  401d6c:	0040391d 	.word	0x0040391d

00401d70 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
  401d70:	b590      	push	{r4, r7, lr}
  401d72:	b085      	sub	sp, #20
  401d74:	af00      	add	r7, sp, #0
  401d76:	4603      	mov	r3, r0
  401d78:	603a      	str	r2, [r7, #0]
  401d7a:	80fb      	strh	r3, [r7, #6]
  401d7c:	460b      	mov	r3, r1
  401d7e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
  401d80:	683b      	ldr	r3, [r7, #0]
  401d82:	2b00      	cmp	r3, #0
  401d84:	d102      	bne.n	401d8c <mpu_read_mem+0x1c>
        return -1;
  401d86:	f04f 33ff 	mov.w	r3, #4294967295
  401d8a:	e03d      	b.n	401e08 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
  401d8c:	4b20      	ldr	r3, [pc, #128]	; (401e10 <mpu_read_mem+0xa0>)
  401d8e:	7a9b      	ldrb	r3, [r3, #10]
  401d90:	2b00      	cmp	r3, #0
  401d92:	d102      	bne.n	401d9a <mpu_read_mem+0x2a>
        return -1;
  401d94:	f04f 33ff 	mov.w	r3, #4294967295
  401d98:	e036      	b.n	401e08 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
  401d9a:	88fb      	ldrh	r3, [r7, #6]
  401d9c:	0a1b      	lsrs	r3, r3, #8
  401d9e:	b29b      	uxth	r3, r3
  401da0:	b2db      	uxtb	r3, r3
  401da2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
  401da4:	88fb      	ldrh	r3, [r7, #6]
  401da6:	b2db      	uxtb	r3, r3
  401da8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
  401daa:	7b7b      	ldrb	r3, [r7, #13]
  401dac:	461a      	mov	r2, r3
  401dae:	88bb      	ldrh	r3, [r7, #4]
  401db0:	4413      	add	r3, r2
  401db2:	4a17      	ldr	r2, [pc, #92]	; (401e10 <mpu_read_mem+0xa0>)
  401db4:	6852      	ldr	r2, [r2, #4]
  401db6:	8952      	ldrh	r2, [r2, #10]
  401db8:	4293      	cmp	r3, r2
  401dba:	dd02      	ble.n	401dc2 <mpu_read_mem+0x52>
        return -1;
  401dbc:	f04f 33ff 	mov.w	r3, #4294967295
  401dc0:	e022      	b.n	401e08 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
  401dc2:	4b13      	ldr	r3, [pc, #76]	; (401e10 <mpu_read_mem+0xa0>)
  401dc4:	685b      	ldr	r3, [r3, #4]
  401dc6:	7818      	ldrb	r0, [r3, #0]
  401dc8:	4b11      	ldr	r3, [pc, #68]	; (401e10 <mpu_read_mem+0xa0>)
  401dca:	681b      	ldr	r3, [r3, #0]
  401dcc:	7ed9      	ldrb	r1, [r3, #27]
  401dce:	f107 030c 	add.w	r3, r7, #12
  401dd2:	2202      	movs	r2, #2
  401dd4:	4c0f      	ldr	r4, [pc, #60]	; (401e14 <mpu_read_mem+0xa4>)
  401dd6:	47a0      	blx	r4
  401dd8:	4603      	mov	r3, r0
  401dda:	2b00      	cmp	r3, #0
  401ddc:	d002      	beq.n	401de4 <mpu_read_mem+0x74>
        return -1;
  401dde:	f04f 33ff 	mov.w	r3, #4294967295
  401de2:	e011      	b.n	401e08 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
  401de4:	4b0a      	ldr	r3, [pc, #40]	; (401e10 <mpu_read_mem+0xa0>)
  401de6:	685b      	ldr	r3, [r3, #4]
  401de8:	7818      	ldrb	r0, [r3, #0]
  401dea:	4b09      	ldr	r3, [pc, #36]	; (401e10 <mpu_read_mem+0xa0>)
  401dec:	681b      	ldr	r3, [r3, #0]
  401dee:	7e19      	ldrb	r1, [r3, #24]
  401df0:	88bb      	ldrh	r3, [r7, #4]
  401df2:	b2da      	uxtb	r2, r3
  401df4:	683b      	ldr	r3, [r7, #0]
  401df6:	4c08      	ldr	r4, [pc, #32]	; (401e18 <mpu_read_mem+0xa8>)
  401df8:	47a0      	blx	r4
  401dfa:	4603      	mov	r3, r0
  401dfc:	2b00      	cmp	r3, #0
  401dfe:	d002      	beq.n	401e06 <mpu_read_mem+0x96>
        return -1;
  401e00:	f04f 33ff 	mov.w	r3, #4294967295
  401e04:	e000      	b.n	401e08 <mpu_read_mem+0x98>
    return 0;
  401e06:	2300      	movs	r3, #0
}
  401e08:	4618      	mov	r0, r3
  401e0a:	3714      	adds	r7, #20
  401e0c:	46bd      	mov	sp, r7
  401e0e:	bd90      	pop	{r4, r7, pc}
  401e10:	20000000 	.word	0x20000000
  401e14:	0040391d 	.word	0x0040391d
  401e18:	004039d9 	.word	0x004039d9

00401e1c <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
  401e1c:	b590      	push	{r4, r7, lr}
  401e1e:	b08b      	sub	sp, #44	; 0x2c
  401e20:	af00      	add	r7, sp, #0
  401e22:	60b9      	str	r1, [r7, #8]
  401e24:	4611      	mov	r1, r2
  401e26:	461a      	mov	r2, r3
  401e28:	4603      	mov	r3, r0
  401e2a:	81fb      	strh	r3, [r7, #14]
  401e2c:	460b      	mov	r3, r1
  401e2e:	81bb      	strh	r3, [r7, #12]
  401e30:	4613      	mov	r3, r2
  401e32:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
  401e34:	4b37      	ldr	r3, [pc, #220]	; (401f14 <mpu_load_firmware+0xf8>)
  401e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401e3a:	2b00      	cmp	r3, #0
  401e3c:	d002      	beq.n	401e44 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
  401e3e:	f04f 33ff 	mov.w	r3, #4294967295
  401e42:	e062      	b.n	401f0a <mpu_load_firmware+0xee>

    if (!firmware)
  401e44:	68bb      	ldr	r3, [r7, #8]
  401e46:	2b00      	cmp	r3, #0
  401e48:	d102      	bne.n	401e50 <mpu_load_firmware+0x34>
        return -1;
  401e4a:	f04f 33ff 	mov.w	r3, #4294967295
  401e4e:	e05c      	b.n	401f0a <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
  401e50:	2300      	movs	r3, #0
  401e52:	84fb      	strh	r3, [r7, #38]	; 0x26
  401e54:	e034      	b.n	401ec0 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
  401e56:	89fa      	ldrh	r2, [r7, #14]
  401e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e5a:	1ad3      	subs	r3, r2, r3
  401e5c:	2b10      	cmp	r3, #16
  401e5e:	bfa8      	it	ge
  401e60:	2310      	movge	r3, #16
  401e62:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
  401e64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e66:	68ba      	ldr	r2, [r7, #8]
  401e68:	441a      	add	r2, r3
  401e6a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  401e6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e6e:	4618      	mov	r0, r3
  401e70:	4b29      	ldr	r3, [pc, #164]	; (401f18 <mpu_load_firmware+0xfc>)
  401e72:	4798      	blx	r3
  401e74:	4603      	mov	r3, r0
  401e76:	2b00      	cmp	r3, #0
  401e78:	d002      	beq.n	401e80 <mpu_load_firmware+0x64>
            return -1;
  401e7a:	f04f 33ff 	mov.w	r3, #4294967295
  401e7e:	e044      	b.n	401f0a <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
  401e80:	f107 0214 	add.w	r2, r7, #20
  401e84:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  401e86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e88:	4618      	mov	r0, r3
  401e8a:	4b24      	ldr	r3, [pc, #144]	; (401f1c <mpu_load_firmware+0x100>)
  401e8c:	4798      	blx	r3
  401e8e:	4603      	mov	r3, r0
  401e90:	2b00      	cmp	r3, #0
  401e92:	d002      	beq.n	401e9a <mpu_load_firmware+0x7e>
            return -1;
  401e94:	f04f 33ff 	mov.w	r3, #4294967295
  401e98:	e037      	b.n	401f0a <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
  401e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  401e9c:	68ba      	ldr	r2, [r7, #8]
  401e9e:	4413      	add	r3, r2
  401ea0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  401ea2:	f107 0114 	add.w	r1, r7, #20
  401ea6:	4618      	mov	r0, r3
  401ea8:	4b1d      	ldr	r3, [pc, #116]	; (401f20 <mpu_load_firmware+0x104>)
  401eaa:	4798      	blx	r3
  401eac:	4603      	mov	r3, r0
  401eae:	2b00      	cmp	r3, #0
  401eb0:	d002      	beq.n	401eb8 <mpu_load_firmware+0x9c>
            return -2;
  401eb2:	f06f 0301 	mvn.w	r3, #1
  401eb6:	e028      	b.n	401f0a <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
  401eb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  401eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  401ebc:	4413      	add	r3, r2
  401ebe:	84fb      	strh	r3, [r7, #38]	; 0x26
  401ec0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  401ec2:	89fb      	ldrh	r3, [r7, #14]
  401ec4:	429a      	cmp	r2, r3
  401ec6:	d3c6      	bcc.n	401e56 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
  401ec8:	89bb      	ldrh	r3, [r7, #12]
  401eca:	0a1b      	lsrs	r3, r3, #8
  401ecc:	b29b      	uxth	r3, r3
  401ece:	b2db      	uxtb	r3, r3
  401ed0:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
  401ed2:	89bb      	ldrh	r3, [r7, #12]
  401ed4:	b2db      	uxtb	r3, r3
  401ed6:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
  401ed8:	4b0e      	ldr	r3, [pc, #56]	; (401f14 <mpu_load_firmware+0xf8>)
  401eda:	685b      	ldr	r3, [r3, #4]
  401edc:	7818      	ldrb	r0, [r3, #0]
  401ede:	4b0d      	ldr	r3, [pc, #52]	; (401f14 <mpu_load_firmware+0xf8>)
  401ee0:	681b      	ldr	r3, [r3, #0]
  401ee2:	7f59      	ldrb	r1, [r3, #29]
  401ee4:	f107 0310 	add.w	r3, r7, #16
  401ee8:	2202      	movs	r2, #2
  401eea:	4c0e      	ldr	r4, [pc, #56]	; (401f24 <mpu_load_firmware+0x108>)
  401eec:	47a0      	blx	r4
  401eee:	4603      	mov	r3, r0
  401ef0:	2b00      	cmp	r3, #0
  401ef2:	d002      	beq.n	401efa <mpu_load_firmware+0xde>
        return -1;
  401ef4:	f04f 33ff 	mov.w	r3, #4294967295
  401ef8:	e007      	b.n	401f0a <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
  401efa:	4b06      	ldr	r3, [pc, #24]	; (401f14 <mpu_load_firmware+0xf8>)
  401efc:	2201      	movs	r2, #1
  401efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
  401f02:	4a04      	ldr	r2, [pc, #16]	; (401f14 <mpu_load_firmware+0xf8>)
  401f04:	88fb      	ldrh	r3, [r7, #6]
  401f06:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
  401f08:	2300      	movs	r3, #0
}
  401f0a:	4618      	mov	r0, r3
  401f0c:	372c      	adds	r7, #44	; 0x2c
  401f0e:	46bd      	mov	sp, r7
  401f10:	bd90      	pop	{r4, r7, pc}
  401f12:	bf00      	nop
  401f14:	20000000 	.word	0x20000000
  401f18:	00401cc9 	.word	0x00401cc9
  401f1c:	00401d71 	.word	0x00401d71
  401f20:	00406501 	.word	0x00406501
  401f24:	0040391d 	.word	0x0040391d

00401f28 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
  401f28:	b590      	push	{r4, r7, lr}
  401f2a:	b085      	sub	sp, #20
  401f2c:	af00      	add	r7, sp, #0
  401f2e:	4603      	mov	r3, r0
  401f30:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
  401f32:	4b26      	ldr	r3, [pc, #152]	; (401fcc <mpu_set_dmp_state+0xa4>)
  401f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401f38:	79fa      	ldrb	r2, [r7, #7]
  401f3a:	429a      	cmp	r2, r3
  401f3c:	d101      	bne.n	401f42 <mpu_set_dmp_state+0x1a>
        return 0;
  401f3e:	2300      	movs	r3, #0
  401f40:	e040      	b.n	401fc4 <mpu_set_dmp_state+0x9c>

    if (enable) {
  401f42:	79fb      	ldrb	r3, [r7, #7]
  401f44:	2b00      	cmp	r3, #0
  401f46:	d027      	beq.n	401f98 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
  401f48:	4b20      	ldr	r3, [pc, #128]	; (401fcc <mpu_set_dmp_state+0xa4>)
  401f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401f4e:	2b00      	cmp	r3, #0
  401f50:	d102      	bne.n	401f58 <mpu_set_dmp_state+0x30>
            return -1;
  401f52:	f04f 33ff 	mov.w	r3, #4294967295
  401f56:	e035      	b.n	401fc4 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
  401f58:	2000      	movs	r0, #0
  401f5a:	4b1d      	ldr	r3, [pc, #116]	; (401fd0 <mpu_set_dmp_state+0xa8>)
  401f5c:	4798      	blx	r3
        /* Disable bypass mode. */
        mpu_set_bypass(0);
  401f5e:	2000      	movs	r0, #0
  401f60:	4b1c      	ldr	r3, [pc, #112]	; (401fd4 <mpu_set_dmp_state+0xac>)
  401f62:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
  401f64:	4b19      	ldr	r3, [pc, #100]	; (401fcc <mpu_set_dmp_state+0xa4>)
  401f66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  401f68:	4618      	mov	r0, r3
  401f6a:	4b1b      	ldr	r3, [pc, #108]	; (401fd8 <mpu_set_dmp_state+0xb0>)
  401f6c:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
  401f6e:	2300      	movs	r3, #0
  401f70:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
  401f72:	4b16      	ldr	r3, [pc, #88]	; (401fcc <mpu_set_dmp_state+0xa4>)
  401f74:	685b      	ldr	r3, [r3, #4]
  401f76:	7818      	ldrb	r0, [r3, #0]
  401f78:	f107 030f 	add.w	r3, r7, #15
  401f7c:	2201      	movs	r2, #1
  401f7e:	2123      	movs	r1, #35	; 0x23
  401f80:	4c16      	ldr	r4, [pc, #88]	; (401fdc <mpu_set_dmp_state+0xb4>)
  401f82:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 1;
  401f84:	4b11      	ldr	r3, [pc, #68]	; (401fcc <mpu_set_dmp_state+0xa4>)
  401f86:	2201      	movs	r2, #1
  401f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
  401f8c:	2001      	movs	r0, #1
  401f8e:	4b10      	ldr	r3, [pc, #64]	; (401fd0 <mpu_set_dmp_state+0xa8>)
  401f90:	4798      	blx	r3
        mpu_reset_fifo();
  401f92:	4b13      	ldr	r3, [pc, #76]	; (401fe0 <mpu_set_dmp_state+0xb8>)
  401f94:	4798      	blx	r3
  401f96:	e014      	b.n	401fc2 <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
  401f98:	2000      	movs	r0, #0
  401f9a:	4b0d      	ldr	r3, [pc, #52]	; (401fd0 <mpu_set_dmp_state+0xa8>)
  401f9c:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
  401f9e:	4b0b      	ldr	r3, [pc, #44]	; (401fcc <mpu_set_dmp_state+0xa4>)
  401fa0:	7c1b      	ldrb	r3, [r3, #16]
  401fa2:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
  401fa4:	4b09      	ldr	r3, [pc, #36]	; (401fcc <mpu_set_dmp_state+0xa4>)
  401fa6:	685b      	ldr	r3, [r3, #4]
  401fa8:	7818      	ldrb	r0, [r3, #0]
  401faa:	f107 030f 	add.w	r3, r7, #15
  401fae:	2201      	movs	r2, #1
  401fb0:	2123      	movs	r1, #35	; 0x23
  401fb2:	4c0a      	ldr	r4, [pc, #40]	; (401fdc <mpu_set_dmp_state+0xb4>)
  401fb4:	47a0      	blx	r4
        st.chip_cfg.dmp_on = 0;
  401fb6:	4b05      	ldr	r3, [pc, #20]	; (401fcc <mpu_set_dmp_state+0xa4>)
  401fb8:	2200      	movs	r2, #0
  401fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
  401fbe:	4b08      	ldr	r3, [pc, #32]	; (401fe0 <mpu_set_dmp_state+0xb8>)
  401fc0:	4798      	blx	r3
    }
    return 0;
  401fc2:	2300      	movs	r3, #0
}
  401fc4:	4618      	mov	r0, r3
  401fc6:	3714      	adds	r7, #20
  401fc8:	46bd      	mov	sp, r7
  401fca:	bd90      	pop	{r4, r7, pc}
  401fcc:	20000000 	.word	0x20000000
  401fd0:	00400dc9 	.word	0x00400dc9
  401fd4:	00401aa5 	.word	0x00401aa5
  401fd8:	004016b9 	.word	0x004016b9
  401fdc:	0040391d 	.word	0x0040391d
  401fe0:	00401181 	.word	0x00401181

00401fe4 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
  401fe4:	b590      	push	{r4, r7, lr}
  401fe6:	b085      	sub	sp, #20
  401fe8:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
  401fea:	2001      	movs	r0, #1
  401fec:	4b9b      	ldr	r3, [pc, #620]	; (40225c <setup_compass+0x278>)
  401fee:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
  401ff0:	230c      	movs	r3, #12
  401ff2:	73fb      	strb	r3, [r7, #15]
  401ff4:	e010      	b.n	402018 <setup_compass+0x34>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
  401ff6:	1d3b      	adds	r3, r7, #4
  401ff8:	7bf8      	ldrb	r0, [r7, #15]
  401ffa:	2201      	movs	r2, #1
  401ffc:	2100      	movs	r1, #0
  401ffe:	4c98      	ldr	r4, [pc, #608]	; (402260 <setup_compass+0x27c>)
  402000:	47a0      	blx	r4
  402002:	4603      	mov	r3, r0
  402004:	60bb      	str	r3, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
  402006:	68bb      	ldr	r3, [r7, #8]
  402008:	2b00      	cmp	r3, #0
  40200a:	d102      	bne.n	402012 <setup_compass+0x2e>
  40200c:	793b      	ldrb	r3, [r7, #4]
  40200e:	2b48      	cmp	r3, #72	; 0x48
  402010:	d006      	beq.n	402020 <setup_compass+0x3c>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
  402012:	7bfb      	ldrb	r3, [r7, #15]
  402014:	3301      	adds	r3, #1
  402016:	73fb      	strb	r3, [r7, #15]
  402018:	7bfb      	ldrb	r3, [r7, #15]
  40201a:	2b0f      	cmp	r3, #15
  40201c:	d9eb      	bls.n	401ff6 <setup_compass+0x12>
  40201e:	e000      	b.n	402022 <setup_compass+0x3e>
            break;
  402020:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
  402022:	7bfb      	ldrb	r3, [r7, #15]
  402024:	2b0f      	cmp	r3, #15
  402026:	d902      	bls.n	40202e <setup_compass+0x4a>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
  402028:	f04f 33ff 	mov.w	r3, #4294967295
  40202c:	e112      	b.n	402254 <setup_compass+0x270>
    }

    st.chip_cfg.compass_addr = akm_addr;
  40202e:	4a8d      	ldr	r2, [pc, #564]	; (402264 <setup_compass+0x280>)
  402030:	7bfb      	ldrb	r3, [r7, #15]
  402032:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
  402036:	2310      	movs	r3, #16
  402038:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  40203a:	4b8a      	ldr	r3, [pc, #552]	; (402264 <setup_compass+0x280>)
  40203c:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402040:	1d3b      	adds	r3, r7, #4
  402042:	2201      	movs	r2, #1
  402044:	210a      	movs	r1, #10
  402046:	4c88      	ldr	r4, [pc, #544]	; (402268 <setup_compass+0x284>)
  402048:	47a0      	blx	r4
  40204a:	4603      	mov	r3, r0
  40204c:	2b00      	cmp	r3, #0
  40204e:	d002      	beq.n	402056 <setup_compass+0x72>
        return -1;
  402050:	f04f 33ff 	mov.w	r3, #4294967295
  402054:	e0fe      	b.n	402254 <setup_compass+0x270>
    delay_ms(1);
  402056:	2001      	movs	r0, #1
  402058:	4b84      	ldr	r3, [pc, #528]	; (40226c <setup_compass+0x288>)
  40205a:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
  40205c:	231f      	movs	r3, #31
  40205e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  402060:	4b80      	ldr	r3, [pc, #512]	; (402264 <setup_compass+0x280>)
  402062:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402066:	1d3b      	adds	r3, r7, #4
  402068:	2201      	movs	r2, #1
  40206a:	210a      	movs	r1, #10
  40206c:	4c7e      	ldr	r4, [pc, #504]	; (402268 <setup_compass+0x284>)
  40206e:	47a0      	blx	r4
  402070:	4603      	mov	r3, r0
  402072:	2b00      	cmp	r3, #0
  402074:	d002      	beq.n	40207c <setup_compass+0x98>
        return -1;
  402076:	f04f 33ff 	mov.w	r3, #4294967295
  40207a:	e0eb      	b.n	402254 <setup_compass+0x270>
    delay_ms(1);
  40207c:	2001      	movs	r0, #1
  40207e:	4b7b      	ldr	r3, [pc, #492]	; (40226c <setup_compass+0x288>)
  402080:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
  402082:	4b78      	ldr	r3, [pc, #480]	; (402264 <setup_compass+0x280>)
  402084:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  402088:	1d3b      	adds	r3, r7, #4
  40208a:	2203      	movs	r2, #3
  40208c:	2110      	movs	r1, #16
  40208e:	4c74      	ldr	r4, [pc, #464]	; (402260 <setup_compass+0x27c>)
  402090:	47a0      	blx	r4
  402092:	4603      	mov	r3, r0
  402094:	2b00      	cmp	r3, #0
  402096:	d002      	beq.n	40209e <setup_compass+0xba>
        return -1;
  402098:	f04f 33ff 	mov.w	r3, #4294967295
  40209c:	e0da      	b.n	402254 <setup_compass+0x270>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
  40209e:	793b      	ldrb	r3, [r7, #4]
  4020a0:	b29b      	uxth	r3, r3
  4020a2:	3380      	adds	r3, #128	; 0x80
  4020a4:	b29b      	uxth	r3, r3
  4020a6:	b21a      	sxth	r2, r3
  4020a8:	4b6e      	ldr	r3, [pc, #440]	; (402264 <setup_compass+0x280>)
  4020aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
  4020ac:	797b      	ldrb	r3, [r7, #5]
  4020ae:	b29b      	uxth	r3, r3
  4020b0:	3380      	adds	r3, #128	; 0x80
  4020b2:	b29b      	uxth	r3, r3
  4020b4:	b21a      	sxth	r2, r3
  4020b6:	4b6b      	ldr	r3, [pc, #428]	; (402264 <setup_compass+0x280>)
  4020b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
  4020ba:	79bb      	ldrb	r3, [r7, #6]
  4020bc:	b29b      	uxth	r3, r3
  4020be:	3380      	adds	r3, #128	; 0x80
  4020c0:	b29b      	uxth	r3, r3
  4020c2:	b21a      	sxth	r2, r3
  4020c4:	4b67      	ldr	r3, [pc, #412]	; (402264 <setup_compass+0x280>)
  4020c6:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
  4020c8:	2310      	movs	r3, #16
  4020ca:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
  4020cc:	4b65      	ldr	r3, [pc, #404]	; (402264 <setup_compass+0x280>)
  4020ce:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
  4020d2:	1d3b      	adds	r3, r7, #4
  4020d4:	2201      	movs	r2, #1
  4020d6:	210a      	movs	r1, #10
  4020d8:	4c63      	ldr	r4, [pc, #396]	; (402268 <setup_compass+0x284>)
  4020da:	47a0      	blx	r4
  4020dc:	4603      	mov	r3, r0
  4020de:	2b00      	cmp	r3, #0
  4020e0:	d002      	beq.n	4020e8 <setup_compass+0x104>
        return -1;
  4020e2:	f04f 33ff 	mov.w	r3, #4294967295
  4020e6:	e0b5      	b.n	402254 <setup_compass+0x270>
    delay_ms(1);
  4020e8:	2001      	movs	r0, #1
  4020ea:	4b60      	ldr	r3, [pc, #384]	; (40226c <setup_compass+0x288>)
  4020ec:	4798      	blx	r3

    mpu_set_bypass(0);
  4020ee:	2000      	movs	r0, #0
  4020f0:	4b5a      	ldr	r3, [pc, #360]	; (40225c <setup_compass+0x278>)
  4020f2:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
  4020f4:	2340      	movs	r3, #64	; 0x40
  4020f6:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
  4020f8:	4b5a      	ldr	r3, [pc, #360]	; (402264 <setup_compass+0x280>)
  4020fa:	685b      	ldr	r3, [r3, #4]
  4020fc:	7818      	ldrb	r0, [r3, #0]
  4020fe:	4b59      	ldr	r3, [pc, #356]	; (402264 <setup_compass+0x280>)
  402100:	681b      	ldr	r3, [r3, #0]
  402102:	7e99      	ldrb	r1, [r3, #26]
  402104:	1d3b      	adds	r3, r7, #4
  402106:	2201      	movs	r2, #1
  402108:	4c57      	ldr	r4, [pc, #348]	; (402268 <setup_compass+0x284>)
  40210a:	47a0      	blx	r4
  40210c:	4603      	mov	r3, r0
  40210e:	2b00      	cmp	r3, #0
  402110:	d002      	beq.n	402118 <setup_compass+0x134>
        return -1;
  402112:	f04f 33ff 	mov.w	r3, #4294967295
  402116:	e09d      	b.n	402254 <setup_compass+0x270>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
  402118:	4b52      	ldr	r3, [pc, #328]	; (402264 <setup_compass+0x280>)
  40211a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  40211e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402122:	b2db      	uxtb	r3, r3
  402124:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
  402126:	4b4f      	ldr	r3, [pc, #316]	; (402264 <setup_compass+0x280>)
  402128:	685b      	ldr	r3, [r3, #4]
  40212a:	7818      	ldrb	r0, [r3, #0]
  40212c:	4b4d      	ldr	r3, [pc, #308]	; (402264 <setup_compass+0x280>)
  40212e:	681b      	ldr	r3, [r3, #0]
  402130:	7f99      	ldrb	r1, [r3, #30]
  402132:	1d3b      	adds	r3, r7, #4
  402134:	2201      	movs	r2, #1
  402136:	4c4c      	ldr	r4, [pc, #304]	; (402268 <setup_compass+0x284>)
  402138:	47a0      	blx	r4
  40213a:	4603      	mov	r3, r0
  40213c:	2b00      	cmp	r3, #0
  40213e:	d002      	beq.n	402146 <setup_compass+0x162>
        return -1;
  402140:	f04f 33ff 	mov.w	r3, #4294967295
  402144:	e086      	b.n	402254 <setup_compass+0x270>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
  402146:	2302      	movs	r3, #2
  402148:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
  40214a:	4b46      	ldr	r3, [pc, #280]	; (402264 <setup_compass+0x280>)
  40214c:	685b      	ldr	r3, [r3, #4]
  40214e:	7818      	ldrb	r0, [r3, #0]
  402150:	4b44      	ldr	r3, [pc, #272]	; (402264 <setup_compass+0x280>)
  402152:	681b      	ldr	r3, [r3, #0]
  402154:	7fd9      	ldrb	r1, [r3, #31]
  402156:	1d3b      	adds	r3, r7, #4
  402158:	2201      	movs	r2, #1
  40215a:	4c43      	ldr	r4, [pc, #268]	; (402268 <setup_compass+0x284>)
  40215c:	47a0      	blx	r4
  40215e:	4603      	mov	r3, r0
  402160:	2b00      	cmp	r3, #0
  402162:	d002      	beq.n	40216a <setup_compass+0x186>
        return -1;
  402164:	f04f 33ff 	mov.w	r3, #4294967295
  402168:	e074      	b.n	402254 <setup_compass+0x270>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
  40216a:	2388      	movs	r3, #136	; 0x88
  40216c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
  40216e:	4b3d      	ldr	r3, [pc, #244]	; (402264 <setup_compass+0x280>)
  402170:	685b      	ldr	r3, [r3, #4]
  402172:	7818      	ldrb	r0, [r3, #0]
  402174:	4b3b      	ldr	r3, [pc, #236]	; (402264 <setup_compass+0x280>)
  402176:	681b      	ldr	r3, [r3, #0]
  402178:	f893 1020 	ldrb.w	r1, [r3, #32]
  40217c:	1d3b      	adds	r3, r7, #4
  40217e:	2201      	movs	r2, #1
  402180:	4c39      	ldr	r4, [pc, #228]	; (402268 <setup_compass+0x284>)
  402182:	47a0      	blx	r4
  402184:	4603      	mov	r3, r0
  402186:	2b00      	cmp	r3, #0
  402188:	d002      	beq.n	402190 <setup_compass+0x1ac>
        return -1;
  40218a:	f04f 33ff 	mov.w	r3, #4294967295
  40218e:	e061      	b.n	402254 <setup_compass+0x270>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
  402190:	4b34      	ldr	r3, [pc, #208]	; (402264 <setup_compass+0x280>)
  402192:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  402196:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
  402198:	4b32      	ldr	r3, [pc, #200]	; (402264 <setup_compass+0x280>)
  40219a:	685b      	ldr	r3, [r3, #4]
  40219c:	7818      	ldrb	r0, [r3, #0]
  40219e:	4b31      	ldr	r3, [pc, #196]	; (402264 <setup_compass+0x280>)
  4021a0:	681b      	ldr	r3, [r3, #0]
  4021a2:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
  4021a6:	1d3b      	adds	r3, r7, #4
  4021a8:	2201      	movs	r2, #1
  4021aa:	4c2f      	ldr	r4, [pc, #188]	; (402268 <setup_compass+0x284>)
  4021ac:	47a0      	blx	r4
  4021ae:	4603      	mov	r3, r0
  4021b0:	2b00      	cmp	r3, #0
  4021b2:	d002      	beq.n	4021ba <setup_compass+0x1d6>
        return -1;
  4021b4:	f04f 33ff 	mov.w	r3, #4294967295
  4021b8:	e04c      	b.n	402254 <setup_compass+0x270>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
  4021ba:	230a      	movs	r3, #10
  4021bc:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
  4021be:	4b29      	ldr	r3, [pc, #164]	; (402264 <setup_compass+0x280>)
  4021c0:	685b      	ldr	r3, [r3, #4]
  4021c2:	7818      	ldrb	r0, [r3, #0]
  4021c4:	4b27      	ldr	r3, [pc, #156]	; (402264 <setup_compass+0x280>)
  4021c6:	681b      	ldr	r3, [r3, #0]
  4021c8:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
  4021cc:	1d3b      	adds	r3, r7, #4
  4021ce:	2201      	movs	r2, #1
  4021d0:	4c25      	ldr	r4, [pc, #148]	; (402268 <setup_compass+0x284>)
  4021d2:	47a0      	blx	r4
  4021d4:	4603      	mov	r3, r0
  4021d6:	2b00      	cmp	r3, #0
  4021d8:	d002      	beq.n	4021e0 <setup_compass+0x1fc>
        return -1;
  4021da:	f04f 33ff 	mov.w	r3, #4294967295
  4021de:	e039      	b.n	402254 <setup_compass+0x270>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
  4021e0:	2381      	movs	r3, #129	; 0x81
  4021e2:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
  4021e4:	4b1f      	ldr	r3, [pc, #124]	; (402264 <setup_compass+0x280>)
  4021e6:	685b      	ldr	r3, [r3, #4]
  4021e8:	7818      	ldrb	r0, [r3, #0]
  4021ea:	4b1e      	ldr	r3, [pc, #120]	; (402264 <setup_compass+0x280>)
  4021ec:	681b      	ldr	r3, [r3, #0]
  4021ee:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
  4021f2:	1d3b      	adds	r3, r7, #4
  4021f4:	2201      	movs	r2, #1
  4021f6:	4c1c      	ldr	r4, [pc, #112]	; (402268 <setup_compass+0x284>)
  4021f8:	47a0      	blx	r4
  4021fa:	4603      	mov	r3, r0
  4021fc:	2b00      	cmp	r3, #0
  4021fe:	d002      	beq.n	402206 <setup_compass+0x222>
        return -1;
  402200:	f04f 33ff 	mov.w	r3, #4294967295
  402204:	e026      	b.n	402254 <setup_compass+0x270>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
  402206:	2311      	movs	r3, #17
  402208:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
  40220a:	4b16      	ldr	r3, [pc, #88]	; (402264 <setup_compass+0x280>)
  40220c:	685b      	ldr	r3, [r3, #4]
  40220e:	7818      	ldrb	r0, [r3, #0]
  402210:	4b14      	ldr	r3, [pc, #80]	; (402264 <setup_compass+0x280>)
  402212:	681b      	ldr	r3, [r3, #0]
  402214:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
  402218:	1d3b      	adds	r3, r7, #4
  40221a:	2201      	movs	r2, #1
  40221c:	4c12      	ldr	r4, [pc, #72]	; (402268 <setup_compass+0x284>)
  40221e:	47a0      	blx	r4
  402220:	4603      	mov	r3, r0
  402222:	2b00      	cmp	r3, #0
  402224:	d002      	beq.n	40222c <setup_compass+0x248>
        return -1;
  402226:	f04f 33ff 	mov.w	r3, #4294967295
  40222a:	e013      	b.n	402254 <setup_compass+0x270>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
  40222c:	2303      	movs	r3, #3
  40222e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
  402230:	4b0c      	ldr	r3, [pc, #48]	; (402264 <setup_compass+0x280>)
  402232:	685b      	ldr	r3, [r3, #4]
  402234:	7818      	ldrb	r0, [r3, #0]
  402236:	4b0b      	ldr	r3, [pc, #44]	; (402264 <setup_compass+0x280>)
  402238:	681b      	ldr	r3, [r3, #0]
  40223a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
  40223e:	1d3b      	adds	r3, r7, #4
  402240:	2201      	movs	r2, #1
  402242:	4c09      	ldr	r4, [pc, #36]	; (402268 <setup_compass+0x284>)
  402244:	47a0      	blx	r4
  402246:	4603      	mov	r3, r0
  402248:	2b00      	cmp	r3, #0
  40224a:	d002      	beq.n	402252 <setup_compass+0x26e>
        return -1;
  40224c:	f04f 33ff 	mov.w	r3, #4294967295
  402250:	e000      	b.n	402254 <setup_compass+0x270>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
  402252:	2300      	movs	r3, #0
}
  402254:	4618      	mov	r0, r3
  402256:	3714      	adds	r7, #20
  402258:	46bd      	mov	sp, r7
  40225a:	bd90      	pop	{r4, r7, pc}
  40225c:	00401aa5 	.word	0x00401aa5
  402260:	004039d9 	.word	0x004039d9
  402264:	20000000 	.word	0x20000000
  402268:	0040391d 	.word	0x0040391d
  40226c:	004038ed 	.word	0x004038ed

00402270 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
  402270:	b598      	push	{r3, r4, r7, lr}
  402272:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
  402274:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402278:	23c8      	movs	r3, #200	; 0xc8
  40227a:	4904      	ldr	r1, [pc, #16]	; (40228c <dmp_load_motion_driver_firmware+0x1c>)
  40227c:	f640 30f6 	movw	r0, #3062	; 0xbf6
  402280:	4c03      	ldr	r4, [pc, #12]	; (402290 <dmp_load_motion_driver_firmware+0x20>)
  402282:	47a0      	blx	r4
  402284:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
  402286:	4618      	mov	r0, r3
  402288:	bd98      	pop	{r3, r4, r7, pc}
  40228a:	bf00      	nop
  40228c:	00406a94 	.word	0x00406a94
  402290:	00401e1d 	.word	0x00401e1d

00402294 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
  402294:	b580      	push	{r7, lr}
  402296:	b088      	sub	sp, #32
  402298:	af00      	add	r7, sp, #0
  40229a:	4603      	mov	r3, r0
  40229c:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
  40229e:	4a6d      	ldr	r2, [pc, #436]	; (402454 <dmp_set_orientation+0x1c0>)
  4022a0:	f107 0314 	add.w	r3, r7, #20
  4022a4:	8811      	ldrh	r1, [r2, #0]
  4022a6:	7892      	ldrb	r2, [r2, #2]
  4022a8:	8019      	strh	r1, [r3, #0]
  4022aa:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
  4022ac:	4a6a      	ldr	r2, [pc, #424]	; (402458 <dmp_set_orientation+0x1c4>)
  4022ae:	f107 0310 	add.w	r3, r7, #16
  4022b2:	8811      	ldrh	r1, [r2, #0]
  4022b4:	7892      	ldrb	r2, [r2, #2]
  4022b6:	8019      	strh	r1, [r3, #0]
  4022b8:	709a      	strb	r2, [r3, #2]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
  4022ba:	4a68      	ldr	r2, [pc, #416]	; (40245c <dmp_set_orientation+0x1c8>)
  4022bc:	f107 030c 	add.w	r3, r7, #12
  4022c0:	8811      	ldrh	r1, [r2, #0]
  4022c2:	7892      	ldrb	r2, [r2, #2]
  4022c4:	8019      	strh	r1, [r3, #0]
  4022c6:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
  4022c8:	4a65      	ldr	r2, [pc, #404]	; (402460 <dmp_set_orientation+0x1cc>)
  4022ca:	f107 0308 	add.w	r3, r7, #8
  4022ce:	8811      	ldrh	r1, [r2, #0]
  4022d0:	7892      	ldrb	r2, [r2, #2]
  4022d2:	8019      	strh	r1, [r3, #0]
  4022d4:	709a      	strb	r2, [r3, #2]

    gyro_regs[0] = gyro_axes[orient & 3];
  4022d6:	88fb      	ldrh	r3, [r7, #6]
  4022d8:	f003 0303 	and.w	r3, r3, #3
  4022dc:	f107 0220 	add.w	r2, r7, #32
  4022e0:	4413      	add	r3, r2
  4022e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4022e6:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
  4022e8:	88fb      	ldrh	r3, [r7, #6]
  4022ea:	08db      	lsrs	r3, r3, #3
  4022ec:	b29b      	uxth	r3, r3
  4022ee:	f003 0303 	and.w	r3, r3, #3
  4022f2:	f107 0220 	add.w	r2, r7, #32
  4022f6:	4413      	add	r3, r2
  4022f8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4022fc:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
  4022fe:	88fb      	ldrh	r3, [r7, #6]
  402300:	099b      	lsrs	r3, r3, #6
  402302:	b29b      	uxth	r3, r3
  402304:	f003 0303 	and.w	r3, r3, #3
  402308:	f107 0220 	add.w	r2, r7, #32
  40230c:	4413      	add	r3, r2
  40230e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  402312:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
  402314:	88fb      	ldrh	r3, [r7, #6]
  402316:	f003 0303 	and.w	r3, r3, #3
  40231a:	f107 0220 	add.w	r2, r7, #32
  40231e:	4413      	add	r3, r2
  402320:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  402324:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
  402326:	88fb      	ldrh	r3, [r7, #6]
  402328:	08db      	lsrs	r3, r3, #3
  40232a:	b29b      	uxth	r3, r3
  40232c:	f003 0303 	and.w	r3, r3, #3
  402330:	f107 0220 	add.w	r2, r7, #32
  402334:	4413      	add	r3, r2
  402336:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  40233a:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
  40233c:	88fb      	ldrh	r3, [r7, #6]
  40233e:	099b      	lsrs	r3, r3, #6
  402340:	b29b      	uxth	r3, r3
  402342:	f003 0303 	and.w	r3, r3, #3
  402346:	f107 0220 	add.w	r2, r7, #32
  40234a:	4413      	add	r3, r2
  40234c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
  402350:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
  402352:	f107 031c 	add.w	r3, r7, #28
  402356:	461a      	mov	r2, r3
  402358:	2103      	movs	r1, #3
  40235a:	f240 4026 	movw	r0, #1062	; 0x426
  40235e:	4b41      	ldr	r3, [pc, #260]	; (402464 <dmp_set_orientation+0x1d0>)
  402360:	4798      	blx	r3
  402362:	4603      	mov	r3, r0
  402364:	2b00      	cmp	r3, #0
  402366:	d002      	beq.n	40236e <dmp_set_orientation+0xda>
        return -1;
  402368:	f04f 33ff 	mov.w	r3, #4294967295
  40236c:	e06e      	b.n	40244c <dmp_set_orientation+0x1b8>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
  40236e:	f107 0318 	add.w	r3, r7, #24
  402372:	461a      	mov	r2, r3
  402374:	2103      	movs	r1, #3
  402376:	f240 402a 	movw	r0, #1066	; 0x42a
  40237a:	4b3a      	ldr	r3, [pc, #232]	; (402464 <dmp_set_orientation+0x1d0>)
  40237c:	4798      	blx	r3
  40237e:	4603      	mov	r3, r0
  402380:	2b00      	cmp	r3, #0
  402382:	d002      	beq.n	40238a <dmp_set_orientation+0xf6>
        return -1;
  402384:	f04f 33ff 	mov.w	r3, #4294967295
  402388:	e060      	b.n	40244c <dmp_set_orientation+0x1b8>

    memcpy(gyro_regs, gyro_sign, 3);
  40238a:	f107 031c 	add.w	r3, r7, #28
  40238e:	f107 020c 	add.w	r2, r7, #12
  402392:	6812      	ldr	r2, [r2, #0]
  402394:	4611      	mov	r1, r2
  402396:	8019      	strh	r1, [r3, #0]
  402398:	3302      	adds	r3, #2
  40239a:	0c12      	lsrs	r2, r2, #16
  40239c:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
  40239e:	f107 0318 	add.w	r3, r7, #24
  4023a2:	f107 0208 	add.w	r2, r7, #8
  4023a6:	6812      	ldr	r2, [r2, #0]
  4023a8:	4611      	mov	r1, r2
  4023aa:	8019      	strh	r1, [r3, #0]
  4023ac:	3302      	adds	r3, #2
  4023ae:	0c12      	lsrs	r2, r2, #16
  4023b0:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
  4023b2:	88fb      	ldrh	r3, [r7, #6]
  4023b4:	f003 0304 	and.w	r3, r3, #4
  4023b8:	2b00      	cmp	r3, #0
  4023ba:	d009      	beq.n	4023d0 <dmp_set_orientation+0x13c>
        gyro_regs[0] |= 1;
  4023bc:	7f3b      	ldrb	r3, [r7, #28]
  4023be:	f043 0301 	orr.w	r3, r3, #1
  4023c2:	b2db      	uxtb	r3, r3
  4023c4:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
  4023c6:	7e3b      	ldrb	r3, [r7, #24]
  4023c8:	f043 0301 	orr.w	r3, r3, #1
  4023cc:	b2db      	uxtb	r3, r3
  4023ce:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
  4023d0:	88fb      	ldrh	r3, [r7, #6]
  4023d2:	f003 0320 	and.w	r3, r3, #32
  4023d6:	2b00      	cmp	r3, #0
  4023d8:	d009      	beq.n	4023ee <dmp_set_orientation+0x15a>
        gyro_regs[1] |= 1;
  4023da:	7f7b      	ldrb	r3, [r7, #29]
  4023dc:	f043 0301 	orr.w	r3, r3, #1
  4023e0:	b2db      	uxtb	r3, r3
  4023e2:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
  4023e4:	7e7b      	ldrb	r3, [r7, #25]
  4023e6:	f043 0301 	orr.w	r3, r3, #1
  4023ea:	b2db      	uxtb	r3, r3
  4023ec:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
  4023ee:	88fb      	ldrh	r3, [r7, #6]
  4023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4023f4:	2b00      	cmp	r3, #0
  4023f6:	d009      	beq.n	40240c <dmp_set_orientation+0x178>
        gyro_regs[2] |= 1;
  4023f8:	7fbb      	ldrb	r3, [r7, #30]
  4023fa:	f043 0301 	orr.w	r3, r3, #1
  4023fe:	b2db      	uxtb	r3, r3
  402400:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
  402402:	7ebb      	ldrb	r3, [r7, #26]
  402404:	f043 0301 	orr.w	r3, r3, #1
  402408:	b2db      	uxtb	r3, r3
  40240a:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
  40240c:	f107 031c 	add.w	r3, r7, #28
  402410:	461a      	mov	r2, r3
  402412:	2103      	movs	r1, #3
  402414:	f44f 6088 	mov.w	r0, #1088	; 0x440
  402418:	4b12      	ldr	r3, [pc, #72]	; (402464 <dmp_set_orientation+0x1d0>)
  40241a:	4798      	blx	r3
  40241c:	4603      	mov	r3, r0
  40241e:	2b00      	cmp	r3, #0
  402420:	d002      	beq.n	402428 <dmp_set_orientation+0x194>
        return -1;
  402422:	f04f 33ff 	mov.w	r3, #4294967295
  402426:	e011      	b.n	40244c <dmp_set_orientation+0x1b8>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
  402428:	f107 0318 	add.w	r3, r7, #24
  40242c:	461a      	mov	r2, r3
  40242e:	2103      	movs	r1, #3
  402430:	f240 4031 	movw	r0, #1073	; 0x431
  402434:	4b0b      	ldr	r3, [pc, #44]	; (402464 <dmp_set_orientation+0x1d0>)
  402436:	4798      	blx	r3
  402438:	4603      	mov	r3, r0
  40243a:	2b00      	cmp	r3, #0
  40243c:	d002      	beq.n	402444 <dmp_set_orientation+0x1b0>
        return -1;
  40243e:	f04f 33ff 	mov.w	r3, #4294967295
  402442:	e003      	b.n	40244c <dmp_set_orientation+0x1b8>
    dmp.orient = orient;
  402444:	4a08      	ldr	r2, [pc, #32]	; (402468 <dmp_set_orientation+0x1d4>)
  402446:	88fb      	ldrh	r3, [r7, #6]
  402448:	8113      	strh	r3, [r2, #8]
    return 0;
  40244a:	2300      	movs	r3, #0
}
  40244c:	4618      	mov	r0, r3
  40244e:	3720      	adds	r7, #32
  402450:	46bd      	mov	sp, r7
  402452:	bd80      	pop	{r7, pc}
  402454:	0040768c 	.word	0x0040768c
  402458:	00407690 	.word	0x00407690
  40245c:	00407694 	.word	0x00407694
  402460:	00407698 	.word	0x00407698
  402464:	00401cc9 	.word	0x00401cc9
  402468:	200004a4 	.word	0x200004a4

0040246c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
  40246c:	b580      	push	{r7, lr}
  40246e:	b088      	sub	sp, #32
  402470:	af00      	add	r7, sp, #0
  402472:	4603      	mov	r3, r0
  402474:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
  402476:	4a20      	ldr	r2, [pc, #128]	; (4024f8 <dmp_set_fifo_rate+0x8c>)
  402478:	f107 0310 	add.w	r3, r7, #16
  40247c:	6810      	ldr	r0, [r2, #0]
  40247e:	6851      	ldr	r1, [r2, #4]
  402480:	6892      	ldr	r2, [r2, #8]
  402482:	c307      	stmia	r3!, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
  402484:	88fb      	ldrh	r3, [r7, #6]
  402486:	2bc8      	cmp	r3, #200	; 0xc8
  402488:	d902      	bls.n	402490 <dmp_set_fifo_rate+0x24>
        return -1;
  40248a:	f04f 33ff 	mov.w	r3, #4294967295
  40248e:	e02e      	b.n	4024ee <dmp_set_fifo_rate+0x82>
    div = DMP_SAMPLE_RATE / rate - 1;
  402490:	88fb      	ldrh	r3, [r7, #6]
  402492:	22c8      	movs	r2, #200	; 0xc8
  402494:	fb92 f3f3 	sdiv	r3, r2, r3
  402498:	b29b      	uxth	r3, r3
  40249a:	3b01      	subs	r3, #1
  40249c:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
  40249e:	8bfb      	ldrh	r3, [r7, #30]
  4024a0:	0a1b      	lsrs	r3, r3, #8
  4024a2:	b29b      	uxth	r3, r3
  4024a4:	b2db      	uxtb	r3, r3
  4024a6:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
  4024a8:	8bfb      	ldrh	r3, [r7, #30]
  4024aa:	b2db      	uxtb	r3, r3
  4024ac:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
  4024ae:	f107 0308 	add.w	r3, r7, #8
  4024b2:	461a      	mov	r2, r3
  4024b4:	2102      	movs	r1, #2
  4024b6:	f240 2016 	movw	r0, #534	; 0x216
  4024ba:	4b10      	ldr	r3, [pc, #64]	; (4024fc <dmp_set_fifo_rate+0x90>)
  4024bc:	4798      	blx	r3
  4024be:	4603      	mov	r3, r0
  4024c0:	2b00      	cmp	r3, #0
  4024c2:	d002      	beq.n	4024ca <dmp_set_fifo_rate+0x5e>
        return -1;
  4024c4:	f04f 33ff 	mov.w	r3, #4294967295
  4024c8:	e011      	b.n	4024ee <dmp_set_fifo_rate+0x82>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
  4024ca:	f107 0310 	add.w	r3, r7, #16
  4024ce:	461a      	mov	r2, r3
  4024d0:	210c      	movs	r1, #12
  4024d2:	f640 20c1 	movw	r0, #2753	; 0xac1
  4024d6:	4b09      	ldr	r3, [pc, #36]	; (4024fc <dmp_set_fifo_rate+0x90>)
  4024d8:	4798      	blx	r3
  4024da:	4603      	mov	r3, r0
  4024dc:	2b00      	cmp	r3, #0
  4024de:	d002      	beq.n	4024e6 <dmp_set_fifo_rate+0x7a>
        return -1;
  4024e0:	f04f 33ff 	mov.w	r3, #4294967295
  4024e4:	e003      	b.n	4024ee <dmp_set_fifo_rate+0x82>

    dmp.fifo_rate = rate;
  4024e6:	4a06      	ldr	r2, [pc, #24]	; (402500 <dmp_set_fifo_rate+0x94>)
  4024e8:	88fb      	ldrh	r3, [r7, #6]
  4024ea:	8193      	strh	r3, [r2, #12]
    return 0;
  4024ec:	2300      	movs	r3, #0
}
  4024ee:	4618      	mov	r0, r3
  4024f0:	3720      	adds	r7, #32
  4024f2:	46bd      	mov	sp, r7
  4024f4:	bd80      	pop	{r7, pc}
  4024f6:	bf00      	nop
  4024f8:	0040769c 	.word	0x0040769c
  4024fc:	00401cc9 	.word	0x00401cc9
  402500:	200004a4 	.word	0x200004a4

00402504 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
  402504:	b580      	push	{r7, lr}
  402506:	b086      	sub	sp, #24
  402508:	af00      	add	r7, sp, #0
  40250a:	4603      	mov	r3, r0
  40250c:	460a      	mov	r2, r1
  40250e:	71fb      	strb	r3, [r7, #7]
  402510:	4613      	mov	r3, r2
  402512:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
  402514:	79fb      	ldrb	r3, [r7, #7]
  402516:	f003 0307 	and.w	r3, r3, #7
  40251a:	2b00      	cmp	r3, #0
  40251c:	d003      	beq.n	402526 <dmp_set_tap_thresh+0x22>
  40251e:	88bb      	ldrh	r3, [r7, #4]
  402520:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
  402524:	d902      	bls.n	40252c <dmp_set_tap_thresh+0x28>
        return -1;
  402526:	f04f 33ff 	mov.w	r3, #4294967295
  40252a:	e10f      	b.n	40274c <dmp_set_tap_thresh+0x248>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
  40252c:	88ba      	ldrh	r2, [r7, #4]
  40252e:	4b89      	ldr	r3, [pc, #548]	; (402754 <dmp_set_tap_thresh+0x250>)
  402530:	4610      	mov	r0, r2
  402532:	4798      	blx	r3
  402534:	4602      	mov	r2, r0
  402536:	4b88      	ldr	r3, [pc, #544]	; (402758 <dmp_set_tap_thresh+0x254>)
  402538:	4988      	ldr	r1, [pc, #544]	; (40275c <dmp_set_tap_thresh+0x258>)
  40253a:	4610      	mov	r0, r2
  40253c:	4798      	blx	r3
  40253e:	4603      	mov	r3, r0
  402540:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
  402542:	f107 030b 	add.w	r3, r7, #11
  402546:	4618      	mov	r0, r3
  402548:	4b85      	ldr	r3, [pc, #532]	; (402760 <dmp_set_tap_thresh+0x25c>)
  40254a:	4798      	blx	r3
    switch (accel_fsr) {
  40254c:	7afb      	ldrb	r3, [r7, #11]
  40254e:	3b02      	subs	r3, #2
  402550:	2b0e      	cmp	r3, #14
  402552:	f200 8081 	bhi.w	402658 <dmp_set_tap_thresh+0x154>
  402556:	a201      	add	r2, pc, #4	; (adr r2, 40255c <dmp_set_tap_thresh+0x58>)
  402558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40255c:	00402599 	.word	0x00402599
  402560:	00402659 	.word	0x00402659
  402564:	004025c9 	.word	0x004025c9
  402568:	00402659 	.word	0x00402659
  40256c:	00402659 	.word	0x00402659
  402570:	00402659 	.word	0x00402659
  402574:	004025f9 	.word	0x004025f9
  402578:	00402659 	.word	0x00402659
  40257c:	00402659 	.word	0x00402659
  402580:	00402659 	.word	0x00402659
  402584:	00402659 	.word	0x00402659
  402588:	00402659 	.word	0x00402659
  40258c:	00402659 	.word	0x00402659
  402590:	00402659 	.word	0x00402659
  402594:	00402629 	.word	0x00402629
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
  402598:	4b72      	ldr	r3, [pc, #456]	; (402764 <dmp_set_tap_thresh+0x260>)
  40259a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
  40259e:	6938      	ldr	r0, [r7, #16]
  4025a0:	4798      	blx	r3
  4025a2:	4603      	mov	r3, r0
  4025a4:	461a      	mov	r2, r3
  4025a6:	4b70      	ldr	r3, [pc, #448]	; (402768 <dmp_set_tap_thresh+0x264>)
  4025a8:	4610      	mov	r0, r2
  4025aa:	4798      	blx	r3
  4025ac:	4603      	mov	r3, r0
  4025ae:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
  4025b0:	4b6c      	ldr	r3, [pc, #432]	; (402764 <dmp_set_tap_thresh+0x260>)
  4025b2:	496e      	ldr	r1, [pc, #440]	; (40276c <dmp_set_tap_thresh+0x268>)
  4025b4:	6938      	ldr	r0, [r7, #16]
  4025b6:	4798      	blx	r3
  4025b8:	4603      	mov	r3, r0
  4025ba:	461a      	mov	r2, r3
  4025bc:	4b6a      	ldr	r3, [pc, #424]	; (402768 <dmp_set_tap_thresh+0x264>)
  4025be:	4610      	mov	r0, r2
  4025c0:	4798      	blx	r3
  4025c2:	4603      	mov	r3, r0
  4025c4:	82bb      	strh	r3, [r7, #20]
        break;
  4025c6:	e04a      	b.n	40265e <dmp_set_tap_thresh+0x15a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
  4025c8:	4b66      	ldr	r3, [pc, #408]	; (402764 <dmp_set_tap_thresh+0x260>)
  4025ca:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
  4025ce:	6938      	ldr	r0, [r7, #16]
  4025d0:	4798      	blx	r3
  4025d2:	4603      	mov	r3, r0
  4025d4:	461a      	mov	r2, r3
  4025d6:	4b64      	ldr	r3, [pc, #400]	; (402768 <dmp_set_tap_thresh+0x264>)
  4025d8:	4610      	mov	r0, r2
  4025da:	4798      	blx	r3
  4025dc:	4603      	mov	r3, r0
  4025de:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
  4025e0:	4b60      	ldr	r3, [pc, #384]	; (402764 <dmp_set_tap_thresh+0x260>)
  4025e2:	4963      	ldr	r1, [pc, #396]	; (402770 <dmp_set_tap_thresh+0x26c>)
  4025e4:	6938      	ldr	r0, [r7, #16]
  4025e6:	4798      	blx	r3
  4025e8:	4603      	mov	r3, r0
  4025ea:	461a      	mov	r2, r3
  4025ec:	4b5e      	ldr	r3, [pc, #376]	; (402768 <dmp_set_tap_thresh+0x264>)
  4025ee:	4610      	mov	r0, r2
  4025f0:	4798      	blx	r3
  4025f2:	4603      	mov	r3, r0
  4025f4:	82bb      	strh	r3, [r7, #20]
        break;
  4025f6:	e032      	b.n	40265e <dmp_set_tap_thresh+0x15a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
  4025f8:	4b5a      	ldr	r3, [pc, #360]	; (402764 <dmp_set_tap_thresh+0x260>)
  4025fa:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
  4025fe:	6938      	ldr	r0, [r7, #16]
  402600:	4798      	blx	r3
  402602:	4603      	mov	r3, r0
  402604:	461a      	mov	r2, r3
  402606:	4b58      	ldr	r3, [pc, #352]	; (402768 <dmp_set_tap_thresh+0x264>)
  402608:	4610      	mov	r0, r2
  40260a:	4798      	blx	r3
  40260c:	4603      	mov	r3, r0
  40260e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
  402610:	4b54      	ldr	r3, [pc, #336]	; (402764 <dmp_set_tap_thresh+0x260>)
  402612:	4958      	ldr	r1, [pc, #352]	; (402774 <dmp_set_tap_thresh+0x270>)
  402614:	6938      	ldr	r0, [r7, #16]
  402616:	4798      	blx	r3
  402618:	4603      	mov	r3, r0
  40261a:	461a      	mov	r2, r3
  40261c:	4b52      	ldr	r3, [pc, #328]	; (402768 <dmp_set_tap_thresh+0x264>)
  40261e:	4610      	mov	r0, r2
  402620:	4798      	blx	r3
  402622:	4603      	mov	r3, r0
  402624:	82bb      	strh	r3, [r7, #20]
        break;
  402626:	e01a      	b.n	40265e <dmp_set_tap_thresh+0x15a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
  402628:	4b4e      	ldr	r3, [pc, #312]	; (402764 <dmp_set_tap_thresh+0x260>)
  40262a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
  40262e:	6938      	ldr	r0, [r7, #16]
  402630:	4798      	blx	r3
  402632:	4603      	mov	r3, r0
  402634:	461a      	mov	r2, r3
  402636:	4b4c      	ldr	r3, [pc, #304]	; (402768 <dmp_set_tap_thresh+0x264>)
  402638:	4610      	mov	r0, r2
  40263a:	4798      	blx	r3
  40263c:	4603      	mov	r3, r0
  40263e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
  402640:	4b48      	ldr	r3, [pc, #288]	; (402764 <dmp_set_tap_thresh+0x260>)
  402642:	494d      	ldr	r1, [pc, #308]	; (402778 <dmp_set_tap_thresh+0x274>)
  402644:	6938      	ldr	r0, [r7, #16]
  402646:	4798      	blx	r3
  402648:	4603      	mov	r3, r0
  40264a:	461a      	mov	r2, r3
  40264c:	4b46      	ldr	r3, [pc, #280]	; (402768 <dmp_set_tap_thresh+0x264>)
  40264e:	4610      	mov	r0, r2
  402650:	4798      	blx	r3
  402652:	4603      	mov	r3, r0
  402654:	82bb      	strh	r3, [r7, #20]
        break;
  402656:	e002      	b.n	40265e <dmp_set_tap_thresh+0x15a>
    default:
        return -1;
  402658:	f04f 33ff 	mov.w	r3, #4294967295
  40265c:	e076      	b.n	40274c <dmp_set_tap_thresh+0x248>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
  40265e:	8afb      	ldrh	r3, [r7, #22]
  402660:	0a1b      	lsrs	r3, r3, #8
  402662:	b29b      	uxth	r3, r3
  402664:	b2db      	uxtb	r3, r3
  402666:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
  402668:	8afb      	ldrh	r3, [r7, #22]
  40266a:	b2db      	uxtb	r3, r3
  40266c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
  40266e:	8abb      	ldrh	r3, [r7, #20]
  402670:	0a1b      	lsrs	r3, r3, #8
  402672:	b29b      	uxth	r3, r3
  402674:	b2db      	uxtb	r3, r3
  402676:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
  402678:	8abb      	ldrh	r3, [r7, #20]
  40267a:	b2db      	uxtb	r3, r3
  40267c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
  40267e:	79fb      	ldrb	r3, [r7, #7]
  402680:	f003 0301 	and.w	r3, r3, #1
  402684:	2b00      	cmp	r3, #0
  402686:	d01c      	beq.n	4026c2 <dmp_set_tap_thresh+0x1be>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
  402688:	f107 030c 	add.w	r3, r7, #12
  40268c:	461a      	mov	r2, r3
  40268e:	2102      	movs	r1, #2
  402690:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
  402694:	4b39      	ldr	r3, [pc, #228]	; (40277c <dmp_set_tap_thresh+0x278>)
  402696:	4798      	blx	r3
  402698:	4603      	mov	r3, r0
  40269a:	2b00      	cmp	r3, #0
  40269c:	d002      	beq.n	4026a4 <dmp_set_tap_thresh+0x1a0>
            return -1;
  40269e:	f04f 33ff 	mov.w	r3, #4294967295
  4026a2:	e053      	b.n	40274c <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
  4026a4:	f107 030c 	add.w	r3, r7, #12
  4026a8:	3302      	adds	r3, #2
  4026aa:	461a      	mov	r2, r3
  4026ac:	2102      	movs	r1, #2
  4026ae:	f44f 7092 	mov.w	r0, #292	; 0x124
  4026b2:	4b32      	ldr	r3, [pc, #200]	; (40277c <dmp_set_tap_thresh+0x278>)
  4026b4:	4798      	blx	r3
  4026b6:	4603      	mov	r3, r0
  4026b8:	2b00      	cmp	r3, #0
  4026ba:	d002      	beq.n	4026c2 <dmp_set_tap_thresh+0x1be>
            return -1;
  4026bc:	f04f 33ff 	mov.w	r3, #4294967295
  4026c0:	e044      	b.n	40274c <dmp_set_tap_thresh+0x248>
    }
    if (axis & TAP_Y) {
  4026c2:	79fb      	ldrb	r3, [r7, #7]
  4026c4:	f003 0302 	and.w	r3, r3, #2
  4026c8:	2b00      	cmp	r3, #0
  4026ca:	d01c      	beq.n	402706 <dmp_set_tap_thresh+0x202>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
  4026cc:	f107 030c 	add.w	r3, r7, #12
  4026d0:	461a      	mov	r2, r3
  4026d2:	2102      	movs	r1, #2
  4026d4:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
  4026d8:	4b28      	ldr	r3, [pc, #160]	; (40277c <dmp_set_tap_thresh+0x278>)
  4026da:	4798      	blx	r3
  4026dc:	4603      	mov	r3, r0
  4026de:	2b00      	cmp	r3, #0
  4026e0:	d002      	beq.n	4026e8 <dmp_set_tap_thresh+0x1e4>
            return -1;
  4026e2:	f04f 33ff 	mov.w	r3, #4294967295
  4026e6:	e031      	b.n	40274c <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
  4026e8:	f107 030c 	add.w	r3, r7, #12
  4026ec:	3302      	adds	r3, #2
  4026ee:	461a      	mov	r2, r3
  4026f0:	2102      	movs	r1, #2
  4026f2:	f44f 7094 	mov.w	r0, #296	; 0x128
  4026f6:	4b21      	ldr	r3, [pc, #132]	; (40277c <dmp_set_tap_thresh+0x278>)
  4026f8:	4798      	blx	r3
  4026fa:	4603      	mov	r3, r0
  4026fc:	2b00      	cmp	r3, #0
  4026fe:	d002      	beq.n	402706 <dmp_set_tap_thresh+0x202>
            return -1;
  402700:	f04f 33ff 	mov.w	r3, #4294967295
  402704:	e022      	b.n	40274c <dmp_set_tap_thresh+0x248>
    }
    if (axis & TAP_Z) {
  402706:	79fb      	ldrb	r3, [r7, #7]
  402708:	f003 0304 	and.w	r3, r3, #4
  40270c:	2b00      	cmp	r3, #0
  40270e:	d01c      	beq.n	40274a <dmp_set_tap_thresh+0x246>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
  402710:	f107 030c 	add.w	r3, r7, #12
  402714:	461a      	mov	r2, r3
  402716:	2102      	movs	r1, #2
  402718:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
  40271c:	4b17      	ldr	r3, [pc, #92]	; (40277c <dmp_set_tap_thresh+0x278>)
  40271e:	4798      	blx	r3
  402720:	4603      	mov	r3, r0
  402722:	2b00      	cmp	r3, #0
  402724:	d002      	beq.n	40272c <dmp_set_tap_thresh+0x228>
            return -1;
  402726:	f04f 33ff 	mov.w	r3, #4294967295
  40272a:	e00f      	b.n	40274c <dmp_set_tap_thresh+0x248>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
  40272c:	f107 030c 	add.w	r3, r7, #12
  402730:	3302      	adds	r3, #2
  402732:	461a      	mov	r2, r3
  402734:	2102      	movs	r1, #2
  402736:	f44f 7096 	mov.w	r0, #300	; 0x12c
  40273a:	4b10      	ldr	r3, [pc, #64]	; (40277c <dmp_set_tap_thresh+0x278>)
  40273c:	4798      	blx	r3
  40273e:	4603      	mov	r3, r0
  402740:	2b00      	cmp	r3, #0
  402742:	d002      	beq.n	40274a <dmp_set_tap_thresh+0x246>
            return -1;
  402744:	f04f 33ff 	mov.w	r3, #4294967295
  402748:	e000      	b.n	40274c <dmp_set_tap_thresh+0x248>
    }
    return 0;
  40274a:	2300      	movs	r3, #0
}
  40274c:	4618      	mov	r0, r3
  40274e:	3718      	adds	r7, #24
  402750:	46bd      	mov	sp, r7
  402752:	bd80      	pop	{r7, pc}
  402754:	00406035 	.word	0x00406035
  402758:	0040624d 	.word	0x0040624d
  40275c:	43480000 	.word	0x43480000
  402760:	004014a1 	.word	0x004014a1
  402764:	004060e5 	.word	0x004060e5
  402768:	00406471 	.word	0x00406471
  40276c:	46400000 	.word	0x46400000
  402770:	45c00000 	.word	0x45c00000
  402774:	45400000 	.word	0x45400000
  402778:	44c00000 	.word	0x44c00000
  40277c:	00401cc9 	.word	0x00401cc9

00402780 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
  402780:	b580      	push	{r7, lr}
  402782:	b084      	sub	sp, #16
  402784:	af00      	add	r7, sp, #0
  402786:	4603      	mov	r3, r0
  402788:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
  40278a:	2300      	movs	r3, #0
  40278c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
  40278e:	79fb      	ldrb	r3, [r7, #7]
  402790:	f003 0301 	and.w	r3, r3, #1
  402794:	2b00      	cmp	r3, #0
  402796:	d004      	beq.n	4027a2 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
  402798:	7bfb      	ldrb	r3, [r7, #15]
  40279a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  40279e:	b2db      	uxtb	r3, r3
  4027a0:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
  4027a2:	79fb      	ldrb	r3, [r7, #7]
  4027a4:	f003 0302 	and.w	r3, r3, #2
  4027a8:	2b00      	cmp	r3, #0
  4027aa:	d004      	beq.n	4027b6 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
  4027ac:	7bfb      	ldrb	r3, [r7, #15]
  4027ae:	f043 030c 	orr.w	r3, r3, #12
  4027b2:	b2db      	uxtb	r3, r3
  4027b4:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
  4027b6:	79fb      	ldrb	r3, [r7, #7]
  4027b8:	f003 0304 	and.w	r3, r3, #4
  4027bc:	2b00      	cmp	r3, #0
  4027be:	d004      	beq.n	4027ca <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
  4027c0:	7bfb      	ldrb	r3, [r7, #15]
  4027c2:	f043 0303 	orr.w	r3, r3, #3
  4027c6:	b2db      	uxtb	r3, r3
  4027c8:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
  4027ca:	f107 030f 	add.w	r3, r7, #15
  4027ce:	461a      	mov	r2, r3
  4027d0:	2101      	movs	r1, #1
  4027d2:	f44f 70a4 	mov.w	r0, #328	; 0x148
  4027d6:	4b03      	ldr	r3, [pc, #12]	; (4027e4 <dmp_set_tap_axes+0x64>)
  4027d8:	4798      	blx	r3
  4027da:	4603      	mov	r3, r0
}
  4027dc:	4618      	mov	r0, r3
  4027de:	3710      	adds	r7, #16
  4027e0:	46bd      	mov	sp, r7
  4027e2:	bd80      	pop	{r7, pc}
  4027e4:	00401cc9 	.word	0x00401cc9

004027e8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
  4027e8:	b580      	push	{r7, lr}
  4027ea:	b084      	sub	sp, #16
  4027ec:	af00      	add	r7, sp, #0
  4027ee:	4603      	mov	r3, r0
  4027f0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
  4027f2:	79fb      	ldrb	r3, [r7, #7]
  4027f4:	2b00      	cmp	r3, #0
  4027f6:	d102      	bne.n	4027fe <dmp_set_tap_count+0x16>
        min_taps = 1;
  4027f8:	2301      	movs	r3, #1
  4027fa:	71fb      	strb	r3, [r7, #7]
  4027fc:	e004      	b.n	402808 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
  4027fe:	79fb      	ldrb	r3, [r7, #7]
  402800:	2b04      	cmp	r3, #4
  402802:	d901      	bls.n	402808 <dmp_set_tap_count+0x20>
        min_taps = 4;
  402804:	2304      	movs	r3, #4
  402806:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
  402808:	79fb      	ldrb	r3, [r7, #7]
  40280a:	3b01      	subs	r3, #1
  40280c:	b2db      	uxtb	r3, r3
  40280e:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
  402810:	f107 030f 	add.w	r3, r7, #15
  402814:	461a      	mov	r2, r3
  402816:	2101      	movs	r1, #1
  402818:	f240 104f 	movw	r0, #335	; 0x14f
  40281c:	4b03      	ldr	r3, [pc, #12]	; (40282c <dmp_set_tap_count+0x44>)
  40281e:	4798      	blx	r3
  402820:	4603      	mov	r3, r0
}
  402822:	4618      	mov	r0, r3
  402824:	3710      	adds	r7, #16
  402826:	46bd      	mov	sp, r7
  402828:	bd80      	pop	{r7, pc}
  40282a:	bf00      	nop
  40282c:	00401cc9 	.word	0x00401cc9

00402830 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
  402830:	b580      	push	{r7, lr}
  402832:	b084      	sub	sp, #16
  402834:	af00      	add	r7, sp, #0
  402836:	4603      	mov	r3, r0
  402838:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
  40283a:	88fb      	ldrh	r3, [r7, #6]
  40283c:	4a0c      	ldr	r2, [pc, #48]	; (402870 <dmp_set_tap_time+0x40>)
  40283e:	fba2 2303 	umull	r2, r3, r2, r3
  402842:	089b      	lsrs	r3, r3, #2
  402844:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
  402846:	89fb      	ldrh	r3, [r7, #14]
  402848:	0a1b      	lsrs	r3, r3, #8
  40284a:	b29b      	uxth	r3, r3
  40284c:	b2db      	uxtb	r3, r3
  40284e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
  402850:	89fb      	ldrh	r3, [r7, #14]
  402852:	b2db      	uxtb	r3, r3
  402854:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
  402856:	f107 030c 	add.w	r3, r7, #12
  40285a:	461a      	mov	r2, r3
  40285c:	2102      	movs	r1, #2
  40285e:	f44f 70ef 	mov.w	r0, #478	; 0x1de
  402862:	4b04      	ldr	r3, [pc, #16]	; (402874 <dmp_set_tap_time+0x44>)
  402864:	4798      	blx	r3
  402866:	4603      	mov	r3, r0
}
  402868:	4618      	mov	r0, r3
  40286a:	3710      	adds	r7, #16
  40286c:	46bd      	mov	sp, r7
  40286e:	bd80      	pop	{r7, pc}
  402870:	cccccccd 	.word	0xcccccccd
  402874:	00401cc9 	.word	0x00401cc9

00402878 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
  402878:	b580      	push	{r7, lr}
  40287a:	b084      	sub	sp, #16
  40287c:	af00      	add	r7, sp, #0
  40287e:	4603      	mov	r3, r0
  402880:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
  402882:	88fb      	ldrh	r3, [r7, #6]
  402884:	4a0c      	ldr	r2, [pc, #48]	; (4028b8 <dmp_set_tap_time_multi+0x40>)
  402886:	fba2 2303 	umull	r2, r3, r2, r3
  40288a:	089b      	lsrs	r3, r3, #2
  40288c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
  40288e:	89fb      	ldrh	r3, [r7, #14]
  402890:	0a1b      	lsrs	r3, r3, #8
  402892:	b29b      	uxth	r3, r3
  402894:	b2db      	uxtb	r3, r3
  402896:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
  402898:	89fb      	ldrh	r3, [r7, #14]
  40289a:	b2db      	uxtb	r3, r3
  40289c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
  40289e:	f107 030c 	add.w	r3, r7, #12
  4028a2:	461a      	mov	r2, r3
  4028a4:	2102      	movs	r1, #2
  4028a6:	f44f 70ed 	mov.w	r0, #474	; 0x1da
  4028aa:	4b04      	ldr	r3, [pc, #16]	; (4028bc <dmp_set_tap_time_multi+0x44>)
  4028ac:	4798      	blx	r3
  4028ae:	4603      	mov	r3, r0
}
  4028b0:	4618      	mov	r0, r3
  4028b2:	3710      	adds	r7, #16
  4028b4:	46bd      	mov	sp, r7
  4028b6:	bd80      	pop	{r7, pc}
  4028b8:	cccccccd 	.word	0xcccccccd
  4028bc:	00401cc9 	.word	0x00401cc9

004028c0 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
  4028c0:	b580      	push	{r7, lr}
  4028c2:	b084      	sub	sp, #16
  4028c4:	af00      	add	r7, sp, #0
  4028c6:	6078      	str	r0, [r7, #4]
  4028c8:	460b      	mov	r3, r1
  4028ca:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
  4028cc:	687b      	ldr	r3, [r7, #4]
  4028ce:	4a13      	ldr	r2, [pc, #76]	; (40291c <dmp_set_shake_reject_thresh+0x5c>)
  4028d0:	fb82 1203 	smull	r1, r2, r2, r3
  4028d4:	1192      	asrs	r2, r2, #6
  4028d6:	17db      	asrs	r3, r3, #31
  4028d8:	1ad3      	subs	r3, r2, r3
  4028da:	887a      	ldrh	r2, [r7, #2]
  4028dc:	fb02 f303 	mul.w	r3, r2, r3
  4028e0:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
  4028e2:	68fb      	ldr	r3, [r7, #12]
  4028e4:	161b      	asrs	r3, r3, #24
  4028e6:	b2db      	uxtb	r3, r3
  4028e8:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
  4028ea:	68fb      	ldr	r3, [r7, #12]
  4028ec:	141b      	asrs	r3, r3, #16
  4028ee:	b2db      	uxtb	r3, r3
  4028f0:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
  4028f2:	68fb      	ldr	r3, [r7, #12]
  4028f4:	121b      	asrs	r3, r3, #8
  4028f6:	b2db      	uxtb	r3, r3
  4028f8:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
  4028fa:	68fb      	ldr	r3, [r7, #12]
  4028fc:	b2db      	uxtb	r3, r3
  4028fe:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
  402900:	f107 0308 	add.w	r3, r7, #8
  402904:	461a      	mov	r2, r3
  402906:	2104      	movs	r1, #4
  402908:	f44f 70ae 	mov.w	r0, #348	; 0x15c
  40290c:	4b04      	ldr	r3, [pc, #16]	; (402920 <dmp_set_shake_reject_thresh+0x60>)
  40290e:	4798      	blx	r3
  402910:	4603      	mov	r3, r0
}
  402912:	4618      	mov	r0, r3
  402914:	3710      	adds	r7, #16
  402916:	46bd      	mov	sp, r7
  402918:	bd80      	pop	{r7, pc}
  40291a:	bf00      	nop
  40291c:	10624dd3 	.word	0x10624dd3
  402920:	00401cc9 	.word	0x00401cc9

00402924 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
  402924:	b580      	push	{r7, lr}
  402926:	b084      	sub	sp, #16
  402928:	af00      	add	r7, sp, #0
  40292a:	4603      	mov	r3, r0
  40292c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
  40292e:	88fb      	ldrh	r3, [r7, #6]
  402930:	4a0c      	ldr	r2, [pc, #48]	; (402964 <dmp_set_shake_reject_time+0x40>)
  402932:	fba2 2303 	umull	r2, r3, r2, r3
  402936:	089b      	lsrs	r3, r3, #2
  402938:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
  40293a:	88fb      	ldrh	r3, [r7, #6]
  40293c:	0a1b      	lsrs	r3, r3, #8
  40293e:	b29b      	uxth	r3, r3
  402940:	b2db      	uxtb	r3, r3
  402942:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
  402944:	88fb      	ldrh	r3, [r7, #6]
  402946:	b2db      	uxtb	r3, r3
  402948:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
  40294a:	f107 030c 	add.w	r3, r7, #12
  40294e:	461a      	mov	r2, r3
  402950:	2102      	movs	r1, #2
  402952:	f44f 70ad 	mov.w	r0, #346	; 0x15a
  402956:	4b04      	ldr	r3, [pc, #16]	; (402968 <dmp_set_shake_reject_time+0x44>)
  402958:	4798      	blx	r3
  40295a:	4603      	mov	r3, r0
}
  40295c:	4618      	mov	r0, r3
  40295e:	3710      	adds	r7, #16
  402960:	46bd      	mov	sp, r7
  402962:	bd80      	pop	{r7, pc}
  402964:	cccccccd 	.word	0xcccccccd
  402968:	00401cc9 	.word	0x00401cc9

0040296c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
  40296c:	b580      	push	{r7, lr}
  40296e:	b084      	sub	sp, #16
  402970:	af00      	add	r7, sp, #0
  402972:	4603      	mov	r3, r0
  402974:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
  402976:	88fb      	ldrh	r3, [r7, #6]
  402978:	4a0c      	ldr	r2, [pc, #48]	; (4029ac <dmp_set_shake_reject_timeout+0x40>)
  40297a:	fba2 2303 	umull	r2, r3, r2, r3
  40297e:	089b      	lsrs	r3, r3, #2
  402980:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
  402982:	88fb      	ldrh	r3, [r7, #6]
  402984:	0a1b      	lsrs	r3, r3, #8
  402986:	b29b      	uxth	r3, r3
  402988:	b2db      	uxtb	r3, r3
  40298a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
  40298c:	88fb      	ldrh	r3, [r7, #6]
  40298e:	b2db      	uxtb	r3, r3
  402990:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
  402992:	f107 030c 	add.w	r3, r7, #12
  402996:	461a      	mov	r2, r3
  402998:	2102      	movs	r1, #2
  40299a:	f44f 70ac 	mov.w	r0, #344	; 0x158
  40299e:	4b04      	ldr	r3, [pc, #16]	; (4029b0 <dmp_set_shake_reject_timeout+0x44>)
  4029a0:	4798      	blx	r3
  4029a2:	4603      	mov	r3, r0
}
  4029a4:	4618      	mov	r0, r3
  4029a6:	3710      	adds	r7, #16
  4029a8:	46bd      	mov	sp, r7
  4029aa:	bd80      	pop	{r7, pc}
  4029ac:	cccccccd 	.word	0xcccccccd
  4029b0:	00401cc9 	.word	0x00401cc9

004029b4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
  4029b4:	b580      	push	{r7, lr}
  4029b6:	b086      	sub	sp, #24
  4029b8:	af00      	add	r7, sp, #0
  4029ba:	4603      	mov	r3, r0
  4029bc:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
  4029be:	2302      	movs	r3, #2
  4029c0:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
  4029c2:	23ca      	movs	r3, #202	; 0xca
  4029c4:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
  4029c6:	23e3      	movs	r3, #227	; 0xe3
  4029c8:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
  4029ca:	2309      	movs	r3, #9
  4029cc:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
  4029ce:	f107 030c 	add.w	r3, r7, #12
  4029d2:	461a      	mov	r2, r3
  4029d4:	2104      	movs	r1, #4
  4029d6:	2068      	movs	r0, #104	; 0x68
  4029d8:	4b88      	ldr	r3, [pc, #544]	; (402bfc <dmp_enable_feature+0x248>)
  4029da:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
  4029dc:	23a3      	movs	r3, #163	; 0xa3
  4029de:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
  4029e0:	88fb      	ldrh	r3, [r7, #6]
  4029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4029e6:	2b00      	cmp	r3, #0
  4029e8:	d006      	beq.n	4029f8 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
  4029ea:	23c0      	movs	r3, #192	; 0xc0
  4029ec:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
  4029ee:	23c8      	movs	r3, #200	; 0xc8
  4029f0:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
  4029f2:	23c2      	movs	r3, #194	; 0xc2
  4029f4:	73fb      	strb	r3, [r7, #15]
  4029f6:	e005      	b.n	402a04 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
  4029f8:	23a3      	movs	r3, #163	; 0xa3
  4029fa:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
  4029fc:	23a3      	movs	r3, #163	; 0xa3
  4029fe:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
  402a00:	23a3      	movs	r3, #163	; 0xa3
  402a02:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
  402a04:	88fb      	ldrh	r3, [r7, #6]
  402a06:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402a0a:	2b00      	cmp	r3, #0
  402a0c:	d006      	beq.n	402a1c <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
  402a0e:	23c4      	movs	r3, #196	; 0xc4
  402a10:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
  402a12:	23cc      	movs	r3, #204	; 0xcc
  402a14:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
  402a16:	23c6      	movs	r3, #198	; 0xc6
  402a18:	74bb      	strb	r3, [r7, #18]
  402a1a:	e005      	b.n	402a28 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
  402a1c:	23a3      	movs	r3, #163	; 0xa3
  402a1e:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
  402a20:	23a3      	movs	r3, #163	; 0xa3
  402a22:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
  402a24:	23a3      	movs	r3, #163	; 0xa3
  402a26:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
  402a28:	23a3      	movs	r3, #163	; 0xa3
  402a2a:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
  402a2c:	23a3      	movs	r3, #163	; 0xa3
  402a2e:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
  402a30:	23a3      	movs	r3, #163	; 0xa3
  402a32:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
  402a34:	f107 030c 	add.w	r3, r7, #12
  402a38:	461a      	mov	r2, r3
  402a3a:	210a      	movs	r1, #10
  402a3c:	f640 20a7 	movw	r0, #2727	; 0xaa7
  402a40:	4b6e      	ldr	r3, [pc, #440]	; (402bfc <dmp_enable_feature+0x248>)
  402a42:	4798      	blx	r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
  402a44:	88fb      	ldrh	r3, [r7, #6]
  402a46:	f003 0303 	and.w	r3, r3, #3
  402a4a:	2b00      	cmp	r3, #0
  402a4c:	d002      	beq.n	402a54 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
  402a4e:	2320      	movs	r3, #32
  402a50:	733b      	strb	r3, [r7, #12]
  402a52:	e001      	b.n	402a58 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
  402a54:	23d8      	movs	r3, #216	; 0xd8
  402a56:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
  402a58:	f107 030c 	add.w	r3, r7, #12
  402a5c:	461a      	mov	r2, r3
  402a5e:	2101      	movs	r1, #1
  402a60:	f640 20b6 	movw	r0, #2742	; 0xab6
  402a64:	4b65      	ldr	r3, [pc, #404]	; (402bfc <dmp_enable_feature+0x248>)
  402a66:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
  402a68:	88fb      	ldrh	r3, [r7, #6]
  402a6a:	f003 0320 	and.w	r3, r3, #32
  402a6e:	2b00      	cmp	r3, #0
  402a70:	d003      	beq.n	402a7a <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
  402a72:	2001      	movs	r0, #1
  402a74:	4b62      	ldr	r3, [pc, #392]	; (402c00 <dmp_enable_feature+0x24c>)
  402a76:	4798      	blx	r3
  402a78:	e002      	b.n	402a80 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
  402a7a:	2000      	movs	r0, #0
  402a7c:	4b60      	ldr	r3, [pc, #384]	; (402c00 <dmp_enable_feature+0x24c>)
  402a7e:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
  402a80:	88fb      	ldrh	r3, [r7, #6]
  402a82:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402a86:	2b00      	cmp	r3, #0
  402a88:	d01d      	beq.n	402ac6 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
  402a8a:	88fb      	ldrh	r3, [r7, #6]
  402a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402a90:	2b00      	cmp	r3, #0
  402a92:	d008      	beq.n	402aa6 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
  402a94:	23b2      	movs	r3, #178	; 0xb2
  402a96:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
  402a98:	238b      	movs	r3, #139	; 0x8b
  402a9a:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
  402a9c:	23b6      	movs	r3, #182	; 0xb6
  402a9e:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
  402aa0:	239b      	movs	r3, #155	; 0x9b
  402aa2:	73fb      	strb	r3, [r7, #15]
  402aa4:	e007      	b.n	402ab6 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
  402aa6:	23b0      	movs	r3, #176	; 0xb0
  402aa8:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
  402aaa:	2380      	movs	r3, #128	; 0x80
  402aac:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
  402aae:	23b4      	movs	r3, #180	; 0xb4
  402ab0:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
  402ab2:	2390      	movs	r3, #144	; 0x90
  402ab4:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
  402ab6:	f107 030c 	add.w	r3, r7, #12
  402aba:	461a      	mov	r2, r3
  402abc:	2104      	movs	r1, #4
  402abe:	f640 20a2 	movw	r0, #2722	; 0xaa2
  402ac2:	4b4e      	ldr	r3, [pc, #312]	; (402bfc <dmp_enable_feature+0x248>)
  402ac4:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
  402ac6:	88fb      	ldrh	r3, [r7, #6]
  402ac8:	f003 0301 	and.w	r3, r3, #1
  402acc:	2b00      	cmp	r3, #0
  402ace:	d025      	beq.n	402b1c <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
  402ad0:	23f8      	movs	r3, #248	; 0xf8
  402ad2:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
  402ad4:	f107 030c 	add.w	r3, r7, #12
  402ad8:	461a      	mov	r2, r3
  402ada:	2101      	movs	r1, #1
  402adc:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
  402ae0:	4b46      	ldr	r3, [pc, #280]	; (402bfc <dmp_enable_feature+0x248>)
  402ae2:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
  402ae4:	21fa      	movs	r1, #250	; 0xfa
  402ae6:	2007      	movs	r0, #7
  402ae8:	4b46      	ldr	r3, [pc, #280]	; (402c04 <dmp_enable_feature+0x250>)
  402aea:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
  402aec:	2007      	movs	r0, #7
  402aee:	4b46      	ldr	r3, [pc, #280]	; (402c08 <dmp_enable_feature+0x254>)
  402af0:	4798      	blx	r3
        dmp_set_tap_count(1);
  402af2:	2001      	movs	r0, #1
  402af4:	4b45      	ldr	r3, [pc, #276]	; (402c0c <dmp_enable_feature+0x258>)
  402af6:	4798      	blx	r3
        dmp_set_tap_time(100);
  402af8:	2064      	movs	r0, #100	; 0x64
  402afa:	4b45      	ldr	r3, [pc, #276]	; (402c10 <dmp_enable_feature+0x25c>)
  402afc:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
  402afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402b02:	4b44      	ldr	r3, [pc, #272]	; (402c14 <dmp_enable_feature+0x260>)
  402b04:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
  402b06:	21c8      	movs	r1, #200	; 0xc8
  402b08:	4843      	ldr	r0, [pc, #268]	; (402c18 <dmp_enable_feature+0x264>)
  402b0a:	4b44      	ldr	r3, [pc, #272]	; (402c1c <dmp_enable_feature+0x268>)
  402b0c:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
  402b0e:	2028      	movs	r0, #40	; 0x28
  402b10:	4b43      	ldr	r3, [pc, #268]	; (402c20 <dmp_enable_feature+0x26c>)
  402b12:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
  402b14:	200a      	movs	r0, #10
  402b16:	4b43      	ldr	r3, [pc, #268]	; (402c24 <dmp_enable_feature+0x270>)
  402b18:	4798      	blx	r3
  402b1a:	e009      	b.n	402b30 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
  402b1c:	23d8      	movs	r3, #216	; 0xd8
  402b1e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
  402b20:	f107 030c 	add.w	r3, r7, #12
  402b24:	461a      	mov	r2, r3
  402b26:	2101      	movs	r1, #1
  402b28:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
  402b2c:	4b33      	ldr	r3, [pc, #204]	; (402bfc <dmp_enable_feature+0x248>)
  402b2e:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
  402b30:	88fb      	ldrh	r3, [r7, #6]
  402b32:	f003 0302 	and.w	r3, r3, #2
  402b36:	2b00      	cmp	r3, #0
  402b38:	d002      	beq.n	402b40 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
  402b3a:	23d9      	movs	r3, #217	; 0xd9
  402b3c:	733b      	strb	r3, [r7, #12]
  402b3e:	e001      	b.n	402b44 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
  402b40:	23d8      	movs	r3, #216	; 0xd8
  402b42:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
  402b44:	f107 030c 	add.w	r3, r7, #12
  402b48:	461a      	mov	r2, r3
  402b4a:	2101      	movs	r1, #1
  402b4c:	f240 703d 	movw	r0, #1853	; 0x73d
  402b50:	4b2a      	ldr	r3, [pc, #168]	; (402bfc <dmp_enable_feature+0x248>)
  402b52:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
  402b54:	88fb      	ldrh	r3, [r7, #6]
  402b56:	f003 0304 	and.w	r3, r3, #4
  402b5a:	2b00      	cmp	r3, #0
  402b5c:	d003      	beq.n	402b66 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
  402b5e:	2001      	movs	r0, #1
  402b60:	4b31      	ldr	r3, [pc, #196]	; (402c28 <dmp_enable_feature+0x274>)
  402b62:	4798      	blx	r3
  402b64:	e002      	b.n	402b6c <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
  402b66:	2000      	movs	r0, #0
  402b68:	4b2f      	ldr	r3, [pc, #188]	; (402c28 <dmp_enable_feature+0x274>)
  402b6a:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
  402b6c:	88fb      	ldrh	r3, [r7, #6]
  402b6e:	f003 0310 	and.w	r3, r3, #16
  402b72:	2b00      	cmp	r3, #0
  402b74:	d003      	beq.n	402b7e <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
  402b76:	2001      	movs	r0, #1
  402b78:	4b2c      	ldr	r3, [pc, #176]	; (402c2c <dmp_enable_feature+0x278>)
  402b7a:	4798      	blx	r3
  402b7c:	e002      	b.n	402b84 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
  402b7e:	2000      	movs	r0, #0
  402b80:	4b2a      	ldr	r3, [pc, #168]	; (402c2c <dmp_enable_feature+0x278>)
  402b82:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
  402b84:	88fb      	ldrh	r3, [r7, #6]
  402b86:	f043 0308 	orr.w	r3, r3, #8
  402b8a:	b29a      	uxth	r2, r3
  402b8c:	4b28      	ldr	r3, [pc, #160]	; (402c30 <dmp_enable_feature+0x27c>)
  402b8e:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
  402b90:	4b28      	ldr	r3, [pc, #160]	; (402c34 <dmp_enable_feature+0x280>)
  402b92:	4798      	blx	r3

    dmp.packet_length = 0;
  402b94:	4b26      	ldr	r3, [pc, #152]	; (402c30 <dmp_enable_feature+0x27c>)
  402b96:	2200      	movs	r2, #0
  402b98:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
  402b9a:	88fb      	ldrh	r3, [r7, #6]
  402b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402ba0:	2b00      	cmp	r3, #0
  402ba2:	d005      	beq.n	402bb0 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
  402ba4:	4b22      	ldr	r3, [pc, #136]	; (402c30 <dmp_enable_feature+0x27c>)
  402ba6:	7b9b      	ldrb	r3, [r3, #14]
  402ba8:	3306      	adds	r3, #6
  402baa:	b2da      	uxtb	r2, r3
  402bac:	4b20      	ldr	r3, [pc, #128]	; (402c30 <dmp_enable_feature+0x27c>)
  402bae:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
  402bb0:	88fb      	ldrh	r3, [r7, #6]
  402bb2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
  402bb6:	2b00      	cmp	r3, #0
  402bb8:	d005      	beq.n	402bc6 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
  402bba:	4b1d      	ldr	r3, [pc, #116]	; (402c30 <dmp_enable_feature+0x27c>)
  402bbc:	7b9b      	ldrb	r3, [r3, #14]
  402bbe:	3306      	adds	r3, #6
  402bc0:	b2da      	uxtb	r2, r3
  402bc2:	4b1b      	ldr	r3, [pc, #108]	; (402c30 <dmp_enable_feature+0x27c>)
  402bc4:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
  402bc6:	88fb      	ldrh	r3, [r7, #6]
  402bc8:	f003 0314 	and.w	r3, r3, #20
  402bcc:	2b00      	cmp	r3, #0
  402bce:	d005      	beq.n	402bdc <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
  402bd0:	4b17      	ldr	r3, [pc, #92]	; (402c30 <dmp_enable_feature+0x27c>)
  402bd2:	7b9b      	ldrb	r3, [r3, #14]
  402bd4:	3310      	adds	r3, #16
  402bd6:	b2da      	uxtb	r2, r3
  402bd8:	4b15      	ldr	r3, [pc, #84]	; (402c30 <dmp_enable_feature+0x27c>)
  402bda:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
  402bdc:	88fb      	ldrh	r3, [r7, #6]
  402bde:	f003 0303 	and.w	r3, r3, #3
  402be2:	2b00      	cmp	r3, #0
  402be4:	d005      	beq.n	402bf2 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
  402be6:	4b12      	ldr	r3, [pc, #72]	; (402c30 <dmp_enable_feature+0x27c>)
  402be8:	7b9b      	ldrb	r3, [r3, #14]
  402bea:	3304      	adds	r3, #4
  402bec:	b2da      	uxtb	r2, r3
  402bee:	4b10      	ldr	r3, [pc, #64]	; (402c30 <dmp_enable_feature+0x27c>)
  402bf0:	739a      	strb	r2, [r3, #14]

    return 0;
  402bf2:	2300      	movs	r3, #0
}
  402bf4:	4618      	mov	r0, r3
  402bf6:	3718      	adds	r7, #24
  402bf8:	46bd      	mov	sp, r7
  402bfa:	bd80      	pop	{r7, pc}
  402bfc:	00401cc9 	.word	0x00401cc9
  402c00:	00402c39 	.word	0x00402c39
  402c04:	00402505 	.word	0x00402505
  402c08:	00402781 	.word	0x00402781
  402c0c:	004027e9 	.word	0x004027e9
  402c10:	00402831 	.word	0x00402831
  402c14:	00402879 	.word	0x00402879
  402c18:	02cae309 	.word	0x02cae309
  402c1c:	004028c1 	.word	0x004028c1
  402c20:	00402925 	.word	0x00402925
  402c24:	0040296d 	.word	0x0040296d
  402c28:	00402ca5 	.word	0x00402ca5
  402c2c:	00402d01 	.word	0x00402d01
  402c30:	200004a4 	.word	0x200004a4
  402c34:	00401181 	.word	0x00401181

00402c38 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
  402c38:	b580      	push	{r7, lr}
  402c3a:	b088      	sub	sp, #32
  402c3c:	af00      	add	r7, sp, #0
  402c3e:	4603      	mov	r3, r0
  402c40:	71fb      	strb	r3, [r7, #7]
    if (enable) {
  402c42:	79fb      	ldrb	r3, [r7, #7]
  402c44:	2b00      	cmp	r3, #0
  402c46:	d011      	beq.n	402c6c <dmp_enable_gyro_cal+0x34>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
  402c48:	4a13      	ldr	r2, [pc, #76]	; (402c98 <dmp_enable_gyro_cal+0x60>)
  402c4a:	f107 0314 	add.w	r3, r7, #20
  402c4e:	6810      	ldr	r0, [r2, #0]
  402c50:	6851      	ldr	r1, [r2, #4]
  402c52:	c303      	stmia	r3!, {r0, r1}
  402c54:	7a12      	ldrb	r2, [r2, #8]
  402c56:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
  402c58:	f107 0314 	add.w	r3, r7, #20
  402c5c:	461a      	mov	r2, r3
  402c5e:	2109      	movs	r1, #9
  402c60:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
  402c64:	4b0d      	ldr	r3, [pc, #52]	; (402c9c <dmp_enable_gyro_cal+0x64>)
  402c66:	4798      	blx	r3
  402c68:	4603      	mov	r3, r0
  402c6a:	e010      	b.n	402c8e <dmp_enable_gyro_cal+0x56>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
  402c6c:	4a0c      	ldr	r2, [pc, #48]	; (402ca0 <dmp_enable_gyro_cal+0x68>)
  402c6e:	f107 0308 	add.w	r3, r7, #8
  402c72:	6810      	ldr	r0, [r2, #0]
  402c74:	6851      	ldr	r1, [r2, #4]
  402c76:	c303      	stmia	r3!, {r0, r1}
  402c78:	7a12      	ldrb	r2, [r2, #8]
  402c7a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
  402c7c:	f107 0308 	add.w	r3, r7, #8
  402c80:	461a      	mov	r2, r3
  402c82:	2109      	movs	r1, #9
  402c84:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
  402c88:	4b04      	ldr	r3, [pc, #16]	; (402c9c <dmp_enable_gyro_cal+0x64>)
  402c8a:	4798      	blx	r3
  402c8c:	4603      	mov	r3, r0
    }
}
  402c8e:	4618      	mov	r0, r3
  402c90:	3720      	adds	r7, #32
  402c92:	46bd      	mov	sp, r7
  402c94:	bd80      	pop	{r7, pc}
  402c96:	bf00      	nop
  402c98:	004076a8 	.word	0x004076a8
  402c9c:	00401cc9 	.word	0x00401cc9
  402ca0:	004076b4 	.word	0x004076b4

00402ca4 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
  402ca4:	b580      	push	{r7, lr}
  402ca6:	b084      	sub	sp, #16
  402ca8:	af00      	add	r7, sp, #0
  402caa:	4603      	mov	r3, r0
  402cac:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
  402cae:	79fb      	ldrb	r3, [r7, #7]
  402cb0:	2b00      	cmp	r3, #0
  402cb2:	d008      	beq.n	402cc6 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
  402cb4:	23c0      	movs	r3, #192	; 0xc0
  402cb6:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
  402cb8:	23c2      	movs	r3, #194	; 0xc2
  402cba:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
  402cbc:	23c4      	movs	r3, #196	; 0xc4
  402cbe:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
  402cc0:	23c6      	movs	r3, #198	; 0xc6
  402cc2:	73fb      	strb	r3, [r7, #15]
  402cc4:	e006      	b.n	402cd4 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
  402cc6:	f107 030c 	add.w	r3, r7, #12
  402cca:	2204      	movs	r2, #4
  402ccc:	218b      	movs	r1, #139	; 0x8b
  402cce:	4618      	mov	r0, r3
  402cd0:	4b08      	ldr	r3, [pc, #32]	; (402cf4 <dmp_enable_lp_quat+0x50>)
  402cd2:	4798      	blx	r3

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
  402cd4:	f107 030c 	add.w	r3, r7, #12
  402cd8:	461a      	mov	r2, r3
  402cda:	2104      	movs	r1, #4
  402cdc:	f640 2098 	movw	r0, #2712	; 0xa98
  402ce0:	4b05      	ldr	r3, [pc, #20]	; (402cf8 <dmp_enable_lp_quat+0x54>)
  402ce2:	4798      	blx	r3

    return mpu_reset_fifo();
  402ce4:	4b05      	ldr	r3, [pc, #20]	; (402cfc <dmp_enable_lp_quat+0x58>)
  402ce6:	4798      	blx	r3
  402ce8:	4603      	mov	r3, r0
}
  402cea:	4618      	mov	r0, r3
  402cec:	3710      	adds	r7, #16
  402cee:	46bd      	mov	sp, r7
  402cf0:	bd80      	pop	{r7, pc}
  402cf2:	bf00      	nop
  402cf4:	00406695 	.word	0x00406695
  402cf8:	00401cc9 	.word	0x00401cc9
  402cfc:	00401181 	.word	0x00401181

00402d00 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
  402d00:	b580      	push	{r7, lr}
  402d02:	b084      	sub	sp, #16
  402d04:	af00      	add	r7, sp, #0
  402d06:	4603      	mov	r3, r0
  402d08:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
  402d0a:	79fb      	ldrb	r3, [r7, #7]
  402d0c:	2b00      	cmp	r3, #0
  402d0e:	d008      	beq.n	402d22 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
  402d10:	2320      	movs	r3, #32
  402d12:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
  402d14:	2328      	movs	r3, #40	; 0x28
  402d16:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
  402d18:	2330      	movs	r3, #48	; 0x30
  402d1a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
  402d1c:	2338      	movs	r3, #56	; 0x38
  402d1e:	73fb      	strb	r3, [r7, #15]
  402d20:	e006      	b.n	402d30 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
  402d22:	f107 030c 	add.w	r3, r7, #12
  402d26:	2204      	movs	r2, #4
  402d28:	21a3      	movs	r1, #163	; 0xa3
  402d2a:	4618      	mov	r0, r3
  402d2c:	4b08      	ldr	r3, [pc, #32]	; (402d50 <dmp_enable_6x_lp_quat+0x50>)
  402d2e:	4798      	blx	r3

    mpu_write_mem(CFG_8, 4, regs);
  402d30:	f107 030c 	add.w	r3, r7, #12
  402d34:	461a      	mov	r2, r3
  402d36:	2104      	movs	r1, #4
  402d38:	f640 209e 	movw	r0, #2718	; 0xa9e
  402d3c:	4b05      	ldr	r3, [pc, #20]	; (402d54 <dmp_enable_6x_lp_quat+0x54>)
  402d3e:	4798      	blx	r3

    return mpu_reset_fifo();
  402d40:	4b05      	ldr	r3, [pc, #20]	; (402d58 <dmp_enable_6x_lp_quat+0x58>)
  402d42:	4798      	blx	r3
  402d44:	4603      	mov	r3, r0
}
  402d46:	4618      	mov	r0, r3
  402d48:	3710      	adds	r7, #16
  402d4a:	46bd      	mov	sp, r7
  402d4c:	bd80      	pop	{r7, pc}
  402d4e:	bf00      	nop
  402d50:	00406695 	.word	0x00406695
  402d54:	00401cc9 	.word	0x00401cc9
  402d58:	00401181 	.word	0x00401181

00402d5c <LightSensor_Setup>:

/******** Light Sensor Registry Setup ********/
//White Light Detection Enabled with low lux (40ms integration time), No Trigger, Auto Mode
//Only sets up one light sensor at a time, not both
void LightSensor_Setup(uint8_t channel)
{
  402d5c:	b580      	push	{r7, lr}
  402d5e:	b082      	sub	sp, #8
  402d60:	af00      	add	r7, sp, #0
  402d62:	4603      	mov	r3, r0
  402d64:	71fb      	strb	r3, [r7, #7]
	twi0MuxSwitch(channel); //Set multiplexer address to correct device
  402d66:	79fb      	ldrb	r3, [r7, #7]
  402d68:	4618      	mov	r0, r3
  402d6a:	4b05      	ldr	r3, [pc, #20]	; (402d80 <LightSensor_Setup+0x24>)
  402d6c:	4798      	blx	r3
	twi0Write(TWI0_LIGHTSENS_ADDR, LightSens_Config, LightSens_Auto_LowLux);
  402d6e:	2200      	movs	r2, #0
  402d70:	2100      	movs	r1, #0
  402d72:	2010      	movs	r0, #16
  402d74:	4b03      	ldr	r3, [pc, #12]	; (402d84 <LightSensor_Setup+0x28>)
  402d76:	4798      	blx	r3
}
  402d78:	bf00      	nop
  402d7a:	3708      	adds	r7, #8
  402d7c:	46bd      	mov	sp, r7
  402d7e:	bd80      	pop	{r7, pc}
  402d80:	00403c25 	.word	0x00403c25
  402d84:	00403c8d 	.word	0x00403c8d

00402d88 <LightSensor_Data_Read>:

/******** Light Sensor Data Read ********/
//Retrieves the White Light (16-bit) data from the selected Light Sensor
uint16_t LightSensor_Data_Read(uint8_t channel)
{
  402d88:	b580      	push	{r7, lr}
  402d8a:	b084      	sub	sp, #16
  402d8c:	af00      	add	r7, sp, #0
  402d8e:	4603      	mov	r3, r0
  402d90:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	twi0MuxSwitch(channel);	//Set multiplexer address to correct device
  402d92:	79fb      	ldrb	r3, [r7, #7]
  402d94:	4618      	mov	r0, r3
  402d96:	4b06      	ldr	r3, [pc, #24]	; (402db0 <LightSensor_Data_Read+0x28>)
  402d98:	4798      	blx	r3
	data = twi0ReadDouble(TWI0_LIGHTSENS_ADDR, LightSensorWhite);
  402d9a:	210b      	movs	r1, #11
  402d9c:	2010      	movs	r0, #16
  402d9e:	4b05      	ldr	r3, [pc, #20]	; (402db4 <LightSensor_Data_Read+0x2c>)
  402da0:	4798      	blx	r3
  402da2:	4603      	mov	r3, r0
  402da4:	81fb      	strh	r3, [r7, #14]
	return data;
  402da6:	89fb      	ldrh	r3, [r7, #14]
}
  402da8:	4618      	mov	r0, r3
  402daa:	3710      	adds	r7, #16
  402dac:	46bd      	mov	sp, r7
  402dae:	bd80      	pop	{r7, pc}
  402db0:	00403c25 	.word	0x00403c25
  402db4:	00403d15 	.word	0x00403d15

00402db8 <motor_init>:
 */ 
 
#include "motor_driver.h"

void motor_init(void)
{
  402db8:	b480      	push	{r7}
  402dba:	af00      	add	r7, sp, #0
	REG_CCFG_SYSIO |= CCFG_SYSIO_SYSIO12; //disable erase pin to give access to PB12 via PIO
  402dbc:	4a82      	ldr	r2, [pc, #520]	; (402fc8 <motor_init+0x210>)
  402dbe:	4b82      	ldr	r3, [pc, #520]	; (402fc8 <motor_init+0x210>)
  402dc0:	681b      	ldr	r3, [r3, #0]
  402dc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402dc6:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<31);		//Enable clock access for PWM
  402dc8:	4a80      	ldr	r2, [pc, #512]	; (402fcc <motor_init+0x214>)
  402dca:	4b80      	ldr	r3, [pc, #512]	; (402fcc <motor_init+0x214>)
  402dcc:	681b      	ldr	r3, [r3, #0]
  402dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402dd2:	6013      	str	r3, [r2, #0]
	
	//****Channel 3 (Motor 1)****//
	REG_PWM_CMR3 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  402dd4:	4a7e      	ldr	r2, [pc, #504]	; (402fd0 <motor_init+0x218>)
  402dd6:	4b7e      	ldr	r3, [pc, #504]	; (402fd0 <motor_init+0x218>)
  402dd8:	681b      	ldr	r3, [r3, #0]
  402dda:	f043 0304 	orr.w	r3, r3, #4
  402dde:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 |= (1<<9);			//output starts at high level
  402de0:	4a7b      	ldr	r2, [pc, #492]	; (402fd0 <motor_init+0x218>)
  402de2:	4b7b      	ldr	r3, [pc, #492]	; (402fd0 <motor_init+0x218>)
  402de4:	681b      	ldr	r3, [r3, #0]
  402de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402dea:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 &= ~(1<<8);		//Left aligned output
  402dec:	4a78      	ldr	r2, [pc, #480]	; (402fd0 <motor_init+0x218>)
  402dee:	4b78      	ldr	r3, [pc, #480]	; (402fd0 <motor_init+0x218>)
  402df0:	681b      	ldr	r3, [r3, #0]
  402df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402df6:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR3 &= ~(1<<10);		//Update Duty cycle (NOT period)
  402df8:	4a75      	ldr	r2, [pc, #468]	; (402fd0 <motor_init+0x218>)
  402dfa:	4b75      	ldr	r3, [pc, #468]	; (402fd0 <motor_init+0x218>)
  402dfc:	681b      	ldr	r3, [r3, #0]
  402dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402e02:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY3 = 0;				//PWM Duty cycle (default = 0)
  402e04:	4b73      	ldr	r3, [pc, #460]	; (402fd4 <motor_init+0x21c>)
  402e06:	2200      	movs	r2, #0
  402e08:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD3 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  402e0a:	4b73      	ldr	r3, [pc, #460]	; (402fd8 <motor_init+0x220>)
  402e0c:	2264      	movs	r2, #100	; 0x64
  402e0e:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<21);		//Enable peripheral control of PC21
  402e10:	4a72      	ldr	r2, [pc, #456]	; (402fdc <motor_init+0x224>)
  402e12:	4b72      	ldr	r3, [pc, #456]	; (402fdc <motor_init+0x224>)
  402e14:	681b      	ldr	r3, [r3, #0]
  402e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  402e1a:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<21);		//Assign PC21 to PWM Peripheral B		
  402e1c:	4b70      	ldr	r3, [pc, #448]	; (402fe0 <motor_init+0x228>)
  402e1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402e22:	601a      	str	r2, [r3, #0]
	REG_PIOB_PER |= (1<<12);		//Enable PIO control of PB12
  402e24:	4a6f      	ldr	r2, [pc, #444]	; (402fe4 <motor_init+0x22c>)
  402e26:	4b6f      	ldr	r3, [pc, #444]	; (402fe4 <motor_init+0x22c>)
  402e28:	681b      	ldr	r3, [r3, #0]
  402e2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402e2e:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<12);		//Set PB12 as output
  402e30:	4a6d      	ldr	r2, [pc, #436]	; (402fe8 <motor_init+0x230>)
  402e32:	4b6d      	ldr	r3, [pc, #436]	; (402fe8 <motor_init+0x230>)
  402e34:	681b      	ldr	r3, [r3, #0]
  402e36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402e3a:	6013      	str	r3, [r2, #0]
	FIN_1_Low;		
  402e3c:	4a6b      	ldr	r2, [pc, #428]	; (402fec <motor_init+0x234>)
  402e3e:	4b6b      	ldr	r3, [pc, #428]	; (402fec <motor_init+0x234>)
  402e40:	681b      	ldr	r3, [r3, #0]
  402e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402e46:	6013      	str	r3, [r2, #0]
	REG_PIOC_PER |= (1<<22);		//Enable PIO control of PC22
  402e48:	4a69      	ldr	r2, [pc, #420]	; (402ff0 <motor_init+0x238>)
  402e4a:	4b69      	ldr	r3, [pc, #420]	; (402ff0 <motor_init+0x238>)
  402e4c:	681b      	ldr	r3, [r3, #0]
  402e4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402e52:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<22);		//Set PC22 as output
  402e54:	4a67      	ldr	r2, [pc, #412]	; (402ff4 <motor_init+0x23c>)
  402e56:	4b67      	ldr	r3, [pc, #412]	; (402ff4 <motor_init+0x23c>)
  402e58:	681b      	ldr	r3, [r3, #0]
  402e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402e5e:	6013      	str	r3, [r2, #0]
	RIN_1_Low;
  402e60:	4a65      	ldr	r2, [pc, #404]	; (402ff8 <motor_init+0x240>)
  402e62:	4b65      	ldr	r3, [pc, #404]	; (402ff8 <motor_init+0x240>)
  402e64:	681b      	ldr	r3, [r3, #0]
  402e66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402e6a:	6013      	str	r3, [r2, #0]
								
	//****Channel 2 (Motor 2)****//
	REG_PWM_CMR2 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  402e6c:	4a63      	ldr	r2, [pc, #396]	; (402ffc <motor_init+0x244>)
  402e6e:	4b63      	ldr	r3, [pc, #396]	; (402ffc <motor_init+0x244>)
  402e70:	681b      	ldr	r3, [r3, #0]
  402e72:	f043 0304 	orr.w	r3, r3, #4
  402e76:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 |= (1<<9);			//output starts at low level
  402e78:	4a60      	ldr	r2, [pc, #384]	; (402ffc <motor_init+0x244>)
  402e7a:	4b60      	ldr	r3, [pc, #384]	; (402ffc <motor_init+0x244>)
  402e7c:	681b      	ldr	r3, [r3, #0]
  402e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402e82:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 &= ~(1<<8);		//Left aligned output
  402e84:	4a5d      	ldr	r2, [pc, #372]	; (402ffc <motor_init+0x244>)
  402e86:	4b5d      	ldr	r3, [pc, #372]	; (402ffc <motor_init+0x244>)
  402e88:	681b      	ldr	r3, [r3, #0]
  402e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402e8e:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR2 &= ~(1<<10);		//Update Duty cycle (NOT period)
  402e90:	4a5a      	ldr	r2, [pc, #360]	; (402ffc <motor_init+0x244>)
  402e92:	4b5a      	ldr	r3, [pc, #360]	; (402ffc <motor_init+0x244>)
  402e94:	681b      	ldr	r3, [r3, #0]
  402e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402e9a:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY2 = 0;				//PWM Duty cycle (default = 0)
  402e9c:	4b58      	ldr	r3, [pc, #352]	; (403000 <motor_init+0x248>)
  402e9e:	2200      	movs	r2, #0
  402ea0:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD2 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  402ea2:	4b58      	ldr	r3, [pc, #352]	; (403004 <motor_init+0x24c>)
  402ea4:	2264      	movs	r2, #100	; 0x64
  402ea6:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<20);		//Enable peripheral control of PC20
  402ea8:	4a4c      	ldr	r2, [pc, #304]	; (402fdc <motor_init+0x224>)
  402eaa:	4b4c      	ldr	r3, [pc, #304]	; (402fdc <motor_init+0x224>)
  402eac:	681b      	ldr	r3, [r3, #0]
  402eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402eb2:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<20);		//Assign VREF_1 to PWM Peripheral B			
  402eb4:	4b4a      	ldr	r3, [pc, #296]	; (402fe0 <motor_init+0x228>)
  402eb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402eba:	601a      	str	r2, [r3, #0]
	REG_PIOC_PER |= (1<<19);		//Enable PIO control of PC19
  402ebc:	4a4c      	ldr	r2, [pc, #304]	; (402ff0 <motor_init+0x238>)
  402ebe:	4b4c      	ldr	r3, [pc, #304]	; (402ff0 <motor_init+0x238>)
  402ec0:	681b      	ldr	r3, [r3, #0]
  402ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  402ec6:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<19);		//Set PC19 as output
  402ec8:	4a4a      	ldr	r2, [pc, #296]	; (402ff4 <motor_init+0x23c>)
  402eca:	4b4a      	ldr	r3, [pc, #296]	; (402ff4 <motor_init+0x23c>)
  402ecc:	681b      	ldr	r3, [r3, #0]
  402ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  402ed2:	6013      	str	r3, [r2, #0]
	RIN_2_Low;		
  402ed4:	4a4c      	ldr	r2, [pc, #304]	; (403008 <motor_init+0x250>)
  402ed6:	4b4c      	ldr	r3, [pc, #304]	; (403008 <motor_init+0x250>)
  402ed8:	681b      	ldr	r3, [r3, #0]
  402eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402ede:	6013      	str	r3, [r2, #0]
	REG_PIOA_PER |= (1<<31);		//Enable PIO control of PA31
  402ee0:	4a4a      	ldr	r2, [pc, #296]	; (40300c <motor_init+0x254>)
  402ee2:	4b4a      	ldr	r3, [pc, #296]	; (40300c <motor_init+0x254>)
  402ee4:	681b      	ldr	r3, [r3, #0]
  402ee6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402eea:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<31);		//Set PA31 as output
  402eec:	4a48      	ldr	r2, [pc, #288]	; (403010 <motor_init+0x258>)
  402eee:	4b48      	ldr	r3, [pc, #288]	; (403010 <motor_init+0x258>)
  402ef0:	681b      	ldr	r3, [r3, #0]
  402ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402ef6:	6013      	str	r3, [r2, #0]
	FIN_2_Low;		
  402ef8:	4a3f      	ldr	r2, [pc, #252]	; (402ff8 <motor_init+0x240>)
  402efa:	4b3f      	ldr	r3, [pc, #252]	; (402ff8 <motor_init+0x240>)
  402efc:	681b      	ldr	r3, [r3, #0]
  402efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  402f02:	6013      	str	r3, [r2, #0]

	//****Channel 1 (Motor 3)****//
	REG_PWM_CMR1 |= (0x4<<0);		//Channel pre scale CLK by 16 = 24.4KHz
  402f04:	4a43      	ldr	r2, [pc, #268]	; (403014 <motor_init+0x25c>)
  402f06:	4b43      	ldr	r3, [pc, #268]	; (403014 <motor_init+0x25c>)
  402f08:	681b      	ldr	r3, [r3, #0]
  402f0a:	f043 0304 	orr.w	r3, r3, #4
  402f0e:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 |= (1<<9);			//output starts at low level
  402f10:	4a40      	ldr	r2, [pc, #256]	; (403014 <motor_init+0x25c>)
  402f12:	4b40      	ldr	r3, [pc, #256]	; (403014 <motor_init+0x25c>)
  402f14:	681b      	ldr	r3, [r3, #0]
  402f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402f1a:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 &= ~(1<<8);		//Left aligned output
  402f1c:	4a3d      	ldr	r2, [pc, #244]	; (403014 <motor_init+0x25c>)
  402f1e:	4b3d      	ldr	r3, [pc, #244]	; (403014 <motor_init+0x25c>)
  402f20:	681b      	ldr	r3, [r3, #0]
  402f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402f26:	6013      	str	r3, [r2, #0]
	REG_PWM_CMR1 &= ~(1<<10);		//Update Duty cycle (NOT period)
  402f28:	4a3a      	ldr	r2, [pc, #232]	; (403014 <motor_init+0x25c>)
  402f2a:	4b3a      	ldr	r3, [pc, #232]	; (403014 <motor_init+0x25c>)
  402f2c:	681b      	ldr	r3, [r3, #0]
  402f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402f32:	6013      	str	r3, [r2, #0]
	REG_PWM_CDTY1 = 0;				//PWM Duty cycle (default = 0)
  402f34:	4b38      	ldr	r3, [pc, #224]	; (403018 <motor_init+0x260>)
  402f36:	2200      	movs	r2, #0
  402f38:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD1 = 100;			//PWM Counter 0 - 100 (makes duty cycle %)
  402f3a:	4b38      	ldr	r3, [pc, #224]	; (40301c <motor_init+0x264>)
  402f3c:	2264      	movs	r2, #100	; 0x64
  402f3e:	601a      	str	r2, [r3, #0]
		
	REG_PIOC_PDR |= (1<<9);			//Enable peripheral control of PC9
  402f40:	4a26      	ldr	r2, [pc, #152]	; (402fdc <motor_init+0x224>)
  402f42:	4b26      	ldr	r3, [pc, #152]	; (402fdc <motor_init+0x224>)
  402f44:	681b      	ldr	r3, [r3, #0]
  402f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402f4a:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABCDSR = (1<<9);		//Assign PC9 to PWM Peripheral B		
  402f4c:	4b24      	ldr	r3, [pc, #144]	; (402fe0 <motor_init+0x228>)
  402f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402f52:	601a      	str	r2, [r3, #0]
	REG_PIOA_PER |= (1<<30);		//Enable PIO control of PA30
  402f54:	4a2d      	ldr	r2, [pc, #180]	; (40300c <motor_init+0x254>)
  402f56:	4b2d      	ldr	r3, [pc, #180]	; (40300c <motor_init+0x254>)
  402f58:	681b      	ldr	r3, [r3, #0]
  402f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f5e:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<30);		//Set PA30 as output
  402f60:	4a2b      	ldr	r2, [pc, #172]	; (403010 <motor_init+0x258>)
  402f62:	4b2b      	ldr	r3, [pc, #172]	; (403010 <motor_init+0x258>)
  402f64:	681b      	ldr	r3, [r3, #0]
  402f66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f6a:	6013      	str	r3, [r2, #0]
	RIN_3_Low;		
  402f6c:	4a26      	ldr	r2, [pc, #152]	; (403008 <motor_init+0x250>)
  402f6e:	4b26      	ldr	r3, [pc, #152]	; (403008 <motor_init+0x250>)
  402f70:	681b      	ldr	r3, [r3, #0]
  402f72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f76:	6013      	str	r3, [r2, #0]
	REG_PIOA_PER |= (1<<29);		//Enable PIO control of PA29
  402f78:	4a24      	ldr	r2, [pc, #144]	; (40300c <motor_init+0x254>)
  402f7a:	4b24      	ldr	r3, [pc, #144]	; (40300c <motor_init+0x254>)
  402f7c:	681b      	ldr	r3, [r3, #0]
  402f7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f82:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= (1<<29);		//Set PA29 as output
  402f84:	4a22      	ldr	r2, [pc, #136]	; (403010 <motor_init+0x258>)
  402f86:	4b22      	ldr	r3, [pc, #136]	; (403010 <motor_init+0x258>)
  402f88:	681b      	ldr	r3, [r3, #0]
  402f8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f8e:	6013      	str	r3, [r2, #0]
	FIN_3_Low;
  402f90:	4a1d      	ldr	r2, [pc, #116]	; (403008 <motor_init+0x250>)
  402f92:	4b1d      	ldr	r3, [pc, #116]	; (403008 <motor_init+0x250>)
  402f94:	681b      	ldr	r3, [r3, #0]
  402f96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f9a:	6013      	str	r3, [r2, #0]
	
	//****Enable PWM Channels as last step of setup****//	
	REG_PWM_ENA |= PWM_ENA_CHID1;	//Enable PWM on channel 1
  402f9c:	4a20      	ldr	r2, [pc, #128]	; (403020 <motor_init+0x268>)
  402f9e:	4b20      	ldr	r3, [pc, #128]	; (403020 <motor_init+0x268>)
  402fa0:	681b      	ldr	r3, [r3, #0]
  402fa2:	f043 0302 	orr.w	r3, r3, #2
  402fa6:	6013      	str	r3, [r2, #0]
	REG_PWM_ENA |= PWM_ENA_CHID2;	//Enable PWM on channel 2
  402fa8:	4a1d      	ldr	r2, [pc, #116]	; (403020 <motor_init+0x268>)
  402faa:	4b1d      	ldr	r3, [pc, #116]	; (403020 <motor_init+0x268>)
  402fac:	681b      	ldr	r3, [r3, #0]
  402fae:	f043 0304 	orr.w	r3, r3, #4
  402fb2:	6013      	str	r3, [r2, #0]
	REG_PWM_ENA |= PWM_ENA_CHID3;	//Enable PWM on channel 3
  402fb4:	4a1a      	ldr	r2, [pc, #104]	; (403020 <motor_init+0x268>)
  402fb6:	4b1a      	ldr	r3, [pc, #104]	; (403020 <motor_init+0x268>)
  402fb8:	681b      	ldr	r3, [r3, #0]
  402fba:	f043 0308 	orr.w	r3, r3, #8
  402fbe:	6013      	str	r3, [r2, #0]
}
  402fc0:	bf00      	nop
  402fc2:	46bd      	mov	sp, r7
  402fc4:	bc80      	pop	{r7}
  402fc6:	4770      	bx	lr
  402fc8:	400e0314 	.word	0x400e0314
  402fcc:	400e0410 	.word	0x400e0410
  402fd0:	40020260 	.word	0x40020260
  402fd4:	40020264 	.word	0x40020264
  402fd8:	40020268 	.word	0x40020268
  402fdc:	400e1204 	.word	0x400e1204
  402fe0:	400e1270 	.word	0x400e1270
  402fe4:	400e1000 	.word	0x400e1000
  402fe8:	400e1010 	.word	0x400e1010
  402fec:	400e1034 	.word	0x400e1034
  402ff0:	400e1200 	.word	0x400e1200
  402ff4:	400e1210 	.word	0x400e1210
  402ff8:	400e1234 	.word	0x400e1234
  402ffc:	40020240 	.word	0x40020240
  403000:	40020244 	.word	0x40020244
  403004:	40020248 	.word	0x40020248
  403008:	400e0e34 	.word	0x400e0e34
  40300c:	400e0e00 	.word	0x400e0e00
  403010:	400e0e10 	.word	0x400e0e10
  403014:	40020220 	.word	0x40020220
  403018:	40020224 	.word	0x40020224
  40301c:	40020228 	.word	0x40020228
  403020:	40020004 	.word	0x40020004
  403024:	00000000 	.word	0x00000000

00403028 <moveRobot>:

void moveRobot(float direction, unsigned char speed)
{
  403028:	b5f0      	push	{r4, r5, r6, r7, lr}
  40302a:	b087      	sub	sp, #28
  40302c:	af00      	add	r7, sp, #0
  40302e:	6078      	str	r0, [r7, #4]
  403030:	460b      	mov	r3, r1
  403032:	70fb      	strb	r3, [r7, #3]
	float motor1Speed, motor2Speed, motor3Speed;
	float directionRad;
	//keep direction in range +/-180degrees
	while(direction > 180) 
  403034:	e005      	b.n	403042 <moveRobot+0x1a>
		direction -= 360;
  403036:	4ba4      	ldr	r3, [pc, #656]	; (4032c8 <moveRobot+0x2a0>)
  403038:	49a4      	ldr	r1, [pc, #656]	; (4032cc <moveRobot+0x2a4>)
  40303a:	6878      	ldr	r0, [r7, #4]
  40303c:	4798      	blx	r3
  40303e:	4603      	mov	r3, r0
  403040:	607b      	str	r3, [r7, #4]
	while(direction > 180) 
  403042:	4ba3      	ldr	r3, [pc, #652]	; (4032d0 <moveRobot+0x2a8>)
  403044:	49a3      	ldr	r1, [pc, #652]	; (4032d4 <moveRobot+0x2ac>)
  403046:	6878      	ldr	r0, [r7, #4]
  403048:	4798      	blx	r3
  40304a:	4603      	mov	r3, r0
  40304c:	2b00      	cmp	r3, #0
  40304e:	d1f2      	bne.n	403036 <moveRobot+0xe>
	while(direction < -180)
  403050:	e005      	b.n	40305e <moveRobot+0x36>
		direction += 360;
  403052:	4ba1      	ldr	r3, [pc, #644]	; (4032d8 <moveRobot+0x2b0>)
  403054:	499d      	ldr	r1, [pc, #628]	; (4032cc <moveRobot+0x2a4>)
  403056:	6878      	ldr	r0, [r7, #4]
  403058:	4798      	blx	r3
  40305a:	4603      	mov	r3, r0
  40305c:	607b      	str	r3, [r7, #4]
	while(direction < -180)
  40305e:	4b9f      	ldr	r3, [pc, #636]	; (4032dc <moveRobot+0x2b4>)
  403060:	499f      	ldr	r1, [pc, #636]	; (4032e0 <moveRobot+0x2b8>)
  403062:	6878      	ldr	r0, [r7, #4]
  403064:	4798      	blx	r3
  403066:	4603      	mov	r3, r0
  403068:	2b00      	cmp	r3, #0
  40306a:	d1f2      	bne.n	403052 <moveRobot+0x2a>
	//stop speed from being over max in case of user input error
	if(speed > 100)
  40306c:	78fb      	ldrb	r3, [r7, #3]
  40306e:	2b64      	cmp	r3, #100	; 0x64
  403070:	d901      	bls.n	403076 <moveRobot+0x4e>
		speed = 100;
  403072:	2364      	movs	r3, #100	; 0x64
  403074:	70fb      	strb	r3, [r7, #3]
	directionRad = (direction * M_PI) / 180; //convert desired direction to radians
  403076:	4b9b      	ldr	r3, [pc, #620]	; (4032e4 <moveRobot+0x2bc>)
  403078:	6878      	ldr	r0, [r7, #4]
  40307a:	4798      	blx	r3
  40307c:	4c9a      	ldr	r4, [pc, #616]	; (4032e8 <moveRobot+0x2c0>)
  40307e:	a38a      	add	r3, pc, #552	; (adr r3, 4032a8 <moveRobot+0x280>)
  403080:	e9d3 2300 	ldrd	r2, r3, [r3]
  403084:	47a0      	blx	r4
  403086:	4603      	mov	r3, r0
  403088:	460c      	mov	r4, r1
  40308a:	4618      	mov	r0, r3
  40308c:	4621      	mov	r1, r4
  40308e:	4c97      	ldr	r4, [pc, #604]	; (4032ec <moveRobot+0x2c4>)
  403090:	f04f 0200 	mov.w	r2, #0
  403094:	4b96      	ldr	r3, [pc, #600]	; (4032f0 <moveRobot+0x2c8>)
  403096:	47a0      	blx	r4
  403098:	4603      	mov	r3, r0
  40309a:	460c      	mov	r4, r1
  40309c:	4619      	mov	r1, r3
  40309e:	4622      	mov	r2, r4
  4030a0:	4b94      	ldr	r3, [pc, #592]	; (4032f4 <moveRobot+0x2cc>)
  4030a2:	4608      	mov	r0, r1
  4030a4:	4611      	mov	r1, r2
  4030a6:	4798      	blx	r3
  4030a8:	4603      	mov	r3, r0
  4030aa:	60bb      	str	r3, [r7, #8]
	motor1Speed = speed * cos ((270 * M_PI) / 180 - directionRad );//radians
  4030ac:	78fa      	ldrb	r2, [r7, #3]
  4030ae:	4b92      	ldr	r3, [pc, #584]	; (4032f8 <moveRobot+0x2d0>)
  4030b0:	4610      	mov	r0, r2
  4030b2:	4798      	blx	r3
  4030b4:	4605      	mov	r5, r0
  4030b6:	460e      	mov	r6, r1
  4030b8:	4b8a      	ldr	r3, [pc, #552]	; (4032e4 <moveRobot+0x2bc>)
  4030ba:	68b8      	ldr	r0, [r7, #8]
  4030bc:	4798      	blx	r3
  4030be:	4602      	mov	r2, r0
  4030c0:	460b      	mov	r3, r1
  4030c2:	4c8e      	ldr	r4, [pc, #568]	; (4032fc <moveRobot+0x2d4>)
  4030c4:	a17a      	add	r1, pc, #488	; (adr r1, 4032b0 <moveRobot+0x288>)
  4030c6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4030ca:	47a0      	blx	r4
  4030cc:	4603      	mov	r3, r0
  4030ce:	460c      	mov	r4, r1
  4030d0:	4618      	mov	r0, r3
  4030d2:	4621      	mov	r1, r4
  4030d4:	4b8a      	ldr	r3, [pc, #552]	; (403300 <moveRobot+0x2d8>)
  4030d6:	4798      	blx	r3
  4030d8:	4602      	mov	r2, r0
  4030da:	460b      	mov	r3, r1
  4030dc:	4c82      	ldr	r4, [pc, #520]	; (4032e8 <moveRobot+0x2c0>)
  4030de:	4628      	mov	r0, r5
  4030e0:	4631      	mov	r1, r6
  4030e2:	47a0      	blx	r4
  4030e4:	4603      	mov	r3, r0
  4030e6:	460c      	mov	r4, r1
  4030e8:	4619      	mov	r1, r3
  4030ea:	4622      	mov	r2, r4
  4030ec:	4b81      	ldr	r3, [pc, #516]	; (4032f4 <moveRobot+0x2cc>)
  4030ee:	4608      	mov	r0, r1
  4030f0:	4611      	mov	r1, r2
  4030f2:	4798      	blx	r3
  4030f4:	4603      	mov	r3, r0
  4030f6:	617b      	str	r3, [r7, #20]
	motor2Speed = speed * cos ((30  * M_PI) / 180 - directionRad );
  4030f8:	78fa      	ldrb	r2, [r7, #3]
  4030fa:	4b7f      	ldr	r3, [pc, #508]	; (4032f8 <moveRobot+0x2d0>)
  4030fc:	4610      	mov	r0, r2
  4030fe:	4798      	blx	r3
  403100:	4605      	mov	r5, r0
  403102:	460e      	mov	r6, r1
  403104:	4b77      	ldr	r3, [pc, #476]	; (4032e4 <moveRobot+0x2bc>)
  403106:	68b8      	ldr	r0, [r7, #8]
  403108:	4798      	blx	r3
  40310a:	4602      	mov	r2, r0
  40310c:	460b      	mov	r3, r1
  40310e:	4c7b      	ldr	r4, [pc, #492]	; (4032fc <moveRobot+0x2d4>)
  403110:	a169      	add	r1, pc, #420	; (adr r1, 4032b8 <moveRobot+0x290>)
  403112:	e9d1 0100 	ldrd	r0, r1, [r1]
  403116:	47a0      	blx	r4
  403118:	4603      	mov	r3, r0
  40311a:	460c      	mov	r4, r1
  40311c:	4618      	mov	r0, r3
  40311e:	4621      	mov	r1, r4
  403120:	4b77      	ldr	r3, [pc, #476]	; (403300 <moveRobot+0x2d8>)
  403122:	4798      	blx	r3
  403124:	4602      	mov	r2, r0
  403126:	460b      	mov	r3, r1
  403128:	4c6f      	ldr	r4, [pc, #444]	; (4032e8 <moveRobot+0x2c0>)
  40312a:	4628      	mov	r0, r5
  40312c:	4631      	mov	r1, r6
  40312e:	47a0      	blx	r4
  403130:	4603      	mov	r3, r0
  403132:	460c      	mov	r4, r1
  403134:	4619      	mov	r1, r3
  403136:	4622      	mov	r2, r4
  403138:	4b6e      	ldr	r3, [pc, #440]	; (4032f4 <moveRobot+0x2cc>)
  40313a:	4608      	mov	r0, r1
  40313c:	4611      	mov	r1, r2
  40313e:	4798      	blx	r3
  403140:	4603      	mov	r3, r0
  403142:	613b      	str	r3, [r7, #16]
	motor3Speed = speed * cos ((150 * M_PI) / 180 - directionRad );
  403144:	78fa      	ldrb	r2, [r7, #3]
  403146:	4b6c      	ldr	r3, [pc, #432]	; (4032f8 <moveRobot+0x2d0>)
  403148:	4610      	mov	r0, r2
  40314a:	4798      	blx	r3
  40314c:	4605      	mov	r5, r0
  40314e:	460e      	mov	r6, r1
  403150:	4b64      	ldr	r3, [pc, #400]	; (4032e4 <moveRobot+0x2bc>)
  403152:	68b8      	ldr	r0, [r7, #8]
  403154:	4798      	blx	r3
  403156:	4602      	mov	r2, r0
  403158:	460b      	mov	r3, r1
  40315a:	4c68      	ldr	r4, [pc, #416]	; (4032fc <moveRobot+0x2d4>)
  40315c:	a158      	add	r1, pc, #352	; (adr r1, 4032c0 <moveRobot+0x298>)
  40315e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403162:	47a0      	blx	r4
  403164:	4603      	mov	r3, r0
  403166:	460c      	mov	r4, r1
  403168:	4618      	mov	r0, r3
  40316a:	4621      	mov	r1, r4
  40316c:	4b64      	ldr	r3, [pc, #400]	; (403300 <moveRobot+0x2d8>)
  40316e:	4798      	blx	r3
  403170:	4602      	mov	r2, r0
  403172:	460b      	mov	r3, r1
  403174:	4c5c      	ldr	r4, [pc, #368]	; (4032e8 <moveRobot+0x2c0>)
  403176:	4628      	mov	r0, r5
  403178:	4631      	mov	r1, r6
  40317a:	47a0      	blx	r4
  40317c:	4603      	mov	r3, r0
  40317e:	460c      	mov	r4, r1
  403180:	4619      	mov	r1, r3
  403182:	4622      	mov	r2, r4
  403184:	4b5b      	ldr	r3, [pc, #364]	; (4032f4 <moveRobot+0x2cc>)
  403186:	4608      	mov	r0, r1
  403188:	4611      	mov	r1, r2
  40318a:	4798      	blx	r3
  40318c:	4603      	mov	r3, r0
  40318e:	60fb      	str	r3, [r7, #12]
	
	//motor 2 & 3 is wired backwards on test robot so forward and back is flipped
	if(motor1Speed > 0)
  403190:	4b4f      	ldr	r3, [pc, #316]	; (4032d0 <moveRobot+0x2a8>)
  403192:	f04f 0100 	mov.w	r1, #0
  403196:	6978      	ldr	r0, [r7, #20]
  403198:	4798      	blx	r3
  40319a:	4603      	mov	r3, r0
  40319c:	2b00      	cmp	r3, #0
  40319e:	d00c      	beq.n	4031ba <moveRobot+0x192>
	{
		//Forward
		RIN_1_Low;
  4031a0:	4a58      	ldr	r2, [pc, #352]	; (403304 <moveRobot+0x2dc>)
  4031a2:	4b58      	ldr	r3, [pc, #352]	; (403304 <moveRobot+0x2dc>)
  4031a4:	681b      	ldr	r3, [r3, #0]
  4031a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4031aa:	6013      	str	r3, [r2, #0]
		FIN_1_High;		
  4031ac:	4a56      	ldr	r2, [pc, #344]	; (403308 <moveRobot+0x2e0>)
  4031ae:	4b56      	ldr	r3, [pc, #344]	; (403308 <moveRobot+0x2e0>)
  4031b0:	681b      	ldr	r3, [r3, #0]
  4031b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031b6:	6013      	str	r3, [r2, #0]
  4031b8:	e024      	b.n	403204 <moveRobot+0x1dc>
	}
	else if (motor1Speed == 0)
  4031ba:	4b54      	ldr	r3, [pc, #336]	; (40330c <moveRobot+0x2e4>)
  4031bc:	f04f 0100 	mov.w	r1, #0
  4031c0:	6978      	ldr	r0, [r7, #20]
  4031c2:	4798      	blx	r3
  4031c4:	4603      	mov	r3, r0
  4031c6:	2b00      	cmp	r3, #0
  4031c8:	d00c      	beq.n	4031e4 <moveRobot+0x1bc>
	{
		//Motor off (coast not brake)
		RIN_1_Low;
  4031ca:	4a4e      	ldr	r2, [pc, #312]	; (403304 <moveRobot+0x2dc>)
  4031cc:	4b4d      	ldr	r3, [pc, #308]	; (403304 <moveRobot+0x2dc>)
  4031ce:	681b      	ldr	r3, [r3, #0]
  4031d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4031d4:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4031d6:	4a4e      	ldr	r2, [pc, #312]	; (403310 <moveRobot+0x2e8>)
  4031d8:	4b4d      	ldr	r3, [pc, #308]	; (403310 <moveRobot+0x2e8>)
  4031da:	681b      	ldr	r3, [r3, #0]
  4031dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4031e0:	6013      	str	r3, [r2, #0]
  4031e2:	e00f      	b.n	403204 <moveRobot+0x1dc>
	}
	else
	{
		//Reverse
		motor1Speed = motor1Speed * (-1); 
  4031e4:	697b      	ldr	r3, [r7, #20]
  4031e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  4031ea:	617b      	str	r3, [r7, #20]
		RIN_1_High;
  4031ec:	4a49      	ldr	r2, [pc, #292]	; (403314 <moveRobot+0x2ec>)
  4031ee:	4b49      	ldr	r3, [pc, #292]	; (403314 <moveRobot+0x2ec>)
  4031f0:	681b      	ldr	r3, [r3, #0]
  4031f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4031f6:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4031f8:	4a45      	ldr	r2, [pc, #276]	; (403310 <moveRobot+0x2e8>)
  4031fa:	4b45      	ldr	r3, [pc, #276]	; (403310 <moveRobot+0x2e8>)
  4031fc:	681b      	ldr	r3, [r3, #0]
  4031fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403202:	6013      	str	r3, [r2, #0]
	}

	if(motor2Speed > 0)
  403204:	4b32      	ldr	r3, [pc, #200]	; (4032d0 <moveRobot+0x2a8>)
  403206:	f04f 0100 	mov.w	r1, #0
  40320a:	6938      	ldr	r0, [r7, #16]
  40320c:	4798      	blx	r3
  40320e:	4603      	mov	r3, r0
  403210:	2b00      	cmp	r3, #0
  403212:	d00c      	beq.n	40322e <moveRobot+0x206>
	{
		//Forward
		RIN_2_Low;
  403214:	4a40      	ldr	r2, [pc, #256]	; (403318 <moveRobot+0x2f0>)
  403216:	4b40      	ldr	r3, [pc, #256]	; (403318 <moveRobot+0x2f0>)
  403218:	681b      	ldr	r3, [r3, #0]
  40321a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40321e:	6013      	str	r3, [r2, #0]
		FIN_2_High;
  403220:	4a3c      	ldr	r2, [pc, #240]	; (403314 <moveRobot+0x2ec>)
  403222:	4b3c      	ldr	r3, [pc, #240]	; (403314 <moveRobot+0x2ec>)
  403224:	681b      	ldr	r3, [r3, #0]
  403226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  40322a:	6013      	str	r3, [r2, #0]
  40322c:	e024      	b.n	403278 <moveRobot+0x250>
	}
	else if (motor2Speed == 0)
  40322e:	4b37      	ldr	r3, [pc, #220]	; (40330c <moveRobot+0x2e4>)
  403230:	f04f 0100 	mov.w	r1, #0
  403234:	6938      	ldr	r0, [r7, #16]
  403236:	4798      	blx	r3
  403238:	4603      	mov	r3, r0
  40323a:	2b00      	cmp	r3, #0
  40323c:	d00c      	beq.n	403258 <moveRobot+0x230>
	{
		//Motor off (coast not brake)
		RIN_2_Low;
  40323e:	4a36      	ldr	r2, [pc, #216]	; (403318 <moveRobot+0x2f0>)
  403240:	4b35      	ldr	r3, [pc, #212]	; (403318 <moveRobot+0x2f0>)
  403242:	681b      	ldr	r3, [r3, #0]
  403244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403248:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  40324a:	4a2e      	ldr	r2, [pc, #184]	; (403304 <moveRobot+0x2dc>)
  40324c:	4b2d      	ldr	r3, [pc, #180]	; (403304 <moveRobot+0x2dc>)
  40324e:	681b      	ldr	r3, [r3, #0]
  403250:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403254:	6013      	str	r3, [r2, #0]
  403256:	e00f      	b.n	403278 <moveRobot+0x250>
	}
	else
	{
		//Reverse
		motor2Speed = motor2Speed * (-1); 
  403258:	693b      	ldr	r3, [r7, #16]
  40325a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  40325e:	613b      	str	r3, [r7, #16]
		RIN_2_High;
  403260:	4a2e      	ldr	r2, [pc, #184]	; (40331c <moveRobot+0x2f4>)
  403262:	4b2e      	ldr	r3, [pc, #184]	; (40331c <moveRobot+0x2f4>)
  403264:	681b      	ldr	r3, [r3, #0]
  403266:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40326a:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  40326c:	4a25      	ldr	r2, [pc, #148]	; (403304 <moveRobot+0x2dc>)
  40326e:	4b25      	ldr	r3, [pc, #148]	; (403304 <moveRobot+0x2dc>)
  403270:	681b      	ldr	r3, [r3, #0]
  403272:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403276:	6013      	str	r3, [r2, #0]
	}
	
	if(motor3Speed > 0)
  403278:	4b15      	ldr	r3, [pc, #84]	; (4032d0 <moveRobot+0x2a8>)
  40327a:	f04f 0100 	mov.w	r1, #0
  40327e:	68f8      	ldr	r0, [r7, #12]
  403280:	4798      	blx	r3
  403282:	4603      	mov	r3, r0
  403284:	2b00      	cmp	r3, #0
  403286:	d04b      	beq.n	403320 <moveRobot+0x2f8>
	{
		//Forward
		RIN_3_Low;
  403288:	4a23      	ldr	r2, [pc, #140]	; (403318 <moveRobot+0x2f0>)
  40328a:	4b23      	ldr	r3, [pc, #140]	; (403318 <moveRobot+0x2f0>)
  40328c:	681b      	ldr	r3, [r3, #0]
  40328e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403292:	6013      	str	r3, [r2, #0]
		FIN_3_High;			
  403294:	4a21      	ldr	r2, [pc, #132]	; (40331c <moveRobot+0x2f4>)
  403296:	4b21      	ldr	r3, [pc, #132]	; (40331c <moveRobot+0x2f4>)
  403298:	681b      	ldr	r3, [r3, #0]
  40329a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40329e:	6013      	str	r3, [r2, #0]
  4032a0:	e063      	b.n	40336a <moveRobot+0x342>
  4032a2:	bf00      	nop
  4032a4:	f3af 8000 	nop.w
  4032a8:	54442d18 	.word	0x54442d18
  4032ac:	400921fb 	.word	0x400921fb
  4032b0:	7f3321d2 	.word	0x7f3321d2
  4032b4:	4012d97c 	.word	0x4012d97c
  4032b8:	382d7365 	.word	0x382d7365
  4032bc:	3fe0c152 	.word	0x3fe0c152
  4032c0:	c638d03f 	.word	0xc638d03f
  4032c4:	4004f1a6 	.word	0x4004f1a6
  4032c8:	00405ed1 	.word	0x00405ed1
  4032cc:	43b40000 	.word	0x43b40000
  4032d0:	0040645d 	.word	0x0040645d
  4032d4:	43340000 	.word	0x43340000
  4032d8:	00405ed5 	.word	0x00405ed5
  4032dc:	00406421 	.word	0x00406421
  4032e0:	c3340000 	.word	0xc3340000
  4032e4:	004057fd 	.word	0x004057fd
  4032e8:	004058a5 	.word	0x004058a5
  4032ec:	00405af9 	.word	0x00405af9
  4032f0:	40668000 	.word	0x40668000
  4032f4:	00405e29 	.word	0x00405e29
  4032f8:	004057d9 	.word	0x004057d9
  4032fc:	0040553d 	.word	0x0040553d
  403300:	004041e1 	.word	0x004041e1
  403304:	400e1234 	.word	0x400e1234
  403308:	400e1030 	.word	0x400e1030
  40330c:	0040640d 	.word	0x0040640d
  403310:	400e1034 	.word	0x400e1034
  403314:	400e1230 	.word	0x400e1230
  403318:	400e0e34 	.word	0x400e0e34
  40331c:	400e0e30 	.word	0x400e0e30
	}
	else if (motor3Speed == 0)
  403320:	4b1d      	ldr	r3, [pc, #116]	; (403398 <moveRobot+0x370>)
  403322:	f04f 0100 	mov.w	r1, #0
  403326:	68f8      	ldr	r0, [r7, #12]
  403328:	4798      	blx	r3
  40332a:	4603      	mov	r3, r0
  40332c:	2b00      	cmp	r3, #0
  40332e:	d00c      	beq.n	40334a <moveRobot+0x322>
	{
		//Motor off (coast not brake)
		RIN_3_Low;
  403330:	4a1a      	ldr	r2, [pc, #104]	; (40339c <moveRobot+0x374>)
  403332:	4b1a      	ldr	r3, [pc, #104]	; (40339c <moveRobot+0x374>)
  403334:	681b      	ldr	r3, [r3, #0]
  403336:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40333a:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  40333c:	4a17      	ldr	r2, [pc, #92]	; (40339c <moveRobot+0x374>)
  40333e:	4b17      	ldr	r3, [pc, #92]	; (40339c <moveRobot+0x374>)
  403340:	681b      	ldr	r3, [r3, #0]
  403342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403346:	6013      	str	r3, [r2, #0]
  403348:	e00f      	b.n	40336a <moveRobot+0x342>
	}
	else
	{
		//Reverse
		motor3Speed = motor3Speed * (-1); 
  40334a:	68fb      	ldr	r3, [r7, #12]
  40334c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  403350:	60fb      	str	r3, [r7, #12]
		RIN_3_High;
  403352:	4a13      	ldr	r2, [pc, #76]	; (4033a0 <moveRobot+0x378>)
  403354:	4b12      	ldr	r3, [pc, #72]	; (4033a0 <moveRobot+0x378>)
  403356:	681b      	ldr	r3, [r3, #0]
  403358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40335c:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  40335e:	4a0f      	ldr	r2, [pc, #60]	; (40339c <moveRobot+0x374>)
  403360:	4b0e      	ldr	r3, [pc, #56]	; (40339c <moveRobot+0x374>)
  403362:	681b      	ldr	r3, [r3, #0]
  403364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403368:	6013      	str	r3, [r2, #0]
	}
	REG_PWM_CUPD1 = (motor3Speed); //Update duty cycle as per calculations
  40336a:	4c0e      	ldr	r4, [pc, #56]	; (4033a4 <moveRobot+0x37c>)
  40336c:	4b0e      	ldr	r3, [pc, #56]	; (4033a8 <moveRobot+0x380>)
  40336e:	68f8      	ldr	r0, [r7, #12]
  403370:	4798      	blx	r3
  403372:	4603      	mov	r3, r0
  403374:	6023      	str	r3, [r4, #0]
	REG_PWM_CUPD2 = (motor2Speed); //Update duty cycle as per calculations
  403376:	4c0d      	ldr	r4, [pc, #52]	; (4033ac <moveRobot+0x384>)
  403378:	4b0b      	ldr	r3, [pc, #44]	; (4033a8 <moveRobot+0x380>)
  40337a:	6938      	ldr	r0, [r7, #16]
  40337c:	4798      	blx	r3
  40337e:	4603      	mov	r3, r0
  403380:	6023      	str	r3, [r4, #0]
	REG_PWM_CUPD3 = (motor1Speed); //Update duty cycle as per calculations
  403382:	4c0b      	ldr	r4, [pc, #44]	; (4033b0 <moveRobot+0x388>)
  403384:	4b08      	ldr	r3, [pc, #32]	; (4033a8 <moveRobot+0x380>)
  403386:	6978      	ldr	r0, [r7, #20]
  403388:	4798      	blx	r3
  40338a:	4603      	mov	r3, r0
  40338c:	6023      	str	r3, [r4, #0]
}
  40338e:	bf00      	nop
  403390:	371c      	adds	r7, #28
  403392:	46bd      	mov	sp, r7
  403394:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403396:	bf00      	nop
  403398:	0040640d 	.word	0x0040640d
  40339c:	400e0e34 	.word	0x400e0e34
  4033a0:	400e0e30 	.word	0x400e0e30
  4033a4:	40020230 	.word	0x40020230
  4033a8:	00406471 	.word	0x00406471
  4033ac:	40020250 	.word	0x40020250
  4033b0:	40020270 	.word	0x40020270

004033b4 <rotateRobot>:

void rotateRobot(char direction, unsigned char speed)
{
  4033b4:	b480      	push	{r7}
  4033b6:	b083      	sub	sp, #12
  4033b8:	af00      	add	r7, sp, #0
  4033ba:	4603      	mov	r3, r0
  4033bc:	460a      	mov	r2, r1
  4033be:	71fb      	strb	r3, [r7, #7]
  4033c0:	4613      	mov	r3, r2
  4033c2:	71bb      	strb	r3, [r7, #6]
	if(direction == CW)			//enable all motors to spin the robot clockwise
  4033c4:	79fb      	ldrb	r3, [r7, #7]
  4033c6:	2b00      	cmp	r3, #0
  4033c8:	d124      	bne.n	403414 <rotateRobot+0x60>
	{
		RIN_1_High;
  4033ca:	4a2d      	ldr	r2, [pc, #180]	; (403480 <rotateRobot+0xcc>)
  4033cc:	4b2c      	ldr	r3, [pc, #176]	; (403480 <rotateRobot+0xcc>)
  4033ce:	681b      	ldr	r3, [r3, #0]
  4033d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4033d4:	6013      	str	r3, [r2, #0]
		FIN_1_Low;
  4033d6:	4a2b      	ldr	r2, [pc, #172]	; (403484 <rotateRobot+0xd0>)
  4033d8:	4b2a      	ldr	r3, [pc, #168]	; (403484 <rotateRobot+0xd0>)
  4033da:	681b      	ldr	r3, [r3, #0]
  4033dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4033e0:	6013      	str	r3, [r2, #0]
		RIN_2_High;
  4033e2:	4a29      	ldr	r2, [pc, #164]	; (403488 <rotateRobot+0xd4>)
  4033e4:	4b28      	ldr	r3, [pc, #160]	; (403488 <rotateRobot+0xd4>)
  4033e6:	681b      	ldr	r3, [r3, #0]
  4033e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4033ec:	6013      	str	r3, [r2, #0]
		FIN_2_Low;
  4033ee:	4a27      	ldr	r2, [pc, #156]	; (40348c <rotateRobot+0xd8>)
  4033f0:	4b26      	ldr	r3, [pc, #152]	; (40348c <rotateRobot+0xd8>)
  4033f2:	681b      	ldr	r3, [r3, #0]
  4033f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4033f8:	6013      	str	r3, [r2, #0]
		RIN_3_High;
  4033fa:	4a23      	ldr	r2, [pc, #140]	; (403488 <rotateRobot+0xd4>)
  4033fc:	4b22      	ldr	r3, [pc, #136]	; (403488 <rotateRobot+0xd4>)
  4033fe:	681b      	ldr	r3, [r3, #0]
  403400:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403404:	6013      	str	r3, [r2, #0]
		FIN_3_Low;
  403406:	4a22      	ldr	r2, [pc, #136]	; (403490 <rotateRobot+0xdc>)
  403408:	4b21      	ldr	r3, [pc, #132]	; (403490 <rotateRobot+0xdc>)
  40340a:	681b      	ldr	r3, [r3, #0]
  40340c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403410:	6013      	str	r3, [r2, #0]
  403412:	e026      	b.n	403462 <rotateRobot+0xae>
	}
	else if(direction == CCW)	//enable all motors to spin the robot counter-clockwise
  403414:	79fb      	ldrb	r3, [r7, #7]
  403416:	2b01      	cmp	r3, #1
  403418:	d123      	bne.n	403462 <rotateRobot+0xae>
	{
		RIN_1_Low;
  40341a:	4a1c      	ldr	r2, [pc, #112]	; (40348c <rotateRobot+0xd8>)
  40341c:	4b1b      	ldr	r3, [pc, #108]	; (40348c <rotateRobot+0xd8>)
  40341e:	681b      	ldr	r3, [r3, #0]
  403420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403424:	6013      	str	r3, [r2, #0]
		FIN_1_High;
  403426:	4a1b      	ldr	r2, [pc, #108]	; (403494 <rotateRobot+0xe0>)
  403428:	4b1a      	ldr	r3, [pc, #104]	; (403494 <rotateRobot+0xe0>)
  40342a:	681b      	ldr	r3, [r3, #0]
  40342c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403430:	6013      	str	r3, [r2, #0]
		RIN_2_Low;
  403432:	4a17      	ldr	r2, [pc, #92]	; (403490 <rotateRobot+0xdc>)
  403434:	4b16      	ldr	r3, [pc, #88]	; (403490 <rotateRobot+0xdc>)
  403436:	681b      	ldr	r3, [r3, #0]
  403438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40343c:	6013      	str	r3, [r2, #0]
		FIN_2_High;
  40343e:	4a10      	ldr	r2, [pc, #64]	; (403480 <rotateRobot+0xcc>)
  403440:	4b0f      	ldr	r3, [pc, #60]	; (403480 <rotateRobot+0xcc>)
  403442:	681b      	ldr	r3, [r3, #0]
  403444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403448:	6013      	str	r3, [r2, #0]
		RIN_3_Low;
  40344a:	4a11      	ldr	r2, [pc, #68]	; (403490 <rotateRobot+0xdc>)
  40344c:	4b10      	ldr	r3, [pc, #64]	; (403490 <rotateRobot+0xdc>)
  40344e:	681b      	ldr	r3, [r3, #0]
  403450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403454:	6013      	str	r3, [r2, #0]
		FIN_3_High;
  403456:	4a0c      	ldr	r2, [pc, #48]	; (403488 <rotateRobot+0xd4>)
  403458:	4b0b      	ldr	r3, [pc, #44]	; (403488 <rotateRobot+0xd4>)
  40345a:	681b      	ldr	r3, [r3, #0]
  40345c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403460:	6013      	str	r3, [r2, #0]
	}
	//Update all duty cycles to match the desired rotation speed
	REG_PWM_CUPD1 = speed;
  403462:	4a0d      	ldr	r2, [pc, #52]	; (403498 <rotateRobot+0xe4>)
  403464:	79bb      	ldrb	r3, [r7, #6]
  403466:	6013      	str	r3, [r2, #0]
	REG_PWM_CUPD2 = speed;
  403468:	4a0c      	ldr	r2, [pc, #48]	; (40349c <rotateRobot+0xe8>)
  40346a:	79bb      	ldrb	r3, [r7, #6]
  40346c:	6013      	str	r3, [r2, #0]
	REG_PWM_CUPD3 = speed;	
  40346e:	4a0c      	ldr	r2, [pc, #48]	; (4034a0 <rotateRobot+0xec>)
  403470:	79bb      	ldrb	r3, [r7, #6]
  403472:	6013      	str	r3, [r2, #0]
}
  403474:	bf00      	nop
  403476:	370c      	adds	r7, #12
  403478:	46bd      	mov	sp, r7
  40347a:	bc80      	pop	{r7}
  40347c:	4770      	bx	lr
  40347e:	bf00      	nop
  403480:	400e1230 	.word	0x400e1230
  403484:	400e1034 	.word	0x400e1034
  403488:	400e0e30 	.word	0x400e0e30
  40348c:	400e1234 	.word	0x400e1234
  403490:	400e0e34 	.word	0x400e0e34
  403494:	400e1030 	.word	0x400e1030
  403498:	40020230 	.word	0x40020230
  40349c:	40020250 	.word	0x40020250
  4034a0:	40020270 	.word	0x40020270

004034a4 <dockRobot>:

//assume max brightness is 0-100 (scale it to make this work)
void dockRobot(void)
{
  4034a4:	b590      	push	{r4, r7, lr}
  4034a6:	b085      	sub	sp, #20
  4034a8:	af00      	add	r7, sp, #0
	//10cm away 0x0070 - 0x0100
	//20cm away 0x0030 - 0x003f
	//30cm away 0x0020 - 0x0029
	
	uint16_t rightBrightness, leftBrightness;
	float diff = 0;
  4034aa:	f04f 0300 	mov.w	r3, #0
  4034ae:	60fb      	str	r3, [r7, #12]
	float rightBrightnessScaled, leftBrightnessScaled;
	
	leftBrightness = LightSensor_Data_Read(MUX_LIGHTSENS_L);
  4034b0:	20f9      	movs	r0, #249	; 0xf9
  4034b2:	4b3d      	ldr	r3, [pc, #244]	; (4035a8 <dockRobot+0x104>)
  4034b4:	4798      	blx	r3
  4034b6:	4603      	mov	r3, r0
  4034b8:	817b      	strh	r3, [r7, #10]
	rightBrightness = LightSensor_Data_Read(MUX_LIGHTSENS_R);
  4034ba:	20f8      	movs	r0, #248	; 0xf8
  4034bc:	4b3a      	ldr	r3, [pc, #232]	; (4035a8 <dockRobot+0x104>)
  4034be:	4798      	blx	r3
  4034c0:	4603      	mov	r3, r0
  4034c2:	813b      	strh	r3, [r7, #8]
	
	//frontProximity = Proximity_Data_Read(MUX_PROXSENS_A); //need to test this
	
	if(rightBrightness > 0x0200 && leftBrightness > 0x0200)//if there is more light than ambient
  4034c4:	893b      	ldrh	r3, [r7, #8]
  4034c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034ca:	d94a      	bls.n	403562 <dockRobot+0xbe>
  4034cc:	897b      	ldrh	r3, [r7, #10]
  4034ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034d2:	d946      	bls.n	403562 <dockRobot+0xbe>
	{
		//Scale brightness to calculate required position
		rightBrightnessScaled = (rightBrightness / 0xFFFF) * 100;
  4034d4:	893b      	ldrh	r3, [r7, #8]
  4034d6:	4a35      	ldr	r2, [pc, #212]	; (4035ac <dockRobot+0x108>)
  4034d8:	fba2 2303 	umull	r2, r3, r2, r3
  4034dc:	0bdb      	lsrs	r3, r3, #15
  4034de:	b29b      	uxth	r3, r3
  4034e0:	461a      	mov	r2, r3
  4034e2:	2364      	movs	r3, #100	; 0x64
  4034e4:	fb03 f202 	mul.w	r2, r3, r2
  4034e8:	4b31      	ldr	r3, [pc, #196]	; (4035b0 <dockRobot+0x10c>)
  4034ea:	4610      	mov	r0, r2
  4034ec:	4798      	blx	r3
  4034ee:	4603      	mov	r3, r0
  4034f0:	607b      	str	r3, [r7, #4]
		leftBrightnessScaled = (leftBrightness / 0xFFFF) * 100;
  4034f2:	897b      	ldrh	r3, [r7, #10]
  4034f4:	4a2d      	ldr	r2, [pc, #180]	; (4035ac <dockRobot+0x108>)
  4034f6:	fba2 2303 	umull	r2, r3, r2, r3
  4034fa:	0bdb      	lsrs	r3, r3, #15
  4034fc:	b29b      	uxth	r3, r3
  4034fe:	461a      	mov	r2, r3
  403500:	2364      	movs	r3, #100	; 0x64
  403502:	fb03 f202 	mul.w	r2, r3, r2
  403506:	4b2a      	ldr	r3, [pc, #168]	; (4035b0 <dockRobot+0x10c>)
  403508:	4610      	mov	r0, r2
  40350a:	4798      	blx	r3
  40350c:	4603      	mov	r3, r0
  40350e:	603b      	str	r3, [r7, #0]
		//Zero Justified Normalized Differential Shade Calculation
		diff = 2 * (((rightBrightnessScaled * 100)/(rightBrightnessScaled + leftBrightnessScaled)) - 50);
  403510:	4b28      	ldr	r3, [pc, #160]	; (4035b4 <dockRobot+0x110>)
  403512:	4929      	ldr	r1, [pc, #164]	; (4035b8 <dockRobot+0x114>)
  403514:	6878      	ldr	r0, [r7, #4]
  403516:	4798      	blx	r3
  403518:	4603      	mov	r3, r0
  40351a:	461c      	mov	r4, r3
  40351c:	4b27      	ldr	r3, [pc, #156]	; (4035bc <dockRobot+0x118>)
  40351e:	6839      	ldr	r1, [r7, #0]
  403520:	6878      	ldr	r0, [r7, #4]
  403522:	4798      	blx	r3
  403524:	4603      	mov	r3, r0
  403526:	461a      	mov	r2, r3
  403528:	4b25      	ldr	r3, [pc, #148]	; (4035c0 <dockRobot+0x11c>)
  40352a:	4611      	mov	r1, r2
  40352c:	4620      	mov	r0, r4
  40352e:	4798      	blx	r3
  403530:	4603      	mov	r3, r0
  403532:	461a      	mov	r2, r3
  403534:	4b23      	ldr	r3, [pc, #140]	; (4035c4 <dockRobot+0x120>)
  403536:	4924      	ldr	r1, [pc, #144]	; (4035c8 <dockRobot+0x124>)
  403538:	4610      	mov	r0, r2
  40353a:	4798      	blx	r3
  40353c:	4603      	mov	r3, r0
  40353e:	461a      	mov	r2, r3
  403540:	4b1e      	ldr	r3, [pc, #120]	; (4035bc <dockRobot+0x118>)
  403542:	4611      	mov	r1, r2
  403544:	4610      	mov	r0, r2
  403546:	4798      	blx	r3
  403548:	4603      	mov	r3, r0
  40354a:	60fb      	str	r3, [r7, #12]
		//Convert to degrees
		moveRobot(diff/2, 50);
  40354c:	4b1c      	ldr	r3, [pc, #112]	; (4035c0 <dockRobot+0x11c>)
  40354e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403552:	68f8      	ldr	r0, [r7, #12]
  403554:	4798      	blx	r3
  403556:	4603      	mov	r3, r0
  403558:	2132      	movs	r1, #50	; 0x32
  40355a:	4618      	mov	r0, r3
  40355c:	4b1b      	ldr	r3, [pc, #108]	; (4035cc <dockRobot+0x128>)
  40355e:	4798      	blx	r3
  403560:	e01e      	b.n	4035a0 <dockRobot+0xfc>
	}
	else if((leftBrightness > 0x1000 || rightBrightness >  0x1000))// && frontProximity > 0x0300)
  403562:	897b      	ldrh	r3, [r7, #10]
  403564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  403568:	d803      	bhi.n	403572 <dockRobot+0xce>
  40356a:	893b      	ldrh	r3, [r7, #8]
  40356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  403570:	d902      	bls.n	403578 <dockRobot+0xd4>
	{
		stopRobot();
  403572:	4b17      	ldr	r3, [pc, #92]	; (4035d0 <dockRobot+0x12c>)
  403574:	4798      	blx	r3
  403576:	e013      	b.n	4035a0 <dockRobot+0xfc>
	}
	else if((rightBrightness - leftBrightness) > 0x009F)
  403578:	893a      	ldrh	r2, [r7, #8]
  40357a:	897b      	ldrh	r3, [r7, #10]
  40357c:	1ad3      	subs	r3, r2, r3
  40357e:	2b9f      	cmp	r3, #159	; 0x9f
  403580:	dd04      	ble.n	40358c <dockRobot+0xe8>
	{
		rotateRobot(CW, 30); //turn right
  403582:	211e      	movs	r1, #30
  403584:	2000      	movs	r0, #0
  403586:	4b13      	ldr	r3, [pc, #76]	; (4035d4 <dockRobot+0x130>)
  403588:	4798      	blx	r3
	}
	else if((leftBrightness - rightBrightness) > 0x009F)
	{
		rotateRobot(CCW, 30);//turn left
	}
}
  40358a:	e009      	b.n	4035a0 <dockRobot+0xfc>
	else if((leftBrightness - rightBrightness) > 0x009F)
  40358c:	897a      	ldrh	r2, [r7, #10]
  40358e:	893b      	ldrh	r3, [r7, #8]
  403590:	1ad3      	subs	r3, r2, r3
  403592:	2b9f      	cmp	r3, #159	; 0x9f
  403594:	dd04      	ble.n	4035a0 <dockRobot+0xfc>
		rotateRobot(CCW, 30);//turn left
  403596:	211e      	movs	r1, #30
  403598:	2001      	movs	r0, #1
  40359a:	4b0e      	ldr	r3, [pc, #56]	; (4035d4 <dockRobot+0x130>)
  40359c:	4798      	blx	r3
}
  40359e:	e7ff      	b.n	4035a0 <dockRobot+0xfc>
  4035a0:	bf00      	nop
  4035a2:	3714      	adds	r7, #20
  4035a4:	46bd      	mov	sp, r7
  4035a6:	bd90      	pop	{r4, r7, pc}
  4035a8:	00402d89 	.word	0x00402d89
  4035ac:	80008001 	.word	0x80008001
  4035b0:	0040603d 	.word	0x0040603d
  4035b4:	004060e5 	.word	0x004060e5
  4035b8:	42c80000 	.word	0x42c80000
  4035bc:	00405ed5 	.word	0x00405ed5
  4035c0:	0040624d 	.word	0x0040624d
  4035c4:	00405ed1 	.word	0x00405ed1
  4035c8:	42480000 	.word	0x42480000
  4035cc:	00403029 	.word	0x00403029
  4035d0:	004035d9 	.word	0x004035d9
  4035d4:	004033b5 	.word	0x004033b5

004035d8 <stopRobot>:

void stopRobot(void)
{
  4035d8:	b480      	push	{r7}
  4035da:	af00      	add	r7, sp, #0
	//Stops the robot from moving
	FIN_1_Low;
  4035dc:	4a13      	ldr	r2, [pc, #76]	; (40362c <stopRobot+0x54>)
  4035de:	4b13      	ldr	r3, [pc, #76]	; (40362c <stopRobot+0x54>)
  4035e0:	681b      	ldr	r3, [r3, #0]
  4035e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4035e6:	6013      	str	r3, [r2, #0]
	RIN_1_Low;
  4035e8:	4a11      	ldr	r2, [pc, #68]	; (403630 <stopRobot+0x58>)
  4035ea:	4b11      	ldr	r3, [pc, #68]	; (403630 <stopRobot+0x58>)
  4035ec:	681b      	ldr	r3, [r3, #0]
  4035ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4035f2:	6013      	str	r3, [r2, #0]
	FIN_2_Low;
  4035f4:	4a0e      	ldr	r2, [pc, #56]	; (403630 <stopRobot+0x58>)
  4035f6:	4b0e      	ldr	r3, [pc, #56]	; (403630 <stopRobot+0x58>)
  4035f8:	681b      	ldr	r3, [r3, #0]
  4035fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4035fe:	6013      	str	r3, [r2, #0]
	RIN_2_Low;
  403600:	4a0c      	ldr	r2, [pc, #48]	; (403634 <stopRobot+0x5c>)
  403602:	4b0c      	ldr	r3, [pc, #48]	; (403634 <stopRobot+0x5c>)
  403604:	681b      	ldr	r3, [r3, #0]
  403606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40360a:	6013      	str	r3, [r2, #0]
	FIN_3_Low;
  40360c:	4a09      	ldr	r2, [pc, #36]	; (403634 <stopRobot+0x5c>)
  40360e:	4b09      	ldr	r3, [pc, #36]	; (403634 <stopRobot+0x5c>)
  403610:	681b      	ldr	r3, [r3, #0]
  403612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403616:	6013      	str	r3, [r2, #0]
	RIN_3_Low;
  403618:	4a06      	ldr	r2, [pc, #24]	; (403634 <stopRobot+0x5c>)
  40361a:	4b06      	ldr	r3, [pc, #24]	; (403634 <stopRobot+0x5c>)
  40361c:	681b      	ldr	r3, [r3, #0]
  40361e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403622:	6013      	str	r3, [r2, #0]
  403624:	bf00      	nop
  403626:	46bd      	mov	sp, r7
  403628:	bc80      	pop	{r7}
  40362a:	4770      	bx	lr
  40362c:	400e1034 	.word	0x400e1034
  403630:	400e1234 	.word	0x400e1234
  403634:	400e0e34 	.word	0x400e0e34

00403638 <SPI_Init>:
* In this Swarm robotics project this is already handled by the included spi.h header file
* If this was not included it either needs to be added or the host PC version of spi.h for the SAM4N8C needs to be updated
*
*/
void SPI_Init(void)
{
  403638:	b480      	push	{r7}
  40363a:	af00      	add	r7, sp, #0
	REG_PMC_PCER0 |= PMC_PCER0_PID21;		//Enable clock access to SPI
  40363c:	4a2b      	ldr	r2, [pc, #172]	; (4036ec <SPI_Init+0xb4>)
  40363e:	4b2b      	ldr	r3, [pc, #172]	; (4036ec <SPI_Init+0xb4>)
  403640:	681b      	ldr	r3, [r3, #0]
  403642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  403646:	6013      	str	r3, [r2, #0]
	REG_SPI_WPMR |= (SPI_KEY<<8);
  403648:	4929      	ldr	r1, [pc, #164]	; (4036f0 <SPI_Init+0xb8>)
  40364a:	4b29      	ldr	r3, [pc, #164]	; (4036f0 <SPI_Init+0xb8>)
  40364c:	681a      	ldr	r2, [r3, #0]
  40364e:	4b29      	ldr	r3, [pc, #164]	; (4036f4 <SPI_Init+0xbc>)
  403650:	4313      	orrs	r3, r2
  403652:	600b      	str	r3, [r1, #0]
	REG_SPI_WPMR &= ~(1<<0);				//Disable SPI write protect
  403654:	4a26      	ldr	r2, [pc, #152]	; (4036f0 <SPI_Init+0xb8>)
  403656:	4b26      	ldr	r3, [pc, #152]	; (4036f0 <SPI_Init+0xb8>)
  403658:	681b      	ldr	r3, [r3, #0]
  40365a:	f023 0301 	bic.w	r3, r3, #1
  40365e:	6013      	str	r3, [r2, #0]
	
	REG_SPI_CR |= SPI_CR_SWRST;				//Software reset
  403660:	4a25      	ldr	r2, [pc, #148]	; (4036f8 <SPI_Init+0xc0>)
  403662:	4b25      	ldr	r3, [pc, #148]	; (4036f8 <SPI_Init+0xc0>)
  403664:	681b      	ldr	r3, [r3, #0]
  403666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40366a:	6013      	str	r3, [r2, #0]
	//Give control of MOSI, MISO & SCLK pins to SPI
	REG_PIOA_PDR |= PIO_PDR_P12;			//Give control of MISO to SPI
  40366c:	4a23      	ldr	r2, [pc, #140]	; (4036fc <SPI_Init+0xc4>)
  40366e:	4b23      	ldr	r3, [pc, #140]	; (4036fc <SPI_Init+0xc4>)
  403670:	681b      	ldr	r3, [r3, #0]
  403672:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403676:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P13;			//Give control of MOSI to SPI
  403678:	4a20      	ldr	r2, [pc, #128]	; (4036fc <SPI_Init+0xc4>)
  40367a:	4b20      	ldr	r3, [pc, #128]	; (4036fc <SPI_Init+0xc4>)
  40367c:	681b      	ldr	r3, [r3, #0]
  40367e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403682:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P14;			//Give control of SCLK to SPI
  403684:	4a1d      	ldr	r2, [pc, #116]	; (4036fc <SPI_Init+0xc4>)
  403686:	4b1d      	ldr	r3, [pc, #116]	; (4036fc <SPI_Init+0xc4>)
  403688:	681b      	ldr	r3, [r3, #0]
  40368a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40368e:	6013      	str	r3, [r2, #0]
	REG_PIOB_PER |= (1<<14);				//Enable PIO control of PB14
  403690:	4a1b      	ldr	r2, [pc, #108]	; (403700 <SPI_Init+0xc8>)
  403692:	4b1b      	ldr	r3, [pc, #108]	; (403700 <SPI_Init+0xc8>)
  403694:	681b      	ldr	r3, [r3, #0]
  403696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40369a:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= (1<<14);				//Set PB14 as output
  40369c:	4a19      	ldr	r2, [pc, #100]	; (403704 <SPI_Init+0xcc>)
  40369e:	4b19      	ldr	r3, [pc, #100]	; (403704 <SPI_Init+0xcc>)
  4036a0:	681b      	ldr	r3, [r3, #0]
  4036a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4036a6:	6013      	str	r3, [r2, #0]
	REG_SPI_CR |= SPI_CR_SPIEN; 	
  4036a8:	4a13      	ldr	r2, [pc, #76]	; (4036f8 <SPI_Init+0xc0>)
  4036aa:	4b13      	ldr	r3, [pc, #76]	; (4036f8 <SPI_Init+0xc0>)
  4036ac:	681b      	ldr	r3, [r3, #0]
  4036ae:	f043 0301 	orr.w	r3, r3, #1
  4036b2:	6013      	str	r3, [r2, #0]
	//REG_PIOB_PDR |= PIO_PDR_P14; //Give control of NPCS1 (on PB14/Pin 99) to SPI
	REG_SPI_MR |= SPI_MR_MSTR;				//SPI in Master Mode
  4036b4:	4a14      	ldr	r2, [pc, #80]	; (403708 <SPI_Init+0xd0>)
  4036b6:	4b14      	ldr	r3, [pc, #80]	; (403708 <SPI_Init+0xd0>)
  4036b8:	681b      	ldr	r3, [r3, #0]
  4036ba:	f043 0301 	orr.w	r3, r3, #1
  4036be:	6013      	str	r3, [r2, #0]
	REG_SPI_MR &= ~SPI_MR_PS;				//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
  4036c0:	4a11      	ldr	r2, [pc, #68]	; (403708 <SPI_Init+0xd0>)
  4036c2:	4b11      	ldr	r3, [pc, #68]	; (403708 <SPI_Init+0xd0>)
  4036c4:	681b      	ldr	r3, [r3, #0]
  4036c6:	f023 0302 	bic.w	r3, r3, #2
  4036ca:	6013      	str	r3, [r2, #0]
	REG_SPI_MR |= SPI_MR_PCS(0b1101); //set slave to NPCS1 (only works while SPI_MR_PS = 0)	
  4036cc:	4a0e      	ldr	r2, [pc, #56]	; (403708 <SPI_Init+0xd0>)
  4036ce:	4b0e      	ldr	r3, [pc, #56]	; (403708 <SPI_Init+0xd0>)
  4036d0:	681b      	ldr	r3, [r3, #0]
  4036d2:	f443 2350 	orr.w	r3, r3, #851968	; 0xd0000
  4036d6:	6013      	str	r3, [r2, #0]
	REG_SPI_CSR1 |= (1<<0) | (0xF0<<8) | (0x17<<24); // CPOL=1, 500k baud (2us period), 6us DLYBCT
  4036d8:	490c      	ldr	r1, [pc, #48]	; (40370c <SPI_Init+0xd4>)
  4036da:	4b0c      	ldr	r3, [pc, #48]	; (40370c <SPI_Init+0xd4>)
  4036dc:	681a      	ldr	r2, [r3, #0]
  4036de:	4b0c      	ldr	r3, [pc, #48]	; (403710 <SPI_Init+0xd8>)
  4036e0:	4313      	orrs	r3, r2
  4036e2:	600b      	str	r3, [r1, #0]
}
  4036e4:	bf00      	nop
  4036e6:	46bd      	mov	sp, r7
  4036e8:	bc80      	pop	{r7}
  4036ea:	4770      	bx	lr
  4036ec:	400e0410 	.word	0x400e0410
  4036f0:	400080e4 	.word	0x400080e4
  4036f4:	53504900 	.word	0x53504900
  4036f8:	40008000 	.word	0x40008000
  4036fc:	400e0e04 	.word	0x400e0e04
  403700:	400e1000 	.word	0x400e1000
  403704:	400e1010 	.word	0x400e1010
  403708:	40008004 	.word	0x40008004
  40370c:	40008034 	.word	0x40008034
  403710:	1700f001 	.word	0x1700f001

00403714 <initImu>:
* Next the update rate of the first in first out buffer is set, and the DMP system is started on
* the IMU.
*
*/
int initImu(void)
{
  403714:	b580      	push	{r7, lr}
  403716:	b084      	sub	sp, #16
  403718:	af00      	add	r7, sp, #0
	unsigned char accel_fsr;
	unsigned short gyro_rate, gyro_fsr;
	int result = 0;
  40371a:	2300      	movs	r3, #0
  40371c:	60fb      	str	r3, [r7, #12]
		0,	-1,	 0,
		0,	 0,	 1
	};

	//Initialise the IMU's driver	
	result += mpu_init(0);								// Initialise the MPU with no interrupts
  40371e:	2000      	movs	r0, #0
  403720:	4b2f      	ldr	r3, [pc, #188]	; (4037e0 <initImu+0xcc>)
  403722:	4798      	blx	r3
  403724:	4602      	mov	r2, r0
  403726:	68fb      	ldr	r3, [r7, #12]
  403728:	4413      	add	r3, r2
  40372a:	60fb      	str	r3, [r7, #12]
	result += mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);// Wake up all sensors
  40372c:	2079      	movs	r0, #121	; 0x79
  40372e:	4b2d      	ldr	r3, [pc, #180]	; (4037e4 <initImu+0xd0>)
  403730:	4798      	blx	r3
  403732:	4602      	mov	r2, r0
  403734:	68fb      	ldr	r3, [r7, #12]
  403736:	4413      	add	r3, r2
  403738:	60fb      	str	r3, [r7, #12]
	result += mpu_set_sample_rate(200);					// Set 200Hz samplerate (for accel and gyro)											
  40373a:	20c8      	movs	r0, #200	; 0xc8
  40373c:	4b2a      	ldr	r3, [pc, #168]	; (4037e8 <initImu+0xd4>)
  40373e:	4798      	blx	r3
  403740:	4602      	mov	r2, r0
  403742:	68fb      	ldr	r3, [r7, #12]
  403744:	4413      	add	r3, r2
  403746:	60fb      	str	r3, [r7, #12]
	result += mpu_set_compass_sample_rate(100);			// Set 100Hz compass sample rate (max)
  403748:	2064      	movs	r0, #100	; 0x64
  40374a:	4b28      	ldr	r3, [pc, #160]	; (4037ec <initImu+0xd8>)
  40374c:	4798      	blx	r3
  40374e:	4602      	mov	r2, r0
  403750:	68fb      	ldr	r3, [r7, #12]
  403752:	4413      	add	r3, r2
  403754:	60fb      	str	r3, [r7, #12]
	
	//Read back configuration in case it was set improperly.
	result += mpu_get_sample_rate(&gyro_rate);
  403756:	f107 0308 	add.w	r3, r7, #8
  40375a:	4618      	mov	r0, r3
  40375c:	4b24      	ldr	r3, [pc, #144]	; (4037f0 <initImu+0xdc>)
  40375e:	4798      	blx	r3
  403760:	4602      	mov	r2, r0
  403762:	68fb      	ldr	r3, [r7, #12]
  403764:	4413      	add	r3, r2
  403766:	60fb      	str	r3, [r7, #12]
	result += mpu_get_gyro_fsr(&gyro_fsr);
  403768:	1dbb      	adds	r3, r7, #6
  40376a:	4618      	mov	r0, r3
  40376c:	4b21      	ldr	r3, [pc, #132]	; (4037f4 <initImu+0xe0>)
  40376e:	4798      	blx	r3
  403770:	4602      	mov	r2, r0
  403772:	68fb      	ldr	r3, [r7, #12]
  403774:	4413      	add	r3, r2
  403776:	60fb      	str	r3, [r7, #12]
	result += mpu_get_accel_fsr(&accel_fsr);
  403778:	f107 030b 	add.w	r3, r7, #11
  40377c:	4618      	mov	r0, r3
  40377e:	4b1e      	ldr	r3, [pc, #120]	; (4037f8 <initImu+0xe4>)
  403780:	4798      	blx	r3
  403782:	4602      	mov	r2, r0
  403784:	68fb      	ldr	r3, [r7, #12]
  403786:	4413      	add	r3, r2
  403788:	60fb      	str	r3, [r7, #12]
	
	result += dmp_load_motion_driver_firmware();		// Load the DMP firmware
  40378a:	4b1c      	ldr	r3, [pc, #112]	; (4037fc <initImu+0xe8>)
  40378c:	4798      	blx	r3
  40378e:	4602      	mov	r2, r0
  403790:	68fb      	ldr	r3, [r7, #12]
  403792:	4413      	add	r3, r2
  403794:	60fb      	str	r3, [r7, #12]
	//Send the orientation correction matrix
	result += dmp_set_orientation(invOrientationMatrixToScalar(gyro_orientation));
  403796:	481a      	ldr	r0, [pc, #104]	; (403800 <initImu+0xec>)
  403798:	4b1a      	ldr	r3, [pc, #104]	; (403804 <initImu+0xf0>)
  40379a:	4798      	blx	r3
  40379c:	4603      	mov	r3, r0
  40379e:	4618      	mov	r0, r3
  4037a0:	4b19      	ldr	r3, [pc, #100]	; (403808 <initImu+0xf4>)
  4037a2:	4798      	blx	r3
  4037a4:	4602      	mov	r2, r0
  4037a6:	68fb      	ldr	r3, [r7, #12]
  4037a8:	4413      	add	r3, r2
  4037aa:	60fb      	str	r3, [r7, #12]
	//result += dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | 
	//								DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL);
	result += dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT);//Enable 6 axis low power quaternions
  4037ac:	2010      	movs	r0, #16
  4037ae:	4b17      	ldr	r3, [pc, #92]	; (40380c <initImu+0xf8>)
  4037b0:	4798      	blx	r3
  4037b2:	4602      	mov	r2, r0
  4037b4:	68fb      	ldr	r3, [r7, #12]
  4037b6:	4413      	add	r3, r2
  4037b8:	60fb      	str	r3, [r7, #12]
	result += dmp_set_fifo_rate(200);					//200Hz update rate from the FIFO
  4037ba:	20c8      	movs	r0, #200	; 0xc8
  4037bc:	4b14      	ldr	r3, [pc, #80]	; (403810 <initImu+0xfc>)
  4037be:	4798      	blx	r3
  4037c0:	4602      	mov	r2, r0
  4037c2:	68fb      	ldr	r3, [r7, #12]
  4037c4:	4413      	add	r3, r2
  4037c6:	60fb      	str	r3, [r7, #12]
	result += mpu_set_dmp_state(1);						//Start DMP
  4037c8:	2001      	movs	r0, #1
  4037ca:	4b12      	ldr	r3, [pc, #72]	; (403814 <initImu+0x100>)
  4037cc:	4798      	blx	r3
  4037ce:	4602      	mov	r2, r0
  4037d0:	68fb      	ldr	r3, [r7, #12]
  4037d2:	4413      	add	r3, r2
  4037d4:	60fb      	str	r3, [r7, #12]
	return result;
  4037d6:	68fb      	ldr	r3, [r7, #12]
}
  4037d8:	4618      	mov	r0, r3
  4037da:	3710      	adds	r7, #16
  4037dc:	46bd      	mov	sp, r7
  4037de:	bd80      	pop	{r7, pc}
  4037e0:	00400e81 	.word	0x00400e81
  4037e4:	004018d9 	.word	0x004018d9
  4037e8:	004016b9 	.word	0x004016b9
  4037ec:	004017a9 	.word	0x004017a9
  4037f0:	00401689 	.word	0x00401689
  4037f4:	00401391 	.word	0x00401391
  4037f8:	004014a1 	.word	0x004014a1
  4037fc:	00402271 	.word	0x00402271
  403800:	20000038 	.word	0x20000038
  403804:	00403819 	.word	0x00403819
  403808:	00402295 	.word	0x00402295
  40380c:	004029b5 	.word	0x004029b5
  403810:	0040246d 	.word	0x0040246d
  403814:	00401f29 	.word	0x00401f29

00403818 <invOrientationMatrixToScalar>:
* Implementation:
* TODO
*
*/
unsigned short invOrientationMatrixToScalar(const signed char *mtx)
{
  403818:	b580      	push	{r7, lr}
  40381a:	b084      	sub	sp, #16
  40381c:	af00      	add	r7, sp, #0
  40381e:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = invRow2Scale(mtx);
  403820:	6878      	ldr	r0, [r7, #4]
  403822:	4b11      	ldr	r3, [pc, #68]	; (403868 <invOrientationMatrixToScalar+0x50>)
  403824:	4798      	blx	r3
  403826:	4603      	mov	r3, r0
  403828:	81fb      	strh	r3, [r7, #14]
    scalar |= invRow2Scale(mtx + 3) << 3;
  40382a:	687b      	ldr	r3, [r7, #4]
  40382c:	3303      	adds	r3, #3
  40382e:	4618      	mov	r0, r3
  403830:	4b0d      	ldr	r3, [pc, #52]	; (403868 <invOrientationMatrixToScalar+0x50>)
  403832:	4798      	blx	r3
  403834:	4603      	mov	r3, r0
  403836:	00db      	lsls	r3, r3, #3
  403838:	b21a      	sxth	r2, r3
  40383a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  40383e:	4313      	orrs	r3, r2
  403840:	b21b      	sxth	r3, r3
  403842:	81fb      	strh	r3, [r7, #14]
    scalar |= invRow2Scale(mtx + 6) << 6;
  403844:	687b      	ldr	r3, [r7, #4]
  403846:	3306      	adds	r3, #6
  403848:	4618      	mov	r0, r3
  40384a:	4b07      	ldr	r3, [pc, #28]	; (403868 <invOrientationMatrixToScalar+0x50>)
  40384c:	4798      	blx	r3
  40384e:	4603      	mov	r3, r0
  403850:	019b      	lsls	r3, r3, #6
  403852:	b21a      	sxth	r2, r3
  403854:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  403858:	4313      	orrs	r3, r2
  40385a:	b21b      	sxth	r3, r3
  40385c:	81fb      	strh	r3, [r7, #14]

    return scalar;
  40385e:	89fb      	ldrh	r3, [r7, #14]
}
  403860:	4618      	mov	r0, r3
  403862:	3710      	adds	r7, #16
  403864:	46bd      	mov	sp, r7
  403866:	bd80      	pop	{r7, pc}
  403868:	0040386d 	.word	0x0040386d

0040386c <invRow2Scale>:
* Implementation:
* TODO
*
*/
unsigned short invRow2Scale(const signed char *row)
{
  40386c:	b480      	push	{r7}
  40386e:	b085      	sub	sp, #20
  403870:	af00      	add	r7, sp, #0
  403872:	6078      	str	r0, [r7, #4]
	unsigned short b;

	if (row[0] > 0)
  403874:	687b      	ldr	r3, [r7, #4]
  403876:	f993 3000 	ldrsb.w	r3, [r3]
  40387a:	2b00      	cmp	r3, #0
  40387c:	dd02      	ble.n	403884 <invRow2Scale+0x18>
	b = 0;
  40387e:	2300      	movs	r3, #0
  403880:	81fb      	strh	r3, [r7, #14]
  403882:	e02d      	b.n	4038e0 <invRow2Scale+0x74>
	else if (row[0] < 0)
  403884:	687b      	ldr	r3, [r7, #4]
  403886:	f993 3000 	ldrsb.w	r3, [r3]
  40388a:	2b00      	cmp	r3, #0
  40388c:	da02      	bge.n	403894 <invRow2Scale+0x28>
	b = 4;
  40388e:	2304      	movs	r3, #4
  403890:	81fb      	strh	r3, [r7, #14]
  403892:	e025      	b.n	4038e0 <invRow2Scale+0x74>
	else if (row[1] > 0)
  403894:	687b      	ldr	r3, [r7, #4]
  403896:	3301      	adds	r3, #1
  403898:	f993 3000 	ldrsb.w	r3, [r3]
  40389c:	2b00      	cmp	r3, #0
  40389e:	dd02      	ble.n	4038a6 <invRow2Scale+0x3a>
	b = 1;
  4038a0:	2301      	movs	r3, #1
  4038a2:	81fb      	strh	r3, [r7, #14]
  4038a4:	e01c      	b.n	4038e0 <invRow2Scale+0x74>
	else if (row[1] < 0)
  4038a6:	687b      	ldr	r3, [r7, #4]
  4038a8:	3301      	adds	r3, #1
  4038aa:	f993 3000 	ldrsb.w	r3, [r3]
  4038ae:	2b00      	cmp	r3, #0
  4038b0:	da02      	bge.n	4038b8 <invRow2Scale+0x4c>
	b = 5;
  4038b2:	2305      	movs	r3, #5
  4038b4:	81fb      	strh	r3, [r7, #14]
  4038b6:	e013      	b.n	4038e0 <invRow2Scale+0x74>
	else if (row[2] > 0)
  4038b8:	687b      	ldr	r3, [r7, #4]
  4038ba:	3302      	adds	r3, #2
  4038bc:	f993 3000 	ldrsb.w	r3, [r3]
  4038c0:	2b00      	cmp	r3, #0
  4038c2:	dd02      	ble.n	4038ca <invRow2Scale+0x5e>
	b = 2;
  4038c4:	2302      	movs	r3, #2
  4038c6:	81fb      	strh	r3, [r7, #14]
  4038c8:	e00a      	b.n	4038e0 <invRow2Scale+0x74>
	else if (row[2] < 0)
  4038ca:	687b      	ldr	r3, [r7, #4]
  4038cc:	3302      	adds	r3, #2
  4038ce:	f993 3000 	ldrsb.w	r3, [r3]
  4038d2:	2b00      	cmp	r3, #0
  4038d4:	da02      	bge.n	4038dc <invRow2Scale+0x70>
	b = 6;
  4038d6:	2306      	movs	r3, #6
  4038d8:	81fb      	strh	r3, [r7, #14]
  4038da:	e001      	b.n	4038e0 <invRow2Scale+0x74>
	else
	b = 7;      // error
  4038dc:	2307      	movs	r3, #7
  4038de:	81fb      	strh	r3, [r7, #14]
	return b;
  4038e0:	89fb      	ldrh	r3, [r7, #14]
}
  4038e2:	4618      	mov	r0, r3
  4038e4:	3714      	adds	r7, #20
  4038e6:	46bd      	mov	sp, r7
  4038e8:	bc80      	pop	{r7}
  4038ea:	4770      	bx	lr

004038ec <delay_ms>:
* Stores systemTimestamp at the start of the function, then waits until systemTimestamp has
* increased by the amount given in period_ms before continuing.
*
*/
int delay_ms(uint32_t period_ms)
{
  4038ec:	b480      	push	{r7}
  4038ee:	b085      	sub	sp, #20
  4038f0:	af00      	add	r7, sp, #0
  4038f2:	6078      	str	r0, [r7, #4]
	uint32_t startTime = systemTimestamp;
  4038f4:	4b08      	ldr	r3, [pc, #32]	; (403918 <delay_ms+0x2c>)
  4038f6:	681b      	ldr	r3, [r3, #0]
  4038f8:	60fb      	str	r3, [r7, #12]
	while(systemTimestamp < (startTime + period_ms));
  4038fa:	bf00      	nop
  4038fc:	68fa      	ldr	r2, [r7, #12]
  4038fe:	687b      	ldr	r3, [r7, #4]
  403900:	441a      	add	r2, r3
  403902:	4b05      	ldr	r3, [pc, #20]	; (403918 <delay_ms+0x2c>)
  403904:	681b      	ldr	r3, [r3, #0]
  403906:	429a      	cmp	r2, r3
  403908:	d8f8      	bhi.n	4038fc <delay_ms+0x10>
	return 0;
  40390a:	2300      	movs	r3, #0
}
  40390c:	4618      	mov	r0, r3
  40390e:	3714      	adds	r7, #20
  403910:	46bd      	mov	sp, r7
  403912:	bc80      	pop	{r7}
  403914:	4770      	bx	lr
  403916:	bf00      	nop
  403918:	200004b4 	.word	0x200004b4

0040391c <twi_write_imu>:
* flag isn't set until all bytes have been sent and the transmission holding register is clear.
*
*/
char twi_write_imu(unsigned char slave_addr, unsigned char reg_addr, 
					unsigned char length, unsigned char const *data)
{
  40391c:	b480      	push	{r7}
  40391e:	b085      	sub	sp, #20
  403920:	af00      	add	r7, sp, #0
  403922:	603b      	str	r3, [r7, #0]
  403924:	4603      	mov	r3, r0
  403926:	71fb      	strb	r3, [r7, #7]
  403928:	460b      	mov	r3, r1
  40392a:	71bb      	strb	r3, [r7, #6]
  40392c:	4613      	mov	r3, r2
  40392e:	717b      	strb	r3, [r7, #5]
	//note txcomp MUST = 1 before writing (according to datasheet)
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
  403930:	4a24      	ldr	r2, [pc, #144]	; (4039c4 <twi_write_imu+0xa8>)
  403932:	4b24      	ldr	r3, [pc, #144]	; (4039c4 <twi_write_imu+0xa8>)
  403934:	681b      	ldr	r3, [r3, #0]
  403936:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  40393a:	6013      	str	r3, [r2, #0]
	REG_TWI2_MMR
  40393c:	4a22      	ldr	r2, [pc, #136]	; (4039c8 <twi_write_imu+0xac>)
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  40393e:	79fb      	ldrb	r3, [r7, #7]
  403940:	041b      	lsls	r3, r3, #16
  403942:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
		|	TWI_MMR_IADRSZ_1_BYTE;				//Set register address length to 1 byte
  403946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  40394a:	6013      	str	r3, [r2, #0]
	REG_TWI2_IADR = reg_addr;					//set register address to write to
  40394c:	4a1f      	ldr	r2, [pc, #124]	; (4039cc <twi_write_imu+0xb0>)
  40394e:	79bb      	ldrb	r3, [r7, #6]
  403950:	6013      	str	r3, [r2, #0]

	if(length == 1)
  403952:	797b      	ldrb	r3, [r7, #5]
  403954:	2b01      	cmp	r3, #1
  403956:	d10e      	bne.n	403976 <twi_write_imu+0x5a>
	{
		REG_TWI2_THR = data[0];					//set up data to transmit
  403958:	4a1d      	ldr	r2, [pc, #116]	; (4039d0 <twi_write_imu+0xb4>)
  40395a:	683b      	ldr	r3, [r7, #0]
  40395c:	781b      	ldrb	r3, [r3, #0]
  40395e:	6013      	str	r3, [r2, #0]
		REG_TWI2_CR = TWI_CR_STOP;				// Send a stop bit
  403960:	4b18      	ldr	r3, [pc, #96]	; (4039c4 <twi_write_imu+0xa8>)
  403962:	2202      	movs	r2, #2
  403964:	601a      	str	r2, [r3, #0]
		while(!IMU_TXRDY);						//while Transmit Holding Register not ready. wait.
  403966:	bf00      	nop
  403968:	4b1a      	ldr	r3, [pc, #104]	; (4039d4 <twi_write_imu+0xb8>)
  40396a:	681b      	ldr	r3, [r3, #0]
  40396c:	f003 0304 	and.w	r3, r3, #4
  403970:	2b00      	cmp	r3, #0
  403972:	d0f9      	beq.n	403968 <twi_write_imu+0x4c>
  403974:	e019      	b.n	4039aa <twi_write_imu+0x8e>
	} else {
		for(unsigned char b = 0; b < length; b++)//Send data bit by bit until data length is reached
  403976:	2300      	movs	r3, #0
  403978:	73fb      	strb	r3, [r7, #15]
  40397a:	e00f      	b.n	40399c <twi_write_imu+0x80>
		{
			REG_TWI2_THR = data[b];				//set up data to transmit
  40397c:	4914      	ldr	r1, [pc, #80]	; (4039d0 <twi_write_imu+0xb4>)
  40397e:	7bfb      	ldrb	r3, [r7, #15]
  403980:	683a      	ldr	r2, [r7, #0]
  403982:	4413      	add	r3, r2
  403984:	781b      	ldrb	r3, [r3, #0]
  403986:	600b      	str	r3, [r1, #0]
			while(!IMU_TXRDY);					//while Transmit Holding Register not ready. wait.
  403988:	bf00      	nop
  40398a:	4b12      	ldr	r3, [pc, #72]	; (4039d4 <twi_write_imu+0xb8>)
  40398c:	681b      	ldr	r3, [r3, #0]
  40398e:	f003 0304 	and.w	r3, r3, #4
  403992:	2b00      	cmp	r3, #0
  403994:	d0f9      	beq.n	40398a <twi_write_imu+0x6e>
		for(unsigned char b = 0; b < length; b++)//Send data bit by bit until data length is reached
  403996:	7bfb      	ldrb	r3, [r7, #15]
  403998:	3301      	adds	r3, #1
  40399a:	73fb      	strb	r3, [r7, #15]
  40399c:	7bfa      	ldrb	r2, [r7, #15]
  40399e:	797b      	ldrb	r3, [r7, #5]
  4039a0:	429a      	cmp	r2, r3
  4039a2:	d3eb      	bcc.n	40397c <twi_write_imu+0x60>
		}
	
		REG_TWI2_CR = TWI_CR_STOP;				// Send a stop bit
  4039a4:	4b07      	ldr	r3, [pc, #28]	; (4039c4 <twi_write_imu+0xa8>)
  4039a6:	2202      	movs	r2, #2
  4039a8:	601a      	str	r2, [r3, #0]
	}
	while(!IMU_TXCOMP);							//while transmit not complete. wait.
  4039aa:	bf00      	nop
  4039ac:	4b09      	ldr	r3, [pc, #36]	; (4039d4 <twi_write_imu+0xb8>)
  4039ae:	681b      	ldr	r3, [r3, #0]
  4039b0:	f003 0301 	and.w	r3, r3, #1
  4039b4:	2b00      	cmp	r3, #0
  4039b6:	d0f9      	beq.n	4039ac <twi_write_imu+0x90>
	return 0;
  4039b8:	2300      	movs	r3, #0
}
  4039ba:	4618      	mov	r0, r3
  4039bc:	3714      	adds	r7, #20
  4039be:	46bd      	mov	sp, r7
  4039c0:	bc80      	pop	{r7}
  4039c2:	4770      	bx	lr
  4039c4:	40040000 	.word	0x40040000
  4039c8:	40040004 	.word	0x40040004
  4039cc:	4004000c 	.word	0x4004000c
  4039d0:	40040034 	.word	0x40040034
  4039d4:	40040020 	.word	0x40040020

004039d8 <twi_read_imu>:
* decides to stop talking.
*
*/
char twi_read_imu(unsigned char slave_addr, unsigned char reg_addr, 
					unsigned char length, unsigned char *data)
{
  4039d8:	b480      	push	{r7}
  4039da:	b085      	sub	sp, #20
  4039dc:	af00      	add	r7, sp, #0
  4039de:	603b      	str	r3, [r7, #0]
  4039e0:	4603      	mov	r3, r0
  4039e2:	71fb      	strb	r3, [r7, #7]
  4039e4:	460b      	mov	r3, r1
  4039e6:	71bb      	strb	r3, [r7, #6]
  4039e8:	4613      	mov	r3, r2
  4039ea:	717b      	strb	r3, [r7, #5]
	REG_TWI2_CR |= TWI_CR_MSEN | TWI_CR_SVDIS;	//Enable master mode
  4039ec:	4a2d      	ldr	r2, [pc, #180]	; (403aa4 <twi_read_imu+0xcc>)
  4039ee:	4b2d      	ldr	r3, [pc, #180]	; (403aa4 <twi_read_imu+0xcc>)
  4039f0:	681b      	ldr	r3, [r3, #0]
  4039f2:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  4039f6:	6013      	str	r3, [r2, #0]
	REG_TWI2_MMR
  4039f8:	4a2b      	ldr	r2, [pc, #172]	; (403aa8 <twi_read_imu+0xd0>)
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  4039fa:	79fb      	ldrb	r3, [r7, #7]
  4039fc:	041b      	lsls	r3, r3, #16
  4039fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
		|	(TWI_MMR_MREAD)						//Set to read from register
		|	TWI_MMR_IADRSZ_1_BYTE;				//Register addr byte length (0-3)
  403a02:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
		=	TWI_MMR_DADR(slave_addr)			//Slave device address
  403a06:	6013      	str	r3, [r2, #0]
	REG_TWI2_IADR = reg_addr;					//set up address to read from
  403a08:	4a28      	ldr	r2, [pc, #160]	; (403aac <twi_read_imu+0xd4>)
  403a0a:	79bb      	ldrb	r3, [r7, #6]
  403a0c:	6013      	str	r3, [r2, #0]
	
	if (length == 1)							//If only ready one byte, then START and STOP bits need to be set at the same time
  403a0e:	797b      	ldrb	r3, [r7, #5]
  403a10:	2b01      	cmp	r3, #1
  403a12:	d117      	bne.n	403a44 <twi_read_imu+0x6c>
	{
		REG_TWI2_CR
  403a14:	4b23      	ldr	r3, [pc, #140]	; (403aa4 <twi_read_imu+0xcc>)
			=	TWI_CR_START
  403a16:	2203      	movs	r2, #3
  403a18:	601a      	str	r2, [r3, #0]
			|	TWI_CR_STOP;					//Send a START and STOP condition as required (single byte read)	
		while(!IMU_RXRDY);						//while Receive Holding Register not ready. wait.
  403a1a:	bf00      	nop
  403a1c:	4b24      	ldr	r3, [pc, #144]	; (403ab0 <twi_read_imu+0xd8>)
  403a1e:	681b      	ldr	r3, [r3, #0]
  403a20:	f003 0302 	and.w	r3, r3, #2
  403a24:	2b00      	cmp	r3, #0
  403a26:	d0f9      	beq.n	403a1c <twi_read_imu+0x44>
		data[0] = REG_TWI2_RHR;					//store data received		
  403a28:	4b22      	ldr	r3, [pc, #136]	; (403ab4 <twi_read_imu+0xdc>)
  403a2a:	681b      	ldr	r3, [r3, #0]
  403a2c:	b2da      	uxtb	r2, r3
  403a2e:	683b      	ldr	r3, [r7, #0]
  403a30:	701a      	strb	r2, [r3, #0]
		while(!IMU_TXCOMP);						//while transmit not complete. wait.
  403a32:	bf00      	nop
  403a34:	4b1e      	ldr	r3, [pc, #120]	; (403ab0 <twi_read_imu+0xd8>)
  403a36:	681b      	ldr	r3, [r3, #0]
  403a38:	f003 0301 	and.w	r3, r3, #1
  403a3c:	2b00      	cmp	r3, #0
  403a3e:	d0f9      	beq.n	403a34 <twi_read_imu+0x5c>
		return 0;
  403a40:	2300      	movs	r3, #0
  403a42:	e02a      	b.n	403a9a <twi_read_imu+0xc2>
	} else {
		REG_TWI2_CR = TWI_CR_START;				//Send start bit
  403a44:	4b17      	ldr	r3, [pc, #92]	; (403aa4 <twi_read_imu+0xcc>)
  403a46:	2201      	movs	r2, #1
  403a48:	601a      	str	r2, [r3, #0]
		for(unsigned char b = 0; b < length; b++)
  403a4a:	2300      	movs	r3, #0
  403a4c:	73fb      	strb	r3, [r7, #15]
  403a4e:	e018      	b.n	403a82 <twi_read_imu+0xaa>
		{
			while(!IMU_RXRDY);
  403a50:	bf00      	nop
  403a52:	4b17      	ldr	r3, [pc, #92]	; (403ab0 <twi_read_imu+0xd8>)
  403a54:	681b      	ldr	r3, [r3, #0]
  403a56:	f003 0302 	and.w	r3, r3, #2
  403a5a:	2b00      	cmp	r3, #0
  403a5c:	d0f9      	beq.n	403a52 <twi_read_imu+0x7a>
			data[b] = REG_TWI2_RHR;
  403a5e:	7bfb      	ldrb	r3, [r7, #15]
  403a60:	683a      	ldr	r2, [r7, #0]
  403a62:	4413      	add	r3, r2
  403a64:	4a13      	ldr	r2, [pc, #76]	; (403ab4 <twi_read_imu+0xdc>)
  403a66:	6812      	ldr	r2, [r2, #0]
  403a68:	b2d2      	uxtb	r2, r2
  403a6a:	701a      	strb	r2, [r3, #0]
			if(b == length-2)
  403a6c:	7bfa      	ldrb	r2, [r7, #15]
  403a6e:	797b      	ldrb	r3, [r7, #5]
  403a70:	3b02      	subs	r3, #2
  403a72:	429a      	cmp	r2, r3
  403a74:	d102      	bne.n	403a7c <twi_read_imu+0xa4>
				REG_TWI2_CR = TWI_CR_STOP;	//Send stop on reception of 2nd to last byte
  403a76:	4b0b      	ldr	r3, [pc, #44]	; (403aa4 <twi_read_imu+0xcc>)
  403a78:	2202      	movs	r2, #2
  403a7a:	601a      	str	r2, [r3, #0]
		for(unsigned char b = 0; b < length; b++)
  403a7c:	7bfb      	ldrb	r3, [r7, #15]
  403a7e:	3301      	adds	r3, #1
  403a80:	73fb      	strb	r3, [r7, #15]
  403a82:	7bfa      	ldrb	r2, [r7, #15]
  403a84:	797b      	ldrb	r3, [r7, #5]
  403a86:	429a      	cmp	r2, r3
  403a88:	d3e2      	bcc.n	403a50 <twi_read_imu+0x78>
		}
		while(!IMU_TXCOMP);							//while transmit not complete. wait.
  403a8a:	bf00      	nop
  403a8c:	4b08      	ldr	r3, [pc, #32]	; (403ab0 <twi_read_imu+0xd8>)
  403a8e:	681b      	ldr	r3, [r3, #0]
  403a90:	f003 0301 	and.w	r3, r3, #1
  403a94:	2b00      	cmp	r3, #0
  403a96:	d0f9      	beq.n	403a8c <twi_read_imu+0xb4>
	}
	return 0;
  403a98:	2300      	movs	r3, #0
}
  403a9a:	4618      	mov	r0, r3
  403a9c:	3714      	adds	r7, #20
  403a9e:	46bd      	mov	sp, r7
  403aa0:	bc80      	pop	{r7}
  403aa2:	4770      	bx	lr
  403aa4:	40040000 	.word	0x40040000
  403aa8:	40040004 	.word	0x40040004
  403aac:	4004000c 	.word	0x4004000c
  403ab0:	40040020 	.word	0x40040020
  403ab4:	40040030 	.word	0x40040030

00403ab8 <TC0_Handler>:
* If the RC compare flag is set then it increments the systemTimestamp, and also checks if 5ms
* has elapsed. If so, will set a flag to read from the IMU's FIFO buffer (unimplemented)
*
*/
void TC0_Handler()
{
  403ab8:	b480      	push	{r7}
  403aba:	af00      	add	r7, sp, #0
	//The interrupt handler for timer counter 0
	//Triggers every 1ms
	if(REG_TC0_SR0 & TC_SR_CPCS)									//If RC compare flag
  403abc:	4b0c      	ldr	r3, [pc, #48]	; (403af0 <TC0_Handler+0x38>)
  403abe:	681b      	ldr	r3, [r3, #0]
  403ac0:	f003 0310 	and.w	r3, r3, #16
  403ac4:	2b00      	cmp	r3, #0
  403ac6:	d00f      	beq.n	403ae8 <TC0_Handler+0x30>
	{
		systemTimestamp++;
  403ac8:	4b0a      	ldr	r3, [pc, #40]	; (403af4 <TC0_Handler+0x3c>)
  403aca:	681b      	ldr	r3, [r3, #0]
  403acc:	3301      	adds	r3, #1
  403ace:	4a09      	ldr	r2, [pc, #36]	; (403af4 <TC0_Handler+0x3c>)
  403ad0:	6013      	str	r3, [r2, #0]
		//Read IMUs FIFO every 5ms. In future this will be done from an external interrupt.
		if(systemTimestamp >= (check_IMU_FIFO + 5))					
  403ad2:	4b09      	ldr	r3, [pc, #36]	; (403af8 <TC0_Handler+0x40>)
  403ad4:	681b      	ldr	r3, [r3, #0]
  403ad6:	1d5a      	adds	r2, r3, #5
  403ad8:	4b06      	ldr	r3, [pc, #24]	; (403af4 <TC0_Handler+0x3c>)
  403ada:	681b      	ldr	r3, [r3, #0]
  403adc:	429a      	cmp	r2, r3
  403ade:	d803      	bhi.n	403ae8 <TC0_Handler+0x30>
		{
			check_IMU_FIFO = systemTimestamp;
  403ae0:	4b04      	ldr	r3, [pc, #16]	; (403af4 <TC0_Handler+0x3c>)
  403ae2:	681b      	ldr	r3, [r3, #0]
  403ae4:	4a04      	ldr	r2, [pc, #16]	; (403af8 <TC0_Handler+0x40>)
  403ae6:	6013      	str	r3, [r2, #0]
		}
	}
}
  403ae8:	bf00      	nop
  403aea:	46bd      	mov	sp, r7
  403aec:	bc80      	pop	{r7}
  403aee:	4770      	bx	lr
  403af0:	40010020 	.word	0x40010020
  403af4:	200004b4 	.word	0x200004b4
  403af8:	200004b8 	.word	0x200004b8

00403afc <Proximity_Setup>:
#include "twimux_interface.h"

/******** Proximity Sensor Registry Setup ********/
//This function will pass the desired channel to the Multiplexer and setup an *individual* proximity sensor
void Proximity_Setup(uint8_t channel)
{
  403afc:	b580      	push	{r7, lr}
  403afe:	b082      	sub	sp, #8
  403b00:	af00      	add	r7, sp, #0
  403b02:	4603      	mov	r3, r0
  403b04:	71fb      	strb	r3, [r7, #7]
	twi0MuxSwitch(channel); //Set multiplexer address to correct device
  403b06:	79fb      	ldrb	r3, [r7, #7]
  403b08:	4618      	mov	r0, r3
  403b0a:	4b0f      	ldr	r3, [pc, #60]	; (403b48 <Proximity_Setup+0x4c>)
  403b0c:	4798      	blx	r3
	twi0Write(TWI0_PROXSENS_ADDR, Proximity_Command_REG_1Byte | Proximity_Enable, PDisable);			//Disable and Power down
  403b0e:	2200      	movs	r2, #0
  403b10:	2180      	movs	r1, #128	; 0x80
  403b12:	2039      	movs	r0, #57	; 0x39
  403b14:	4b0d      	ldr	r3, [pc, #52]	; (403b4c <Proximity_Setup+0x50>)
  403b16:	4798      	blx	r3
	twi0Write(TWI0_PROXSENS_ADDR, Proximity_Command_REG_1Byte | Proximity_PTime, PTIME);				//Proximity ADC time: 2.73 ms, minimum proximity integration time
  403b18:	22ff      	movs	r2, #255	; 0xff
  403b1a:	2182      	movs	r1, #130	; 0x82
  403b1c:	2039      	movs	r0, #57	; 0x39
  403b1e:	4b0b      	ldr	r3, [pc, #44]	; (403b4c <Proximity_Setup+0x50>)
  403b20:	4798      	blx	r3
	twi0Write(TWI0_PROXSENS_ADDR, Proximity_Command_REG_1Byte | Proximity_PPulse, PPULSE);			//Sets the number of Proximity pulses that the LDR pin will generate during the prox Accum state: (recommended proximity pulse count = 8) PREVIOUSLY HAD BEEN SET TO 0X02
  403b22:	2208      	movs	r2, #8
  403b24:	218e      	movs	r1, #142	; 0x8e
  403b26:	2039      	movs	r0, #57	; 0x39
  403b28:	4b08      	ldr	r3, [pc, #32]	; (403b4c <Proximity_Setup+0x50>)
  403b2a:	4798      	blx	r3
	twi0Write(TWI0_PROXSENS_ADDR, Proximity_Command_REG_1Byte | Proximity_GainControl, PDiode);		//Gain Control register: LED = 100mA, Proximity diode select, Proximity gain x1, recommended settings
  403b2c:	2220      	movs	r2, #32
  403b2e:	218f      	movs	r1, #143	; 0x8f
  403b30:	2039      	movs	r0, #57	; 0x39
  403b32:	4b06      	ldr	r3, [pc, #24]	; (403b4c <Proximity_Setup+0x50>)
  403b34:	4798      	blx	r3
	twi0Write(TWI0_PROXSENS_ADDR, Proximity_Command_REG_1Byte | Proximity_Enable, PEnable);			//Power ON, Proximity Enable
  403b36:	2205      	movs	r2, #5
  403b38:	2180      	movs	r1, #128	; 0x80
  403b3a:	2039      	movs	r0, #57	; 0x39
  403b3c:	4b03      	ldr	r3, [pc, #12]	; (403b4c <Proximity_Setup+0x50>)
  403b3e:	4798      	blx	r3
}
  403b40:	bf00      	nop
  403b42:	3708      	adds	r7, #8
  403b44:	46bd      	mov	sp, r7
  403b46:	bd80      	pop	{r7, pc}
  403b48:	00403c25 	.word	0x00403c25
  403b4c:	00403c8d 	.word	0x00403c8d

00403b50 <ADC_ReadCH>:

#include "robotdefines.h"

/******** ADC Read Channel Read ********/
uint16_t ADC_ReadCH(uint8_t channel)
{
  403b50:	b480      	push	{r7}
  403b52:	b085      	sub	sp, #20
  403b54:	af00      	add	r7, sp, #0
  403b56:	4603      	mov	r3, r0
  403b58:	71fb      	strb	r3, [r7, #7]
	uint16_t ADCdata;
	REG_ADC_CHER = (1<<channel);		//Enables ADC on specified channel
  403b5a:	4a11      	ldr	r2, [pc, #68]	; (403ba0 <ADC_ReadCH+0x50>)
  403b5c:	79fb      	ldrb	r3, [r7, #7]
  403b5e:	2101      	movs	r1, #1
  403b60:	fa01 f303 	lsl.w	r3, r1, r3
  403b64:	6013      	str	r3, [r2, #0]
	ADCstartconversion;					//Start conversion
  403b66:	4a0f      	ldr	r2, [pc, #60]	; (403ba4 <ADC_ReadCH+0x54>)
  403b68:	4b0e      	ldr	r3, [pc, #56]	; (403ba4 <ADC_ReadCH+0x54>)
  403b6a:	681b      	ldr	r3, [r3, #0]
  403b6c:	f043 0302 	orr.w	r3, r3, #2
  403b70:	6013      	str	r3, [r2, #0]
	while(!(REG_ADC_ISR & (1<<24)));	//Wait for DRDY flag
  403b72:	bf00      	nop
  403b74:	4b0c      	ldr	r3, [pc, #48]	; (403ba8 <ADC_ReadCH+0x58>)
  403b76:	681b      	ldr	r3, [r3, #0]
  403b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  403b7c:	2b00      	cmp	r3, #0
  403b7e:	d0f9      	beq.n	403b74 <ADC_ReadCH+0x24>
	REG_ADC_CHDR = (1<<channel);		//Disable channel on completion
  403b80:	4a0a      	ldr	r2, [pc, #40]	; (403bac <ADC_ReadCH+0x5c>)
  403b82:	79fb      	ldrb	r3, [r7, #7]
  403b84:	2101      	movs	r1, #1
  403b86:	fa01 f303 	lsl.w	r3, r1, r3
  403b8a:	6013      	str	r3, [r2, #0]
	ADCdata = REG_ADC_LCDR;				//Read data from last converted data register
  403b8c:	4b08      	ldr	r3, [pc, #32]	; (403bb0 <ADC_ReadCH+0x60>)
  403b8e:	681b      	ldr	r3, [r3, #0]
  403b90:	81fb      	strh	r3, [r7, #14]
	return(ADCdata);
  403b92:	89fb      	ldrh	r3, [r7, #14]
}
  403b94:	4618      	mov	r0, r3
  403b96:	3714      	adds	r7, #20
  403b98:	46bd      	mov	sp, r7
  403b9a:	bc80      	pop	{r7}
  403b9c:	4770      	bx	lr
  403b9e:	bf00      	nop
  403ba0:	40038010 	.word	0x40038010
  403ba4:	40038000 	.word	0x40038000
  403ba8:	40038030 	.word	0x40038030
  403bac:	40038014 	.word	0x40038014
  403bb0:	40038020 	.word	0x40038020

00403bb4 <twi0Init>:
*	0.6uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
* - Make TWI0 master on the TWI bus
*
*/
void twi0Init(void)
{
  403bb4:	b480      	push	{r7}
  403bb6:	b083      	sub	sp, #12
  403bb8:	af00      	add	r7, sp, #0
	REG_PMC_PCER0
	|=	(1<<ID_TWI0);						//Enable clock access to TWI0, Peripheral TWI0_ID = 19
  403bba:	4a15      	ldr	r2, [pc, #84]	; (403c10 <twi0Init+0x5c>)
  403bbc:	4b14      	ldr	r3, [pc, #80]	; (403c10 <twi0Init+0x5c>)
  403bbe:	681b      	ldr	r3, [r3, #0]
  403bc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403bc4:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR
	|=	PIO_PDR_P3;							// Enable peripheralA control of PA3 (TWD0)
  403bc6:	4a13      	ldr	r2, [pc, #76]	; (403c14 <twi0Init+0x60>)
  403bc8:	4b12      	ldr	r3, [pc, #72]	; (403c14 <twi0Init+0x60>)
  403bca:	681b      	ldr	r3, [r3, #0]
  403bcc:	f043 0308 	orr.w	r3, r3, #8
  403bd0:	6013      	str	r3, [r2, #0]
	REG_PIOA_PDR
	|=	PIO_PDR_P4;							// Enable peripheralA control of PA4 (TWCK0)
  403bd2:	4a10      	ldr	r2, [pc, #64]	; (403c14 <twi0Init+0x60>)
  403bd4:	4b0f      	ldr	r3, [pc, #60]	; (403c14 <twi0Init+0x60>)
  403bd6:	681b      	ldr	r3, [r3, #0]
  403bd8:	f043 0310 	orr.w	r3, r3, #16
  403bdc:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR
  403bde:	4b0e      	ldr	r3, [pc, #56]	; (403c18 <twi0Init+0x64>)
	=	TWI_CR_SWRST;						//Software Reset
  403be0:	2280      	movs	r2, #128	; 0x80
  403be2:	601a      	str	r2, [r3, #0]
	//TWI0 Clock Waveform Setup
	REG_TWI0_CWGR
	|=	TWI_CWGR_CKDIV(1)					//Clock speed 400000, fast mode
  403be4:	4a0d      	ldr	r2, [pc, #52]	; (403c1c <twi0Init+0x68>)
  403be6:	4b0d      	ldr	r3, [pc, #52]	; (403c1c <twi0Init+0x68>)
  403be8:	681b      	ldr	r3, [r3, #0]
  403bea:	f443 338e 	orr.w	r3, r3, #72704	; 0x11c00
  403bee:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
  403bf2:	6013      	str	r3, [r2, #0]
	|	TWI_CWGR_CLDIV(63)					//Clock low period 1.3uSec
	|	TWI_CWGR_CHDIV(28);					//Clock high period  0.6uSec
	REG_TWI0_CR
	|=	TWI_CR_MSEN							//Master mode enabled
  403bf4:	4a08      	ldr	r2, [pc, #32]	; (403c18 <twi0Init+0x64>)
  403bf6:	4b08      	ldr	r3, [pc, #32]	; (403c18 <twi0Init+0x64>)
  403bf8:	681b      	ldr	r3, [r3, #0]
  403bfa:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403bfe:	6013      	str	r3, [r2, #0]
	|	TWI_CR_SVDIS;						//Slave disabled
	uint8_t dummy = REG_TWI0_RHR;			//Ensure RXRDY flag is set
  403c00:	4b07      	ldr	r3, [pc, #28]	; (403c20 <twi0Init+0x6c>)
  403c02:	681b      	ldr	r3, [r3, #0]
  403c04:	71fb      	strb	r3, [r7, #7]
}
  403c06:	bf00      	nop
  403c08:	370c      	adds	r7, #12
  403c0a:	46bd      	mov	sp, r7
  403c0c:	bc80      	pop	{r7}
  403c0e:	4770      	bx	lr
  403c10:	400e0410 	.word	0x400e0410
  403c14:	400e0e04 	.word	0x400e0e04
  403c18:	40018000 	.word	0x40018000
  403c1c:	40018010 	.word	0x40018010
  403c20:	40018030 	.word	0x40018030

00403c24 <twi0MuxSwitch>:
*   (one byte transmission)
* - Wait for transmission to complete before exiting function.
*
*/
void twi0MuxSwitch(uint8_t channel)
{
  403c24:	b480      	push	{r7}
  403c26:	b083      	sub	sp, #12
  403c28:	af00      	add	r7, sp, #0
  403c2a:	4603      	mov	r3, r0
  403c2c:	71fb      	strb	r3, [r7, #7]
	REG_TWI0_CR
	|=	TWI_CR_MSEN							//Master mode enabled
  403c2e:	4a13      	ldr	r2, [pc, #76]	; (403c7c <twi0MuxSwitch+0x58>)
  403c30:	4b12      	ldr	r3, [pc, #72]	; (403c7c <twi0MuxSwitch+0x58>)
  403c32:	681b      	ldr	r3, [r3, #0]
  403c34:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403c38:	6013      	str	r3, [r2, #0]
	|	TWI_CR_SVDIS;						//Slave disabled
	REG_TWI0_MMR 
  403c3a:	4b11      	ldr	r3, [pc, #68]	; (403c80 <twi0MuxSwitch+0x5c>)
	=	TWI_MMR_DADR(TWI0_MUX_ADDR);		//Set Slave Device address
  403c3c:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  403c40:	601a      	str	r2, [r3, #0]
	//No internal address and set to master write mode by default of zero
	REG_TWI0_THR = channel;					//Load THR and writing to THR causes start to be sent
  403c42:	4a10      	ldr	r2, [pc, #64]	; (403c84 <twi0MuxSwitch+0x60>)
  403c44:	79fb      	ldrb	r3, [r7, #7]
  403c46:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR
	|=	TWI_CR_STOP;						//Set STOP bit after tx
  403c48:	4a0c      	ldr	r2, [pc, #48]	; (403c7c <twi0MuxSwitch+0x58>)
  403c4a:	4b0c      	ldr	r3, [pc, #48]	; (403c7c <twi0MuxSwitch+0x58>)
  403c4c:	681b      	ldr	r3, [r3, #0]
  403c4e:	f043 0302 	orr.w	r3, r3, #2
  403c52:	6013      	str	r3, [r2, #0]
	while(!(TWI0_TXRDY));					//wait for start and data to be shifted out of holding register
  403c54:	bf00      	nop
  403c56:	4b0c      	ldr	r3, [pc, #48]	; (403c88 <twi0MuxSwitch+0x64>)
  403c58:	681b      	ldr	r3, [r3, #0]
  403c5a:	f003 0304 	and.w	r3, r3, #4
  403c5e:	2b00      	cmp	r3, #0
  403c60:	d0f9      	beq.n	403c56 <twi0MuxSwitch+0x32>
	while(!(TWI0_TXCOMP));					//Communication complete, holding and shifting registers empty, Stop sent
  403c62:	bf00      	nop
  403c64:	4b08      	ldr	r3, [pc, #32]	; (403c88 <twi0MuxSwitch+0x64>)
  403c66:	681b      	ldr	r3, [r3, #0]
  403c68:	f003 0301 	and.w	r3, r3, #1
  403c6c:	2b00      	cmp	r3, #0
  403c6e:	d0f9      	beq.n	403c64 <twi0MuxSwitch+0x40>
}
  403c70:	bf00      	nop
  403c72:	370c      	adds	r7, #12
  403c74:	46bd      	mov	sp, r7
  403c76:	bc80      	pop	{r7}
  403c78:	4770      	bx	lr
  403c7a:	bf00      	nop
  403c7c:	40018000 	.word	0x40018000
  403c80:	40018004 	.word	0x40018004
  403c84:	40018034 	.word	0x40018034
  403c88:	40018020 	.word	0x40018020

00403c8c <twi0Write>:
*   transmission)
* - Wait for transmission to complete before exiting function.
*
*/
void twi0Write(uint8_t slaveAddress, uint8_t intAddress, uint8_t data)
{
  403c8c:	b480      	push	{r7}
  403c8e:	b083      	sub	sp, #12
  403c90:	af00      	add	r7, sp, #0
  403c92:	4603      	mov	r3, r0
  403c94:	71fb      	strb	r3, [r7, #7]
  403c96:	460b      	mov	r3, r1
  403c98:	71bb      	strb	r3, [r7, #6]
  403c9a:	4613      	mov	r3, r2
  403c9c:	717b      	strb	r3, [r7, #5]
	REG_TWI0_CR
	|=	TWI_CR_MSEN						//Master mode enabled
  403c9e:	4a18      	ldr	r2, [pc, #96]	; (403d00 <twi0Write+0x74>)
  403ca0:	4b17      	ldr	r3, [pc, #92]	; (403d00 <twi0Write+0x74>)
  403ca2:	681b      	ldr	r3, [r3, #0]
  403ca4:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403ca8:	6013      	str	r3, [r2, #0]
	|	TWI_CR_SVDIS;					//Slave disabled
	REG_TWI0_MMR
  403caa:	4a16      	ldr	r2, [pc, #88]	; (403d04 <twi0Write+0x78>)
	=	TWI_MMR_DADR(slaveAddress);		//Slave address (eg. Mux or Fast Charge Chip)
  403cac:	79fb      	ldrb	r3, [r7, #7]
  403cae:	041b      	lsls	r3, r3, #16
  403cb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  403cb4:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR
	|=	TWI_MMR_IADRSZ_1_BYTE;			//Set one-byte internal device address
  403cb6:	4a13      	ldr	r2, [pc, #76]	; (403d04 <twi0Write+0x78>)
  403cb8:	4b12      	ldr	r3, [pc, #72]	; (403d04 <twi0Write+0x78>)
  403cba:	681b      	ldr	r3, [r3, #0]
  403cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  403cc0:	6013      	str	r3, [r2, #0]
	//Master write direction default by 0
	REG_TWI0_IADR
  403cc2:	4a11      	ldr	r2, [pc, #68]	; (403d08 <twi0Write+0x7c>)
	=	intAddress;						//Set up the address to write to
  403cc4:	79bb      	ldrb	r3, [r7, #6]
  403cc6:	6013      	str	r3, [r2, #0]
	REG_TWI0_THR = data;				//Load the transmit holding register with data to send 
  403cc8:	4a10      	ldr	r2, [pc, #64]	; (403d0c <twi0Write+0x80>)
  403cca:	797b      	ldrb	r3, [r7, #5]
  403ccc:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR							//(start bit is also sent)
	|=	TWI_CR_STOP;					//Set the STOP bit
  403cce:	4a0c      	ldr	r2, [pc, #48]	; (403d00 <twi0Write+0x74>)
  403cd0:	4b0b      	ldr	r3, [pc, #44]	; (403d00 <twi0Write+0x74>)
  403cd2:	681b      	ldr	r3, [r3, #0]
  403cd4:	f043 0302 	orr.w	r3, r3, #2
  403cd8:	6013      	str	r3, [r2, #0]
	while(!(TWI0_TXRDY));				//while Transmit Holding Register not ready. wait.
  403cda:	bf00      	nop
  403cdc:	4b0c      	ldr	r3, [pc, #48]	; (403d10 <twi0Write+0x84>)
  403cde:	681b      	ldr	r3, [r3, #0]
  403ce0:	f003 0304 	and.w	r3, r3, #4
  403ce4:	2b00      	cmp	r3, #0
  403ce6:	d0f9      	beq.n	403cdc <twi0Write+0x50>
	while(!(TWI0_TXCOMP));				//while transmit not complete. wait.
  403ce8:	bf00      	nop
  403cea:	4b09      	ldr	r3, [pc, #36]	; (403d10 <twi0Write+0x84>)
  403cec:	681b      	ldr	r3, [r3, #0]
  403cee:	f003 0301 	and.w	r3, r3, #1
  403cf2:	2b00      	cmp	r3, #0
  403cf4:	d0f9      	beq.n	403cea <twi0Write+0x5e>
}
  403cf6:	bf00      	nop
  403cf8:	370c      	adds	r7, #12
  403cfa:	46bd      	mov	sp, r7
  403cfc:	bc80      	pop	{r7}
  403cfe:	4770      	bx	lr
  403d00:	40018000 	.word	0x40018000
  403d04:	40018004 	.word	0x40018004
  403d08:	4001800c 	.word	0x4001800c
  403d0c:	40018034 	.word	0x40018034
  403d10:	40018020 	.word	0x40018020

00403d14 <twi0ReadDouble>:
* Improvements:
* Eliminate data1 and data2 (just have returnVal)
*
*/
uint16_t twi0ReadDouble(uint8_t slaveAddress, uint8_t intAddress)
{
  403d14:	b480      	push	{r7}
  403d16:	b085      	sub	sp, #20
  403d18:	af00      	add	r7, sp, #0
  403d1a:	4603      	mov	r3, r0
  403d1c:	460a      	mov	r2, r1
  403d1e:	71fb      	strb	r3, [r7, #7]
  403d20:	4613      	mov	r3, r2
  403d22:	71bb      	strb	r3, [r7, #6]
	uint8_t dataL, dataH;
	uint16_t returnVal;
	REG_TWI0_CR
	|=	TWI_CR_MSEN						//Master mode enabled
  403d24:	4a26      	ldr	r2, [pc, #152]	; (403dc0 <twi0ReadDouble+0xac>)
  403d26:	4b26      	ldr	r3, [pc, #152]	; (403dc0 <twi0ReadDouble+0xac>)
  403d28:	681b      	ldr	r3, [r3, #0]
  403d2a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  403d2e:	6013      	str	r3, [r2, #0]
	|	TWI_CR_SVDIS;					//Slave disabled
	REG_TWI0_MMR
  403d30:	4a24      	ldr	r2, [pc, #144]	; (403dc4 <twi0ReadDouble+0xb0>)
	=	TWI_MMR_DADR(slaveAddress);		//Slave address (eg. Mux or Fast Charge Chip)
  403d32:	79fb      	ldrb	r3, [r7, #7]
  403d34:	041b      	lsls	r3, r3, #16
  403d36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  403d3a:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR
	|=	TWI_MMR_IADRSZ_1_BYTE;			//Set one-byte internal device address
  403d3c:	4a21      	ldr	r2, [pc, #132]	; (403dc4 <twi0ReadDouble+0xb0>)
  403d3e:	4b21      	ldr	r3, [pc, #132]	; (403dc4 <twi0ReadDouble+0xb0>)
  403d40:	681b      	ldr	r3, [r3, #0]
  403d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  403d46:	6013      	str	r3, [r2, #0]
	REG_TWI0_MMR
	|=	TWI_MMR_MREAD;					//Master read direction = 1
  403d48:	4a1e      	ldr	r2, [pc, #120]	; (403dc4 <twi0ReadDouble+0xb0>)
  403d4a:	4b1e      	ldr	r3, [pc, #120]	; (403dc4 <twi0ReadDouble+0xb0>)
  403d4c:	681b      	ldr	r3, [r3, #0]
  403d4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403d52:	6013      	str	r3, [r2, #0]
	REG_TWI0_IADR
  403d54:	4a1c      	ldr	r2, [pc, #112]	; (403dc8 <twi0ReadDouble+0xb4>)
	=	intAddress;						//Set up device internal address to read from
  403d56:	79bb      	ldrb	r3, [r7, #6]
  403d58:	6013      	str	r3, [r2, #0]
	REG_TWI0_CR
  403d5a:	4b19      	ldr	r3, [pc, #100]	; (403dc0 <twi0ReadDouble+0xac>)
	=	TWI_CR_START;					//Send a START bit as required (multi-byte read)
  403d5c:	2201      	movs	r2, #1
  403d5e:	601a      	str	r2, [r3, #0]
	while(!(TWI0_RXRDY));				//While Receive Holding Register not ready. wait.
  403d60:	bf00      	nop
  403d62:	4b1a      	ldr	r3, [pc, #104]	; (403dcc <twi0ReadDouble+0xb8>)
  403d64:	681b      	ldr	r3, [r3, #0]
  403d66:	f003 0302 	and.w	r3, r3, #2
  403d6a:	2b00      	cmp	r3, #0
  403d6c:	d0f9      	beq.n	403d62 <twi0ReadDouble+0x4e>
	dataL = REG_TWI0_RHR;				//Store data received (the lower byte of 16-bit data)
  403d6e:	4b18      	ldr	r3, [pc, #96]	; (403dd0 <twi0ReadDouble+0xbc>)
  403d70:	681b      	ldr	r3, [r3, #0]
  403d72:	73fb      	strb	r3, [r7, #15]
	REG_TWI0_CR 
	|=	TWI_CR_STOP;					//Set STOP bit as required
  403d74:	4a12      	ldr	r2, [pc, #72]	; (403dc0 <twi0ReadDouble+0xac>)
  403d76:	4b12      	ldr	r3, [pc, #72]	; (403dc0 <twi0ReadDouble+0xac>)
  403d78:	681b      	ldr	r3, [r3, #0]
  403d7a:	f043 0302 	orr.w	r3, r3, #2
  403d7e:	6013      	str	r3, [r2, #0]
	while(!(TWI0_RXRDY));				//While Receive Holding Register not ready. wait.
  403d80:	bf00      	nop
  403d82:	4b12      	ldr	r3, [pc, #72]	; (403dcc <twi0ReadDouble+0xb8>)
  403d84:	681b      	ldr	r3, [r3, #0]
  403d86:	f003 0302 	and.w	r3, r3, #2
  403d8a:	2b00      	cmp	r3, #0
  403d8c:	d0f9      	beq.n	403d82 <twi0ReadDouble+0x6e>
	dataH = REG_TWI0_RHR;				//Store data received (the upper byte of 16-bit data)
  403d8e:	4b10      	ldr	r3, [pc, #64]	; (403dd0 <twi0ReadDouble+0xbc>)
  403d90:	681b      	ldr	r3, [r3, #0]
  403d92:	73bb      	strb	r3, [r7, #14]
	while(!(TWI0_TXCOMP));				//While transmit not complete. wait.
  403d94:	bf00      	nop
  403d96:	4b0d      	ldr	r3, [pc, #52]	; (403dcc <twi0ReadDouble+0xb8>)
  403d98:	681b      	ldr	r3, [r3, #0]
  403d9a:	f003 0301 	and.w	r3, r3, #1
  403d9e:	2b00      	cmp	r3, #0
  403da0:	d0f9      	beq.n	403d96 <twi0ReadDouble+0x82>
	returnVal = (dataH << 8) | dataL;	//Puts the two 8 bits into 16 bits
  403da2:	7bbb      	ldrb	r3, [r7, #14]
  403da4:	021b      	lsls	r3, r3, #8
  403da6:	b21a      	sxth	r2, r3
  403da8:	7bfb      	ldrb	r3, [r7, #15]
  403daa:	b21b      	sxth	r3, r3
  403dac:	4313      	orrs	r3, r2
  403dae:	b21b      	sxth	r3, r3
  403db0:	81bb      	strh	r3, [r7, #12]
	return returnVal;
  403db2:	89bb      	ldrh	r3, [r7, #12]
}
  403db4:	4618      	mov	r0, r3
  403db6:	3714      	adds	r7, #20
  403db8:	46bd      	mov	sp, r7
  403dba:	bc80      	pop	{r7}
  403dbc:	4770      	bx	lr
  403dbe:	bf00      	nop
  403dc0:	40018000 	.word	0x40018000
  403dc4:	40018004 	.word	0x40018004
  403dc8:	4001800c 	.word	0x4001800c
  403dcc:	40018020 	.word	0x40018020
  403dd0:	40018030 	.word	0x40018030

00403dd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403dd4:	b580      	push	{r7, lr}
  403dd6:	b082      	sub	sp, #8
  403dd8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  403dda:	4b16      	ldr	r3, [pc, #88]	; (403e34 <Reset_Handler+0x60>)
  403ddc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  403dde:	4b16      	ldr	r3, [pc, #88]	; (403e38 <Reset_Handler+0x64>)
  403de0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  403de2:	687a      	ldr	r2, [r7, #4]
  403de4:	683b      	ldr	r3, [r7, #0]
  403de6:	429a      	cmp	r2, r3
  403de8:	d00c      	beq.n	403e04 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  403dea:	e007      	b.n	403dfc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  403dec:	683b      	ldr	r3, [r7, #0]
  403dee:	1d1a      	adds	r2, r3, #4
  403df0:	603a      	str	r2, [r7, #0]
  403df2:	687a      	ldr	r2, [r7, #4]
  403df4:	1d11      	adds	r1, r2, #4
  403df6:	6079      	str	r1, [r7, #4]
  403df8:	6812      	ldr	r2, [r2, #0]
  403dfa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  403dfc:	683b      	ldr	r3, [r7, #0]
  403dfe:	4a0f      	ldr	r2, [pc, #60]	; (403e3c <Reset_Handler+0x68>)
  403e00:	4293      	cmp	r3, r2
  403e02:	d3f3      	bcc.n	403dec <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403e04:	4b0e      	ldr	r3, [pc, #56]	; (403e40 <Reset_Handler+0x6c>)
  403e06:	603b      	str	r3, [r7, #0]
  403e08:	e004      	b.n	403e14 <Reset_Handler+0x40>
                *pDest++ = 0;
  403e0a:	683b      	ldr	r3, [r7, #0]
  403e0c:	1d1a      	adds	r2, r3, #4
  403e0e:	603a      	str	r2, [r7, #0]
  403e10:	2200      	movs	r2, #0
  403e12:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  403e14:	683b      	ldr	r3, [r7, #0]
  403e16:	4a0b      	ldr	r2, [pc, #44]	; (403e44 <Reset_Handler+0x70>)
  403e18:	4293      	cmp	r3, r2
  403e1a:	d3f6      	bcc.n	403e0a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  403e1c:	4b0a      	ldr	r3, [pc, #40]	; (403e48 <Reset_Handler+0x74>)
  403e1e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403e20:	4a0a      	ldr	r2, [pc, #40]	; (403e4c <Reset_Handler+0x78>)
  403e22:	687b      	ldr	r3, [r7, #4]
  403e24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403e28:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  403e2a:	4b09      	ldr	r3, [pc, #36]	; (403e50 <Reset_Handler+0x7c>)
  403e2c:	4798      	blx	r3

        /* Branch to main function */
        main();
  403e2e:	4b09      	ldr	r3, [pc, #36]	; (403e54 <Reset_Handler+0x80>)
  403e30:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  403e32:	e7fe      	b.n	403e32 <Reset_Handler+0x5e>
  403e34:	004078d8 	.word	0x004078d8
  403e38:	20000000 	.word	0x20000000
  403e3c:	20000470 	.word	0x20000470
  403e40:	20000470 	.word	0x20000470
  403e44:	20000f98 	.word	0x20000f98
  403e48:	00400000 	.word	0x00400000
  403e4c:	e000ed00 	.word	0xe000ed00
  403e50:	004064b1 	.word	0x004064b1
  403e54:	00403e91 	.word	0x00403e91

00403e58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403e58:	b480      	push	{r7}
  403e5a:	af00      	add	r7, sp, #0
        while (1) {
  403e5c:	e7fe      	b.n	403e5c <Dummy_Handler+0x4>
	...

00403e60 <NVIC_EnableIRQ>:
{
  403e60:	b480      	push	{r7}
  403e62:	b083      	sub	sp, #12
  403e64:	af00      	add	r7, sp, #0
  403e66:	4603      	mov	r3, r0
  403e68:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403e6a:	4908      	ldr	r1, [pc, #32]	; (403e8c <NVIC_EnableIRQ+0x2c>)
  403e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e70:	095b      	lsrs	r3, r3, #5
  403e72:	79fa      	ldrb	r2, [r7, #7]
  403e74:	f002 021f 	and.w	r2, r2, #31
  403e78:	2001      	movs	r0, #1
  403e7a:	fa00 f202 	lsl.w	r2, r0, r2
  403e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403e82:	bf00      	nop
  403e84:	370c      	adds	r7, #12
  403e86:	46bd      	mov	sp, r7
  403e88:	bc80      	pop	{r7}
  403e8a:	4770      	bx	lr
  403e8c:	e000e100 	.word	0xe000e100

00403e90 <main>:
/******** Global Variables ********/
uint8_t SBtest, SBtest1;
uint16_t DBtest, DBtest1, DBtest2;

int main(void)
{
  403e90:	b580      	push	{r7, lr}
  403e92:	b092      	sub	sp, #72	; 0x48
  403e94:	af00      	add	r7, sp, #0
	setup();
  403e96:	4b1b      	ldr	r3, [pc, #108]	; (403f04 <main+0x74>)
  403e98:	4798      	blx	r3
	//Comms
	struct frame_info frame;
	struct message_info message;
	//Optical
	struct Position robotPosition;
	robotPosition.x = 0;
  403e9a:	f04f 0300 	mov.w	r3, #0
  403e9e:	627b      	str	r3, [r7, #36]	; 0x24
	robotPosition.y = 0;
  403ea0:	f04f 0300 	mov.w	r3, #0
  403ea4:	62bb      	str	r3, [r7, #40]	; 0x28
		
	while(1)
	{		
		switch(robotState)
  403ea6:	4b18      	ldr	r3, [pc, #96]	; (403f08 <main+0x78>)
  403ea8:	781b      	ldrb	r3, [r3, #0]
  403eaa:	2b03      	cmp	r3, #3
  403eac:	d80a      	bhi.n	403ec4 <main+0x34>
  403eae:	a201      	add	r2, pc, #4	; (adr r2, 403eb4 <main+0x24>)
  403eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403eb4:	00403ec5 	.word	0x00403ec5
  403eb8:	00403ec5 	.word	0x00403ec5
  403ebc:	00403ec5 	.word	0x00403ec5
  403ec0:	00403ec5 	.word	0x00403ec5
		
		
		if(batteryLow)
		{			
			//moveRobot(0, 50);
			dockRobot();
  403ec4:	4b11      	ldr	r3, [pc, #68]	; (403f0c <main+0x7c>)
  403ec6:	4798      	blx	r3
		}
		
		if(FrameBufferInfoGetFull(&frame) == 0)	//Check for a received XBee Message
  403ec8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
  403ecc:	4618      	mov	r0, r3
  403ece:	4b10      	ldr	r3, [pc, #64]	; (403f10 <main+0x80>)
  403ed0:	4798      	blx	r3
  403ed2:	4603      	mov	r3, r0
  403ed4:	2b00      	cmp	r3, #0
  403ed6:	d1e6      	bne.n	403ea6 <main+0x16>
		{
			InterpretXbeeAPIFrame(frame); //Interpret the received XBee Message
  403ed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
  403edc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403ee0:	4b0c      	ldr	r3, [pc, #48]	; (403f14 <main+0x84>)
  403ee2:	4798      	blx	r3

			if(MessageBufferInfoGetFull(&message) == 0) //Check for a message from the swarm
  403ee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
  403ee8:	4618      	mov	r0, r3
  403eea:	4b0b      	ldr	r3, [pc, #44]	; (403f18 <main+0x88>)
  403eec:	4798      	blx	r3
  403eee:	4603      	mov	r3, r0
  403ef0:	2b00      	cmp	r3, #0
  403ef2:	d1d8      	bne.n	403ea6 <main+0x16>
			{
				InterpretSwarmMessage(message);	//Interpret the message
  403ef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
  403ef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403efc:	4b07      	ldr	r3, [pc, #28]	; (403f1c <main+0x8c>)
  403efe:	4798      	blx	r3
		switch(robotState)
  403f00:	e7d1      	b.n	403ea6 <main+0x16>
  403f02:	bf00      	nop
  403f04:	00403f21 	.word	0x00403f21
  403f08:	20000041 	.word	0x20000041
  403f0c:	004034a5 	.word	0x004034a5
  403f10:	00400aa1 	.word	0x00400aa1
  403f14:	004001fd 	.word	0x004001fd
  403f18:	00400cd5 	.word	0x00400cd5
  403f1c:	0040015d 	.word	0x0040015d

00403f20 <setup>:
	}

}

void setup(void)
{
  403f20:	b580      	push	{r7, lr}
  403f22:	af00      	add	r7, sp, #0
	REG_WDT_MR = (1 << 15); 				//WDT Disable
  403f24:	4b83      	ldr	r3, [pc, #524]	; (404134 <setup+0x214>)
  403f26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403f2a:	601a      	str	r2, [r3, #0]

	/******** CLOCK Setup @ 100MHz ********/
	REG_EFC_FMR = ((1<<26) | (5<<8));		//Set Flash Wait State for 100MHz
  403f2c:	4b82      	ldr	r3, [pc, #520]	; (404138 <setup+0x218>)
  403f2e:	4a83      	ldr	r2, [pc, #524]	; (40413c <setup+0x21c>)
  403f30:	601a      	str	r2, [r3, #0]
	REG_PMC_WPMR = 0x504D4300;				//Disable PMC write protect
  403f32:	4b83      	ldr	r3, [pc, #524]	; (404140 <setup+0x220>)
  403f34:	4a83      	ldr	r2, [pc, #524]	; (404144 <setup+0x224>)
  403f36:	601a      	str	r2, [r3, #0]
	REG_CKGR_MOR |= (0x37<<16) | (0x14<<8); //Set 5ms main xtal osc. Start up time. Start Up Time = 8 * MOSCXTST / SLCK => MOSCXTST = 20
  403f38:	4a83      	ldr	r2, [pc, #524]	; (404148 <setup+0x228>)
  403f3a:	4b83      	ldr	r3, [pc, #524]	; (404148 <setup+0x228>)
  403f3c:	681b      	ldr	r3, [r3, #0]
  403f3e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403f42:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  403f46:	6013      	str	r3, [r2, #0]
	REG_CKGR_MOR |= (0x37<<16) | (1<<0);	//Enable the external crystal connected to XIN and XOUT
  403f48:	4a7f      	ldr	r2, [pc, #508]	; (404148 <setup+0x228>)
  403f4a:	4b7f      	ldr	r3, [pc, #508]	; (404148 <setup+0x228>)
  403f4c:	681b      	ldr	r3, [r3, #0]
  403f4e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403f52:	f043 0301 	orr.w	r3, r3, #1
  403f56:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & 0x01));			//Wait for the main crystal oscillator to stabilize
  403f58:	bf00      	nop
  403f5a:	4b7c      	ldr	r3, [pc, #496]	; (40414c <setup+0x22c>)
  403f5c:	681b      	ldr	r3, [r3, #0]
  403f5e:	f003 0301 	and.w	r3, r3, #1
  403f62:	2b00      	cmp	r3, #0
  403f64:	d0f9      	beq.n	403f5a <setup+0x3a>
	REG_CKGR_MOR |= (0x37<<16) | (1<<24);	//MAINCK source set to external xtal
  403f66:	4a78      	ldr	r2, [pc, #480]	; (404148 <setup+0x228>)
  403f68:	4b77      	ldr	r3, [pc, #476]	; (404148 <setup+0x228>)
  403f6a:	681b      	ldr	r3, [r3, #0]
  403f6c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  403f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403f74:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & 0x10000));			//Wait for the source changeover to be complete
  403f76:	bf00      	nop
  403f78:	4b74      	ldr	r3, [pc, #464]	; (40414c <setup+0x22c>)
  403f7a:	681b      	ldr	r3, [r3, #0]
  403f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403f80:	2b00      	cmp	r3, #0
  403f82:	d0f9      	beq.n	403f78 <setup+0x58>
	REG_CKGR_MOR = 0x01371401;				//Disable the RC oscillator
  403f84:	4b70      	ldr	r3, [pc, #448]	; (404148 <setup+0x228>)
  403f86:	4a72      	ldr	r2, [pc, #456]	; (404150 <setup+0x230>)
  403f88:	601a      	str	r2, [r3, #0]
	REG_CKGR_PLLAR |= (1<<29) | (0x03<<0) | (0x18<<16) | (0x3F<<8); //Sets PLL to Divide by 3, Multiply by 25 and wait 63 SLCK cycles
  403f8a:	4972      	ldr	r1, [pc, #456]	; (404154 <setup+0x234>)
  403f8c:	4b71      	ldr	r3, [pc, #452]	; (404154 <setup+0x234>)
  403f8e:	681a      	ldr	r2, [r3, #0]
  403f90:	4b71      	ldr	r3, [pc, #452]	; (404158 <setup+0x238>)
  403f92:	4313      	orrs	r3, r2
  403f94:	600b      	str	r3, [r1, #0]
	while(!(REG_PMC_SR & 0x02));			//Wait for PLL LOCKA bit to be set
  403f96:	bf00      	nop
  403f98:	4b6c      	ldr	r3, [pc, #432]	; (40414c <setup+0x22c>)
  403f9a:	681b      	ldr	r3, [r3, #0]
  403f9c:	f003 0302 	and.w	r3, r3, #2
  403fa0:	2b00      	cmp	r3, #0
  403fa2:	d0f9      	beq.n	403f98 <setup+0x78>
	REG_PMC_MCKR = (2<<0);					//Set PLLA_CLK as MCK
  403fa4:	4b6d      	ldr	r3, [pc, #436]	; (40415c <setup+0x23c>)
  403fa6:	2202      	movs	r2, #2
  403fa8:	601a      	str	r2, [r3, #0]
	while(!(REG_PMC_SR & 0x08));			//Wait for MCK ready
  403faa:	bf00      	nop
  403fac:	4b67      	ldr	r3, [pc, #412]	; (40414c <setup+0x22c>)
  403fae:	681b      	ldr	r3, [r3, #0]
  403fb0:	f003 0308 	and.w	r3, r3, #8
  403fb4:	2b00      	cmp	r3, #0
  403fb6:	d0f9      	beq.n	403fac <setup+0x8c>
	
	/******** PIO Controller Setup ********/
	REG_PMC_PCER0 |= (1<<11);	//Enable clock access to PIO controller A
  403fb8:	4a69      	ldr	r2, [pc, #420]	; (404160 <setup+0x240>)
  403fba:	4b69      	ldr	r3, [pc, #420]	; (404160 <setup+0x240>)
  403fbc:	681b      	ldr	r3, [r3, #0]
  403fbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403fc2:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<12);	//Enable clock access to PIO controller B
  403fc4:	4a66      	ldr	r2, [pc, #408]	; (404160 <setup+0x240>)
  403fc6:	4b66      	ldr	r3, [pc, #408]	; (404160 <setup+0x240>)
  403fc8:	681b      	ldr	r3, [r3, #0]
  403fca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403fce:	6013      	str	r3, [r2, #0]
	REG_PMC_PCER0 |= (1<<13);	//Enable clock access to PIO controller C
  403fd0:	4a63      	ldr	r2, [pc, #396]	; (404160 <setup+0x240>)
  403fd2:	4b63      	ldr	r3, [pc, #396]	; (404160 <setup+0x240>)
  403fd4:	681b      	ldr	r3, [r3, #0]
  403fd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403fda:	6013      	str	r3, [r2, #0]
	REG_PIOA_WPMR = 0x50494F00; //Disable PIOA write protect
  403fdc:	4b61      	ldr	r3, [pc, #388]	; (404164 <setup+0x244>)
  403fde:	4a62      	ldr	r2, [pc, #392]	; (404168 <setup+0x248>)
  403fe0:	601a      	str	r2, [r3, #0]
	REG_PIOB_WPMR = 0x50494F00; //Disable PIOB write protect
  403fe2:	4b62      	ldr	r3, [pc, #392]	; (40416c <setup+0x24c>)
  403fe4:	4a60      	ldr	r2, [pc, #384]	; (404168 <setup+0x248>)
  403fe6:	601a      	str	r2, [r3, #0]
	REG_PIOC_WPMR = 0x50494F00; //Disable PIOC write protect
  403fe8:	4b61      	ldr	r3, [pc, #388]	; (404170 <setup+0x250>)
  403fea:	4a5f      	ldr	r2, [pc, #380]	; (404168 <setup+0x248>)
  403fec:	601a      	str	r2, [r3, #0]
	
	motor_init();
  403fee:	4b61      	ldr	r3, [pc, #388]	; (404174 <setup+0x254>)
  403ff0:	4798      	blx	r3
	SPI_Init();
  403ff2:	4b61      	ldr	r3, [pc, #388]	; (404178 <setup+0x258>)
  403ff4:	4798      	blx	r3
	//mouseInit(); //May require further testing - Adam
	CommunicationSetup();
  403ff6:	4b61      	ldr	r3, [pc, #388]	; (40417c <setup+0x25c>)
  403ff8:	4798      	blx	r3
	initImu();
  403ffa:	4b61      	ldr	r3, [pc, #388]	; (404180 <setup+0x260>)
  403ffc:	4798      	blx	r3
	twi0Init();
  403ffe:	4b61      	ldr	r3, [pc, #388]	; (404184 <setup+0x264>)
  404000:	4798      	blx	r3

	/******** LED Setup ********/
	REG_PIOA_PER |= ((1<<28) | (1<<27));	//Enable PIO control of D1 & D3.
  404002:	4a61      	ldr	r2, [pc, #388]	; (404188 <setup+0x268>)
  404004:	4b60      	ldr	r3, [pc, #384]	; (404188 <setup+0x268>)
  404006:	681b      	ldr	r3, [r3, #0]
  404008:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
  40400c:	6013      	str	r3, [r2, #0]
	REG_PIOC_PER |= (1<<8);					//Enable PIO control of D2
  40400e:	4a5f      	ldr	r2, [pc, #380]	; (40418c <setup+0x26c>)
  404010:	4b5e      	ldr	r3, [pc, #376]	; (40418c <setup+0x26c>)
  404012:	681b      	ldr	r3, [r3, #0]
  404014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404018:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= ((1<<28) | (1<<27));	//Set D1 & D3 as outputs
  40401a:	4a5d      	ldr	r2, [pc, #372]	; (404190 <setup+0x270>)
  40401c:	4b5c      	ldr	r3, [pc, #368]	; (404190 <setup+0x270>)
  40401e:	681b      	ldr	r3, [r3, #0]
  404020:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
  404024:	6013      	str	r3, [r2, #0]
	REG_PIOC_OER |= (1<<8);					//Set D2 as an output
  404026:	4a5b      	ldr	r2, [pc, #364]	; (404194 <setup+0x274>)
  404028:	4b5a      	ldr	r3, [pc, #360]	; (404194 <setup+0x274>)
  40402a:	681b      	ldr	r3, [r3, #0]
  40402c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404030:	6013      	str	r3, [r2, #0]
	D1off;									//D1 starts up off
  404032:	4a59      	ldr	r2, [pc, #356]	; (404198 <setup+0x278>)
  404034:	4b58      	ldr	r3, [pc, #352]	; (404198 <setup+0x278>)
  404036:	681b      	ldr	r3, [r3, #0]
  404038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  40403c:	6013      	str	r3, [r2, #0]
	D2off;									//D2 starts up off
  40403e:	4a57      	ldr	r2, [pc, #348]	; (40419c <setup+0x27c>)
  404040:	4b56      	ldr	r3, [pc, #344]	; (40419c <setup+0x27c>)
  404042:	681b      	ldr	r3, [r3, #0]
  404044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404048:	6013      	str	r3, [r2, #0]
	D3off;									//D3 starts up off
  40404a:	4a53      	ldr	r2, [pc, #332]	; (404198 <setup+0x278>)
  40404c:	4b52      	ldr	r3, [pc, #328]	; (404198 <setup+0x278>)
  40404e:	681b      	ldr	r3, [r3, #0]
  404050:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  404054:	6013      	str	r3, [r2, #0]
	
	/******** ADC SETUP, 10 bit default SINGLE CONVERSION SINGLE CHANNEL MODE  ********/
	REG_ADC_WPMR = 0x41444300;						//Disable ADC write protect
  404056:	4b52      	ldr	r3, [pc, #328]	; (4041a0 <setup+0x280>)
  404058:	4a52      	ldr	r2, [pc, #328]	; (4041a4 <setup+0x284>)
  40405a:	601a      	str	r2, [r3, #0]
	REG_PMC_PCER0 |= (1<<29);						//Enable peripheral clock on ADC
  40405c:	4a40      	ldr	r2, [pc, #256]	; (404160 <setup+0x240>)
  40405e:	4b40      	ldr	r3, [pc, #256]	; (404160 <setup+0x240>)
  404060:	681b      	ldr	r3, [r3, #0]
  404062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  404066:	6013      	str	r3, [r2, #0]
	REG_ADC_MR |= ((49<<8) | (3<<16) | (2<<28));	//Prescale ADC conversion by 49 (100MHZ/((49+1)x2))=1MHZ. Startup time is 24 ADC clock cycles. Field 28 must be programmed with value 2.
  404068:	494f      	ldr	r1, [pc, #316]	; (4041a8 <setup+0x288>)
  40406a:	4b4f      	ldr	r3, [pc, #316]	; (4041a8 <setup+0x288>)
  40406c:	681a      	ldr	r2, [r3, #0]
  40406e:	4b4f      	ldr	r3, [pc, #316]	; (4041ac <setup+0x28c>)
  404070:	4313      	orrs	r3, r2
  404072:	600b      	str	r3, [r1, #0]
	
	/****************TWI2(ID22) SETUP***************/
	REG_PMC_PCER0
	|=	(1<<ID_TWI2);						//Enable clock access to TWI2, Peripheral TWI2_ID = 22
  404074:	4a3a      	ldr	r2, [pc, #232]	; (404160 <setup+0x240>)
  404076:	4b3a      	ldr	r3, [pc, #232]	; (404160 <setup+0x240>)
  404078:	681b      	ldr	r3, [r3, #0]
  40407a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40407e:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR
	|=	PIO_PDR_P0							//Enable peripheralB control of PB0 (TWD2)
  404080:	4a4b      	ldr	r2, [pc, #300]	; (4041b0 <setup+0x290>)
  404082:	4b4b      	ldr	r3, [pc, #300]	; (4041b0 <setup+0x290>)
  404084:	681b      	ldr	r3, [r3, #0]
  404086:	f043 0303 	orr.w	r3, r3, #3
  40408a:	6013      	str	r3, [r2, #0]
	|	PIO_PDR_P1;							//Enable peripheralB control of PB1 (TWCK2)
	REG_PIOB_ABCDSR
	|=	PIO_ABCDSR_P0						//Set peripheral B
  40408c:	4a49      	ldr	r2, [pc, #292]	; (4041b4 <setup+0x294>)
  40408e:	4b49      	ldr	r3, [pc, #292]	; (4041b4 <setup+0x294>)
  404090:	681b      	ldr	r3, [r3, #0]
  404092:	f043 0303 	orr.w	r3, r3, #3
  404096:	6013      	str	r3, [r2, #0]
	|	PIO_ABCDSR_P1;
	REG_TWI2_CR
  404098:	4b47      	ldr	r3, [pc, #284]	; (4041b8 <setup+0x298>)
	=	TWI_CR_SWRST;						//Software Reset
  40409a:	2280      	movs	r2, #128	; 0x80
  40409c:	601a      	str	r2, [r3, #0]
	
	//TWI2 Clock Waveform Setup.
	//1.3uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
	//0.6uSec = ((x * 2^CKDIV)+4) * 10nSec[100MHz]
	REG_TWI2_CWGR
	|=	TWI_CWGR_CKDIV(1)					//Clock speed 400000, fast mode
  40409e:	4a47      	ldr	r2, [pc, #284]	; (4041bc <setup+0x29c>)
  4040a0:	4b46      	ldr	r3, [pc, #280]	; (4041bc <setup+0x29c>)
  4040a2:	681b      	ldr	r3, [r3, #0]
  4040a4:	f443 338e 	orr.w	r3, r3, #72704	; 0x11c00
  4040a8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
  4040ac:	6013      	str	r3, [r2, #0]
	|	TWI_CWGR_CLDIV(63)					//Clock low period 1.3uSec
	|	TWI_CWGR_CHDIV(28);					//Clock high period  0.6uSec
	REG_TWI2_CR
	|=	TWI_CR_MSEN							//Master mode enabled
  4040ae:	4a42      	ldr	r2, [pc, #264]	; (4041b8 <setup+0x298>)
  4040b0:	4b41      	ldr	r3, [pc, #260]	; (4041b8 <setup+0x298>)
  4040b2:	681b      	ldr	r3, [r3, #0]
  4040b4:	f043 0324 	orr.w	r3, r3, #36	; 0x24
  4040b8:	6013      	str	r3, [r2, #0]

	/****************TIMER0 SETUP***************/
	//Timer0 is used for delay_ms and get_ms functions required by the imu driver
	//TC Channel Mode Register (Pg877)
	REG_PMC_PCER0
	|=	(1<<ID_TC0);						//Enable TC clock (ID_TC0 is the peripheral identifier for timer counter 0)
  4040ba:	4a29      	ldr	r2, [pc, #164]	; (404160 <setup+0x240>)
  4040bc:	4b28      	ldr	r3, [pc, #160]	; (404160 <setup+0x240>)
  4040be:	681b      	ldr	r3, [r3, #0]
  4040c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4040c4:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(ID_TC0);
  4040c6:	2017      	movs	r0, #23
  4040c8:	4b3d      	ldr	r3, [pc, #244]	; (4041c0 <setup+0x2a0>)
  4040ca:	4798      	blx	r3
	REG_TC0_CMR0
	|=	TC_CMR_TCCLKS_TIMER_CLOCK3			//Prescaler MCK/32
  4040cc:	4a3d      	ldr	r2, [pc, #244]	; (4041c4 <setup+0x2a4>)
  4040ce:	4b3d      	ldr	r3, [pc, #244]	; (4041c4 <setup+0x2a4>)
  4040d0:	681b      	ldr	r3, [r3, #0]
  4040d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
  4040d6:	f043 0302 	orr.w	r3, r3, #2
  4040da:	6013      	str	r3, [r2, #0]
	|	TC_CMR_WAVE							//Waveform mode
	|	TC_CMR_WAVSEL_UP_RC;				//Clear on RC compare
	//TC interrupt enable register
	REG_TC0_IER0
	|=	TC_IER_CPCS;						//Enable Register C compare interrupt
  4040dc:	4a3a      	ldr	r2, [pc, #232]	; (4041c8 <setup+0x2a8>)
  4040de:	4b3a      	ldr	r3, [pc, #232]	; (4041c8 <setup+0x2a8>)
  4040e0:	681b      	ldr	r3, [r3, #0]
  4040e2:	f043 0310 	orr.w	r3, r3, #16
  4040e6:	6013      	str	r3, [r2, #0]
	//Set Register C
	REG_TC0_RC0
  4040e8:	4b38      	ldr	r3, [pc, #224]	; (4041cc <setup+0x2ac>)
	=	3125;								//Trigger once every 1/1000th of a second (100Mhz/32/1000)
  4040ea:	f640 4235 	movw	r2, #3125	; 0xc35
  4040ee:	601a      	str	r2, [r3, #0]
	//Clock control register
	REG_TC0_CCR0
	|=	TC_CCR_CLKEN						//Enable the timer clk.
  4040f0:	4a37      	ldr	r2, [pc, #220]	; (4041d0 <setup+0x2b0>)
  4040f2:	4b37      	ldr	r3, [pc, #220]	; (4041d0 <setup+0x2b0>)
  4040f4:	681b      	ldr	r3, [r3, #0]
  4040f6:	f043 0305 	orr.w	r3, r3, #5
  4040fa:	6013      	str	r3, [r2, #0]
	|	TC_CCR_SWTRG;

	LightSensor_Setup(MUX_LIGHTSENS_R);
  4040fc:	20f8      	movs	r0, #248	; 0xf8
  4040fe:	4b35      	ldr	r3, [pc, #212]	; (4041d4 <setup+0x2b4>)
  404100:	4798      	blx	r3
	LightSensor_Setup(MUX_LIGHTSENS_L);
  404102:	20f9      	movs	r0, #249	; 0xf9
  404104:	4b33      	ldr	r3, [pc, #204]	; (4041d4 <setup+0x2b4>)
  404106:	4798      	blx	r3
	Proximity_Setup(MUX_PROXSENS_A);
  404108:	20fa      	movs	r0, #250	; 0xfa
  40410a:	4b33      	ldr	r3, [pc, #204]	; (4041d8 <setup+0x2b8>)
  40410c:	4798      	blx	r3
	Proximity_Setup(MUX_PROXSENS_B);
  40410e:	20ff      	movs	r0, #255	; 0xff
  404110:	4b31      	ldr	r3, [pc, #196]	; (4041d8 <setup+0x2b8>)
  404112:	4798      	blx	r3
	Proximity_Setup(MUX_PROXSENS_C);
  404114:	20fe      	movs	r0, #254	; 0xfe
  404116:	4b30      	ldr	r3, [pc, #192]	; (4041d8 <setup+0x2b8>)
  404118:	4798      	blx	r3
	Proximity_Setup(MUX_PROXSENS_D);
  40411a:	20fd      	movs	r0, #253	; 0xfd
  40411c:	4b2e      	ldr	r3, [pc, #184]	; (4041d8 <setup+0x2b8>)
  40411e:	4798      	blx	r3
	Proximity_Setup(MUX_PROXSENS_E);
  404120:	20fc      	movs	r0, #252	; 0xfc
  404122:	4b2d      	ldr	r3, [pc, #180]	; (4041d8 <setup+0x2b8>)
  404124:	4798      	blx	r3
	Proximity_Setup(MUX_PROXSENS_F);
  404126:	20fb      	movs	r0, #251	; 0xfb
  404128:	4b2b      	ldr	r3, [pc, #172]	; (4041d8 <setup+0x2b8>)
  40412a:	4798      	blx	r3
	FastChargeController_Setup(); //Sets Voltage and Current registers on FCC
  40412c:	4b2b      	ldr	r3, [pc, #172]	; (4041dc <setup+0x2bc>)
  40412e:	4798      	blx	r3
}
  404130:	bf00      	nop
  404132:	bd80      	pop	{r7, pc}
  404134:	400e1454 	.word	0x400e1454
  404138:	400e0a00 	.word	0x400e0a00
  40413c:	04000500 	.word	0x04000500
  404140:	400e04e4 	.word	0x400e04e4
  404144:	504d4300 	.word	0x504d4300
  404148:	400e0420 	.word	0x400e0420
  40414c:	400e0468 	.word	0x400e0468
  404150:	01371401 	.word	0x01371401
  404154:	400e0428 	.word	0x400e0428
  404158:	20183f03 	.word	0x20183f03
  40415c:	400e0430 	.word	0x400e0430
  404160:	400e0410 	.word	0x400e0410
  404164:	400e0ee4 	.word	0x400e0ee4
  404168:	50494f00 	.word	0x50494f00
  40416c:	400e10e4 	.word	0x400e10e4
  404170:	400e12e4 	.word	0x400e12e4
  404174:	00402db9 	.word	0x00402db9
  404178:	00403639 	.word	0x00403639
  40417c:	00400375 	.word	0x00400375
  404180:	00403715 	.word	0x00403715
  404184:	00403bb5 	.word	0x00403bb5
  404188:	400e0e00 	.word	0x400e0e00
  40418c:	400e1200 	.word	0x400e1200
  404190:	400e0e10 	.word	0x400e0e10
  404194:	400e1210 	.word	0x400e1210
  404198:	400e0e34 	.word	0x400e0e34
  40419c:	400e1234 	.word	0x400e1234
  4041a0:	400380e4 	.word	0x400380e4
  4041a4:	41444300 	.word	0x41444300
  4041a8:	40038004 	.word	0x40038004
  4041ac:	20033100 	.word	0x20033100
  4041b0:	400e1004 	.word	0x400e1004
  4041b4:	400e1070 	.word	0x400e1070
  4041b8:	40040000 	.word	0x40040000
  4041bc:	40040010 	.word	0x40040010
  4041c0:	00403e61 	.word	0x00403e61
  4041c4:	40010004 	.word	0x40010004
  4041c8:	40010024 	.word	0x40010024
  4041cc:	4001001c 	.word	0x4001001c
  4041d0:	40010000 	.word	0x40010000
  4041d4:	00402d5d 	.word	0x00402d5d
  4041d8:	00403afd 	.word	0x00403afd
  4041dc:	00400d59 	.word	0x00400d59

004041e0 <cos>:
  4041e0:	b530      	push	{r4, r5, lr}
  4041e2:	4a22      	ldr	r2, [pc, #136]	; (40426c <cos+0x8c>)
  4041e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4041e8:	4293      	cmp	r3, r2
  4041ea:	b087      	sub	sp, #28
  4041ec:	dd1b      	ble.n	404226 <cos+0x46>
  4041ee:	4a20      	ldr	r2, [pc, #128]	; (404270 <cos+0x90>)
  4041f0:	4293      	cmp	r3, r2
  4041f2:	dd05      	ble.n	404200 <cos+0x20>
  4041f4:	4602      	mov	r2, r0
  4041f6:	460b      	mov	r3, r1
  4041f8:	f001 f9a0 	bl	40553c <__aeabi_dsub>
  4041fc:	b007      	add	sp, #28
  4041fe:	bd30      	pop	{r4, r5, pc}
  404200:	aa02      	add	r2, sp, #8
  404202:	f000 f839 	bl	404278 <__ieee754_rem_pio2>
  404206:	f000 0303 	and.w	r3, r0, #3
  40420a:	2b01      	cmp	r3, #1
  40420c:	d01a      	beq.n	404244 <cos+0x64>
  40420e:	2b02      	cmp	r3, #2
  404210:	d00f      	beq.n	404232 <cos+0x52>
  404212:	b31b      	cbz	r3, 40425c <cos+0x7c>
  404214:	2401      	movs	r4, #1
  404216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40421a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40421e:	9400      	str	r4, [sp, #0]
  404220:	f000 ffba 	bl	405198 <__kernel_sin>
  404224:	e7ea      	b.n	4041fc <cos+0x1c>
  404226:	2200      	movs	r2, #0
  404228:	2300      	movs	r3, #0
  40422a:	f000 fa49 	bl	4046c0 <__kernel_cos>
  40422e:	b007      	add	sp, #28
  404230:	bd30      	pop	{r4, r5, pc}
  404232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40423a:	f000 fa41 	bl	4046c0 <__kernel_cos>
  40423e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404242:	e7db      	b.n	4041fc <cos+0x1c>
  404244:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  404248:	9300      	str	r3, [sp, #0]
  40424a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40424e:	4622      	mov	r2, r4
  404250:	462b      	mov	r3, r5
  404252:	f000 ffa1 	bl	405198 <__kernel_sin>
  404256:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40425a:	e7cf      	b.n	4041fc <cos+0x1c>
  40425c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404264:	f000 fa2c 	bl	4046c0 <__kernel_cos>
  404268:	e7c8      	b.n	4041fc <cos+0x1c>
  40426a:	bf00      	nop
  40426c:	3fe921fb 	.word	0x3fe921fb
  404270:	7fefffff 	.word	0x7fefffff
  404274:	00000000 	.word	0x00000000

00404278 <__ieee754_rem_pio2>:
  404278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40427c:	4e9a      	ldr	r6, [pc, #616]	; (4044e8 <__ieee754_rem_pio2+0x270>)
  40427e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  404282:	42b7      	cmp	r7, r6
  404284:	b091      	sub	sp, #68	; 0x44
  404286:	f340 808e 	ble.w	4043a6 <__ieee754_rem_pio2+0x12e>
  40428a:	4692      	mov	sl, r2
  40428c:	4a97      	ldr	r2, [pc, #604]	; (4044ec <__ieee754_rem_pio2+0x274>)
  40428e:	4297      	cmp	r7, r2
  404290:	460c      	mov	r4, r1
  404292:	dc26      	bgt.n	4042e2 <__ieee754_rem_pio2+0x6a>
  404294:	2900      	cmp	r1, #0
  404296:	a38a      	add	r3, pc, #552	; (adr r3, 4044c0 <__ieee754_rem_pio2+0x248>)
  404298:	e9d3 2300 	ldrd	r2, r3, [r3]
  40429c:	f340 81b4 	ble.w	404608 <__ieee754_rem_pio2+0x390>
  4042a0:	f001 f94c 	bl	40553c <__aeabi_dsub>
  4042a4:	4b92      	ldr	r3, [pc, #584]	; (4044f0 <__ieee754_rem_pio2+0x278>)
  4042a6:	429f      	cmp	r7, r3
  4042a8:	4604      	mov	r4, r0
  4042aa:	460d      	mov	r5, r1
  4042ac:	f000 8090 	beq.w	4043d0 <__ieee754_rem_pio2+0x158>
  4042b0:	a385      	add	r3, pc, #532	; (adr r3, 4044c8 <__ieee754_rem_pio2+0x250>)
  4042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042b6:	f001 f941 	bl	40553c <__aeabi_dsub>
  4042ba:	4602      	mov	r2, r0
  4042bc:	460b      	mov	r3, r1
  4042be:	e9ca 2300 	strd	r2, r3, [sl]
  4042c2:	4620      	mov	r0, r4
  4042c4:	4629      	mov	r1, r5
  4042c6:	f001 f939 	bl	40553c <__aeabi_dsub>
  4042ca:	a37f      	add	r3, pc, #508	; (adr r3, 4044c8 <__ieee754_rem_pio2+0x250>)
  4042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042d0:	f001 f934 	bl	40553c <__aeabi_dsub>
  4042d4:	2501      	movs	r5, #1
  4042d6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4042da:	4628      	mov	r0, r5
  4042dc:	b011      	add	sp, #68	; 0x44
  4042de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042e2:	4a84      	ldr	r2, [pc, #528]	; (4044f4 <__ieee754_rem_pio2+0x27c>)
  4042e4:	4297      	cmp	r7, r2
  4042e6:	f340 8090 	ble.w	40440a <__ieee754_rem_pio2+0x192>
  4042ea:	4a83      	ldr	r2, [pc, #524]	; (4044f8 <__ieee754_rem_pio2+0x280>)
  4042ec:	4297      	cmp	r7, r2
  4042ee:	dc65      	bgt.n	4043bc <__ieee754_rem_pio2+0x144>
  4042f0:	153d      	asrs	r5, r7, #20
  4042f2:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  4042f6:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  4042fa:	4619      	mov	r1, r3
  4042fc:	461f      	mov	r7, r3
  4042fe:	4606      	mov	r6, r0
  404300:	f001 fd6a 	bl	405dd8 <__aeabi_d2iz>
  404304:	f001 fa68 	bl	4057d8 <__aeabi_i2d>
  404308:	4680      	mov	r8, r0
  40430a:	4689      	mov	r9, r1
  40430c:	4602      	mov	r2, r0
  40430e:	460b      	mov	r3, r1
  404310:	4630      	mov	r0, r6
  404312:	4639      	mov	r1, r7
  404314:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  404318:	f001 f910 	bl	40553c <__aeabi_dsub>
  40431c:	2200      	movs	r2, #0
  40431e:	4b77      	ldr	r3, [pc, #476]	; (4044fc <__ieee754_rem_pio2+0x284>)
  404320:	f001 fac0 	bl	4058a4 <__aeabi_dmul>
  404324:	4689      	mov	r9, r1
  404326:	4680      	mov	r8, r0
  404328:	f001 fd56 	bl	405dd8 <__aeabi_d2iz>
  40432c:	f001 fa54 	bl	4057d8 <__aeabi_i2d>
  404330:	4602      	mov	r2, r0
  404332:	460b      	mov	r3, r1
  404334:	4606      	mov	r6, r0
  404336:	460f      	mov	r7, r1
  404338:	4640      	mov	r0, r8
  40433a:	4649      	mov	r1, r9
  40433c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  404340:	f001 f8fc 	bl	40553c <__aeabi_dsub>
  404344:	2200      	movs	r2, #0
  404346:	4b6d      	ldr	r3, [pc, #436]	; (4044fc <__ieee754_rem_pio2+0x284>)
  404348:	f001 faac 	bl	4058a4 <__aeabi_dmul>
  40434c:	2200      	movs	r2, #0
  40434e:	2300      	movs	r3, #0
  404350:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  404354:	f001 fd0e 	bl	405d74 <__aeabi_dcmpeq>
  404358:	2800      	cmp	r0, #0
  40435a:	f000 8173 	beq.w	404644 <__ieee754_rem_pio2+0x3cc>
  40435e:	2300      	movs	r3, #0
  404360:	4630      	mov	r0, r6
  404362:	4639      	mov	r1, r7
  404364:	2200      	movs	r2, #0
  404366:	f001 fd05 	bl	405d74 <__aeabi_dcmpeq>
  40436a:	2800      	cmp	r0, #0
  40436c:	bf14      	ite	ne
  40436e:	2301      	movne	r3, #1
  404370:	2302      	moveq	r3, #2
  404372:	4a63      	ldr	r2, [pc, #396]	; (404500 <__ieee754_rem_pio2+0x288>)
  404374:	9201      	str	r2, [sp, #4]
  404376:	2102      	movs	r1, #2
  404378:	462a      	mov	r2, r5
  40437a:	9100      	str	r1, [sp, #0]
  40437c:	a80a      	add	r0, sp, #40	; 0x28
  40437e:	4651      	mov	r1, sl
  404380:	f000 fac2 	bl	404908 <__kernel_rem_pio2>
  404384:	2c00      	cmp	r4, #0
  404386:	4605      	mov	r5, r0
  404388:	da14      	bge.n	4043b4 <__ieee754_rem_pio2+0x13c>
  40438a:	f8da 2004 	ldr.w	r2, [sl, #4]
  40438e:	f8da 300c 	ldr.w	r3, [sl, #12]
  404392:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404396:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40439a:	4245      	negs	r5, r0
  40439c:	f8ca 2004 	str.w	r2, [sl, #4]
  4043a0:	f8ca 300c 	str.w	r3, [sl, #12]
  4043a4:	e006      	b.n	4043b4 <__ieee754_rem_pio2+0x13c>
  4043a6:	e9c2 0100 	strd	r0, r1, [r2]
  4043aa:	2500      	movs	r5, #0
  4043ac:	2400      	movs	r4, #0
  4043ae:	e9c2 4502 	strd	r4, r5, [r2, #8]
  4043b2:	2500      	movs	r5, #0
  4043b4:	4628      	mov	r0, r5
  4043b6:	b011      	add	sp, #68	; 0x44
  4043b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043bc:	4602      	mov	r2, r0
  4043be:	460b      	mov	r3, r1
  4043c0:	f001 f8bc 	bl	40553c <__aeabi_dsub>
  4043c4:	2500      	movs	r5, #0
  4043c6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4043ca:	e9ca 0100 	strd	r0, r1, [sl]
  4043ce:	e7f1      	b.n	4043b4 <__ieee754_rem_pio2+0x13c>
  4043d0:	a33f      	add	r3, pc, #252	; (adr r3, 4044d0 <__ieee754_rem_pio2+0x258>)
  4043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043d6:	f001 f8b1 	bl	40553c <__aeabi_dsub>
  4043da:	a33f      	add	r3, pc, #252	; (adr r3, 4044d8 <__ieee754_rem_pio2+0x260>)
  4043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043e0:	460d      	mov	r5, r1
  4043e2:	4604      	mov	r4, r0
  4043e4:	f001 f8aa 	bl	40553c <__aeabi_dsub>
  4043e8:	4602      	mov	r2, r0
  4043ea:	460b      	mov	r3, r1
  4043ec:	e9ca 2300 	strd	r2, r3, [sl]
  4043f0:	4629      	mov	r1, r5
  4043f2:	4620      	mov	r0, r4
  4043f4:	f001 f8a2 	bl	40553c <__aeabi_dsub>
  4043f8:	a337      	add	r3, pc, #220	; (adr r3, 4044d8 <__ieee754_rem_pio2+0x260>)
  4043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043fe:	f001 f89d 	bl	40553c <__aeabi_dsub>
  404402:	2501      	movs	r5, #1
  404404:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404408:	e7d4      	b.n	4043b4 <__ieee754_rem_pio2+0x13c>
  40440a:	f000 ff7b 	bl	405304 <fabs>
  40440e:	a334      	add	r3, pc, #208	; (adr r3, 4044e0 <__ieee754_rem_pio2+0x268>)
  404410:	e9d3 2300 	ldrd	r2, r3, [r3]
  404414:	4680      	mov	r8, r0
  404416:	4689      	mov	r9, r1
  404418:	f001 fa44 	bl	4058a4 <__aeabi_dmul>
  40441c:	2200      	movs	r2, #0
  40441e:	4b39      	ldr	r3, [pc, #228]	; (404504 <__ieee754_rem_pio2+0x28c>)
  404420:	f001 f88e 	bl	405540 <__adddf3>
  404424:	f001 fcd8 	bl	405dd8 <__aeabi_d2iz>
  404428:	4605      	mov	r5, r0
  40442a:	f001 f9d5 	bl	4057d8 <__aeabi_i2d>
  40442e:	a324      	add	r3, pc, #144	; (adr r3, 4044c0 <__ieee754_rem_pio2+0x248>)
  404430:	e9d3 2300 	ldrd	r2, r3, [r3]
  404434:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404438:	f001 fa34 	bl	4058a4 <__aeabi_dmul>
  40443c:	4602      	mov	r2, r0
  40443e:	460b      	mov	r3, r1
  404440:	4640      	mov	r0, r8
  404442:	4649      	mov	r1, r9
  404444:	f001 f87a 	bl	40553c <__aeabi_dsub>
  404448:	a31f      	add	r3, pc, #124	; (adr r3, 4044c8 <__ieee754_rem_pio2+0x250>)
  40444a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40444e:	4680      	mov	r8, r0
  404450:	4689      	mov	r9, r1
  404452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404456:	f001 fa25 	bl	4058a4 <__aeabi_dmul>
  40445a:	2d1f      	cmp	r5, #31
  40445c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404460:	dc54      	bgt.n	40450c <__ieee754_rem_pio2+0x294>
  404462:	4b29      	ldr	r3, [pc, #164]	; (404508 <__ieee754_rem_pio2+0x290>)
  404464:	1e6a      	subs	r2, r5, #1
  404466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40446a:	429f      	cmp	r7, r3
  40446c:	d04e      	beq.n	40450c <__ieee754_rem_pio2+0x294>
  40446e:	4602      	mov	r2, r0
  404470:	460b      	mov	r3, r1
  404472:	4640      	mov	r0, r8
  404474:	4649      	mov	r1, r9
  404476:	f001 f861 	bl	40553c <__aeabi_dsub>
  40447a:	4602      	mov	r2, r0
  40447c:	460b      	mov	r3, r1
  40447e:	e9ca 2300 	strd	r2, r3, [sl]
  404482:	4683      	mov	fp, r0
  404484:	460e      	mov	r6, r1
  404486:	465a      	mov	r2, fp
  404488:	4633      	mov	r3, r6
  40448a:	4640      	mov	r0, r8
  40448c:	4649      	mov	r1, r9
  40448e:	f001 f855 	bl	40553c <__aeabi_dsub>
  404492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404496:	f001 f851 	bl	40553c <__aeabi_dsub>
  40449a:	2c00      	cmp	r4, #0
  40449c:	4602      	mov	r2, r0
  40449e:	460b      	mov	r3, r1
  4044a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
  4044a4:	da86      	bge.n	4043b4 <__ieee754_rem_pio2+0x13c>
  4044a6:	465b      	mov	r3, fp
  4044a8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  4044ac:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4044b0:	e88a 0048 	stmia.w	sl, {r3, r6}
  4044b4:	f8ca 100c 	str.w	r1, [sl, #12]
  4044b8:	f8ca 0008 	str.w	r0, [sl, #8]
  4044bc:	426d      	negs	r5, r5
  4044be:	e779      	b.n	4043b4 <__ieee754_rem_pio2+0x13c>
  4044c0:	54400000 	.word	0x54400000
  4044c4:	3ff921fb 	.word	0x3ff921fb
  4044c8:	1a626331 	.word	0x1a626331
  4044cc:	3dd0b461 	.word	0x3dd0b461
  4044d0:	1a600000 	.word	0x1a600000
  4044d4:	3dd0b461 	.word	0x3dd0b461
  4044d8:	2e037073 	.word	0x2e037073
  4044dc:	3ba3198a 	.word	0x3ba3198a
  4044e0:	6dc9c883 	.word	0x6dc9c883
  4044e4:	3fe45f30 	.word	0x3fe45f30
  4044e8:	3fe921fb 	.word	0x3fe921fb
  4044ec:	4002d97b 	.word	0x4002d97b
  4044f0:	3ff921fb 	.word	0x3ff921fb
  4044f4:	413921fb 	.word	0x413921fb
  4044f8:	7fefffff 	.word	0x7fefffff
  4044fc:	41700000 	.word	0x41700000
  404500:	00407758 	.word	0x00407758
  404504:	3fe00000 	.word	0x3fe00000
  404508:	004076d8 	.word	0x004076d8
  40450c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404510:	4640      	mov	r0, r8
  404512:	4649      	mov	r1, r9
  404514:	f001 f812 	bl	40553c <__aeabi_dsub>
  404518:	153a      	asrs	r2, r7, #20
  40451a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40451e:	1ad3      	subs	r3, r2, r3
  404520:	2b10      	cmp	r3, #16
  404522:	4683      	mov	fp, r0
  404524:	460e      	mov	r6, r1
  404526:	9209      	str	r2, [sp, #36]	; 0x24
  404528:	e9ca 0100 	strd	r0, r1, [sl]
  40452c:	ddab      	ble.n	404486 <__ieee754_rem_pio2+0x20e>
  40452e:	a358      	add	r3, pc, #352	; (adr r3, 404690 <__ieee754_rem_pio2+0x418>)
  404530:	e9d3 2300 	ldrd	r2, r3, [r3]
  404534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404538:	f001 f9b4 	bl	4058a4 <__aeabi_dmul>
  40453c:	4606      	mov	r6, r0
  40453e:	460f      	mov	r7, r1
  404540:	4602      	mov	r2, r0
  404542:	460b      	mov	r3, r1
  404544:	4640      	mov	r0, r8
  404546:	4649      	mov	r1, r9
  404548:	f000 fff8 	bl	40553c <__aeabi_dsub>
  40454c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404550:	4602      	mov	r2, r0
  404552:	460b      	mov	r3, r1
  404554:	4640      	mov	r0, r8
  404556:	4649      	mov	r1, r9
  404558:	f000 fff0 	bl	40553c <__aeabi_dsub>
  40455c:	4632      	mov	r2, r6
  40455e:	463b      	mov	r3, r7
  404560:	f000 ffec 	bl	40553c <__aeabi_dsub>
  404564:	a34c      	add	r3, pc, #304	; (adr r3, 404698 <__ieee754_rem_pio2+0x420>)
  404566:	e9d3 2300 	ldrd	r2, r3, [r3]
  40456a:	4606      	mov	r6, r0
  40456c:	460f      	mov	r7, r1
  40456e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404572:	f001 f997 	bl	4058a4 <__aeabi_dmul>
  404576:	4632      	mov	r2, r6
  404578:	463b      	mov	r3, r7
  40457a:	f000 ffdf 	bl	40553c <__aeabi_dsub>
  40457e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404582:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404586:	4602      	mov	r2, r0
  404588:	460b      	mov	r3, r1
  40458a:	4640      	mov	r0, r8
  40458c:	4649      	mov	r1, r9
  40458e:	f000 ffd5 	bl	40553c <__aeabi_dsub>
  404592:	460b      	mov	r3, r1
  404594:	f3c1 570a 	ubfx	r7, r1, #20, #11
  404598:	460e      	mov	r6, r1
  40459a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40459c:	1bcf      	subs	r7, r1, r7
  40459e:	4602      	mov	r2, r0
  4045a0:	2f31      	cmp	r7, #49	; 0x31
  4045a2:	4683      	mov	fp, r0
  4045a4:	e9ca 2300 	strd	r2, r3, [sl]
  4045a8:	dd6c      	ble.n	404684 <__ieee754_rem_pio2+0x40c>
  4045aa:	a33d      	add	r3, pc, #244	; (adr r3, 4046a0 <__ieee754_rem_pio2+0x428>)
  4045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4045b4:	f001 f976 	bl	4058a4 <__aeabi_dmul>
  4045b8:	4606      	mov	r6, r0
  4045ba:	460f      	mov	r7, r1
  4045bc:	4602      	mov	r2, r0
  4045be:	460b      	mov	r3, r1
  4045c0:	4640      	mov	r0, r8
  4045c2:	4649      	mov	r1, r9
  4045c4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4045c8:	f000 ffb8 	bl	40553c <__aeabi_dsub>
  4045cc:	4602      	mov	r2, r0
  4045ce:	460b      	mov	r3, r1
  4045d0:	4680      	mov	r8, r0
  4045d2:	4689      	mov	r9, r1
  4045d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4045d8:	f000 ffb0 	bl	40553c <__aeabi_dsub>
  4045dc:	4632      	mov	r2, r6
  4045de:	463b      	mov	r3, r7
  4045e0:	f000 ffac 	bl	40553c <__aeabi_dsub>
  4045e4:	a330      	add	r3, pc, #192	; (adr r3, 4046a8 <__ieee754_rem_pio2+0x430>)
  4045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045ea:	4606      	mov	r6, r0
  4045ec:	460f      	mov	r7, r1
  4045ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4045f2:	f001 f957 	bl	4058a4 <__aeabi_dmul>
  4045f6:	4632      	mov	r2, r6
  4045f8:	463b      	mov	r3, r7
  4045fa:	f000 ff9f 	bl	40553c <__aeabi_dsub>
  4045fe:	4602      	mov	r2, r0
  404600:	460b      	mov	r3, r1
  404602:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404606:	e734      	b.n	404472 <__ieee754_rem_pio2+0x1fa>
  404608:	f000 ff9a 	bl	405540 <__adddf3>
  40460c:	4b2a      	ldr	r3, [pc, #168]	; (4046b8 <__ieee754_rem_pio2+0x440>)
  40460e:	429f      	cmp	r7, r3
  404610:	4604      	mov	r4, r0
  404612:	460d      	mov	r5, r1
  404614:	d018      	beq.n	404648 <__ieee754_rem_pio2+0x3d0>
  404616:	a326      	add	r3, pc, #152	; (adr r3, 4046b0 <__ieee754_rem_pio2+0x438>)
  404618:	e9d3 2300 	ldrd	r2, r3, [r3]
  40461c:	f000 ff90 	bl	405540 <__adddf3>
  404620:	4602      	mov	r2, r0
  404622:	460b      	mov	r3, r1
  404624:	e9ca 2300 	strd	r2, r3, [sl]
  404628:	4629      	mov	r1, r5
  40462a:	4620      	mov	r0, r4
  40462c:	f000 ff86 	bl	40553c <__aeabi_dsub>
  404630:	a31f      	add	r3, pc, #124	; (adr r3, 4046b0 <__ieee754_rem_pio2+0x438>)
  404632:	e9d3 2300 	ldrd	r2, r3, [r3]
  404636:	f000 ff83 	bl	405540 <__adddf3>
  40463a:	f04f 35ff 	mov.w	r5, #4294967295
  40463e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404642:	e6b7      	b.n	4043b4 <__ieee754_rem_pio2+0x13c>
  404644:	2303      	movs	r3, #3
  404646:	e694      	b.n	404372 <__ieee754_rem_pio2+0xfa>
  404648:	a311      	add	r3, pc, #68	; (adr r3, 404690 <__ieee754_rem_pio2+0x418>)
  40464a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40464e:	f000 ff77 	bl	405540 <__adddf3>
  404652:	a311      	add	r3, pc, #68	; (adr r3, 404698 <__ieee754_rem_pio2+0x420>)
  404654:	e9d3 2300 	ldrd	r2, r3, [r3]
  404658:	460d      	mov	r5, r1
  40465a:	4604      	mov	r4, r0
  40465c:	f000 ff70 	bl	405540 <__adddf3>
  404660:	4602      	mov	r2, r0
  404662:	460b      	mov	r3, r1
  404664:	e9ca 2300 	strd	r2, r3, [sl]
  404668:	4629      	mov	r1, r5
  40466a:	4620      	mov	r0, r4
  40466c:	f000 ff66 	bl	40553c <__aeabi_dsub>
  404670:	a309      	add	r3, pc, #36	; (adr r3, 404698 <__ieee754_rem_pio2+0x420>)
  404672:	e9d3 2300 	ldrd	r2, r3, [r3]
  404676:	f000 ff63 	bl	405540 <__adddf3>
  40467a:	f04f 35ff 	mov.w	r5, #4294967295
  40467e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404682:	e697      	b.n	4043b4 <__ieee754_rem_pio2+0x13c>
  404684:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404688:	e6fd      	b.n	404486 <__ieee754_rem_pio2+0x20e>
  40468a:	bf00      	nop
  40468c:	f3af 8000 	nop.w
  404690:	1a600000 	.word	0x1a600000
  404694:	3dd0b461 	.word	0x3dd0b461
  404698:	2e037073 	.word	0x2e037073
  40469c:	3ba3198a 	.word	0x3ba3198a
  4046a0:	2e000000 	.word	0x2e000000
  4046a4:	3ba3198a 	.word	0x3ba3198a
  4046a8:	252049c1 	.word	0x252049c1
  4046ac:	397b839a 	.word	0x397b839a
  4046b0:	1a626331 	.word	0x1a626331
  4046b4:	3dd0b461 	.word	0x3dd0b461
  4046b8:	3ff921fb 	.word	0x3ff921fb
  4046bc:	00000000 	.word	0x00000000

004046c0 <__kernel_cos>:
  4046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4046c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4046cc:	b085      	sub	sp, #20
  4046ce:	460c      	mov	r4, r1
  4046d0:	4692      	mov	sl, r2
  4046d2:	469b      	mov	fp, r3
  4046d4:	4605      	mov	r5, r0
  4046d6:	da6b      	bge.n	4047b0 <__kernel_cos+0xf0>
  4046d8:	f001 fb7e 	bl	405dd8 <__aeabi_d2iz>
  4046dc:	2800      	cmp	r0, #0
  4046de:	f000 80e8 	beq.w	4048b2 <__kernel_cos+0x1f2>
  4046e2:	462a      	mov	r2, r5
  4046e4:	4623      	mov	r3, r4
  4046e6:	4628      	mov	r0, r5
  4046e8:	4621      	mov	r1, r4
  4046ea:	f001 f8db 	bl	4058a4 <__aeabi_dmul>
  4046ee:	a374      	add	r3, pc, #464	; (adr r3, 4048c0 <__kernel_cos+0x200>)
  4046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046f4:	4680      	mov	r8, r0
  4046f6:	4689      	mov	r9, r1
  4046f8:	f001 f8d4 	bl	4058a4 <__aeabi_dmul>
  4046fc:	a372      	add	r3, pc, #456	; (adr r3, 4048c8 <__kernel_cos+0x208>)
  4046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  404702:	f000 ff1d 	bl	405540 <__adddf3>
  404706:	4642      	mov	r2, r8
  404708:	464b      	mov	r3, r9
  40470a:	f001 f8cb 	bl	4058a4 <__aeabi_dmul>
  40470e:	a370      	add	r3, pc, #448	; (adr r3, 4048d0 <__kernel_cos+0x210>)
  404710:	e9d3 2300 	ldrd	r2, r3, [r3]
  404714:	f000 ff12 	bl	40553c <__aeabi_dsub>
  404718:	4642      	mov	r2, r8
  40471a:	464b      	mov	r3, r9
  40471c:	f001 f8c2 	bl	4058a4 <__aeabi_dmul>
  404720:	a36d      	add	r3, pc, #436	; (adr r3, 4048d8 <__kernel_cos+0x218>)
  404722:	e9d3 2300 	ldrd	r2, r3, [r3]
  404726:	f000 ff0b 	bl	405540 <__adddf3>
  40472a:	4642      	mov	r2, r8
  40472c:	464b      	mov	r3, r9
  40472e:	f001 f8b9 	bl	4058a4 <__aeabi_dmul>
  404732:	a36b      	add	r3, pc, #428	; (adr r3, 4048e0 <__kernel_cos+0x220>)
  404734:	e9d3 2300 	ldrd	r2, r3, [r3]
  404738:	f000 ff00 	bl	40553c <__aeabi_dsub>
  40473c:	4642      	mov	r2, r8
  40473e:	464b      	mov	r3, r9
  404740:	f001 f8b0 	bl	4058a4 <__aeabi_dmul>
  404744:	a368      	add	r3, pc, #416	; (adr r3, 4048e8 <__kernel_cos+0x228>)
  404746:	e9d3 2300 	ldrd	r2, r3, [r3]
  40474a:	f000 fef9 	bl	405540 <__adddf3>
  40474e:	4642      	mov	r2, r8
  404750:	464b      	mov	r3, r9
  404752:	f001 f8a7 	bl	4058a4 <__aeabi_dmul>
  404756:	e9cd 0100 	strd	r0, r1, [sp]
  40475a:	2200      	movs	r2, #0
  40475c:	4b64      	ldr	r3, [pc, #400]	; (4048f0 <__kernel_cos+0x230>)
  40475e:	4640      	mov	r0, r8
  404760:	4649      	mov	r1, r9
  404762:	f001 f89f 	bl	4058a4 <__aeabi_dmul>
  404766:	e9dd 2300 	ldrd	r2, r3, [sp]
  40476a:	4606      	mov	r6, r0
  40476c:	460f      	mov	r7, r1
  40476e:	4640      	mov	r0, r8
  404770:	4649      	mov	r1, r9
  404772:	f001 f897 	bl	4058a4 <__aeabi_dmul>
  404776:	4652      	mov	r2, sl
  404778:	4680      	mov	r8, r0
  40477a:	4689      	mov	r9, r1
  40477c:	465b      	mov	r3, fp
  40477e:	4628      	mov	r0, r5
  404780:	4621      	mov	r1, r4
  404782:	f001 f88f 	bl	4058a4 <__aeabi_dmul>
  404786:	4602      	mov	r2, r0
  404788:	460b      	mov	r3, r1
  40478a:	4640      	mov	r0, r8
  40478c:	4649      	mov	r1, r9
  40478e:	f000 fed5 	bl	40553c <__aeabi_dsub>
  404792:	4602      	mov	r2, r0
  404794:	460b      	mov	r3, r1
  404796:	4630      	mov	r0, r6
  404798:	4639      	mov	r1, r7
  40479a:	f000 fecf 	bl	40553c <__aeabi_dsub>
  40479e:	4602      	mov	r2, r0
  4047a0:	460b      	mov	r3, r1
  4047a2:	2000      	movs	r0, #0
  4047a4:	4953      	ldr	r1, [pc, #332]	; (4048f4 <__kernel_cos+0x234>)
  4047a6:	f000 fec9 	bl	40553c <__aeabi_dsub>
  4047aa:	b005      	add	sp, #20
  4047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047b0:	4602      	mov	r2, r0
  4047b2:	460b      	mov	r3, r1
  4047b4:	f001 f876 	bl	4058a4 <__aeabi_dmul>
  4047b8:	a341      	add	r3, pc, #260	; (adr r3, 4048c0 <__kernel_cos+0x200>)
  4047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047be:	4680      	mov	r8, r0
  4047c0:	4689      	mov	r9, r1
  4047c2:	f001 f86f 	bl	4058a4 <__aeabi_dmul>
  4047c6:	a340      	add	r3, pc, #256	; (adr r3, 4048c8 <__kernel_cos+0x208>)
  4047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047cc:	f000 feb8 	bl	405540 <__adddf3>
  4047d0:	4642      	mov	r2, r8
  4047d2:	464b      	mov	r3, r9
  4047d4:	f001 f866 	bl	4058a4 <__aeabi_dmul>
  4047d8:	a33d      	add	r3, pc, #244	; (adr r3, 4048d0 <__kernel_cos+0x210>)
  4047da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047de:	f000 fead 	bl	40553c <__aeabi_dsub>
  4047e2:	4642      	mov	r2, r8
  4047e4:	464b      	mov	r3, r9
  4047e6:	f001 f85d 	bl	4058a4 <__aeabi_dmul>
  4047ea:	a33b      	add	r3, pc, #236	; (adr r3, 4048d8 <__kernel_cos+0x218>)
  4047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047f0:	f000 fea6 	bl	405540 <__adddf3>
  4047f4:	4642      	mov	r2, r8
  4047f6:	464b      	mov	r3, r9
  4047f8:	f001 f854 	bl	4058a4 <__aeabi_dmul>
  4047fc:	a338      	add	r3, pc, #224	; (adr r3, 4048e0 <__kernel_cos+0x220>)
  4047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  404802:	f000 fe9b 	bl	40553c <__aeabi_dsub>
  404806:	4642      	mov	r2, r8
  404808:	464b      	mov	r3, r9
  40480a:	f001 f84b 	bl	4058a4 <__aeabi_dmul>
  40480e:	a336      	add	r3, pc, #216	; (adr r3, 4048e8 <__kernel_cos+0x228>)
  404810:	e9d3 2300 	ldrd	r2, r3, [r3]
  404814:	f000 fe94 	bl	405540 <__adddf3>
  404818:	464b      	mov	r3, r9
  40481a:	4642      	mov	r2, r8
  40481c:	f001 f842 	bl	4058a4 <__aeabi_dmul>
  404820:	4b35      	ldr	r3, [pc, #212]	; (4048f8 <__kernel_cos+0x238>)
  404822:	429e      	cmp	r6, r3
  404824:	e9cd 0100 	strd	r0, r1, [sp]
  404828:	dd97      	ble.n	40475a <__kernel_cos+0x9a>
  40482a:	4b34      	ldr	r3, [pc, #208]	; (4048fc <__kernel_cos+0x23c>)
  40482c:	429e      	cmp	r6, r3
  40482e:	f04f 0200 	mov.w	r2, #0
  404832:	dc38      	bgt.n	4048a6 <__kernel_cos+0x1e6>
  404834:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  404838:	2000      	movs	r0, #0
  40483a:	492e      	ldr	r1, [pc, #184]	; (4048f4 <__kernel_cos+0x234>)
  40483c:	4616      	mov	r6, r2
  40483e:	461f      	mov	r7, r3
  404840:	f000 fe7c 	bl	40553c <__aeabi_dsub>
  404844:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404848:	2200      	movs	r2, #0
  40484a:	4b29      	ldr	r3, [pc, #164]	; (4048f0 <__kernel_cos+0x230>)
  40484c:	4640      	mov	r0, r8
  40484e:	4649      	mov	r1, r9
  404850:	f001 f828 	bl	4058a4 <__aeabi_dmul>
  404854:	4632      	mov	r2, r6
  404856:	463b      	mov	r3, r7
  404858:	f000 fe70 	bl	40553c <__aeabi_dsub>
  40485c:	e9dd 2300 	ldrd	r2, r3, [sp]
  404860:	4606      	mov	r6, r0
  404862:	460f      	mov	r7, r1
  404864:	4640      	mov	r0, r8
  404866:	4649      	mov	r1, r9
  404868:	f001 f81c 	bl	4058a4 <__aeabi_dmul>
  40486c:	4652      	mov	r2, sl
  40486e:	4680      	mov	r8, r0
  404870:	4689      	mov	r9, r1
  404872:	465b      	mov	r3, fp
  404874:	4628      	mov	r0, r5
  404876:	4621      	mov	r1, r4
  404878:	f001 f814 	bl	4058a4 <__aeabi_dmul>
  40487c:	4602      	mov	r2, r0
  40487e:	460b      	mov	r3, r1
  404880:	4640      	mov	r0, r8
  404882:	4649      	mov	r1, r9
  404884:	f000 fe5a 	bl	40553c <__aeabi_dsub>
  404888:	4602      	mov	r2, r0
  40488a:	460b      	mov	r3, r1
  40488c:	4630      	mov	r0, r6
  40488e:	4639      	mov	r1, r7
  404890:	f000 fe54 	bl	40553c <__aeabi_dsub>
  404894:	4602      	mov	r2, r0
  404896:	460b      	mov	r3, r1
  404898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40489c:	f000 fe4e 	bl	40553c <__aeabi_dsub>
  4048a0:	b005      	add	sp, #20
  4048a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048a6:	4b16      	ldr	r3, [pc, #88]	; (404900 <__kernel_cos+0x240>)
  4048a8:	4f16      	ldr	r7, [pc, #88]	; (404904 <__kernel_cos+0x244>)
  4048aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4048ae:	2600      	movs	r6, #0
  4048b0:	e7ca      	b.n	404848 <__kernel_cos+0x188>
  4048b2:	4910      	ldr	r1, [pc, #64]	; (4048f4 <__kernel_cos+0x234>)
  4048b4:	2000      	movs	r0, #0
  4048b6:	b005      	add	sp, #20
  4048b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048bc:	f3af 8000 	nop.w
  4048c0:	be8838d4 	.word	0xbe8838d4
  4048c4:	bda8fae9 	.word	0xbda8fae9
  4048c8:	bdb4b1c4 	.word	0xbdb4b1c4
  4048cc:	3e21ee9e 	.word	0x3e21ee9e
  4048d0:	809c52ad 	.word	0x809c52ad
  4048d4:	3e927e4f 	.word	0x3e927e4f
  4048d8:	19cb1590 	.word	0x19cb1590
  4048dc:	3efa01a0 	.word	0x3efa01a0
  4048e0:	16c15177 	.word	0x16c15177
  4048e4:	3f56c16c 	.word	0x3f56c16c
  4048e8:	5555554c 	.word	0x5555554c
  4048ec:	3fa55555 	.word	0x3fa55555
  4048f0:	3fe00000 	.word	0x3fe00000
  4048f4:	3ff00000 	.word	0x3ff00000
  4048f8:	3fd33332 	.word	0x3fd33332
  4048fc:	3fe90000 	.word	0x3fe90000
  404900:	3fe70000 	.word	0x3fe70000
  404904:	3fd20000 	.word	0x3fd20000

00404908 <__kernel_rem_pio2>:
  404908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40490c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
  404910:	4c9c      	ldr	r4, [pc, #624]	; (404b84 <__kernel_rem_pio2+0x27c>)
  404912:	9ea2      	ldr	r6, [sp, #648]	; 0x288
  404914:	4d9c      	ldr	r5, [pc, #624]	; (404b88 <__kernel_rem_pio2+0x280>)
  404916:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  40491a:	9405      	str	r4, [sp, #20]
  40491c:	4626      	mov	r6, r4
  40491e:	1ed4      	subs	r4, r2, #3
  404920:	fb85 7504 	smull	r7, r5, r5, r4
  404924:	17e4      	asrs	r4, r4, #31
  404926:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  40492a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40492e:	461d      	mov	r5, r3
  404930:	9308      	str	r3, [sp, #32]
  404932:	1c63      	adds	r3, r4, #1
  404934:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  404938:	3d01      	subs	r5, #1
  40493a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40493e:	9304      	str	r3, [sp, #16]
  404940:	462b      	mov	r3, r5
  404942:	9409      	str	r4, [sp, #36]	; 0x24
  404944:	9502      	str	r5, [sp, #8]
  404946:	1b65      	subs	r5, r4, r5
  404948:	18f4      	adds	r4, r6, r3
  40494a:	9003      	str	r0, [sp, #12]
  40494c:	9106      	str	r1, [sp, #24]
  40494e:	d41a      	bmi.n	404986 <__kernel_rem_pio2+0x7e>
  404950:	442c      	add	r4, r5
  404952:	3401      	adds	r4, #1
  404954:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  404958:	2600      	movs	r6, #0
  40495a:	2700      	movs	r7, #0
  40495c:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
  404960:	e008      	b.n	404974 <__kernel_rem_pio2+0x6c>
  404962:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  404966:	f000 ff37 	bl	4057d8 <__aeabi_i2d>
  40496a:	3501      	adds	r5, #1
  40496c:	42a5      	cmp	r5, r4
  40496e:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  404972:	d008      	beq.n	404986 <__kernel_rem_pio2+0x7e>
  404974:	2d00      	cmp	r5, #0
  404976:	daf4      	bge.n	404962 <__kernel_rem_pio2+0x5a>
  404978:	3501      	adds	r5, #1
  40497a:	4630      	mov	r0, r6
  40497c:	4639      	mov	r1, r7
  40497e:	42a5      	cmp	r5, r4
  404980:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  404984:	d1f6      	bne.n	404974 <__kernel_rem_pio2+0x6c>
  404986:	9b05      	ldr	r3, [sp, #20]
  404988:	2b00      	cmp	r3, #0
  40498a:	db2e      	blt.n	4049ea <__kernel_rem_pio2+0xe2>
  40498c:	9b08      	ldr	r3, [sp, #32]
  40498e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  404992:	9b03      	ldr	r3, [sp, #12]
  404994:	f1a9 0808 	sub.w	r8, r9, #8
  404998:	4498      	add	r8, r3
  40499a:	ab20      	add	r3, sp, #128	; 0x80
  40499c:	4499      	add	r9, r3
  40499e:	9b05      	ldr	r3, [sp, #20]
  4049a0:	aa70      	add	r2, sp, #448	; 0x1c0
  4049a2:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
  4049a6:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  4049aa:	9b02      	ldr	r3, [sp, #8]
  4049ac:	2b00      	cmp	r3, #0
  4049ae:	f2c0 830f 	blt.w	404fd0 <__kernel_rem_pio2+0x6c8>
  4049b2:	9b03      	ldr	r3, [sp, #12]
  4049b4:	464d      	mov	r5, r9
  4049b6:	f1a3 0408 	sub.w	r4, r3, #8
  4049ba:	2600      	movs	r6, #0
  4049bc:	2700      	movs	r7, #0
  4049be:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4049c2:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  4049c6:	f000 ff6d 	bl	4058a4 <__aeabi_dmul>
  4049ca:	4602      	mov	r2, r0
  4049cc:	460b      	mov	r3, r1
  4049ce:	4630      	mov	r0, r6
  4049d0:	4639      	mov	r1, r7
  4049d2:	f000 fdb5 	bl	405540 <__adddf3>
  4049d6:	4544      	cmp	r4, r8
  4049d8:	4606      	mov	r6, r0
  4049da:	460f      	mov	r7, r1
  4049dc:	d1ef      	bne.n	4049be <__kernel_rem_pio2+0xb6>
  4049de:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  4049e2:	45da      	cmp	sl, fp
  4049e4:	f109 0908 	add.w	r9, r9, #8
  4049e8:	d1df      	bne.n	4049aa <__kernel_rem_pio2+0xa2>
  4049ea:	9805      	ldr	r0, [sp, #20]
  4049ec:	9a08      	ldr	r2, [sp, #32]
  4049ee:	9000      	str	r0, [sp, #0]
  4049f0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  4049f4:	3b01      	subs	r3, #1
  4049f6:	009b      	lsls	r3, r3, #2
  4049f8:	ac0c      	add	r4, sp, #48	; 0x30
  4049fa:	1f19      	subs	r1, r3, #4
  4049fc:	4423      	add	r3, r4
  4049fe:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  404a02:	930b      	str	r3, [sp, #44]	; 0x2c
  404a04:	9b03      	ldr	r3, [sp, #12]
  404a06:	3a01      	subs	r2, #1
  404a08:	4421      	add	r1, r4
  404a0a:	910a      	str	r1, [sp, #40]	; 0x28
  404a0c:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
  404a10:	9a00      	ldr	r2, [sp, #0]
  404a12:	a998      	add	r1, sp, #608	; 0x260
  404a14:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  404a18:	2a00      	cmp	r2, #0
  404a1a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  404a1e:	4613      	mov	r3, r2
  404a20:	dd2b      	ble.n	404a7a <__kernel_rem_pio2+0x172>
  404a22:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  404a26:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
  404a2a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  404a2e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  404a32:	2200      	movs	r2, #0
  404a34:	4b55      	ldr	r3, [pc, #340]	; (404b8c <__kernel_rem_pio2+0x284>)
  404a36:	4620      	mov	r0, r4
  404a38:	4629      	mov	r1, r5
  404a3a:	f000 ff33 	bl	4058a4 <__aeabi_dmul>
  404a3e:	f001 f9cb 	bl	405dd8 <__aeabi_d2iz>
  404a42:	f000 fec9 	bl	4057d8 <__aeabi_i2d>
  404a46:	2200      	movs	r2, #0
  404a48:	4b51      	ldr	r3, [pc, #324]	; (404b90 <__kernel_rem_pio2+0x288>)
  404a4a:	4606      	mov	r6, r0
  404a4c:	460f      	mov	r7, r1
  404a4e:	f000 ff29 	bl	4058a4 <__aeabi_dmul>
  404a52:	4602      	mov	r2, r0
  404a54:	460b      	mov	r3, r1
  404a56:	4620      	mov	r0, r4
  404a58:	4629      	mov	r1, r5
  404a5a:	f000 fd6f 	bl	40553c <__aeabi_dsub>
  404a5e:	f001 f9bb 	bl	405dd8 <__aeabi_d2iz>
  404a62:	e878 2302 	ldrd	r2, r3, [r8], #-8
  404a66:	f849 0f04 	str.w	r0, [r9, #4]!
  404a6a:	4639      	mov	r1, r7
  404a6c:	4630      	mov	r0, r6
  404a6e:	f000 fd67 	bl	405540 <__adddf3>
  404a72:	45d0      	cmp	r8, sl
  404a74:	4604      	mov	r4, r0
  404a76:	460d      	mov	r5, r1
  404a78:	d1db      	bne.n	404a32 <__kernel_rem_pio2+0x12a>
  404a7a:	f8dd 9010 	ldr.w	r9, [sp, #16]
  404a7e:	4620      	mov	r0, r4
  404a80:	4629      	mov	r1, r5
  404a82:	464a      	mov	r2, r9
  404a84:	f000 fcd0 	bl	405428 <scalbn>
  404a88:	2200      	movs	r2, #0
  404a8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  404a8e:	4604      	mov	r4, r0
  404a90:	460d      	mov	r5, r1
  404a92:	f000 ff07 	bl	4058a4 <__aeabi_dmul>
  404a96:	f000 fc3b 	bl	405310 <floor>
  404a9a:	2200      	movs	r2, #0
  404a9c:	4b3d      	ldr	r3, [pc, #244]	; (404b94 <__kernel_rem_pio2+0x28c>)
  404a9e:	f000 ff01 	bl	4058a4 <__aeabi_dmul>
  404aa2:	4602      	mov	r2, r0
  404aa4:	460b      	mov	r3, r1
  404aa6:	4620      	mov	r0, r4
  404aa8:	4629      	mov	r1, r5
  404aaa:	f000 fd47 	bl	40553c <__aeabi_dsub>
  404aae:	460d      	mov	r5, r1
  404ab0:	4604      	mov	r4, r0
  404ab2:	f001 f991 	bl	405dd8 <__aeabi_d2iz>
  404ab6:	4680      	mov	r8, r0
  404ab8:	f000 fe8e 	bl	4057d8 <__aeabi_i2d>
  404abc:	460b      	mov	r3, r1
  404abe:	4602      	mov	r2, r0
  404ac0:	4629      	mov	r1, r5
  404ac2:	4620      	mov	r0, r4
  404ac4:	f000 fd3a 	bl	40553c <__aeabi_dsub>
  404ac8:	464b      	mov	r3, r9
  404aca:	2b00      	cmp	r3, #0
  404acc:	4606      	mov	r6, r0
  404ace:	460f      	mov	r7, r1
  404ad0:	f340 80f7 	ble.w	404cc2 <__kernel_rem_pio2+0x3ba>
  404ad4:	9a00      	ldr	r2, [sp, #0]
  404ad6:	a90c      	add	r1, sp, #48	; 0x30
  404ad8:	3a01      	subs	r2, #1
  404ada:	f1c9 0318 	rsb	r3, r9, #24
  404ade:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
  404ae2:	fa45 f103 	asr.w	r1, r5, r3
  404ae6:	fa01 f303 	lsl.w	r3, r1, r3
  404aea:	a80c      	add	r0, sp, #48	; 0x30
  404aec:	1aeb      	subs	r3, r5, r3
  404aee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  404af2:	f1c9 0517 	rsb	r5, r9, #23
  404af6:	4488      	add	r8, r1
  404af8:	fa43 f505 	asr.w	r5, r3, r5
  404afc:	2d00      	cmp	r5, #0
  404afe:	dd63      	ble.n	404bc8 <__kernel_rem_pio2+0x2c0>
  404b00:	9b00      	ldr	r3, [sp, #0]
  404b02:	2b00      	cmp	r3, #0
  404b04:	f108 0801 	add.w	r8, r8, #1
  404b08:	f340 8281 	ble.w	40500e <__kernel_rem_pio2+0x706>
  404b0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404b0e:	2c00      	cmp	r4, #0
  404b10:	f000 8318 	beq.w	405144 <__kernel_rem_pio2+0x83c>
  404b14:	2001      	movs	r0, #1
  404b16:	2300      	movs	r3, #0
  404b18:	aa0c      	add	r2, sp, #48	; 0x30
  404b1a:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
  404b1e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  404b22:	9a00      	ldr	r2, [sp, #0]
  404b24:	4282      	cmp	r2, r0
  404b26:	dd19      	ble.n	404b5c <__kernel_rem_pio2+0x254>
  404b28:	aa0c      	add	r2, sp, #48	; 0x30
  404b2a:	ac0c      	add	r4, sp, #48	; 0x30
  404b2c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  404b30:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  404b34:	1a51      	subs	r1, r2, r1
  404b36:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
  404b3a:	9900      	ldr	r1, [sp, #0]
  404b3c:	3302      	adds	r3, #2
  404b3e:	4299      	cmp	r1, r3
  404b40:	dd0c      	ble.n	404b5c <__kernel_rem_pio2+0x254>
  404b42:	4610      	mov	r0, r2
  404b44:	9a00      	ldr	r2, [sp, #0]
  404b46:	a90c      	add	r1, sp, #48	; 0x30
  404b48:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  404b4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  404b50:	681a      	ldr	r2, [r3, #0]
  404b52:	1a82      	subs	r2, r0, r2
  404b54:	f843 2b04 	str.w	r2, [r3], #4
  404b58:	428b      	cmp	r3, r1
  404b5a:	d1f9      	bne.n	404b50 <__kernel_rem_pio2+0x248>
  404b5c:	9b04      	ldr	r3, [sp, #16]
  404b5e:	2b00      	cmp	r3, #0
  404b60:	dd1a      	ble.n	404b98 <__kernel_rem_pio2+0x290>
  404b62:	9b04      	ldr	r3, [sp, #16]
  404b64:	2b01      	cmp	r3, #1
  404b66:	f04f 0401 	mov.w	r4, #1
  404b6a:	f040 8258 	bne.w	40501e <__kernel_rem_pio2+0x716>
  404b6e:	9b00      	ldr	r3, [sp, #0]
  404b70:	1e5a      	subs	r2, r3, #1
  404b72:	ab0c      	add	r3, sp, #48	; 0x30
  404b74:	a90c      	add	r1, sp, #48	; 0x30
  404b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404b7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  404b7e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  404b82:	e258      	b.n	405036 <__kernel_rem_pio2+0x72e>
  404b84:	004078a0 	.word	0x004078a0
  404b88:	2aaaaaab 	.word	0x2aaaaaab
  404b8c:	3e700000 	.word	0x3e700000
  404b90:	41700000 	.word	0x41700000
  404b94:	40200000 	.word	0x40200000
  404b98:	2d02      	cmp	r5, #2
  404b9a:	d115      	bne.n	404bc8 <__kernel_rem_pio2+0x2c0>
  404b9c:	4632      	mov	r2, r6
  404b9e:	463b      	mov	r3, r7
  404ba0:	2000      	movs	r0, #0
  404ba2:	4997      	ldr	r1, [pc, #604]	; (404e00 <__kernel_rem_pio2+0x4f8>)
  404ba4:	f000 fcca 	bl	40553c <__aeabi_dsub>
  404ba8:	4606      	mov	r6, r0
  404baa:	460f      	mov	r7, r1
  404bac:	9a04      	ldr	r2, [sp, #16]
  404bae:	4994      	ldr	r1, [pc, #592]	; (404e00 <__kernel_rem_pio2+0x4f8>)
  404bb0:	2000      	movs	r0, #0
  404bb2:	f000 fc39 	bl	405428 <scalbn>
  404bb6:	4602      	mov	r2, r0
  404bb8:	460b      	mov	r3, r1
  404bba:	4630      	mov	r0, r6
  404bbc:	4639      	mov	r1, r7
  404bbe:	f000 fcbd 	bl	40553c <__aeabi_dsub>
  404bc2:	2502      	movs	r5, #2
  404bc4:	4606      	mov	r6, r0
  404bc6:	460f      	mov	r7, r1
  404bc8:	2200      	movs	r2, #0
  404bca:	2300      	movs	r3, #0
  404bcc:	4630      	mov	r0, r6
  404bce:	4639      	mov	r1, r7
  404bd0:	f001 f8d0 	bl	405d74 <__aeabi_dcmpeq>
  404bd4:	2800      	cmp	r0, #0
  404bd6:	f000 8252 	beq.w	40507e <__kernel_rem_pio2+0x776>
  404bda:	9a00      	ldr	r2, [sp, #0]
  404bdc:	9b05      	ldr	r3, [sp, #20]
  404bde:	1e50      	subs	r0, r2, #1
  404be0:	4283      	cmp	r3, r0
  404be2:	dc0f      	bgt.n	404c04 <__kernel_rem_pio2+0x2fc>
  404be4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
  404be8:	3b01      	subs	r3, #1
  404bea:	aa0c      	add	r2, sp, #48	; 0x30
  404bec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404bee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  404bf2:	2200      	movs	r2, #0
  404bf4:	f853 1904 	ldr.w	r1, [r3], #-4
  404bf8:	42a3      	cmp	r3, r4
  404bfa:	ea42 0201 	orr.w	r2, r2, r1
  404bfe:	d1f9      	bne.n	404bf4 <__kernel_rem_pio2+0x2ec>
  404c00:	2a00      	cmp	r2, #0
  404c02:	d16f      	bne.n	404ce4 <__kernel_rem_pio2+0x3dc>
  404c04:	9b05      	ldr	r3, [sp, #20]
  404c06:	aa0c      	add	r2, sp, #48	; 0x30
  404c08:	3b01      	subs	r3, #1
  404c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404c0e:	2b00      	cmp	r3, #0
  404c10:	f040 8233 	bne.w	40507a <__kernel_rem_pio2+0x772>
  404c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404c16:	2301      	movs	r3, #1
  404c18:	f852 1904 	ldr.w	r1, [r2], #-4
  404c1c:	3301      	adds	r3, #1
  404c1e:	2900      	cmp	r1, #0
  404c20:	d0fa      	beq.n	404c18 <__kernel_rem_pio2+0x310>
  404c22:	9a00      	ldr	r2, [sp, #0]
  404c24:	18d3      	adds	r3, r2, r3
  404c26:	f102 0a01 	add.w	sl, r2, #1
  404c2a:	459a      	cmp	sl, r3
  404c2c:	9307      	str	r3, [sp, #28]
  404c2e:	dc3d      	bgt.n	404cac <__kernel_rem_pio2+0x3a4>
  404c30:	9b00      	ldr	r3, [sp, #0]
  404c32:	9908      	ldr	r1, [sp, #32]
  404c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404c36:	440b      	add	r3, r1
  404c38:	9907      	ldr	r1, [sp, #28]
  404c3a:	eb0a 0802 	add.w	r8, sl, r2
  404c3e:	4699      	mov	r9, r3
  404c40:	ab20      	add	r3, sp, #128	; 0x80
  404c42:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  404c46:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
  404c4a:	188b      	adds	r3, r1, r2
  404c4c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  404c4e:	f108 38ff 	add.w	r8, r8, #4294967295
  404c52:	eb02 0888 	add.w	r8, r2, r8, lsl #2
  404c56:	aa70      	add	r2, sp, #448	; 0x1c0
  404c58:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
  404c5c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  404c5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  404c62:	9300      	str	r3, [sp, #0]
  404c64:	f858 0f04 	ldr.w	r0, [r8, #4]!
  404c68:	f000 fdb6 	bl	4057d8 <__aeabi_i2d>
  404c6c:	9b02      	ldr	r3, [sp, #8]
  404c6e:	2b00      	cmp	r3, #0
  404c70:	e8e9 0102 	strd	r0, r1, [r9], #8
  404c74:	db1d      	blt.n	404cb2 <__kernel_rem_pio2+0x3aa>
  404c76:	9b03      	ldr	r3, [sp, #12]
  404c78:	464d      	mov	r5, r9
  404c7a:	f1a3 0408 	sub.w	r4, r3, #8
  404c7e:	2600      	movs	r6, #0
  404c80:	2700      	movs	r7, #0
  404c82:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  404c86:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  404c8a:	f000 fe0b 	bl	4058a4 <__aeabi_dmul>
  404c8e:	4602      	mov	r2, r0
  404c90:	460b      	mov	r3, r1
  404c92:	4630      	mov	r0, r6
  404c94:	4639      	mov	r1, r7
  404c96:	f000 fc53 	bl	405540 <__adddf3>
  404c9a:	455c      	cmp	r4, fp
  404c9c:	4606      	mov	r6, r0
  404c9e:	460f      	mov	r7, r1
  404ca0:	d1ef      	bne.n	404c82 <__kernel_rem_pio2+0x37a>
  404ca2:	9b00      	ldr	r3, [sp, #0]
  404ca4:	4598      	cmp	r8, r3
  404ca6:	e8ea 6702 	strd	r6, r7, [sl], #8
  404caa:	d1db      	bne.n	404c64 <__kernel_rem_pio2+0x35c>
  404cac:	9b07      	ldr	r3, [sp, #28]
  404cae:	9300      	str	r3, [sp, #0]
  404cb0:	e6ae      	b.n	404a10 <__kernel_rem_pio2+0x108>
  404cb2:	9b00      	ldr	r3, [sp, #0]
  404cb4:	2600      	movs	r6, #0
  404cb6:	2700      	movs	r7, #0
  404cb8:	4598      	cmp	r8, r3
  404cba:	e8ea 6702 	strd	r6, r7, [sl], #8
  404cbe:	d1d1      	bne.n	404c64 <__kernel_rem_pio2+0x35c>
  404cc0:	e7f4      	b.n	404cac <__kernel_rem_pio2+0x3a4>
  404cc2:	d106      	bne.n	404cd2 <__kernel_rem_pio2+0x3ca>
  404cc4:	9b00      	ldr	r3, [sp, #0]
  404cc6:	aa0c      	add	r2, sp, #48	; 0x30
  404cc8:	3b01      	subs	r3, #1
  404cca:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  404cce:	15ed      	asrs	r5, r5, #23
  404cd0:	e714      	b.n	404afc <__kernel_rem_pio2+0x1f4>
  404cd2:	2200      	movs	r2, #0
  404cd4:	4b4b      	ldr	r3, [pc, #300]	; (404e04 <__kernel_rem_pio2+0x4fc>)
  404cd6:	f001 f86b 	bl	405db0 <__aeabi_dcmpge>
  404cda:	2800      	cmp	r0, #0
  404cdc:	f040 8182 	bne.w	404fe4 <__kernel_rem_pio2+0x6dc>
  404ce0:	4605      	mov	r5, r0
  404ce2:	e771      	b.n	404bc8 <__kernel_rem_pio2+0x2c0>
  404ce4:	a90c      	add	r1, sp, #48	; 0x30
  404ce6:	9502      	str	r5, [sp, #8]
  404ce8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  404cec:	9904      	ldr	r1, [sp, #16]
  404cee:	f8cd 801c 	str.w	r8, [sp, #28]
  404cf2:	3918      	subs	r1, #24
  404cf4:	4602      	mov	r2, r0
  404cf6:	9000      	str	r0, [sp, #0]
  404cf8:	9104      	str	r1, [sp, #16]
  404cfa:	b96b      	cbnz	r3, 404d18 <__kernel_rem_pio2+0x410>
  404cfc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  404d00:	3b01      	subs	r3, #1
  404d02:	a80c      	add	r0, sp, #48	; 0x30
  404d04:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  404d08:	f853 0904 	ldr.w	r0, [r3], #-4
  404d0c:	3a01      	subs	r2, #1
  404d0e:	3918      	subs	r1, #24
  404d10:	2800      	cmp	r0, #0
  404d12:	d0f9      	beq.n	404d08 <__kernel_rem_pio2+0x400>
  404d14:	9200      	str	r2, [sp, #0]
  404d16:	9104      	str	r1, [sp, #16]
  404d18:	9a04      	ldr	r2, [sp, #16]
  404d1a:	4939      	ldr	r1, [pc, #228]	; (404e00 <__kernel_rem_pio2+0x4f8>)
  404d1c:	2000      	movs	r0, #0
  404d1e:	f000 fb83 	bl	405428 <scalbn>
  404d22:	9b00      	ldr	r3, [sp, #0]
  404d24:	2b00      	cmp	r3, #0
  404d26:	4604      	mov	r4, r0
  404d28:	460d      	mov	r5, r1
  404d2a:	f2c0 8203 	blt.w	405134 <__kernel_rem_pio2+0x82c>
  404d2e:	00da      	lsls	r2, r3, #3
  404d30:	a970      	add	r1, sp, #448	; 0x1c0
  404d32:	eb01 0b02 	add.w	fp, r1, r2
  404d36:	9204      	str	r2, [sp, #16]
  404d38:	aa0c      	add	r2, sp, #48	; 0x30
  404d3a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  404d3e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 404e08 <__kernel_rem_pio2+0x500>
  404d42:	f10b 0708 	add.w	r7, fp, #8
  404d46:	3604      	adds	r6, #4
  404d48:	f04f 0800 	mov.w	r8, #0
  404d4c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  404d50:	f000 fd42 	bl	4057d8 <__aeabi_i2d>
  404d54:	4622      	mov	r2, r4
  404d56:	462b      	mov	r3, r5
  404d58:	f000 fda4 	bl	4058a4 <__aeabi_dmul>
  404d5c:	464b      	mov	r3, r9
  404d5e:	e967 0102 	strd	r0, r1, [r7, #-8]!
  404d62:	4642      	mov	r2, r8
  404d64:	4620      	mov	r0, r4
  404d66:	4629      	mov	r1, r5
  404d68:	f000 fd9c 	bl	4058a4 <__aeabi_dmul>
  404d6c:	ab0c      	add	r3, sp, #48	; 0x30
  404d6e:	429e      	cmp	r6, r3
  404d70:	4604      	mov	r4, r0
  404d72:	460d      	mov	r5, r1
  404d74:	d1ea      	bne.n	404d4c <__kernel_rem_pio2+0x444>
  404d76:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  404d7a:	f8cd a00c 	str.w	sl, [sp, #12]
  404d7e:	f8dd a014 	ldr.w	sl, [sp, #20]
  404d82:	f04f 0900 	mov.w	r9, #0
  404d86:	f1ba 0f00 	cmp.w	sl, #0
  404d8a:	f2c0 813d 	blt.w	405008 <__kernel_rem_pio2+0x700>
  404d8e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 404e0c <__kernel_rem_pio2+0x504>
  404d92:	465d      	mov	r5, fp
  404d94:	a118      	add	r1, pc, #96	; (adr r1, 404df8 <__kernel_rem_pio2+0x4f0>)
  404d96:	e9d1 0100 	ldrd	r0, r1, [r1]
  404d9a:	2600      	movs	r6, #0
  404d9c:	2700      	movs	r7, #0
  404d9e:	2400      	movs	r4, #0
  404da0:	e003      	b.n	404daa <__kernel_rem_pio2+0x4a2>
  404da2:	454c      	cmp	r4, r9
  404da4:	dc10      	bgt.n	404dc8 <__kernel_rem_pio2+0x4c0>
  404da6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
  404daa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  404dae:	f000 fd79 	bl	4058a4 <__aeabi_dmul>
  404db2:	4602      	mov	r2, r0
  404db4:	460b      	mov	r3, r1
  404db6:	4630      	mov	r0, r6
  404db8:	4639      	mov	r1, r7
  404dba:	f000 fbc1 	bl	405540 <__adddf3>
  404dbe:	3401      	adds	r4, #1
  404dc0:	45a2      	cmp	sl, r4
  404dc2:	4606      	mov	r6, r0
  404dc4:	460f      	mov	r7, r1
  404dc6:	daec      	bge.n	404da2 <__kernel_rem_pio2+0x49a>
  404dc8:	9b03      	ldr	r3, [sp, #12]
  404dca:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  404dce:	f1ab 0b08 	sub.w	fp, fp, #8
  404dd2:	e9c3 6700 	strd	r6, r7, [r3]
  404dd6:	ab6e      	add	r3, sp, #440	; 0x1b8
  404dd8:	455b      	cmp	r3, fp
  404dda:	f109 0901 	add.w	r9, r9, #1
  404dde:	d1d2      	bne.n	404d86 <__kernel_rem_pio2+0x47e>
  404de0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  404de2:	f8dd a00c 	ldr.w	sl, [sp, #12]
  404de6:	2b03      	cmp	r3, #3
  404de8:	f200 808b 	bhi.w	404f02 <__kernel_rem_pio2+0x5fa>
  404dec:	e8df f013 	tbh	[pc, r3, lsl #1]
  404df0:	009000d1 	.word	0x009000d1
  404df4:	00100090 	.word	0x00100090
  404df8:	40000000 	.word	0x40000000
  404dfc:	3ff921fb 	.word	0x3ff921fb
  404e00:	3ff00000 	.word	0x3ff00000
  404e04:	3fe00000 	.word	0x3fe00000
  404e08:	3e700000 	.word	0x3e700000
  404e0c:	00407868 	.word	0x00407868
  404e10:	9b00      	ldr	r3, [sp, #0]
  404e12:	2b00      	cmp	r3, #0
  404e14:	f340 81a4 	ble.w	405160 <__kernel_rem_pio2+0x858>
  404e18:	9b04      	ldr	r3, [sp, #16]
  404e1a:	eb0a 0803 	add.w	r8, sl, r3
  404e1e:	e9d8 6700 	ldrd	r6, r7, [r8]
  404e22:	46d3      	mov	fp, sl
  404e24:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  404e28:	4632      	mov	r2, r6
  404e2a:	463b      	mov	r3, r7
  404e2c:	4648      	mov	r0, r9
  404e2e:	4651      	mov	r1, sl
  404e30:	f000 fb86 	bl	405540 <__adddf3>
  404e34:	4604      	mov	r4, r0
  404e36:	460d      	mov	r5, r1
  404e38:	4602      	mov	r2, r0
  404e3a:	460b      	mov	r3, r1
  404e3c:	4648      	mov	r0, r9
  404e3e:	4651      	mov	r1, sl
  404e40:	f000 fb7c 	bl	40553c <__aeabi_dsub>
  404e44:	4632      	mov	r2, r6
  404e46:	463b      	mov	r3, r7
  404e48:	f000 fb7a 	bl	405540 <__adddf3>
  404e4c:	e9c8 0100 	strd	r0, r1, [r8]
  404e50:	e968 4502 	strd	r4, r5, [r8, #-8]!
  404e54:	45c3      	cmp	fp, r8
  404e56:	4626      	mov	r6, r4
  404e58:	462f      	mov	r7, r5
  404e5a:	d1e3      	bne.n	404e24 <__kernel_rem_pio2+0x51c>
  404e5c:	9b00      	ldr	r3, [sp, #0]
  404e5e:	2b01      	cmp	r3, #1
  404e60:	46da      	mov	sl, fp
  404e62:	f340 817d 	ble.w	405160 <__kernel_rem_pio2+0x858>
  404e66:	9b04      	ldr	r3, [sp, #16]
  404e68:	445b      	add	r3, fp
  404e6a:	e9d3 6700 	ldrd	r6, r7, [r3]
  404e6e:	4698      	mov	r8, r3
  404e70:	4699      	mov	r9, r3
  404e72:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
  404e76:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  404e7a:	4632      	mov	r2, r6
  404e7c:	4618      	mov	r0, r3
  404e7e:	4621      	mov	r1, r4
  404e80:	463b      	mov	r3, r7
  404e82:	e9cd 0100 	strd	r0, r1, [sp]
  404e86:	f000 fb5b 	bl	405540 <__adddf3>
  404e8a:	4604      	mov	r4, r0
  404e8c:	460d      	mov	r5, r1
  404e8e:	4602      	mov	r2, r0
  404e90:	460b      	mov	r3, r1
  404e92:	e9dd 0100 	ldrd	r0, r1, [sp]
  404e96:	f000 fb51 	bl	40553c <__aeabi_dsub>
  404e9a:	4632      	mov	r2, r6
  404e9c:	463b      	mov	r3, r7
  404e9e:	f000 fb4f 	bl	405540 <__adddf3>
  404ea2:	e9c9 0100 	strd	r0, r1, [r9]
  404ea6:	e969 4502 	strd	r4, r5, [r9, #-8]!
  404eaa:	45cb      	cmp	fp, r9
  404eac:	4626      	mov	r6, r4
  404eae:	462f      	mov	r7, r5
  404eb0:	d1e1      	bne.n	404e76 <__kernel_rem_pio2+0x56e>
  404eb2:	2300      	movs	r3, #0
  404eb4:	f108 0808 	add.w	r8, r8, #8
  404eb8:	461d      	mov	r5, r3
  404eba:	ac4c      	add	r4, sp, #304	; 0x130
  404ebc:	4618      	mov	r0, r3
  404ebe:	4629      	mov	r1, r5
  404ec0:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  404ec4:	f000 fb3c 	bl	405540 <__adddf3>
  404ec8:	4544      	cmp	r4, r8
  404eca:	4603      	mov	r3, r0
  404ecc:	460d      	mov	r5, r1
  404ece:	d1f5      	bne.n	404ebc <__kernel_rem_pio2+0x5b4>
  404ed0:	9a02      	ldr	r2, [sp, #8]
  404ed2:	2a00      	cmp	r2, #0
  404ed4:	f000 8120 	beq.w	405118 <__kernel_rem_pio2+0x810>
  404ed8:	f8da 4004 	ldr.w	r4, [sl, #4]
  404edc:	f8da 200c 	ldr.w	r2, [sl, #12]
  404ee0:	9f06      	ldr	r7, [sp, #24]
  404ee2:	f8da 1000 	ldr.w	r1, [sl]
  404ee6:	f8da 0008 	ldr.w	r0, [sl, #8]
  404eea:	613b      	str	r3, [r7, #16]
  404eec:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  404ef0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  404ef4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404ef8:	617d      	str	r5, [r7, #20]
  404efa:	607c      	str	r4, [r7, #4]
  404efc:	60fa      	str	r2, [r7, #12]
  404efe:	6039      	str	r1, [r7, #0]
  404f00:	60b8      	str	r0, [r7, #8]
  404f02:	9b07      	ldr	r3, [sp, #28]
  404f04:	f003 0007 	and.w	r0, r3, #7
  404f08:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  404f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f10:	9c04      	ldr	r4, [sp, #16]
  404f12:	2600      	movs	r6, #0
  404f14:	3408      	adds	r4, #8
  404f16:	4454      	add	r4, sl
  404f18:	4633      	mov	r3, r6
  404f1a:	4630      	mov	r0, r6
  404f1c:	4619      	mov	r1, r3
  404f1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  404f22:	f000 fb0d 	bl	405540 <__adddf3>
  404f26:	4554      	cmp	r4, sl
  404f28:	4606      	mov	r6, r0
  404f2a:	460b      	mov	r3, r1
  404f2c:	d1f5      	bne.n	404f1a <__kernel_rem_pio2+0x612>
  404f2e:	9a02      	ldr	r2, [sp, #8]
  404f30:	4630      	mov	r0, r6
  404f32:	4619      	mov	r1, r3
  404f34:	2a00      	cmp	r2, #0
  404f36:	f000 80da 	beq.w	4050ee <__kernel_rem_pio2+0x7e6>
  404f3a:	9806      	ldr	r0, [sp, #24]
  404f3c:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  404f40:	4632      	mov	r2, r6
  404f42:	6044      	str	r4, [r0, #4]
  404f44:	6006      	str	r6, [r0, #0]
  404f46:	e9da 0100 	ldrd	r0, r1, [sl]
  404f4a:	f000 faf7 	bl	40553c <__aeabi_dsub>
  404f4e:	460b      	mov	r3, r1
  404f50:	9900      	ldr	r1, [sp, #0]
  404f52:	2900      	cmp	r1, #0
  404f54:	4602      	mov	r2, r0
  404f56:	dd0e      	ble.n	404f76 <__kernel_rem_pio2+0x66e>
  404f58:	2401      	movs	r4, #1
  404f5a:	4610      	mov	r0, r2
  404f5c:	4619      	mov	r1, r3
  404f5e:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  404f62:	f000 faed 	bl	405540 <__adddf3>
  404f66:	460b      	mov	r3, r1
  404f68:	9900      	ldr	r1, [sp, #0]
  404f6a:	3401      	adds	r4, #1
  404f6c:	42a1      	cmp	r1, r4
  404f6e:	4602      	mov	r2, r0
  404f70:	daf3      	bge.n	404f5a <__kernel_rem_pio2+0x652>
  404f72:	9902      	ldr	r1, [sp, #8]
  404f74:	b109      	cbz	r1, 404f7a <__kernel_rem_pio2+0x672>
  404f76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404f7a:	4619      	mov	r1, r3
  404f7c:	9b06      	ldr	r3, [sp, #24]
  404f7e:	4610      	mov	r0, r2
  404f80:	e9c3 0102 	strd	r0, r1, [r3, #8]
  404f84:	9b07      	ldr	r3, [sp, #28]
  404f86:	f003 0007 	and.w	r0, r3, #7
  404f8a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  404f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f92:	9c04      	ldr	r4, [sp, #16]
  404f94:	2200      	movs	r2, #0
  404f96:	3408      	adds	r4, #8
  404f98:	4454      	add	r4, sl
  404f9a:	4613      	mov	r3, r2
  404f9c:	4610      	mov	r0, r2
  404f9e:	4619      	mov	r1, r3
  404fa0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  404fa4:	f000 facc 	bl	405540 <__adddf3>
  404fa8:	45a2      	cmp	sl, r4
  404faa:	4602      	mov	r2, r0
  404fac:	460b      	mov	r3, r1
  404fae:	d1f5      	bne.n	404f9c <__kernel_rem_pio2+0x694>
  404fb0:	9902      	ldr	r1, [sp, #8]
  404fb2:	b109      	cbz	r1, 404fb8 <__kernel_rem_pio2+0x6b0>
  404fb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404fb8:	4619      	mov	r1, r3
  404fba:	9b06      	ldr	r3, [sp, #24]
  404fbc:	4610      	mov	r0, r2
  404fbe:	e9c3 0100 	strd	r0, r1, [r3]
  404fc2:	9b07      	ldr	r3, [sp, #28]
  404fc4:	f003 0007 	and.w	r0, r3, #7
  404fc8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  404fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404fd0:	2600      	movs	r6, #0
  404fd2:	2700      	movs	r7, #0
  404fd4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  404fd8:	45da      	cmp	sl, fp
  404fda:	f109 0908 	add.w	r9, r9, #8
  404fde:	f47f ace4 	bne.w	4049aa <__kernel_rem_pio2+0xa2>
  404fe2:	e502      	b.n	4049ea <__kernel_rem_pio2+0xe2>
  404fe4:	9b00      	ldr	r3, [sp, #0]
  404fe6:	2b00      	cmp	r3, #0
  404fe8:	f108 0801 	add.w	r8, r8, #1
  404fec:	bfc8      	it	gt
  404fee:	2502      	movgt	r5, #2
  404ff0:	f73f ad8c 	bgt.w	404b0c <__kernel_rem_pio2+0x204>
  404ff4:	4632      	mov	r2, r6
  404ff6:	463b      	mov	r3, r7
  404ff8:	2000      	movs	r0, #0
  404ffa:	4963      	ldr	r1, [pc, #396]	; (405188 <__kernel_rem_pio2+0x880>)
  404ffc:	f000 fa9e 	bl	40553c <__aeabi_dsub>
  405000:	2502      	movs	r5, #2
  405002:	4606      	mov	r6, r0
  405004:	460f      	mov	r7, r1
  405006:	e5df      	b.n	404bc8 <__kernel_rem_pio2+0x2c0>
  405008:	2600      	movs	r6, #0
  40500a:	2700      	movs	r7, #0
  40500c:	e6dc      	b.n	404dc8 <__kernel_rem_pio2+0x4c0>
  40500e:	9b04      	ldr	r3, [sp, #16]
  405010:	2b00      	cmp	r3, #0
  405012:	dd26      	ble.n	405062 <__kernel_rem_pio2+0x75a>
  405014:	2400      	movs	r4, #0
  405016:	9b04      	ldr	r3, [sp, #16]
  405018:	2b01      	cmp	r3, #1
  40501a:	f43f ada8 	beq.w	404b6e <__kernel_rem_pio2+0x266>
  40501e:	2b02      	cmp	r3, #2
  405020:	d109      	bne.n	405036 <__kernel_rem_pio2+0x72e>
  405022:	9b00      	ldr	r3, [sp, #0]
  405024:	1e5a      	subs	r2, r3, #1
  405026:	ab0c      	add	r3, sp, #48	; 0x30
  405028:	a90c      	add	r1, sp, #48	; 0x30
  40502a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40502e:	f3c3 0315 	ubfx	r3, r3, #0, #22
  405032:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  405036:	2d02      	cmp	r5, #2
  405038:	f47f adc6 	bne.w	404bc8 <__kernel_rem_pio2+0x2c0>
  40503c:	4632      	mov	r2, r6
  40503e:	463b      	mov	r3, r7
  405040:	2000      	movs	r0, #0
  405042:	4951      	ldr	r1, [pc, #324]	; (405188 <__kernel_rem_pio2+0x880>)
  405044:	f000 fa7a 	bl	40553c <__aeabi_dsub>
  405048:	4606      	mov	r6, r0
  40504a:	460f      	mov	r7, r1
  40504c:	2c00      	cmp	r4, #0
  40504e:	f43f adbb 	beq.w	404bc8 <__kernel_rem_pio2+0x2c0>
  405052:	e5ab      	b.n	404bac <__kernel_rem_pio2+0x2a4>
  405054:	9900      	ldr	r1, [sp, #0]
  405056:	3301      	adds	r3, #1
  405058:	4299      	cmp	r1, r3
  40505a:	d178      	bne.n	40514e <__kernel_rem_pio2+0x846>
  40505c:	9b04      	ldr	r3, [sp, #16]
  40505e:	2b00      	cmp	r3, #0
  405060:	dcd9      	bgt.n	405016 <__kernel_rem_pio2+0x70e>
  405062:	2d02      	cmp	r5, #2
  405064:	f47f adb0 	bne.w	404bc8 <__kernel_rem_pio2+0x2c0>
  405068:	4632      	mov	r2, r6
  40506a:	463b      	mov	r3, r7
  40506c:	2000      	movs	r0, #0
  40506e:	4946      	ldr	r1, [pc, #280]	; (405188 <__kernel_rem_pio2+0x880>)
  405070:	f000 fa64 	bl	40553c <__aeabi_dsub>
  405074:	4606      	mov	r6, r0
  405076:	460f      	mov	r7, r1
  405078:	e5a6      	b.n	404bc8 <__kernel_rem_pio2+0x2c0>
  40507a:	2301      	movs	r3, #1
  40507c:	e5d1      	b.n	404c22 <__kernel_rem_pio2+0x31a>
  40507e:	4639      	mov	r1, r7
  405080:	9f04      	ldr	r7, [sp, #16]
  405082:	9502      	str	r5, [sp, #8]
  405084:	427a      	negs	r2, r7
  405086:	4630      	mov	r0, r6
  405088:	f8cd 801c 	str.w	r8, [sp, #28]
  40508c:	f000 f9cc 	bl	405428 <scalbn>
  405090:	2200      	movs	r2, #0
  405092:	4b3e      	ldr	r3, [pc, #248]	; (40518c <__kernel_rem_pio2+0x884>)
  405094:	4604      	mov	r4, r0
  405096:	460d      	mov	r5, r1
  405098:	f000 fe8a 	bl	405db0 <__aeabi_dcmpge>
  40509c:	2800      	cmp	r0, #0
  40509e:	d062      	beq.n	405166 <__kernel_rem_pio2+0x85e>
  4050a0:	2200      	movs	r2, #0
  4050a2:	4b3b      	ldr	r3, [pc, #236]	; (405190 <__kernel_rem_pio2+0x888>)
  4050a4:	4620      	mov	r0, r4
  4050a6:	4629      	mov	r1, r5
  4050a8:	f000 fbfc 	bl	4058a4 <__aeabi_dmul>
  4050ac:	f000 fe94 	bl	405dd8 <__aeabi_d2iz>
  4050b0:	4606      	mov	r6, r0
  4050b2:	f000 fb91 	bl	4057d8 <__aeabi_i2d>
  4050b6:	2200      	movs	r2, #0
  4050b8:	4b34      	ldr	r3, [pc, #208]	; (40518c <__kernel_rem_pio2+0x884>)
  4050ba:	f000 fbf3 	bl	4058a4 <__aeabi_dmul>
  4050be:	4602      	mov	r2, r0
  4050c0:	460b      	mov	r3, r1
  4050c2:	4620      	mov	r0, r4
  4050c4:	4629      	mov	r1, r5
  4050c6:	f000 fa39 	bl	40553c <__aeabi_dsub>
  4050ca:	f000 fe85 	bl	405dd8 <__aeabi_d2iz>
  4050ce:	9900      	ldr	r1, [sp, #0]
  4050d0:	460b      	mov	r3, r1
  4050d2:	3301      	adds	r3, #1
  4050d4:	461a      	mov	r2, r3
  4050d6:	9300      	str	r3, [sp, #0]
  4050d8:	463b      	mov	r3, r7
  4050da:	3318      	adds	r3, #24
  4050dc:	9304      	str	r3, [sp, #16]
  4050de:	460b      	mov	r3, r1
  4050e0:	a90c      	add	r1, sp, #48	; 0x30
  4050e2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  4050e6:	4613      	mov	r3, r2
  4050e8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  4050ec:	e614      	b.n	404d18 <__kernel_rem_pio2+0x410>
  4050ee:	9b06      	ldr	r3, [sp, #24]
  4050f0:	4632      	mov	r2, r6
  4050f2:	e9c3 0100 	strd	r0, r1, [r3]
  4050f6:	460b      	mov	r3, r1
  4050f8:	e9da 0100 	ldrd	r0, r1, [sl]
  4050fc:	f000 fa1e 	bl	40553c <__aeabi_dsub>
  405100:	460b      	mov	r3, r1
  405102:	9900      	ldr	r1, [sp, #0]
  405104:	2900      	cmp	r1, #0
  405106:	4602      	mov	r2, r0
  405108:	f73f af26 	bgt.w	404f58 <__kernel_rem_pio2+0x650>
  40510c:	4619      	mov	r1, r3
  40510e:	9b06      	ldr	r3, [sp, #24]
  405110:	4610      	mov	r0, r2
  405112:	e9c3 0102 	strd	r0, r1, [r3, #8]
  405116:	e735      	b.n	404f84 <__kernel_rem_pio2+0x67c>
  405118:	4618      	mov	r0, r3
  40511a:	4629      	mov	r1, r5
  40511c:	e9da 2300 	ldrd	r2, r3, [sl]
  405120:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  405124:	9f06      	ldr	r7, [sp, #24]
  405126:	e9c7 0104 	strd	r0, r1, [r7, #16]
  40512a:	e9c7 2300 	strd	r2, r3, [r7]
  40512e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  405132:	e6e6      	b.n	404f02 <__kernel_rem_pio2+0x5fa>
  405134:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  405136:	2b03      	cmp	r3, #3
  405138:	f63f aee3 	bhi.w	404f02 <__kernel_rem_pio2+0x5fa>
  40513c:	e8df f003 	tbb	[pc, r3]
  405140:	0e1c1c21 	.word	0x0e1c1c21
  405144:	9b00      	ldr	r3, [sp, #0]
  405146:	2b01      	cmp	r3, #1
  405148:	dd88      	ble.n	40505c <__kernel_rem_pio2+0x754>
  40514a:	aa0c      	add	r2, sp, #48	; 0x30
  40514c:	2301      	movs	r3, #1
  40514e:	f852 4f04 	ldr.w	r4, [r2, #4]!
  405152:	2c00      	cmp	r4, #0
  405154:	f43f af7e 	beq.w	405054 <__kernel_rem_pio2+0x74c>
  405158:	1c58      	adds	r0, r3, #1
  40515a:	e4dd      	b.n	404b18 <__kernel_rem_pio2+0x210>
  40515c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  405160:	2300      	movs	r3, #0
  405162:	461d      	mov	r5, r3
  405164:	e6b4      	b.n	404ed0 <__kernel_rem_pio2+0x5c8>
  405166:	4629      	mov	r1, r5
  405168:	4620      	mov	r0, r4
  40516a:	f000 fe35 	bl	405dd8 <__aeabi_d2iz>
  40516e:	9a00      	ldr	r2, [sp, #0]
  405170:	a90c      	add	r1, sp, #48	; 0x30
  405172:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  405176:	e5cf      	b.n	404d18 <__kernel_rem_pio2+0x410>
  405178:	2600      	movs	r6, #0
  40517a:	4633      	mov	r3, r6
  40517c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  405180:	e6d5      	b.n	404f2e <__kernel_rem_pio2+0x626>
  405182:	2200      	movs	r2, #0
  405184:	4613      	mov	r3, r2
  405186:	e713      	b.n	404fb0 <__kernel_rem_pio2+0x6a8>
  405188:	3ff00000 	.word	0x3ff00000
  40518c:	41700000 	.word	0x41700000
  405190:	3e700000 	.word	0x3e700000
  405194:	00000000 	.word	0x00000000

00405198 <__kernel_sin>:
  405198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40519c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4051a0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4051a4:	b085      	sub	sp, #20
  4051a6:	460c      	mov	r4, r1
  4051a8:	4690      	mov	r8, r2
  4051aa:	4699      	mov	r9, r3
  4051ac:	4605      	mov	r5, r0
  4051ae:	da04      	bge.n	4051ba <__kernel_sin+0x22>
  4051b0:	f000 fe12 	bl	405dd8 <__aeabi_d2iz>
  4051b4:	2800      	cmp	r0, #0
  4051b6:	f000 8085 	beq.w	4052c4 <__kernel_sin+0x12c>
  4051ba:	462a      	mov	r2, r5
  4051bc:	4623      	mov	r3, r4
  4051be:	4628      	mov	r0, r5
  4051c0:	4621      	mov	r1, r4
  4051c2:	f000 fb6f 	bl	4058a4 <__aeabi_dmul>
  4051c6:	4606      	mov	r6, r0
  4051c8:	460f      	mov	r7, r1
  4051ca:	4602      	mov	r2, r0
  4051cc:	460b      	mov	r3, r1
  4051ce:	4628      	mov	r0, r5
  4051d0:	4621      	mov	r1, r4
  4051d2:	f000 fb67 	bl	4058a4 <__aeabi_dmul>
  4051d6:	a33e      	add	r3, pc, #248	; (adr r3, 4052d0 <__kernel_sin+0x138>)
  4051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051dc:	4682      	mov	sl, r0
  4051de:	468b      	mov	fp, r1
  4051e0:	4630      	mov	r0, r6
  4051e2:	4639      	mov	r1, r7
  4051e4:	f000 fb5e 	bl	4058a4 <__aeabi_dmul>
  4051e8:	a33b      	add	r3, pc, #236	; (adr r3, 4052d8 <__kernel_sin+0x140>)
  4051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051ee:	f000 f9a5 	bl	40553c <__aeabi_dsub>
  4051f2:	4632      	mov	r2, r6
  4051f4:	463b      	mov	r3, r7
  4051f6:	f000 fb55 	bl	4058a4 <__aeabi_dmul>
  4051fa:	a339      	add	r3, pc, #228	; (adr r3, 4052e0 <__kernel_sin+0x148>)
  4051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  405200:	f000 f99e 	bl	405540 <__adddf3>
  405204:	4632      	mov	r2, r6
  405206:	463b      	mov	r3, r7
  405208:	f000 fb4c 	bl	4058a4 <__aeabi_dmul>
  40520c:	a336      	add	r3, pc, #216	; (adr r3, 4052e8 <__kernel_sin+0x150>)
  40520e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405212:	f000 f993 	bl	40553c <__aeabi_dsub>
  405216:	4632      	mov	r2, r6
  405218:	463b      	mov	r3, r7
  40521a:	f000 fb43 	bl	4058a4 <__aeabi_dmul>
  40521e:	a334      	add	r3, pc, #208	; (adr r3, 4052f0 <__kernel_sin+0x158>)
  405220:	e9d3 2300 	ldrd	r2, r3, [r3]
  405224:	f000 f98c 	bl	405540 <__adddf3>
  405228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40522a:	e9cd 0100 	strd	r0, r1, [sp]
  40522e:	b39b      	cbz	r3, 405298 <__kernel_sin+0x100>
  405230:	2200      	movs	r2, #0
  405232:	4b33      	ldr	r3, [pc, #204]	; (405300 <__kernel_sin+0x168>)
  405234:	4640      	mov	r0, r8
  405236:	4649      	mov	r1, r9
  405238:	f000 fb34 	bl	4058a4 <__aeabi_dmul>
  40523c:	e9dd 2300 	ldrd	r2, r3, [sp]
  405240:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405244:	4650      	mov	r0, sl
  405246:	4659      	mov	r1, fp
  405248:	f000 fb2c 	bl	4058a4 <__aeabi_dmul>
  40524c:	4602      	mov	r2, r0
  40524e:	460b      	mov	r3, r1
  405250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405254:	f000 f972 	bl	40553c <__aeabi_dsub>
  405258:	4632      	mov	r2, r6
  40525a:	463b      	mov	r3, r7
  40525c:	f000 fb22 	bl	4058a4 <__aeabi_dmul>
  405260:	4642      	mov	r2, r8
  405262:	464b      	mov	r3, r9
  405264:	f000 f96a 	bl	40553c <__aeabi_dsub>
  405268:	a323      	add	r3, pc, #140	; (adr r3, 4052f8 <__kernel_sin+0x160>)
  40526a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40526e:	4606      	mov	r6, r0
  405270:	460f      	mov	r7, r1
  405272:	4650      	mov	r0, sl
  405274:	4659      	mov	r1, fp
  405276:	f000 fb15 	bl	4058a4 <__aeabi_dmul>
  40527a:	4602      	mov	r2, r0
  40527c:	460b      	mov	r3, r1
  40527e:	4630      	mov	r0, r6
  405280:	4639      	mov	r1, r7
  405282:	f000 f95d 	bl	405540 <__adddf3>
  405286:	4602      	mov	r2, r0
  405288:	460b      	mov	r3, r1
  40528a:	4628      	mov	r0, r5
  40528c:	4621      	mov	r1, r4
  40528e:	f000 f955 	bl	40553c <__aeabi_dsub>
  405292:	b005      	add	sp, #20
  405294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405298:	4602      	mov	r2, r0
  40529a:	460b      	mov	r3, r1
  40529c:	4630      	mov	r0, r6
  40529e:	4639      	mov	r1, r7
  4052a0:	f000 fb00 	bl	4058a4 <__aeabi_dmul>
  4052a4:	a314      	add	r3, pc, #80	; (adr r3, 4052f8 <__kernel_sin+0x160>)
  4052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052aa:	f000 f947 	bl	40553c <__aeabi_dsub>
  4052ae:	4652      	mov	r2, sl
  4052b0:	465b      	mov	r3, fp
  4052b2:	f000 faf7 	bl	4058a4 <__aeabi_dmul>
  4052b6:	462a      	mov	r2, r5
  4052b8:	4623      	mov	r3, r4
  4052ba:	f000 f941 	bl	405540 <__adddf3>
  4052be:	b005      	add	sp, #20
  4052c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052c4:	4628      	mov	r0, r5
  4052c6:	4621      	mov	r1, r4
  4052c8:	b005      	add	sp, #20
  4052ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052ce:	bf00      	nop
  4052d0:	5acfd57c 	.word	0x5acfd57c
  4052d4:	3de5d93a 	.word	0x3de5d93a
  4052d8:	8a2b9ceb 	.word	0x8a2b9ceb
  4052dc:	3e5ae5e6 	.word	0x3e5ae5e6
  4052e0:	57b1fe7d 	.word	0x57b1fe7d
  4052e4:	3ec71de3 	.word	0x3ec71de3
  4052e8:	19c161d5 	.word	0x19c161d5
  4052ec:	3f2a01a0 	.word	0x3f2a01a0
  4052f0:	1110f8a6 	.word	0x1110f8a6
  4052f4:	3f811111 	.word	0x3f811111
  4052f8:	55555549 	.word	0x55555549
  4052fc:	3fc55555 	.word	0x3fc55555
  405300:	3fe00000 	.word	0x3fe00000

00405304 <fabs>:
  405304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405308:	4770      	bx	lr
  40530a:	bf00      	nop
  40530c:	0000      	movs	r0, r0
	...

00405310 <floor>:
  405310:	f3c1 520a 	ubfx	r2, r1, #20, #11
  405314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405318:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  40531c:	2e13      	cmp	r6, #19
  40531e:	460b      	mov	r3, r1
  405320:	460d      	mov	r5, r1
  405322:	4604      	mov	r4, r0
  405324:	4688      	mov	r8, r1
  405326:	4607      	mov	r7, r0
  405328:	dc1d      	bgt.n	405366 <floor+0x56>
  40532a:	2e00      	cmp	r6, #0
  40532c:	db40      	blt.n	4053b0 <floor+0xa0>
  40532e:	4a3c      	ldr	r2, [pc, #240]	; (405420 <floor+0x110>)
  405330:	fa42 f906 	asr.w	r9, r2, r6
  405334:	ea01 0209 	and.w	r2, r1, r9
  405338:	4302      	orrs	r2, r0
  40533a:	4686      	mov	lr, r0
  40533c:	d018      	beq.n	405370 <floor+0x60>
  40533e:	a336      	add	r3, pc, #216	; (adr r3, 405418 <floor+0x108>)
  405340:	e9d3 2300 	ldrd	r2, r3, [r3]
  405344:	f000 f8fc 	bl	405540 <__adddf3>
  405348:	2200      	movs	r2, #0
  40534a:	2300      	movs	r3, #0
  40534c:	f000 fd3a 	bl	405dc4 <__aeabi_dcmpgt>
  405350:	b120      	cbz	r0, 40535c <floor+0x4c>
  405352:	2d00      	cmp	r5, #0
  405354:	db42      	blt.n	4053dc <floor+0xcc>
  405356:	ea28 0509 	bic.w	r5, r8, r9
  40535a:	2700      	movs	r7, #0
  40535c:	463c      	mov	r4, r7
  40535e:	4629      	mov	r1, r5
  405360:	4620      	mov	r0, r4
  405362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405366:	2e33      	cmp	r6, #51	; 0x33
  405368:	dd06      	ble.n	405378 <floor+0x68>
  40536a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  40536e:	d02f      	beq.n	4053d0 <floor+0xc0>
  405370:	4619      	mov	r1, r3
  405372:	4620      	mov	r0, r4
  405374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405378:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  40537c:	f04f 39ff 	mov.w	r9, #4294967295
  405380:	fa29 f902 	lsr.w	r9, r9, r2
  405384:	ea10 0f09 	tst.w	r0, r9
  405388:	d0f2      	beq.n	405370 <floor+0x60>
  40538a:	a323      	add	r3, pc, #140	; (adr r3, 405418 <floor+0x108>)
  40538c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405390:	f000 f8d6 	bl	405540 <__adddf3>
  405394:	2200      	movs	r2, #0
  405396:	2300      	movs	r3, #0
  405398:	f000 fd14 	bl	405dc4 <__aeabi_dcmpgt>
  40539c:	2800      	cmp	r0, #0
  40539e:	d0dd      	beq.n	40535c <floor+0x4c>
  4053a0:	2d00      	cmp	r5, #0
  4053a2:	db21      	blt.n	4053e8 <floor+0xd8>
  4053a4:	4645      	mov	r5, r8
  4053a6:	ea27 0709 	bic.w	r7, r7, r9
  4053aa:	463c      	mov	r4, r7
  4053ac:	4629      	mov	r1, r5
  4053ae:	e7d7      	b.n	405360 <floor+0x50>
  4053b0:	a319      	add	r3, pc, #100	; (adr r3, 405418 <floor+0x108>)
  4053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4053b6:	f000 f8c3 	bl	405540 <__adddf3>
  4053ba:	2200      	movs	r2, #0
  4053bc:	2300      	movs	r3, #0
  4053be:	f000 fd01 	bl	405dc4 <__aeabi_dcmpgt>
  4053c2:	2800      	cmp	r0, #0
  4053c4:	d0ca      	beq.n	40535c <floor+0x4c>
  4053c6:	2d00      	cmp	r5, #0
  4053c8:	db19      	blt.n	4053fe <floor+0xee>
  4053ca:	2700      	movs	r7, #0
  4053cc:	463d      	mov	r5, r7
  4053ce:	e7c5      	b.n	40535c <floor+0x4c>
  4053d0:	4602      	mov	r2, r0
  4053d2:	460b      	mov	r3, r1
  4053d4:	f000 f8b4 	bl	405540 <__adddf3>
  4053d8:	4604      	mov	r4, r0
  4053da:	e7ca      	b.n	405372 <floor+0x62>
  4053dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4053e0:	fa43 f606 	asr.w	r6, r3, r6
  4053e4:	44b0      	add	r8, r6
  4053e6:	e7b6      	b.n	405356 <floor+0x46>
  4053e8:	2e14      	cmp	r6, #20
  4053ea:	d010      	beq.n	40540e <floor+0xfe>
  4053ec:	2301      	movs	r3, #1
  4053ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  4053f2:	fa03 f606 	lsl.w	r6, r3, r6
  4053f6:	1937      	adds	r7, r6, r4
  4053f8:	bf28      	it	cs
  4053fa:	4498      	addcs	r8, r3
  4053fc:	e7d2      	b.n	4053a4 <floor+0x94>
  4053fe:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  405402:	4b08      	ldr	r3, [pc, #32]	; (405424 <floor+0x114>)
  405404:	4322      	orrs	r2, r4
  405406:	bf18      	it	ne
  405408:	461d      	movne	r5, r3
  40540a:	2700      	movs	r7, #0
  40540c:	e7a6      	b.n	40535c <floor+0x4c>
  40540e:	f105 0801 	add.w	r8, r5, #1
  405412:	e7c7      	b.n	4053a4 <floor+0x94>
  405414:	f3af 8000 	nop.w
  405418:	8800759c 	.word	0x8800759c
  40541c:	7e37e43c 	.word	0x7e37e43c
  405420:	000fffff 	.word	0x000fffff
  405424:	bff00000 	.word	0xbff00000

00405428 <scalbn>:
  405428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40542a:	f3c1 560a 	ubfx	r6, r1, #20, #11
  40542e:	4604      	mov	r4, r0
  405430:	460d      	mov	r5, r1
  405432:	460b      	mov	r3, r1
  405434:	4617      	mov	r7, r2
  405436:	bb0e      	cbnz	r6, 40547c <scalbn+0x54>
  405438:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40543c:	4303      	orrs	r3, r0
  40543e:	4686      	mov	lr, r0
  405440:	d025      	beq.n	40548e <scalbn+0x66>
  405442:	2200      	movs	r2, #0
  405444:	4b34      	ldr	r3, [pc, #208]	; (405518 <scalbn+0xf0>)
  405446:	f000 fa2d 	bl	4058a4 <__aeabi_dmul>
  40544a:	4a34      	ldr	r2, [pc, #208]	; (40551c <scalbn+0xf4>)
  40544c:	4297      	cmp	r7, r2
  40544e:	4604      	mov	r4, r0
  405450:	460d      	mov	r5, r1
  405452:	460b      	mov	r3, r1
  405454:	db2a      	blt.n	4054ac <scalbn+0x84>
  405456:	f3c1 560a 	ubfx	r6, r1, #20, #11
  40545a:	3e36      	subs	r6, #54	; 0x36
  40545c:	443e      	add	r6, r7
  40545e:	f240 72fe 	movw	r2, #2046	; 0x7fe
  405462:	4296      	cmp	r6, r2
  405464:	dc28      	bgt.n	4054b8 <scalbn+0x90>
  405466:	2e00      	cmp	r6, #0
  405468:	dd12      	ble.n	405490 <scalbn+0x68>
  40546a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  40546e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  405472:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  405476:	4620      	mov	r0, r4
  405478:	4629      	mov	r1, r5
  40547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40547c:	f240 72ff 	movw	r2, #2047	; 0x7ff
  405480:	4296      	cmp	r6, r2
  405482:	d1eb      	bne.n	40545c <scalbn+0x34>
  405484:	4602      	mov	r2, r0
  405486:	460b      	mov	r3, r1
  405488:	f000 f85a 	bl	405540 <__adddf3>
  40548c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40548e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405490:	f116 0f35 	cmn.w	r6, #53	; 0x35
  405494:	da1d      	bge.n	4054d2 <scalbn+0xaa>
  405496:	f24c 3350 	movw	r3, #50000	; 0xc350
  40549a:	429f      	cmp	r7, r3
  40549c:	4622      	mov	r2, r4
  40549e:	462b      	mov	r3, r5
  4054a0:	dc25      	bgt.n	4054ee <scalbn+0xc6>
  4054a2:	a119      	add	r1, pc, #100	; (adr r1, 405508 <scalbn+0xe0>)
  4054a4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4054a8:	f000 f83c 	bl	405524 <copysign>
  4054ac:	a316      	add	r3, pc, #88	; (adr r3, 405508 <scalbn+0xe0>)
  4054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054b2:	f000 f9f7 	bl	4058a4 <__aeabi_dmul>
  4054b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054b8:	4622      	mov	r2, r4
  4054ba:	462b      	mov	r3, r5
  4054bc:	a114      	add	r1, pc, #80	; (adr r1, 405510 <scalbn+0xe8>)
  4054be:	e9d1 0100 	ldrd	r0, r1, [r1]
  4054c2:	f000 f82f 	bl	405524 <copysign>
  4054c6:	a312      	add	r3, pc, #72	; (adr r3, 405510 <scalbn+0xe8>)
  4054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054cc:	f000 f9ea 	bl	4058a4 <__aeabi_dmul>
  4054d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  4054d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  4054da:	3636      	adds	r6, #54	; 0x36
  4054dc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  4054e0:	4620      	mov	r0, r4
  4054e2:	4629      	mov	r1, r5
  4054e4:	2200      	movs	r2, #0
  4054e6:	4b0e      	ldr	r3, [pc, #56]	; (405520 <scalbn+0xf8>)
  4054e8:	f000 f9dc 	bl	4058a4 <__aeabi_dmul>
  4054ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054ee:	a108      	add	r1, pc, #32	; (adr r1, 405510 <scalbn+0xe8>)
  4054f0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4054f4:	f000 f816 	bl	405524 <copysign>
  4054f8:	a305      	add	r3, pc, #20	; (adr r3, 405510 <scalbn+0xe8>)
  4054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054fe:	f000 f9d1 	bl	4058a4 <__aeabi_dmul>
  405502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405504:	f3af 8000 	nop.w
  405508:	c2f8f359 	.word	0xc2f8f359
  40550c:	01a56e1f 	.word	0x01a56e1f
  405510:	8800759c 	.word	0x8800759c
  405514:	7e37e43c 	.word	0x7e37e43c
  405518:	43500000 	.word	0x43500000
  40551c:	ffff3cb0 	.word	0xffff3cb0
  405520:	3c900000 	.word	0x3c900000

00405524 <copysign>:
  405524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  405528:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  40552c:	ea42 0103 	orr.w	r1, r2, r3
  405530:	4770      	bx	lr
  405532:	bf00      	nop

00405534 <__aeabi_drsub>:
  405534:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405538:	e002      	b.n	405540 <__adddf3>
  40553a:	bf00      	nop

0040553c <__aeabi_dsub>:
  40553c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405540 <__adddf3>:
  405540:	b530      	push	{r4, r5, lr}
  405542:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405546:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40554a:	ea94 0f05 	teq	r4, r5
  40554e:	bf08      	it	eq
  405550:	ea90 0f02 	teqeq	r0, r2
  405554:	bf1f      	itttt	ne
  405556:	ea54 0c00 	orrsne.w	ip, r4, r0
  40555a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40555e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405566:	f000 80e2 	beq.w	40572e <__adddf3+0x1ee>
  40556a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40556e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405572:	bfb8      	it	lt
  405574:	426d      	neglt	r5, r5
  405576:	dd0c      	ble.n	405592 <__adddf3+0x52>
  405578:	442c      	add	r4, r5
  40557a:	ea80 0202 	eor.w	r2, r0, r2
  40557e:	ea81 0303 	eor.w	r3, r1, r3
  405582:	ea82 0000 	eor.w	r0, r2, r0
  405586:	ea83 0101 	eor.w	r1, r3, r1
  40558a:	ea80 0202 	eor.w	r2, r0, r2
  40558e:	ea81 0303 	eor.w	r3, r1, r3
  405592:	2d36      	cmp	r5, #54	; 0x36
  405594:	bf88      	it	hi
  405596:	bd30      	pophi	{r4, r5, pc}
  405598:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40559c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4055a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4055a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4055a8:	d002      	beq.n	4055b0 <__adddf3+0x70>
  4055aa:	4240      	negs	r0, r0
  4055ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4055b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4055b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4055b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4055bc:	d002      	beq.n	4055c4 <__adddf3+0x84>
  4055be:	4252      	negs	r2, r2
  4055c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4055c4:	ea94 0f05 	teq	r4, r5
  4055c8:	f000 80a7 	beq.w	40571a <__adddf3+0x1da>
  4055cc:	f1a4 0401 	sub.w	r4, r4, #1
  4055d0:	f1d5 0e20 	rsbs	lr, r5, #32
  4055d4:	db0d      	blt.n	4055f2 <__adddf3+0xb2>
  4055d6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4055da:	fa22 f205 	lsr.w	r2, r2, r5
  4055de:	1880      	adds	r0, r0, r2
  4055e0:	f141 0100 	adc.w	r1, r1, #0
  4055e4:	fa03 f20e 	lsl.w	r2, r3, lr
  4055e8:	1880      	adds	r0, r0, r2
  4055ea:	fa43 f305 	asr.w	r3, r3, r5
  4055ee:	4159      	adcs	r1, r3
  4055f0:	e00e      	b.n	405610 <__adddf3+0xd0>
  4055f2:	f1a5 0520 	sub.w	r5, r5, #32
  4055f6:	f10e 0e20 	add.w	lr, lr, #32
  4055fa:	2a01      	cmp	r2, #1
  4055fc:	fa03 fc0e 	lsl.w	ip, r3, lr
  405600:	bf28      	it	cs
  405602:	f04c 0c02 	orrcs.w	ip, ip, #2
  405606:	fa43 f305 	asr.w	r3, r3, r5
  40560a:	18c0      	adds	r0, r0, r3
  40560c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405614:	d507      	bpl.n	405626 <__adddf3+0xe6>
  405616:	f04f 0e00 	mov.w	lr, #0
  40561a:	f1dc 0c00 	rsbs	ip, ip, #0
  40561e:	eb7e 0000 	sbcs.w	r0, lr, r0
  405622:	eb6e 0101 	sbc.w	r1, lr, r1
  405626:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40562a:	d31b      	bcc.n	405664 <__adddf3+0x124>
  40562c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405630:	d30c      	bcc.n	40564c <__adddf3+0x10c>
  405632:	0849      	lsrs	r1, r1, #1
  405634:	ea5f 0030 	movs.w	r0, r0, rrx
  405638:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40563c:	f104 0401 	add.w	r4, r4, #1
  405640:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405644:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405648:	f080 809a 	bcs.w	405780 <__adddf3+0x240>
  40564c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405650:	bf08      	it	eq
  405652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405656:	f150 0000 	adcs.w	r0, r0, #0
  40565a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40565e:	ea41 0105 	orr.w	r1, r1, r5
  405662:	bd30      	pop	{r4, r5, pc}
  405664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405668:	4140      	adcs	r0, r0
  40566a:	eb41 0101 	adc.w	r1, r1, r1
  40566e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405672:	f1a4 0401 	sub.w	r4, r4, #1
  405676:	d1e9      	bne.n	40564c <__adddf3+0x10c>
  405678:	f091 0f00 	teq	r1, #0
  40567c:	bf04      	itt	eq
  40567e:	4601      	moveq	r1, r0
  405680:	2000      	moveq	r0, #0
  405682:	fab1 f381 	clz	r3, r1
  405686:	bf08      	it	eq
  405688:	3320      	addeq	r3, #32
  40568a:	f1a3 030b 	sub.w	r3, r3, #11
  40568e:	f1b3 0220 	subs.w	r2, r3, #32
  405692:	da0c      	bge.n	4056ae <__adddf3+0x16e>
  405694:	320c      	adds	r2, #12
  405696:	dd08      	ble.n	4056aa <__adddf3+0x16a>
  405698:	f102 0c14 	add.w	ip, r2, #20
  40569c:	f1c2 020c 	rsb	r2, r2, #12
  4056a0:	fa01 f00c 	lsl.w	r0, r1, ip
  4056a4:	fa21 f102 	lsr.w	r1, r1, r2
  4056a8:	e00c      	b.n	4056c4 <__adddf3+0x184>
  4056aa:	f102 0214 	add.w	r2, r2, #20
  4056ae:	bfd8      	it	le
  4056b0:	f1c2 0c20 	rsble	ip, r2, #32
  4056b4:	fa01 f102 	lsl.w	r1, r1, r2
  4056b8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4056bc:	bfdc      	itt	le
  4056be:	ea41 010c 	orrle.w	r1, r1, ip
  4056c2:	4090      	lslle	r0, r2
  4056c4:	1ae4      	subs	r4, r4, r3
  4056c6:	bfa2      	ittt	ge
  4056c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4056cc:	4329      	orrge	r1, r5
  4056ce:	bd30      	popge	{r4, r5, pc}
  4056d0:	ea6f 0404 	mvn.w	r4, r4
  4056d4:	3c1f      	subs	r4, #31
  4056d6:	da1c      	bge.n	405712 <__adddf3+0x1d2>
  4056d8:	340c      	adds	r4, #12
  4056da:	dc0e      	bgt.n	4056fa <__adddf3+0x1ba>
  4056dc:	f104 0414 	add.w	r4, r4, #20
  4056e0:	f1c4 0220 	rsb	r2, r4, #32
  4056e4:	fa20 f004 	lsr.w	r0, r0, r4
  4056e8:	fa01 f302 	lsl.w	r3, r1, r2
  4056ec:	ea40 0003 	orr.w	r0, r0, r3
  4056f0:	fa21 f304 	lsr.w	r3, r1, r4
  4056f4:	ea45 0103 	orr.w	r1, r5, r3
  4056f8:	bd30      	pop	{r4, r5, pc}
  4056fa:	f1c4 040c 	rsb	r4, r4, #12
  4056fe:	f1c4 0220 	rsb	r2, r4, #32
  405702:	fa20 f002 	lsr.w	r0, r0, r2
  405706:	fa01 f304 	lsl.w	r3, r1, r4
  40570a:	ea40 0003 	orr.w	r0, r0, r3
  40570e:	4629      	mov	r1, r5
  405710:	bd30      	pop	{r4, r5, pc}
  405712:	fa21 f004 	lsr.w	r0, r1, r4
  405716:	4629      	mov	r1, r5
  405718:	bd30      	pop	{r4, r5, pc}
  40571a:	f094 0f00 	teq	r4, #0
  40571e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405722:	bf06      	itte	eq
  405724:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405728:	3401      	addeq	r4, #1
  40572a:	3d01      	subne	r5, #1
  40572c:	e74e      	b.n	4055cc <__adddf3+0x8c>
  40572e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405732:	bf18      	it	ne
  405734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405738:	d029      	beq.n	40578e <__adddf3+0x24e>
  40573a:	ea94 0f05 	teq	r4, r5
  40573e:	bf08      	it	eq
  405740:	ea90 0f02 	teqeq	r0, r2
  405744:	d005      	beq.n	405752 <__adddf3+0x212>
  405746:	ea54 0c00 	orrs.w	ip, r4, r0
  40574a:	bf04      	itt	eq
  40574c:	4619      	moveq	r1, r3
  40574e:	4610      	moveq	r0, r2
  405750:	bd30      	pop	{r4, r5, pc}
  405752:	ea91 0f03 	teq	r1, r3
  405756:	bf1e      	ittt	ne
  405758:	2100      	movne	r1, #0
  40575a:	2000      	movne	r0, #0
  40575c:	bd30      	popne	{r4, r5, pc}
  40575e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405762:	d105      	bne.n	405770 <__adddf3+0x230>
  405764:	0040      	lsls	r0, r0, #1
  405766:	4149      	adcs	r1, r1
  405768:	bf28      	it	cs
  40576a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40576e:	bd30      	pop	{r4, r5, pc}
  405770:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405774:	bf3c      	itt	cc
  405776:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40577a:	bd30      	popcc	{r4, r5, pc}
  40577c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405780:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405788:	f04f 0000 	mov.w	r0, #0
  40578c:	bd30      	pop	{r4, r5, pc}
  40578e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405792:	bf1a      	itte	ne
  405794:	4619      	movne	r1, r3
  405796:	4610      	movne	r0, r2
  405798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40579c:	bf1c      	itt	ne
  40579e:	460b      	movne	r3, r1
  4057a0:	4602      	movne	r2, r0
  4057a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4057a6:	bf06      	itte	eq
  4057a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4057ac:	ea91 0f03 	teqeq	r1, r3
  4057b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4057b4:	bd30      	pop	{r4, r5, pc}
  4057b6:	bf00      	nop

004057b8 <__aeabi_ui2d>:
  4057b8:	f090 0f00 	teq	r0, #0
  4057bc:	bf04      	itt	eq
  4057be:	2100      	moveq	r1, #0
  4057c0:	4770      	bxeq	lr
  4057c2:	b530      	push	{r4, r5, lr}
  4057c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4057c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4057cc:	f04f 0500 	mov.w	r5, #0
  4057d0:	f04f 0100 	mov.w	r1, #0
  4057d4:	e750      	b.n	405678 <__adddf3+0x138>
  4057d6:	bf00      	nop

004057d8 <__aeabi_i2d>:
  4057d8:	f090 0f00 	teq	r0, #0
  4057dc:	bf04      	itt	eq
  4057de:	2100      	moveq	r1, #0
  4057e0:	4770      	bxeq	lr
  4057e2:	b530      	push	{r4, r5, lr}
  4057e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4057e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4057ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4057f0:	bf48      	it	mi
  4057f2:	4240      	negmi	r0, r0
  4057f4:	f04f 0100 	mov.w	r1, #0
  4057f8:	e73e      	b.n	405678 <__adddf3+0x138>
  4057fa:	bf00      	nop

004057fc <__aeabi_f2d>:
  4057fc:	0042      	lsls	r2, r0, #1
  4057fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405802:	ea4f 0131 	mov.w	r1, r1, rrx
  405806:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40580a:	bf1f      	itttt	ne
  40580c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405810:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405814:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405818:	4770      	bxne	lr
  40581a:	f092 0f00 	teq	r2, #0
  40581e:	bf14      	ite	ne
  405820:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405824:	4770      	bxeq	lr
  405826:	b530      	push	{r4, r5, lr}
  405828:	f44f 7460 	mov.w	r4, #896	; 0x380
  40582c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405834:	e720      	b.n	405678 <__adddf3+0x138>
  405836:	bf00      	nop

00405838 <__aeabi_ul2d>:
  405838:	ea50 0201 	orrs.w	r2, r0, r1
  40583c:	bf08      	it	eq
  40583e:	4770      	bxeq	lr
  405840:	b530      	push	{r4, r5, lr}
  405842:	f04f 0500 	mov.w	r5, #0
  405846:	e00a      	b.n	40585e <__aeabi_l2d+0x16>

00405848 <__aeabi_l2d>:
  405848:	ea50 0201 	orrs.w	r2, r0, r1
  40584c:	bf08      	it	eq
  40584e:	4770      	bxeq	lr
  405850:	b530      	push	{r4, r5, lr}
  405852:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405856:	d502      	bpl.n	40585e <__aeabi_l2d+0x16>
  405858:	4240      	negs	r0, r0
  40585a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40585e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405862:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405866:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40586a:	f43f aedc 	beq.w	405626 <__adddf3+0xe6>
  40586e:	f04f 0203 	mov.w	r2, #3
  405872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405876:	bf18      	it	ne
  405878:	3203      	addne	r2, #3
  40587a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40587e:	bf18      	it	ne
  405880:	3203      	addne	r2, #3
  405882:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405886:	f1c2 0320 	rsb	r3, r2, #32
  40588a:	fa00 fc03 	lsl.w	ip, r0, r3
  40588e:	fa20 f002 	lsr.w	r0, r0, r2
  405892:	fa01 fe03 	lsl.w	lr, r1, r3
  405896:	ea40 000e 	orr.w	r0, r0, lr
  40589a:	fa21 f102 	lsr.w	r1, r1, r2
  40589e:	4414      	add	r4, r2
  4058a0:	e6c1      	b.n	405626 <__adddf3+0xe6>
  4058a2:	bf00      	nop

004058a4 <__aeabi_dmul>:
  4058a4:	b570      	push	{r4, r5, r6, lr}
  4058a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4058aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4058ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4058b2:	bf1d      	ittte	ne
  4058b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4058b8:	ea94 0f0c 	teqne	r4, ip
  4058bc:	ea95 0f0c 	teqne	r5, ip
  4058c0:	f000 f8de 	bleq	405a80 <__aeabi_dmul+0x1dc>
  4058c4:	442c      	add	r4, r5
  4058c6:	ea81 0603 	eor.w	r6, r1, r3
  4058ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4058ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4058d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4058d6:	bf18      	it	ne
  4058d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4058dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4058e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4058e4:	d038      	beq.n	405958 <__aeabi_dmul+0xb4>
  4058e6:	fba0 ce02 	umull	ip, lr, r0, r2
  4058ea:	f04f 0500 	mov.w	r5, #0
  4058ee:	fbe1 e502 	umlal	lr, r5, r1, r2
  4058f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4058f6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4058fa:	f04f 0600 	mov.w	r6, #0
  4058fe:	fbe1 5603 	umlal	r5, r6, r1, r3
  405902:	f09c 0f00 	teq	ip, #0
  405906:	bf18      	it	ne
  405908:	f04e 0e01 	orrne.w	lr, lr, #1
  40590c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405910:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405914:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405918:	d204      	bcs.n	405924 <__aeabi_dmul+0x80>
  40591a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40591e:	416d      	adcs	r5, r5
  405920:	eb46 0606 	adc.w	r6, r6, r6
  405924:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405928:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40592c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405930:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405934:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405938:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40593c:	bf88      	it	hi
  40593e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405942:	d81e      	bhi.n	405982 <__aeabi_dmul+0xde>
  405944:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405948:	bf08      	it	eq
  40594a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40594e:	f150 0000 	adcs.w	r0, r0, #0
  405952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405956:	bd70      	pop	{r4, r5, r6, pc}
  405958:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40595c:	ea46 0101 	orr.w	r1, r6, r1
  405960:	ea40 0002 	orr.w	r0, r0, r2
  405964:	ea81 0103 	eor.w	r1, r1, r3
  405968:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40596c:	bfc2      	ittt	gt
  40596e:	ebd4 050c 	rsbsgt	r5, r4, ip
  405972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405976:	bd70      	popgt	{r4, r5, r6, pc}
  405978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40597c:	f04f 0e00 	mov.w	lr, #0
  405980:	3c01      	subs	r4, #1
  405982:	f300 80ab 	bgt.w	405adc <__aeabi_dmul+0x238>
  405986:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40598a:	bfde      	ittt	le
  40598c:	2000      	movle	r0, #0
  40598e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405992:	bd70      	pople	{r4, r5, r6, pc}
  405994:	f1c4 0400 	rsb	r4, r4, #0
  405998:	3c20      	subs	r4, #32
  40599a:	da35      	bge.n	405a08 <__aeabi_dmul+0x164>
  40599c:	340c      	adds	r4, #12
  40599e:	dc1b      	bgt.n	4059d8 <__aeabi_dmul+0x134>
  4059a0:	f104 0414 	add.w	r4, r4, #20
  4059a4:	f1c4 0520 	rsb	r5, r4, #32
  4059a8:	fa00 f305 	lsl.w	r3, r0, r5
  4059ac:	fa20 f004 	lsr.w	r0, r0, r4
  4059b0:	fa01 f205 	lsl.w	r2, r1, r5
  4059b4:	ea40 0002 	orr.w	r0, r0, r2
  4059b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4059bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4059c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4059c4:	fa21 f604 	lsr.w	r6, r1, r4
  4059c8:	eb42 0106 	adc.w	r1, r2, r6
  4059cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4059d0:	bf08      	it	eq
  4059d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4059d6:	bd70      	pop	{r4, r5, r6, pc}
  4059d8:	f1c4 040c 	rsb	r4, r4, #12
  4059dc:	f1c4 0520 	rsb	r5, r4, #32
  4059e0:	fa00 f304 	lsl.w	r3, r0, r4
  4059e4:	fa20 f005 	lsr.w	r0, r0, r5
  4059e8:	fa01 f204 	lsl.w	r2, r1, r4
  4059ec:	ea40 0002 	orr.w	r0, r0, r2
  4059f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4059f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4059f8:	f141 0100 	adc.w	r1, r1, #0
  4059fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405a00:	bf08      	it	eq
  405a02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405a06:	bd70      	pop	{r4, r5, r6, pc}
  405a08:	f1c4 0520 	rsb	r5, r4, #32
  405a0c:	fa00 f205 	lsl.w	r2, r0, r5
  405a10:	ea4e 0e02 	orr.w	lr, lr, r2
  405a14:	fa20 f304 	lsr.w	r3, r0, r4
  405a18:	fa01 f205 	lsl.w	r2, r1, r5
  405a1c:	ea43 0302 	orr.w	r3, r3, r2
  405a20:	fa21 f004 	lsr.w	r0, r1, r4
  405a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405a28:	fa21 f204 	lsr.w	r2, r1, r4
  405a2c:	ea20 0002 	bic.w	r0, r0, r2
  405a30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405a34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405a38:	bf08      	it	eq
  405a3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405a3e:	bd70      	pop	{r4, r5, r6, pc}
  405a40:	f094 0f00 	teq	r4, #0
  405a44:	d10f      	bne.n	405a66 <__aeabi_dmul+0x1c2>
  405a46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405a4a:	0040      	lsls	r0, r0, #1
  405a4c:	eb41 0101 	adc.w	r1, r1, r1
  405a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405a54:	bf08      	it	eq
  405a56:	3c01      	subeq	r4, #1
  405a58:	d0f7      	beq.n	405a4a <__aeabi_dmul+0x1a6>
  405a5a:	ea41 0106 	orr.w	r1, r1, r6
  405a5e:	f095 0f00 	teq	r5, #0
  405a62:	bf18      	it	ne
  405a64:	4770      	bxne	lr
  405a66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405a6a:	0052      	lsls	r2, r2, #1
  405a6c:	eb43 0303 	adc.w	r3, r3, r3
  405a70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405a74:	bf08      	it	eq
  405a76:	3d01      	subeq	r5, #1
  405a78:	d0f7      	beq.n	405a6a <__aeabi_dmul+0x1c6>
  405a7a:	ea43 0306 	orr.w	r3, r3, r6
  405a7e:	4770      	bx	lr
  405a80:	ea94 0f0c 	teq	r4, ip
  405a84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405a88:	bf18      	it	ne
  405a8a:	ea95 0f0c 	teqne	r5, ip
  405a8e:	d00c      	beq.n	405aaa <__aeabi_dmul+0x206>
  405a90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405a94:	bf18      	it	ne
  405a96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405a9a:	d1d1      	bne.n	405a40 <__aeabi_dmul+0x19c>
  405a9c:	ea81 0103 	eor.w	r1, r1, r3
  405aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405aa4:	f04f 0000 	mov.w	r0, #0
  405aa8:	bd70      	pop	{r4, r5, r6, pc}
  405aaa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405aae:	bf06      	itte	eq
  405ab0:	4610      	moveq	r0, r2
  405ab2:	4619      	moveq	r1, r3
  405ab4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405ab8:	d019      	beq.n	405aee <__aeabi_dmul+0x24a>
  405aba:	ea94 0f0c 	teq	r4, ip
  405abe:	d102      	bne.n	405ac6 <__aeabi_dmul+0x222>
  405ac0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405ac4:	d113      	bne.n	405aee <__aeabi_dmul+0x24a>
  405ac6:	ea95 0f0c 	teq	r5, ip
  405aca:	d105      	bne.n	405ad8 <__aeabi_dmul+0x234>
  405acc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405ad0:	bf1c      	itt	ne
  405ad2:	4610      	movne	r0, r2
  405ad4:	4619      	movne	r1, r3
  405ad6:	d10a      	bne.n	405aee <__aeabi_dmul+0x24a>
  405ad8:	ea81 0103 	eor.w	r1, r1, r3
  405adc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ae0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405ae4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405ae8:	f04f 0000 	mov.w	r0, #0
  405aec:	bd70      	pop	{r4, r5, r6, pc}
  405aee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405af2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405af6:	bd70      	pop	{r4, r5, r6, pc}

00405af8 <__aeabi_ddiv>:
  405af8:	b570      	push	{r4, r5, r6, lr}
  405afa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405afe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405b02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405b06:	bf1d      	ittte	ne
  405b08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405b0c:	ea94 0f0c 	teqne	r4, ip
  405b10:	ea95 0f0c 	teqne	r5, ip
  405b14:	f000 f8a7 	bleq	405c66 <__aeabi_ddiv+0x16e>
  405b18:	eba4 0405 	sub.w	r4, r4, r5
  405b1c:	ea81 0e03 	eor.w	lr, r1, r3
  405b20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405b24:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405b28:	f000 8088 	beq.w	405c3c <__aeabi_ddiv+0x144>
  405b2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405b30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405b34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405b38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405b3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405b40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405b44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405b48:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405b4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405b50:	429d      	cmp	r5, r3
  405b52:	bf08      	it	eq
  405b54:	4296      	cmpeq	r6, r2
  405b56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405b5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405b5e:	d202      	bcs.n	405b66 <__aeabi_ddiv+0x6e>
  405b60:	085b      	lsrs	r3, r3, #1
  405b62:	ea4f 0232 	mov.w	r2, r2, rrx
  405b66:	1ab6      	subs	r6, r6, r2
  405b68:	eb65 0503 	sbc.w	r5, r5, r3
  405b6c:	085b      	lsrs	r3, r3, #1
  405b6e:	ea4f 0232 	mov.w	r2, r2, rrx
  405b72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405b76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405b7a:	ebb6 0e02 	subs.w	lr, r6, r2
  405b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405b82:	bf22      	ittt	cs
  405b84:	1ab6      	subcs	r6, r6, r2
  405b86:	4675      	movcs	r5, lr
  405b88:	ea40 000c 	orrcs.w	r0, r0, ip
  405b8c:	085b      	lsrs	r3, r3, #1
  405b8e:	ea4f 0232 	mov.w	r2, r2, rrx
  405b92:	ebb6 0e02 	subs.w	lr, r6, r2
  405b96:	eb75 0e03 	sbcs.w	lr, r5, r3
  405b9a:	bf22      	ittt	cs
  405b9c:	1ab6      	subcs	r6, r6, r2
  405b9e:	4675      	movcs	r5, lr
  405ba0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405ba4:	085b      	lsrs	r3, r3, #1
  405ba6:	ea4f 0232 	mov.w	r2, r2, rrx
  405baa:	ebb6 0e02 	subs.w	lr, r6, r2
  405bae:	eb75 0e03 	sbcs.w	lr, r5, r3
  405bb2:	bf22      	ittt	cs
  405bb4:	1ab6      	subcs	r6, r6, r2
  405bb6:	4675      	movcs	r5, lr
  405bb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405bbc:	085b      	lsrs	r3, r3, #1
  405bbe:	ea4f 0232 	mov.w	r2, r2, rrx
  405bc2:	ebb6 0e02 	subs.w	lr, r6, r2
  405bc6:	eb75 0e03 	sbcs.w	lr, r5, r3
  405bca:	bf22      	ittt	cs
  405bcc:	1ab6      	subcs	r6, r6, r2
  405bce:	4675      	movcs	r5, lr
  405bd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405bd4:	ea55 0e06 	orrs.w	lr, r5, r6
  405bd8:	d018      	beq.n	405c0c <__aeabi_ddiv+0x114>
  405bda:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405bde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405be2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405be6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405bea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405bee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405bf2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405bf6:	d1c0      	bne.n	405b7a <__aeabi_ddiv+0x82>
  405bf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405bfc:	d10b      	bne.n	405c16 <__aeabi_ddiv+0x11e>
  405bfe:	ea41 0100 	orr.w	r1, r1, r0
  405c02:	f04f 0000 	mov.w	r0, #0
  405c06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405c0a:	e7b6      	b.n	405b7a <__aeabi_ddiv+0x82>
  405c0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405c10:	bf04      	itt	eq
  405c12:	4301      	orreq	r1, r0
  405c14:	2000      	moveq	r0, #0
  405c16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405c1a:	bf88      	it	hi
  405c1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405c20:	f63f aeaf 	bhi.w	405982 <__aeabi_dmul+0xde>
  405c24:	ebb5 0c03 	subs.w	ip, r5, r3
  405c28:	bf04      	itt	eq
  405c2a:	ebb6 0c02 	subseq.w	ip, r6, r2
  405c2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405c32:	f150 0000 	adcs.w	r0, r0, #0
  405c36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405c3a:	bd70      	pop	{r4, r5, r6, pc}
  405c3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405c40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405c44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405c48:	bfc2      	ittt	gt
  405c4a:	ebd4 050c 	rsbsgt	r5, r4, ip
  405c4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405c52:	bd70      	popgt	{r4, r5, r6, pc}
  405c54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405c58:	f04f 0e00 	mov.w	lr, #0
  405c5c:	3c01      	subs	r4, #1
  405c5e:	e690      	b.n	405982 <__aeabi_dmul+0xde>
  405c60:	ea45 0e06 	orr.w	lr, r5, r6
  405c64:	e68d      	b.n	405982 <__aeabi_dmul+0xde>
  405c66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405c6a:	ea94 0f0c 	teq	r4, ip
  405c6e:	bf08      	it	eq
  405c70:	ea95 0f0c 	teqeq	r5, ip
  405c74:	f43f af3b 	beq.w	405aee <__aeabi_dmul+0x24a>
  405c78:	ea94 0f0c 	teq	r4, ip
  405c7c:	d10a      	bne.n	405c94 <__aeabi_ddiv+0x19c>
  405c7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405c82:	f47f af34 	bne.w	405aee <__aeabi_dmul+0x24a>
  405c86:	ea95 0f0c 	teq	r5, ip
  405c8a:	f47f af25 	bne.w	405ad8 <__aeabi_dmul+0x234>
  405c8e:	4610      	mov	r0, r2
  405c90:	4619      	mov	r1, r3
  405c92:	e72c      	b.n	405aee <__aeabi_dmul+0x24a>
  405c94:	ea95 0f0c 	teq	r5, ip
  405c98:	d106      	bne.n	405ca8 <__aeabi_ddiv+0x1b0>
  405c9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405c9e:	f43f aefd 	beq.w	405a9c <__aeabi_dmul+0x1f8>
  405ca2:	4610      	mov	r0, r2
  405ca4:	4619      	mov	r1, r3
  405ca6:	e722      	b.n	405aee <__aeabi_dmul+0x24a>
  405ca8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405cac:	bf18      	it	ne
  405cae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405cb2:	f47f aec5 	bne.w	405a40 <__aeabi_dmul+0x19c>
  405cb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405cba:	f47f af0d 	bne.w	405ad8 <__aeabi_dmul+0x234>
  405cbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405cc2:	f47f aeeb 	bne.w	405a9c <__aeabi_dmul+0x1f8>
  405cc6:	e712      	b.n	405aee <__aeabi_dmul+0x24a>

00405cc8 <__gedf2>:
  405cc8:	f04f 3cff 	mov.w	ip, #4294967295
  405ccc:	e006      	b.n	405cdc <__cmpdf2+0x4>
  405cce:	bf00      	nop

00405cd0 <__ledf2>:
  405cd0:	f04f 0c01 	mov.w	ip, #1
  405cd4:	e002      	b.n	405cdc <__cmpdf2+0x4>
  405cd6:	bf00      	nop

00405cd8 <__cmpdf2>:
  405cd8:	f04f 0c01 	mov.w	ip, #1
  405cdc:	f84d cd04 	str.w	ip, [sp, #-4]!
  405ce0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405ce8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405cec:	bf18      	it	ne
  405cee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  405cf2:	d01b      	beq.n	405d2c <__cmpdf2+0x54>
  405cf4:	b001      	add	sp, #4
  405cf6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405cfa:	bf0c      	ite	eq
  405cfc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405d00:	ea91 0f03 	teqne	r1, r3
  405d04:	bf02      	ittt	eq
  405d06:	ea90 0f02 	teqeq	r0, r2
  405d0a:	2000      	moveq	r0, #0
  405d0c:	4770      	bxeq	lr
  405d0e:	f110 0f00 	cmn.w	r0, #0
  405d12:	ea91 0f03 	teq	r1, r3
  405d16:	bf58      	it	pl
  405d18:	4299      	cmppl	r1, r3
  405d1a:	bf08      	it	eq
  405d1c:	4290      	cmpeq	r0, r2
  405d1e:	bf2c      	ite	cs
  405d20:	17d8      	asrcs	r0, r3, #31
  405d22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  405d26:	f040 0001 	orr.w	r0, r0, #1
  405d2a:	4770      	bx	lr
  405d2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405d30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405d34:	d102      	bne.n	405d3c <__cmpdf2+0x64>
  405d36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405d3a:	d107      	bne.n	405d4c <__cmpdf2+0x74>
  405d3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405d40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405d44:	d1d6      	bne.n	405cf4 <__cmpdf2+0x1c>
  405d46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405d4a:	d0d3      	beq.n	405cf4 <__cmpdf2+0x1c>
  405d4c:	f85d 0b04 	ldr.w	r0, [sp], #4
  405d50:	4770      	bx	lr
  405d52:	bf00      	nop

00405d54 <__aeabi_cdrcmple>:
  405d54:	4684      	mov	ip, r0
  405d56:	4610      	mov	r0, r2
  405d58:	4662      	mov	r2, ip
  405d5a:	468c      	mov	ip, r1
  405d5c:	4619      	mov	r1, r3
  405d5e:	4663      	mov	r3, ip
  405d60:	e000      	b.n	405d64 <__aeabi_cdcmpeq>
  405d62:	bf00      	nop

00405d64 <__aeabi_cdcmpeq>:
  405d64:	b501      	push	{r0, lr}
  405d66:	f7ff ffb7 	bl	405cd8 <__cmpdf2>
  405d6a:	2800      	cmp	r0, #0
  405d6c:	bf48      	it	mi
  405d6e:	f110 0f00 	cmnmi.w	r0, #0
  405d72:	bd01      	pop	{r0, pc}

00405d74 <__aeabi_dcmpeq>:
  405d74:	f84d ed08 	str.w	lr, [sp, #-8]!
  405d78:	f7ff fff4 	bl	405d64 <__aeabi_cdcmpeq>
  405d7c:	bf0c      	ite	eq
  405d7e:	2001      	moveq	r0, #1
  405d80:	2000      	movne	r0, #0
  405d82:	f85d fb08 	ldr.w	pc, [sp], #8
  405d86:	bf00      	nop

00405d88 <__aeabi_dcmplt>:
  405d88:	f84d ed08 	str.w	lr, [sp, #-8]!
  405d8c:	f7ff ffea 	bl	405d64 <__aeabi_cdcmpeq>
  405d90:	bf34      	ite	cc
  405d92:	2001      	movcc	r0, #1
  405d94:	2000      	movcs	r0, #0
  405d96:	f85d fb08 	ldr.w	pc, [sp], #8
  405d9a:	bf00      	nop

00405d9c <__aeabi_dcmple>:
  405d9c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405da0:	f7ff ffe0 	bl	405d64 <__aeabi_cdcmpeq>
  405da4:	bf94      	ite	ls
  405da6:	2001      	movls	r0, #1
  405da8:	2000      	movhi	r0, #0
  405daa:	f85d fb08 	ldr.w	pc, [sp], #8
  405dae:	bf00      	nop

00405db0 <__aeabi_dcmpge>:
  405db0:	f84d ed08 	str.w	lr, [sp, #-8]!
  405db4:	f7ff ffce 	bl	405d54 <__aeabi_cdrcmple>
  405db8:	bf94      	ite	ls
  405dba:	2001      	movls	r0, #1
  405dbc:	2000      	movhi	r0, #0
  405dbe:	f85d fb08 	ldr.w	pc, [sp], #8
  405dc2:	bf00      	nop

00405dc4 <__aeabi_dcmpgt>:
  405dc4:	f84d ed08 	str.w	lr, [sp, #-8]!
  405dc8:	f7ff ffc4 	bl	405d54 <__aeabi_cdrcmple>
  405dcc:	bf34      	ite	cc
  405dce:	2001      	movcc	r0, #1
  405dd0:	2000      	movcs	r0, #0
  405dd2:	f85d fb08 	ldr.w	pc, [sp], #8
  405dd6:	bf00      	nop

00405dd8 <__aeabi_d2iz>:
  405dd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405ddc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405de0:	d215      	bcs.n	405e0e <__aeabi_d2iz+0x36>
  405de2:	d511      	bpl.n	405e08 <__aeabi_d2iz+0x30>
  405de4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405de8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405dec:	d912      	bls.n	405e14 <__aeabi_d2iz+0x3c>
  405dee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405df2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405df6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  405dfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405dfe:	fa23 f002 	lsr.w	r0, r3, r2
  405e02:	bf18      	it	ne
  405e04:	4240      	negne	r0, r0
  405e06:	4770      	bx	lr
  405e08:	f04f 0000 	mov.w	r0, #0
  405e0c:	4770      	bx	lr
  405e0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405e12:	d105      	bne.n	405e20 <__aeabi_d2iz+0x48>
  405e14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405e18:	bf08      	it	eq
  405e1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405e1e:	4770      	bx	lr
  405e20:	f04f 0000 	mov.w	r0, #0
  405e24:	4770      	bx	lr
  405e26:	bf00      	nop

00405e28 <__aeabi_d2f>:
  405e28:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405e2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405e30:	bf24      	itt	cs
  405e32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  405e36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  405e3a:	d90d      	bls.n	405e58 <__aeabi_d2f+0x30>
  405e3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405e40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405e44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  405e48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405e4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405e50:	bf08      	it	eq
  405e52:	f020 0001 	biceq.w	r0, r0, #1
  405e56:	4770      	bx	lr
  405e58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405e5c:	d121      	bne.n	405ea2 <__aeabi_d2f+0x7a>
  405e5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405e62:	bfbc      	itt	lt
  405e64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  405e68:	4770      	bxlt	lr
  405e6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405e6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405e72:	f1c2 0218 	rsb	r2, r2, #24
  405e76:	f1c2 0c20 	rsb	ip, r2, #32
  405e7a:	fa10 f30c 	lsls.w	r3, r0, ip
  405e7e:	fa20 f002 	lsr.w	r0, r0, r2
  405e82:	bf18      	it	ne
  405e84:	f040 0001 	orrne.w	r0, r0, #1
  405e88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405e8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405e90:	fa03 fc0c 	lsl.w	ip, r3, ip
  405e94:	ea40 000c 	orr.w	r0, r0, ip
  405e98:	fa23 f302 	lsr.w	r3, r3, r2
  405e9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405ea0:	e7cc      	b.n	405e3c <__aeabi_d2f+0x14>
  405ea2:	ea7f 5362 	mvns.w	r3, r2, asr #21
  405ea6:	d107      	bne.n	405eb8 <__aeabi_d2f+0x90>
  405ea8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405eac:	bf1e      	ittt	ne
  405eae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405eb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  405eb6:	4770      	bxne	lr
  405eb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405ebc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405ec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405ec4:	4770      	bx	lr
  405ec6:	bf00      	nop

00405ec8 <__aeabi_frsub>:
  405ec8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  405ecc:	e002      	b.n	405ed4 <__addsf3>
  405ece:	bf00      	nop

00405ed0 <__aeabi_fsub>:
  405ed0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00405ed4 <__addsf3>:
  405ed4:	0042      	lsls	r2, r0, #1
  405ed6:	bf1f      	itttt	ne
  405ed8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  405edc:	ea92 0f03 	teqne	r2, r3
  405ee0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  405ee4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405ee8:	d06a      	beq.n	405fc0 <__addsf3+0xec>
  405eea:	ea4f 6212 	mov.w	r2, r2, lsr #24
  405eee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  405ef2:	bfc1      	itttt	gt
  405ef4:	18d2      	addgt	r2, r2, r3
  405ef6:	4041      	eorgt	r1, r0
  405ef8:	4048      	eorgt	r0, r1
  405efa:	4041      	eorgt	r1, r0
  405efc:	bfb8      	it	lt
  405efe:	425b      	neglt	r3, r3
  405f00:	2b19      	cmp	r3, #25
  405f02:	bf88      	it	hi
  405f04:	4770      	bxhi	lr
  405f06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405f0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405f12:	bf18      	it	ne
  405f14:	4240      	negne	r0, r0
  405f16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405f1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405f1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405f22:	bf18      	it	ne
  405f24:	4249      	negne	r1, r1
  405f26:	ea92 0f03 	teq	r2, r3
  405f2a:	d03f      	beq.n	405fac <__addsf3+0xd8>
  405f2c:	f1a2 0201 	sub.w	r2, r2, #1
  405f30:	fa41 fc03 	asr.w	ip, r1, r3
  405f34:	eb10 000c 	adds.w	r0, r0, ip
  405f38:	f1c3 0320 	rsb	r3, r3, #32
  405f3c:	fa01 f103 	lsl.w	r1, r1, r3
  405f40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405f44:	d502      	bpl.n	405f4c <__addsf3+0x78>
  405f46:	4249      	negs	r1, r1
  405f48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405f4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405f50:	d313      	bcc.n	405f7a <__addsf3+0xa6>
  405f52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  405f56:	d306      	bcc.n	405f66 <__addsf3+0x92>
  405f58:	0840      	lsrs	r0, r0, #1
  405f5a:	ea4f 0131 	mov.w	r1, r1, rrx
  405f5e:	f102 0201 	add.w	r2, r2, #1
  405f62:	2afe      	cmp	r2, #254	; 0xfe
  405f64:	d251      	bcs.n	40600a <__addsf3+0x136>
  405f66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  405f6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405f6e:	bf08      	it	eq
  405f70:	f020 0001 	biceq.w	r0, r0, #1
  405f74:	ea40 0003 	orr.w	r0, r0, r3
  405f78:	4770      	bx	lr
  405f7a:	0049      	lsls	r1, r1, #1
  405f7c:	eb40 0000 	adc.w	r0, r0, r0
  405f80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  405f84:	f1a2 0201 	sub.w	r2, r2, #1
  405f88:	d1ed      	bne.n	405f66 <__addsf3+0x92>
  405f8a:	fab0 fc80 	clz	ip, r0
  405f8e:	f1ac 0c08 	sub.w	ip, ip, #8
  405f92:	ebb2 020c 	subs.w	r2, r2, ip
  405f96:	fa00 f00c 	lsl.w	r0, r0, ip
  405f9a:	bfaa      	itet	ge
  405f9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  405fa0:	4252      	neglt	r2, r2
  405fa2:	4318      	orrge	r0, r3
  405fa4:	bfbc      	itt	lt
  405fa6:	40d0      	lsrlt	r0, r2
  405fa8:	4318      	orrlt	r0, r3
  405faa:	4770      	bx	lr
  405fac:	f092 0f00 	teq	r2, #0
  405fb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  405fb4:	bf06      	itte	eq
  405fb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  405fba:	3201      	addeq	r2, #1
  405fbc:	3b01      	subne	r3, #1
  405fbe:	e7b5      	b.n	405f2c <__addsf3+0x58>
  405fc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405fc8:	bf18      	it	ne
  405fca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405fce:	d021      	beq.n	406014 <__addsf3+0x140>
  405fd0:	ea92 0f03 	teq	r2, r3
  405fd4:	d004      	beq.n	405fe0 <__addsf3+0x10c>
  405fd6:	f092 0f00 	teq	r2, #0
  405fda:	bf08      	it	eq
  405fdc:	4608      	moveq	r0, r1
  405fde:	4770      	bx	lr
  405fe0:	ea90 0f01 	teq	r0, r1
  405fe4:	bf1c      	itt	ne
  405fe6:	2000      	movne	r0, #0
  405fe8:	4770      	bxne	lr
  405fea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  405fee:	d104      	bne.n	405ffa <__addsf3+0x126>
  405ff0:	0040      	lsls	r0, r0, #1
  405ff2:	bf28      	it	cs
  405ff4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  405ff8:	4770      	bx	lr
  405ffa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  405ffe:	bf3c      	itt	cc
  406000:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  406004:	4770      	bxcc	lr
  406006:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40600a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40600e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406012:	4770      	bx	lr
  406014:	ea7f 6222 	mvns.w	r2, r2, asr #24
  406018:	bf16      	itet	ne
  40601a:	4608      	movne	r0, r1
  40601c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  406020:	4601      	movne	r1, r0
  406022:	0242      	lsls	r2, r0, #9
  406024:	bf06      	itte	eq
  406026:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40602a:	ea90 0f01 	teqeq	r0, r1
  40602e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  406032:	4770      	bx	lr

00406034 <__aeabi_ui2f>:
  406034:	f04f 0300 	mov.w	r3, #0
  406038:	e004      	b.n	406044 <__aeabi_i2f+0x8>
  40603a:	bf00      	nop

0040603c <__aeabi_i2f>:
  40603c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  406040:	bf48      	it	mi
  406042:	4240      	negmi	r0, r0
  406044:	ea5f 0c00 	movs.w	ip, r0
  406048:	bf08      	it	eq
  40604a:	4770      	bxeq	lr
  40604c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  406050:	4601      	mov	r1, r0
  406052:	f04f 0000 	mov.w	r0, #0
  406056:	e01c      	b.n	406092 <__aeabi_l2f+0x2a>

00406058 <__aeabi_ul2f>:
  406058:	ea50 0201 	orrs.w	r2, r0, r1
  40605c:	bf08      	it	eq
  40605e:	4770      	bxeq	lr
  406060:	f04f 0300 	mov.w	r3, #0
  406064:	e00a      	b.n	40607c <__aeabi_l2f+0x14>
  406066:	bf00      	nop

00406068 <__aeabi_l2f>:
  406068:	ea50 0201 	orrs.w	r2, r0, r1
  40606c:	bf08      	it	eq
  40606e:	4770      	bxeq	lr
  406070:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  406074:	d502      	bpl.n	40607c <__aeabi_l2f+0x14>
  406076:	4240      	negs	r0, r0
  406078:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40607c:	ea5f 0c01 	movs.w	ip, r1
  406080:	bf02      	ittt	eq
  406082:	4684      	moveq	ip, r0
  406084:	4601      	moveq	r1, r0
  406086:	2000      	moveq	r0, #0
  406088:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40608c:	bf08      	it	eq
  40608e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  406092:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  406096:	fabc f28c 	clz	r2, ip
  40609a:	3a08      	subs	r2, #8
  40609c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4060a0:	db10      	blt.n	4060c4 <__aeabi_l2f+0x5c>
  4060a2:	fa01 fc02 	lsl.w	ip, r1, r2
  4060a6:	4463      	add	r3, ip
  4060a8:	fa00 fc02 	lsl.w	ip, r0, r2
  4060ac:	f1c2 0220 	rsb	r2, r2, #32
  4060b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4060b4:	fa20 f202 	lsr.w	r2, r0, r2
  4060b8:	eb43 0002 	adc.w	r0, r3, r2
  4060bc:	bf08      	it	eq
  4060be:	f020 0001 	biceq.w	r0, r0, #1
  4060c2:	4770      	bx	lr
  4060c4:	f102 0220 	add.w	r2, r2, #32
  4060c8:	fa01 fc02 	lsl.w	ip, r1, r2
  4060cc:	f1c2 0220 	rsb	r2, r2, #32
  4060d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4060d4:	fa21 f202 	lsr.w	r2, r1, r2
  4060d8:	eb43 0002 	adc.w	r0, r3, r2
  4060dc:	bf08      	it	eq
  4060de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4060e2:	4770      	bx	lr

004060e4 <__aeabi_fmul>:
  4060e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4060e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4060ec:	bf1e      	ittt	ne
  4060ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4060f2:	ea92 0f0c 	teqne	r2, ip
  4060f6:	ea93 0f0c 	teqne	r3, ip
  4060fa:	d06f      	beq.n	4061dc <__aeabi_fmul+0xf8>
  4060fc:	441a      	add	r2, r3
  4060fe:	ea80 0c01 	eor.w	ip, r0, r1
  406102:	0240      	lsls	r0, r0, #9
  406104:	bf18      	it	ne
  406106:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40610a:	d01e      	beq.n	40614a <__aeabi_fmul+0x66>
  40610c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  406110:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  406114:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  406118:	fba0 3101 	umull	r3, r1, r0, r1
  40611c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406120:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  406124:	bf3e      	ittt	cc
  406126:	0049      	lslcc	r1, r1, #1
  406128:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40612c:	005b      	lslcc	r3, r3, #1
  40612e:	ea40 0001 	orr.w	r0, r0, r1
  406132:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  406136:	2afd      	cmp	r2, #253	; 0xfd
  406138:	d81d      	bhi.n	406176 <__aeabi_fmul+0x92>
  40613a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40613e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406142:	bf08      	it	eq
  406144:	f020 0001 	biceq.w	r0, r0, #1
  406148:	4770      	bx	lr
  40614a:	f090 0f00 	teq	r0, #0
  40614e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406152:	bf08      	it	eq
  406154:	0249      	lsleq	r1, r1, #9
  406156:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40615a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  40615e:	3a7f      	subs	r2, #127	; 0x7f
  406160:	bfc2      	ittt	gt
  406162:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406166:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40616a:	4770      	bxgt	lr
  40616c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406170:	f04f 0300 	mov.w	r3, #0
  406174:	3a01      	subs	r2, #1
  406176:	dc5d      	bgt.n	406234 <__aeabi_fmul+0x150>
  406178:	f112 0f19 	cmn.w	r2, #25
  40617c:	bfdc      	itt	le
  40617e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  406182:	4770      	bxle	lr
  406184:	f1c2 0200 	rsb	r2, r2, #0
  406188:	0041      	lsls	r1, r0, #1
  40618a:	fa21 f102 	lsr.w	r1, r1, r2
  40618e:	f1c2 0220 	rsb	r2, r2, #32
  406192:	fa00 fc02 	lsl.w	ip, r0, r2
  406196:	ea5f 0031 	movs.w	r0, r1, rrx
  40619a:	f140 0000 	adc.w	r0, r0, #0
  40619e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4061a2:	bf08      	it	eq
  4061a4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4061a8:	4770      	bx	lr
  4061aa:	f092 0f00 	teq	r2, #0
  4061ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4061b2:	bf02      	ittt	eq
  4061b4:	0040      	lsleq	r0, r0, #1
  4061b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4061ba:	3a01      	subeq	r2, #1
  4061bc:	d0f9      	beq.n	4061b2 <__aeabi_fmul+0xce>
  4061be:	ea40 000c 	orr.w	r0, r0, ip
  4061c2:	f093 0f00 	teq	r3, #0
  4061c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4061ca:	bf02      	ittt	eq
  4061cc:	0049      	lsleq	r1, r1, #1
  4061ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4061d2:	3b01      	subeq	r3, #1
  4061d4:	d0f9      	beq.n	4061ca <__aeabi_fmul+0xe6>
  4061d6:	ea41 010c 	orr.w	r1, r1, ip
  4061da:	e78f      	b.n	4060fc <__aeabi_fmul+0x18>
  4061dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4061e0:	ea92 0f0c 	teq	r2, ip
  4061e4:	bf18      	it	ne
  4061e6:	ea93 0f0c 	teqne	r3, ip
  4061ea:	d00a      	beq.n	406202 <__aeabi_fmul+0x11e>
  4061ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4061f0:	bf18      	it	ne
  4061f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4061f6:	d1d8      	bne.n	4061aa <__aeabi_fmul+0xc6>
  4061f8:	ea80 0001 	eor.w	r0, r0, r1
  4061fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406200:	4770      	bx	lr
  406202:	f090 0f00 	teq	r0, #0
  406206:	bf17      	itett	ne
  406208:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40620c:	4608      	moveq	r0, r1
  40620e:	f091 0f00 	teqne	r1, #0
  406212:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  406216:	d014      	beq.n	406242 <__aeabi_fmul+0x15e>
  406218:	ea92 0f0c 	teq	r2, ip
  40621c:	d101      	bne.n	406222 <__aeabi_fmul+0x13e>
  40621e:	0242      	lsls	r2, r0, #9
  406220:	d10f      	bne.n	406242 <__aeabi_fmul+0x15e>
  406222:	ea93 0f0c 	teq	r3, ip
  406226:	d103      	bne.n	406230 <__aeabi_fmul+0x14c>
  406228:	024b      	lsls	r3, r1, #9
  40622a:	bf18      	it	ne
  40622c:	4608      	movne	r0, r1
  40622e:	d108      	bne.n	406242 <__aeabi_fmul+0x15e>
  406230:	ea80 0001 	eor.w	r0, r0, r1
  406234:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406238:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40623c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406240:	4770      	bx	lr
  406242:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406246:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40624a:	4770      	bx	lr

0040624c <__aeabi_fdiv>:
  40624c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406250:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406254:	bf1e      	ittt	ne
  406256:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40625a:	ea92 0f0c 	teqne	r2, ip
  40625e:	ea93 0f0c 	teqne	r3, ip
  406262:	d069      	beq.n	406338 <__aeabi_fdiv+0xec>
  406264:	eba2 0203 	sub.w	r2, r2, r3
  406268:	ea80 0c01 	eor.w	ip, r0, r1
  40626c:	0249      	lsls	r1, r1, #9
  40626e:	ea4f 2040 	mov.w	r0, r0, lsl #9
  406272:	d037      	beq.n	4062e4 <__aeabi_fdiv+0x98>
  406274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  406278:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  40627c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  406280:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406284:	428b      	cmp	r3, r1
  406286:	bf38      	it	cc
  406288:	005b      	lslcc	r3, r3, #1
  40628a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  40628e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  406292:	428b      	cmp	r3, r1
  406294:	bf24      	itt	cs
  406296:	1a5b      	subcs	r3, r3, r1
  406298:	ea40 000c 	orrcs.w	r0, r0, ip
  40629c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4062a0:	bf24      	itt	cs
  4062a2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4062a6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4062aa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4062ae:	bf24      	itt	cs
  4062b0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4062b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4062b8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4062bc:	bf24      	itt	cs
  4062be:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4062c2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4062c6:	011b      	lsls	r3, r3, #4
  4062c8:	bf18      	it	ne
  4062ca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4062ce:	d1e0      	bne.n	406292 <__aeabi_fdiv+0x46>
  4062d0:	2afd      	cmp	r2, #253	; 0xfd
  4062d2:	f63f af50 	bhi.w	406176 <__aeabi_fmul+0x92>
  4062d6:	428b      	cmp	r3, r1
  4062d8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4062dc:	bf08      	it	eq
  4062de:	f020 0001 	biceq.w	r0, r0, #1
  4062e2:	4770      	bx	lr
  4062e4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4062e8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4062ec:	327f      	adds	r2, #127	; 0x7f
  4062ee:	bfc2      	ittt	gt
  4062f0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4062f4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4062f8:	4770      	bxgt	lr
  4062fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4062fe:	f04f 0300 	mov.w	r3, #0
  406302:	3a01      	subs	r2, #1
  406304:	e737      	b.n	406176 <__aeabi_fmul+0x92>
  406306:	f092 0f00 	teq	r2, #0
  40630a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40630e:	bf02      	ittt	eq
  406310:	0040      	lsleq	r0, r0, #1
  406312:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  406316:	3a01      	subeq	r2, #1
  406318:	d0f9      	beq.n	40630e <__aeabi_fdiv+0xc2>
  40631a:	ea40 000c 	orr.w	r0, r0, ip
  40631e:	f093 0f00 	teq	r3, #0
  406322:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406326:	bf02      	ittt	eq
  406328:	0049      	lsleq	r1, r1, #1
  40632a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40632e:	3b01      	subeq	r3, #1
  406330:	d0f9      	beq.n	406326 <__aeabi_fdiv+0xda>
  406332:	ea41 010c 	orr.w	r1, r1, ip
  406336:	e795      	b.n	406264 <__aeabi_fdiv+0x18>
  406338:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40633c:	ea92 0f0c 	teq	r2, ip
  406340:	d108      	bne.n	406354 <__aeabi_fdiv+0x108>
  406342:	0242      	lsls	r2, r0, #9
  406344:	f47f af7d 	bne.w	406242 <__aeabi_fmul+0x15e>
  406348:	ea93 0f0c 	teq	r3, ip
  40634c:	f47f af70 	bne.w	406230 <__aeabi_fmul+0x14c>
  406350:	4608      	mov	r0, r1
  406352:	e776      	b.n	406242 <__aeabi_fmul+0x15e>
  406354:	ea93 0f0c 	teq	r3, ip
  406358:	d104      	bne.n	406364 <__aeabi_fdiv+0x118>
  40635a:	024b      	lsls	r3, r1, #9
  40635c:	f43f af4c 	beq.w	4061f8 <__aeabi_fmul+0x114>
  406360:	4608      	mov	r0, r1
  406362:	e76e      	b.n	406242 <__aeabi_fmul+0x15e>
  406364:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406368:	bf18      	it	ne
  40636a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40636e:	d1ca      	bne.n	406306 <__aeabi_fdiv+0xba>
  406370:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  406374:	f47f af5c 	bne.w	406230 <__aeabi_fmul+0x14c>
  406378:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40637c:	f47f af3c 	bne.w	4061f8 <__aeabi_fmul+0x114>
  406380:	e75f      	b.n	406242 <__aeabi_fmul+0x15e>
  406382:	bf00      	nop

00406384 <__gesf2>:
  406384:	f04f 3cff 	mov.w	ip, #4294967295
  406388:	e006      	b.n	406398 <__cmpsf2+0x4>
  40638a:	bf00      	nop

0040638c <__lesf2>:
  40638c:	f04f 0c01 	mov.w	ip, #1
  406390:	e002      	b.n	406398 <__cmpsf2+0x4>
  406392:	bf00      	nop

00406394 <__cmpsf2>:
  406394:	f04f 0c01 	mov.w	ip, #1
  406398:	f84d cd04 	str.w	ip, [sp, #-4]!
  40639c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  4063a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4063a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4063a8:	bf18      	it	ne
  4063aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4063ae:	d011      	beq.n	4063d4 <__cmpsf2+0x40>
  4063b0:	b001      	add	sp, #4
  4063b2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4063b6:	bf18      	it	ne
  4063b8:	ea90 0f01 	teqne	r0, r1
  4063bc:	bf58      	it	pl
  4063be:	ebb2 0003 	subspl.w	r0, r2, r3
  4063c2:	bf88      	it	hi
  4063c4:	17c8      	asrhi	r0, r1, #31
  4063c6:	bf38      	it	cc
  4063c8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  4063cc:	bf18      	it	ne
  4063ce:	f040 0001 	orrne.w	r0, r0, #1
  4063d2:	4770      	bx	lr
  4063d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4063d8:	d102      	bne.n	4063e0 <__cmpsf2+0x4c>
  4063da:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4063de:	d105      	bne.n	4063ec <__cmpsf2+0x58>
  4063e0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4063e4:	d1e4      	bne.n	4063b0 <__cmpsf2+0x1c>
  4063e6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  4063ea:	d0e1      	beq.n	4063b0 <__cmpsf2+0x1c>
  4063ec:	f85d 0b04 	ldr.w	r0, [sp], #4
  4063f0:	4770      	bx	lr
  4063f2:	bf00      	nop

004063f4 <__aeabi_cfrcmple>:
  4063f4:	4684      	mov	ip, r0
  4063f6:	4608      	mov	r0, r1
  4063f8:	4661      	mov	r1, ip
  4063fa:	e7ff      	b.n	4063fc <__aeabi_cfcmpeq>

004063fc <__aeabi_cfcmpeq>:
  4063fc:	b50f      	push	{r0, r1, r2, r3, lr}
  4063fe:	f7ff ffc9 	bl	406394 <__cmpsf2>
  406402:	2800      	cmp	r0, #0
  406404:	bf48      	it	mi
  406406:	f110 0f00 	cmnmi.w	r0, #0
  40640a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0040640c <__aeabi_fcmpeq>:
  40640c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406410:	f7ff fff4 	bl	4063fc <__aeabi_cfcmpeq>
  406414:	bf0c      	ite	eq
  406416:	2001      	moveq	r0, #1
  406418:	2000      	movne	r0, #0
  40641a:	f85d fb08 	ldr.w	pc, [sp], #8
  40641e:	bf00      	nop

00406420 <__aeabi_fcmplt>:
  406420:	f84d ed08 	str.w	lr, [sp, #-8]!
  406424:	f7ff ffea 	bl	4063fc <__aeabi_cfcmpeq>
  406428:	bf34      	ite	cc
  40642a:	2001      	movcc	r0, #1
  40642c:	2000      	movcs	r0, #0
  40642e:	f85d fb08 	ldr.w	pc, [sp], #8
  406432:	bf00      	nop

00406434 <__aeabi_fcmple>:
  406434:	f84d ed08 	str.w	lr, [sp, #-8]!
  406438:	f7ff ffe0 	bl	4063fc <__aeabi_cfcmpeq>
  40643c:	bf94      	ite	ls
  40643e:	2001      	movls	r0, #1
  406440:	2000      	movhi	r0, #0
  406442:	f85d fb08 	ldr.w	pc, [sp], #8
  406446:	bf00      	nop

00406448 <__aeabi_fcmpge>:
  406448:	f84d ed08 	str.w	lr, [sp, #-8]!
  40644c:	f7ff ffd2 	bl	4063f4 <__aeabi_cfrcmple>
  406450:	bf94      	ite	ls
  406452:	2001      	movls	r0, #1
  406454:	2000      	movhi	r0, #0
  406456:	f85d fb08 	ldr.w	pc, [sp], #8
  40645a:	bf00      	nop

0040645c <__aeabi_fcmpgt>:
  40645c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406460:	f7ff ffc8 	bl	4063f4 <__aeabi_cfrcmple>
  406464:	bf34      	ite	cc
  406466:	2001      	movcc	r0, #1
  406468:	2000      	movcs	r0, #0
  40646a:	f85d fb08 	ldr.w	pc, [sp], #8
  40646e:	bf00      	nop

00406470 <__aeabi_f2uiz>:
  406470:	0042      	lsls	r2, r0, #1
  406472:	d20e      	bcs.n	406492 <__aeabi_f2uiz+0x22>
  406474:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  406478:	d30b      	bcc.n	406492 <__aeabi_f2uiz+0x22>
  40647a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40647e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  406482:	d409      	bmi.n	406498 <__aeabi_f2uiz+0x28>
  406484:	ea4f 2300 	mov.w	r3, r0, lsl #8
  406488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40648c:	fa23 f002 	lsr.w	r0, r3, r2
  406490:	4770      	bx	lr
  406492:	f04f 0000 	mov.w	r0, #0
  406496:	4770      	bx	lr
  406498:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40649c:	d101      	bne.n	4064a2 <__aeabi_f2uiz+0x32>
  40649e:	0242      	lsls	r2, r0, #9
  4064a0:	d102      	bne.n	4064a8 <__aeabi_f2uiz+0x38>
  4064a2:	f04f 30ff 	mov.w	r0, #4294967295
  4064a6:	4770      	bx	lr
  4064a8:	f04f 0000 	mov.w	r0, #0
  4064ac:	4770      	bx	lr
  4064ae:	bf00      	nop

004064b0 <__libc_init_array>:
  4064b0:	b570      	push	{r4, r5, r6, lr}
  4064b2:	4e0f      	ldr	r6, [pc, #60]	; (4064f0 <__libc_init_array+0x40>)
  4064b4:	4d0f      	ldr	r5, [pc, #60]	; (4064f4 <__libc_init_array+0x44>)
  4064b6:	1b76      	subs	r6, r6, r5
  4064b8:	10b6      	asrs	r6, r6, #2
  4064ba:	bf18      	it	ne
  4064bc:	2400      	movne	r4, #0
  4064be:	d005      	beq.n	4064cc <__libc_init_array+0x1c>
  4064c0:	3401      	adds	r4, #1
  4064c2:	f855 3b04 	ldr.w	r3, [r5], #4
  4064c6:	4798      	blx	r3
  4064c8:	42a6      	cmp	r6, r4
  4064ca:	d1f9      	bne.n	4064c0 <__libc_init_array+0x10>
  4064cc:	4e0a      	ldr	r6, [pc, #40]	; (4064f8 <__libc_init_array+0x48>)
  4064ce:	4d0b      	ldr	r5, [pc, #44]	; (4064fc <__libc_init_array+0x4c>)
  4064d0:	1b76      	subs	r6, r6, r5
  4064d2:	f001 f9ef 	bl	4078b4 <_init>
  4064d6:	10b6      	asrs	r6, r6, #2
  4064d8:	bf18      	it	ne
  4064da:	2400      	movne	r4, #0
  4064dc:	d006      	beq.n	4064ec <__libc_init_array+0x3c>
  4064de:	3401      	adds	r4, #1
  4064e0:	f855 3b04 	ldr.w	r3, [r5], #4
  4064e4:	4798      	blx	r3
  4064e6:	42a6      	cmp	r6, r4
  4064e8:	d1f9      	bne.n	4064de <__libc_init_array+0x2e>
  4064ea:	bd70      	pop	{r4, r5, r6, pc}
  4064ec:	bd70      	pop	{r4, r5, r6, pc}
  4064ee:	bf00      	nop
  4064f0:	004078c0 	.word	0x004078c0
  4064f4:	004078c0 	.word	0x004078c0
  4064f8:	004078c8 	.word	0x004078c8
  4064fc:	004078c0 	.word	0x004078c0

00406500 <memcmp>:
  406500:	2a03      	cmp	r2, #3
  406502:	b470      	push	{r4, r5, r6}
  406504:	d922      	bls.n	40654c <memcmp+0x4c>
  406506:	ea40 0301 	orr.w	r3, r0, r1
  40650a:	079b      	lsls	r3, r3, #30
  40650c:	d011      	beq.n	406532 <memcmp+0x32>
  40650e:	7803      	ldrb	r3, [r0, #0]
  406510:	780c      	ldrb	r4, [r1, #0]
  406512:	42a3      	cmp	r3, r4
  406514:	d11d      	bne.n	406552 <memcmp+0x52>
  406516:	440a      	add	r2, r1
  406518:	3101      	adds	r1, #1
  40651a:	e005      	b.n	406528 <memcmp+0x28>
  40651c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406520:	f811 4b01 	ldrb.w	r4, [r1], #1
  406524:	42a3      	cmp	r3, r4
  406526:	d114      	bne.n	406552 <memcmp+0x52>
  406528:	4291      	cmp	r1, r2
  40652a:	d1f7      	bne.n	40651c <memcmp+0x1c>
  40652c:	2000      	movs	r0, #0
  40652e:	bc70      	pop	{r4, r5, r6}
  406530:	4770      	bx	lr
  406532:	680d      	ldr	r5, [r1, #0]
  406534:	6806      	ldr	r6, [r0, #0]
  406536:	42ae      	cmp	r6, r5
  406538:	460c      	mov	r4, r1
  40653a:	4603      	mov	r3, r0
  40653c:	f101 0104 	add.w	r1, r1, #4
  406540:	f100 0004 	add.w	r0, r0, #4
  406544:	d108      	bne.n	406558 <memcmp+0x58>
  406546:	3a04      	subs	r2, #4
  406548:	2a03      	cmp	r2, #3
  40654a:	d8f2      	bhi.n	406532 <memcmp+0x32>
  40654c:	2a00      	cmp	r2, #0
  40654e:	d1de      	bne.n	40650e <memcmp+0xe>
  406550:	e7ec      	b.n	40652c <memcmp+0x2c>
  406552:	1b18      	subs	r0, r3, r4
  406554:	bc70      	pop	{r4, r5, r6}
  406556:	4770      	bx	lr
  406558:	4621      	mov	r1, r4
  40655a:	4618      	mov	r0, r3
  40655c:	e7d7      	b.n	40650e <memcmp+0xe>
  40655e:	bf00      	nop

00406560 <memcpy>:
  406560:	4684      	mov	ip, r0
  406562:	ea41 0300 	orr.w	r3, r1, r0
  406566:	f013 0303 	ands.w	r3, r3, #3
  40656a:	d16d      	bne.n	406648 <memcpy+0xe8>
  40656c:	3a40      	subs	r2, #64	; 0x40
  40656e:	d341      	bcc.n	4065f4 <memcpy+0x94>
  406570:	f851 3b04 	ldr.w	r3, [r1], #4
  406574:	f840 3b04 	str.w	r3, [r0], #4
  406578:	f851 3b04 	ldr.w	r3, [r1], #4
  40657c:	f840 3b04 	str.w	r3, [r0], #4
  406580:	f851 3b04 	ldr.w	r3, [r1], #4
  406584:	f840 3b04 	str.w	r3, [r0], #4
  406588:	f851 3b04 	ldr.w	r3, [r1], #4
  40658c:	f840 3b04 	str.w	r3, [r0], #4
  406590:	f851 3b04 	ldr.w	r3, [r1], #4
  406594:	f840 3b04 	str.w	r3, [r0], #4
  406598:	f851 3b04 	ldr.w	r3, [r1], #4
  40659c:	f840 3b04 	str.w	r3, [r0], #4
  4065a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4065a4:	f840 3b04 	str.w	r3, [r0], #4
  4065a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4065ac:	f840 3b04 	str.w	r3, [r0], #4
  4065b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4065b4:	f840 3b04 	str.w	r3, [r0], #4
  4065b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4065bc:	f840 3b04 	str.w	r3, [r0], #4
  4065c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4065c4:	f840 3b04 	str.w	r3, [r0], #4
  4065c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4065cc:	f840 3b04 	str.w	r3, [r0], #4
  4065d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4065d4:	f840 3b04 	str.w	r3, [r0], #4
  4065d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4065dc:	f840 3b04 	str.w	r3, [r0], #4
  4065e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4065e4:	f840 3b04 	str.w	r3, [r0], #4
  4065e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4065ec:	f840 3b04 	str.w	r3, [r0], #4
  4065f0:	3a40      	subs	r2, #64	; 0x40
  4065f2:	d2bd      	bcs.n	406570 <memcpy+0x10>
  4065f4:	3230      	adds	r2, #48	; 0x30
  4065f6:	d311      	bcc.n	40661c <memcpy+0xbc>
  4065f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4065fc:	f840 3b04 	str.w	r3, [r0], #4
  406600:	f851 3b04 	ldr.w	r3, [r1], #4
  406604:	f840 3b04 	str.w	r3, [r0], #4
  406608:	f851 3b04 	ldr.w	r3, [r1], #4
  40660c:	f840 3b04 	str.w	r3, [r0], #4
  406610:	f851 3b04 	ldr.w	r3, [r1], #4
  406614:	f840 3b04 	str.w	r3, [r0], #4
  406618:	3a10      	subs	r2, #16
  40661a:	d2ed      	bcs.n	4065f8 <memcpy+0x98>
  40661c:	320c      	adds	r2, #12
  40661e:	d305      	bcc.n	40662c <memcpy+0xcc>
  406620:	f851 3b04 	ldr.w	r3, [r1], #4
  406624:	f840 3b04 	str.w	r3, [r0], #4
  406628:	3a04      	subs	r2, #4
  40662a:	d2f9      	bcs.n	406620 <memcpy+0xc0>
  40662c:	3204      	adds	r2, #4
  40662e:	d008      	beq.n	406642 <memcpy+0xe2>
  406630:	07d2      	lsls	r2, r2, #31
  406632:	bf1c      	itt	ne
  406634:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406638:	f800 3b01 	strbne.w	r3, [r0], #1
  40663c:	d301      	bcc.n	406642 <memcpy+0xe2>
  40663e:	880b      	ldrh	r3, [r1, #0]
  406640:	8003      	strh	r3, [r0, #0]
  406642:	4660      	mov	r0, ip
  406644:	4770      	bx	lr
  406646:	bf00      	nop
  406648:	2a08      	cmp	r2, #8
  40664a:	d313      	bcc.n	406674 <memcpy+0x114>
  40664c:	078b      	lsls	r3, r1, #30
  40664e:	d08d      	beq.n	40656c <memcpy+0xc>
  406650:	f010 0303 	ands.w	r3, r0, #3
  406654:	d08a      	beq.n	40656c <memcpy+0xc>
  406656:	f1c3 0304 	rsb	r3, r3, #4
  40665a:	1ad2      	subs	r2, r2, r3
  40665c:	07db      	lsls	r3, r3, #31
  40665e:	bf1c      	itt	ne
  406660:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406664:	f800 3b01 	strbne.w	r3, [r0], #1
  406668:	d380      	bcc.n	40656c <memcpy+0xc>
  40666a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40666e:	f820 3b02 	strh.w	r3, [r0], #2
  406672:	e77b      	b.n	40656c <memcpy+0xc>
  406674:	3a04      	subs	r2, #4
  406676:	d3d9      	bcc.n	40662c <memcpy+0xcc>
  406678:	3a01      	subs	r2, #1
  40667a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40667e:	f800 3b01 	strb.w	r3, [r0], #1
  406682:	d2f9      	bcs.n	406678 <memcpy+0x118>
  406684:	780b      	ldrb	r3, [r1, #0]
  406686:	7003      	strb	r3, [r0, #0]
  406688:	784b      	ldrb	r3, [r1, #1]
  40668a:	7043      	strb	r3, [r0, #1]
  40668c:	788b      	ldrb	r3, [r1, #2]
  40668e:	7083      	strb	r3, [r0, #2]
  406690:	4660      	mov	r0, ip
  406692:	4770      	bx	lr

00406694 <memset>:
  406694:	b470      	push	{r4, r5, r6}
  406696:	0786      	lsls	r6, r0, #30
  406698:	d046      	beq.n	406728 <memset+0x94>
  40669a:	1e54      	subs	r4, r2, #1
  40669c:	2a00      	cmp	r2, #0
  40669e:	d041      	beq.n	406724 <memset+0x90>
  4066a0:	b2ca      	uxtb	r2, r1
  4066a2:	4603      	mov	r3, r0
  4066a4:	e002      	b.n	4066ac <memset+0x18>
  4066a6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4066aa:	d33b      	bcc.n	406724 <memset+0x90>
  4066ac:	f803 2b01 	strb.w	r2, [r3], #1
  4066b0:	079d      	lsls	r5, r3, #30
  4066b2:	d1f8      	bne.n	4066a6 <memset+0x12>
  4066b4:	2c03      	cmp	r4, #3
  4066b6:	d92e      	bls.n	406716 <memset+0x82>
  4066b8:	b2cd      	uxtb	r5, r1
  4066ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4066be:	2c0f      	cmp	r4, #15
  4066c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4066c4:	d919      	bls.n	4066fa <memset+0x66>
  4066c6:	f103 0210 	add.w	r2, r3, #16
  4066ca:	4626      	mov	r6, r4
  4066cc:	3e10      	subs	r6, #16
  4066ce:	2e0f      	cmp	r6, #15
  4066d0:	f842 5c10 	str.w	r5, [r2, #-16]
  4066d4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4066d8:	f842 5c08 	str.w	r5, [r2, #-8]
  4066dc:	f842 5c04 	str.w	r5, [r2, #-4]
  4066e0:	f102 0210 	add.w	r2, r2, #16
  4066e4:	d8f2      	bhi.n	4066cc <memset+0x38>
  4066e6:	f1a4 0210 	sub.w	r2, r4, #16
  4066ea:	f022 020f 	bic.w	r2, r2, #15
  4066ee:	f004 040f 	and.w	r4, r4, #15
  4066f2:	3210      	adds	r2, #16
  4066f4:	2c03      	cmp	r4, #3
  4066f6:	4413      	add	r3, r2
  4066f8:	d90d      	bls.n	406716 <memset+0x82>
  4066fa:	461e      	mov	r6, r3
  4066fc:	4622      	mov	r2, r4
  4066fe:	3a04      	subs	r2, #4
  406700:	2a03      	cmp	r2, #3
  406702:	f846 5b04 	str.w	r5, [r6], #4
  406706:	d8fa      	bhi.n	4066fe <memset+0x6a>
  406708:	1f22      	subs	r2, r4, #4
  40670a:	f022 0203 	bic.w	r2, r2, #3
  40670e:	3204      	adds	r2, #4
  406710:	4413      	add	r3, r2
  406712:	f004 0403 	and.w	r4, r4, #3
  406716:	b12c      	cbz	r4, 406724 <memset+0x90>
  406718:	b2c9      	uxtb	r1, r1
  40671a:	441c      	add	r4, r3
  40671c:	f803 1b01 	strb.w	r1, [r3], #1
  406720:	429c      	cmp	r4, r3
  406722:	d1fb      	bne.n	40671c <memset+0x88>
  406724:	bc70      	pop	{r4, r5, r6}
  406726:	4770      	bx	lr
  406728:	4614      	mov	r4, r2
  40672a:	4603      	mov	r3, r0
  40672c:	e7c2      	b.n	4066b4 <memset+0x20>
  40672e:	bf00      	nop

00406730 <register_fini>:
  406730:	4b02      	ldr	r3, [pc, #8]	; (40673c <register_fini+0xc>)
  406732:	b113      	cbz	r3, 40673a <register_fini+0xa>
  406734:	4802      	ldr	r0, [pc, #8]	; (406740 <register_fini+0x10>)
  406736:	f000 b805 	b.w	406744 <atexit>
  40673a:	4770      	bx	lr
  40673c:	00000000 	.word	0x00000000
  406740:	00406751 	.word	0x00406751

00406744 <atexit>:
  406744:	2300      	movs	r3, #0
  406746:	4601      	mov	r1, r0
  406748:	461a      	mov	r2, r3
  40674a:	4618      	mov	r0, r3
  40674c:	f000 b81a 	b.w	406784 <__register_exitproc>

00406750 <__libc_fini_array>:
  406750:	b538      	push	{r3, r4, r5, lr}
  406752:	4c0a      	ldr	r4, [pc, #40]	; (40677c <__libc_fini_array+0x2c>)
  406754:	4d0a      	ldr	r5, [pc, #40]	; (406780 <__libc_fini_array+0x30>)
  406756:	1b64      	subs	r4, r4, r5
  406758:	10a4      	asrs	r4, r4, #2
  40675a:	d00a      	beq.n	406772 <__libc_fini_array+0x22>
  40675c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406760:	3b01      	subs	r3, #1
  406762:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406766:	3c01      	subs	r4, #1
  406768:	f855 3904 	ldr.w	r3, [r5], #-4
  40676c:	4798      	blx	r3
  40676e:	2c00      	cmp	r4, #0
  406770:	d1f9      	bne.n	406766 <__libc_fini_array+0x16>
  406772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406776:	f001 b8a7 	b.w	4078c8 <_fini>
  40677a:	bf00      	nop
  40677c:	004078d8 	.word	0x004078d8
  406780:	004078d4 	.word	0x004078d4

00406784 <__register_exitproc>:
  406784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406788:	4c25      	ldr	r4, [pc, #148]	; (406820 <__register_exitproc+0x9c>)
  40678a:	6825      	ldr	r5, [r4, #0]
  40678c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406790:	4606      	mov	r6, r0
  406792:	4688      	mov	r8, r1
  406794:	4692      	mov	sl, r2
  406796:	4699      	mov	r9, r3
  406798:	b3c4      	cbz	r4, 40680c <__register_exitproc+0x88>
  40679a:	6860      	ldr	r0, [r4, #4]
  40679c:	281f      	cmp	r0, #31
  40679e:	dc17      	bgt.n	4067d0 <__register_exitproc+0x4c>
  4067a0:	1c43      	adds	r3, r0, #1
  4067a2:	b176      	cbz	r6, 4067c2 <__register_exitproc+0x3e>
  4067a4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4067a8:	2201      	movs	r2, #1
  4067aa:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4067ae:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4067b2:	4082      	lsls	r2, r0
  4067b4:	4311      	orrs	r1, r2
  4067b6:	2e02      	cmp	r6, #2
  4067b8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4067bc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4067c0:	d01e      	beq.n	406800 <__register_exitproc+0x7c>
  4067c2:	3002      	adds	r0, #2
  4067c4:	6063      	str	r3, [r4, #4]
  4067c6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4067ca:	2000      	movs	r0, #0
  4067cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067d0:	4b14      	ldr	r3, [pc, #80]	; (406824 <__register_exitproc+0xa0>)
  4067d2:	b303      	cbz	r3, 406816 <__register_exitproc+0x92>
  4067d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4067d8:	f3af 8000 	nop.w
  4067dc:	4604      	mov	r4, r0
  4067de:	b1d0      	cbz	r0, 406816 <__register_exitproc+0x92>
  4067e0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4067e4:	2700      	movs	r7, #0
  4067e6:	e880 0088 	stmia.w	r0, {r3, r7}
  4067ea:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4067ee:	4638      	mov	r0, r7
  4067f0:	2301      	movs	r3, #1
  4067f2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4067f6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4067fa:	2e00      	cmp	r6, #0
  4067fc:	d0e1      	beq.n	4067c2 <__register_exitproc+0x3e>
  4067fe:	e7d1      	b.n	4067a4 <__register_exitproc+0x20>
  406800:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406804:	430a      	orrs	r2, r1
  406806:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40680a:	e7da      	b.n	4067c2 <__register_exitproc+0x3e>
  40680c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406810:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406814:	e7c1      	b.n	40679a <__register_exitproc+0x16>
  406816:	f04f 30ff 	mov.w	r0, #4294967295
  40681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40681e:	bf00      	nop
  406820:	004078b0 	.word	0x004078b0
  406824:	00000000 	.word	0x00000000

00406828 <reg>:
  406828:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
  406838:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
  406848:	2a292827 67646334 00000049              '()*4cdgI...

00406854 <hw>:
  406854:	04000068 01410080 01000000 00001333     h.....A.....3...

00406864 <test>:
  406864:	00000083 00004000 00000200 00c800c8     .....@..........
  406874:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
  406884:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....

00406894 <mpu_6500_st_tb>:
  406894:	0a560a3c 0a8b0a70 0ac10aa6 0af80add     <.V.p...........
  4068a4:	0b310b15 0b6b0b4e 0ba50b88 0be10bc3     ..1.N.k.........
  4068b4:	0c1e0c00 0c5d0c3d 0c9c0c7c 0cdd0cbd     ....=.].|.......
  4068c4:	0d1f0cfe 0d630d41 0da80d85 0dee0dcb     ....A.c.........
  4068d4:	0e360e12 0e7f0e5a 0eca0ea4 0f160eef     ..6.Z...........
  4068e4:	0f630f3c 0fb30f8b 10030fdb 1056102c     <.c.........,.V.
  4068f4:	10aa1080 110010d4 1157112b 11b01183     ........+.W.....
  406904:	120b11de 12681239 12c71297 132712f7     ....9.h.......'.
  406914:	138a1359 13ef13bc 14551422 14be1489     Y.......".U.....
  406924:	152914f3 1595155f 160415cd 1676163d     ..)._.......=.v.
  406934:	16e916af 175f1724 17d8179b 18521815     ....$._.......R.
  406944:	18cf1891 194f190f 19d11990 1a561a13     ......O.......V.
  406954:	1ade1a9a 1b681b22 1bf51bae 1c851c3d     ....".h.....=...
  406964:	1d181cce 1dad1d62 1e461df9 1ee21e94     ....b.....F.....
  406974:	1f811f31 20231fd1 20c82075 2171211c     1.....# u . .!q!
  406984:	221d21c7 22cd2274 23802326 243623da     .!."t"."&#.#.#6$
  406994:	24f12493 25af254f 2671260f 273626d3     .$.$O%.%.&q&.&6'
  4069a4:	2800279b 28ce2867 29a02936 2a762a0b     .'.(g(.(6).).*v*
  4069b4:	2b512ae3 2c302bc0 2d132ca1 2dfb2d86     .*Q+.+0,.,.-.-.-
  4069c4:	2ee82e71 2fd92f60 30cf3053 31ca314c     q...`/./S0.0L1.1
  4069d4:	32ca324a 33d0334c 34da3454 35ea3562     J2.2L3.3T4.4b5.5
  4069e4:	37003674 381b378d 393c38aa 3a6239ce     t6.7.7.8.8<9.9b:
  4069f4:	3b8f3af8 3cc13c27 3dfa3d5d 3f383e98     .:.;'<.<]=.=.>8?
  406a04:	407e3fda 41ca4123 431c4272 447643c8     .?~@#A.ArB.C.CvD
  406a14:	45d64525 473d4689 48ac47f4 4a224966     %E.E.F=G.G.HfI"J
  406a24:	4b9f4adf 4d244c61 4eb14dea 50464f7b     .J.KaL$M.M.N{OFP
  406a34:	51e35114 538952b5 5536545e 56ed5611     .Q.Q.R.S^T6U.V.V
  406a44:	58ac57cb 5a74598f 5c465b5c 5e215d32     .W.X.YtZ\[F\2]!^
  406a54:	60055f12 61f360fb 63eb62ee 65ed64eb     ._.`.`.a.b.c.d.e
  406a64:	67fa66f2 6a116904 6c336b20 6e5f6d48     .f.g.i.j k3lHm_n
  406a74:	70976f7a 72db71b8 752a7401 77857656     zo.p.q.r.t*uVv.w
  406a84:	79ec78b7 7c5f7b24 7edf7d9d 816c8024     .x.y${_|.}.~$.l.

00406a94 <dmp_memory>:
  406a94:	00700000 24000000 02000000 00000300     ..p....$........
  406aa4:	54006500 0000efff 0b0080fa 01008212     .e.T............
  406ab4:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
  406ac4:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
  406ad4:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
  406ae4:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
  406af4:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
  406b04:	00000020 00000000 00000040 00000060      .......@...`...
  406b14:	00000c00 6e180c00 92060000 dfc0160a     .......n........
  406b24:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
  406b34:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
  406b44:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
  406b54:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
  406b64:	00000000 b5421900 a2390000 65b30000     ......B...9....e
  406b74:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
  406b84:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
  406b94:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
  406ba4:	00000100 00003200 000046ff 0000d463     .....2...F..c...
  406bb4:	00000010 0000d604 0000cc04 0000cc04     ................
  406bc4:	72100000 40000000 00000000 00000000     ...r...@........
  406bd4:	02000600 07000500 00000000 00006400     .............d..
  406be4:	00000000 05000000 64000500 00002000     ...........d. ..
	...
  406bfc:	00400000 00030000 32000000 000098f8     ..@........2....
  406c0c:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
  406c40:	00100000 00000040 06000000 6ab20000     ....@..........j
  406c50:	00000200 83fb0100 00006800 00fcd900     .........h......
  406c60:	83fff17c 00000000 00006500 e8036400     |........e...d..
  406c70:	28006400 25000000 00000000 0000a016     .d.(...%........
  406c80:	00100000 00100000 00002f00 f4010000     ........./......
  406c90:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
  406ca8:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
  406cb8:	00000000 00060000 14000000 4d250000     ..............%M
  406cc8:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
  406ce4:	00001b00 00000000 00000000 00000000     ................
  406cf4:	00006400 00000800 00000000 00000000     .d..............
	...
  406d54:	00001b00 00000000 00000000 0e000e00     ................
  406d64:	c70a0000 00000400 32000000 9cffffff     ...........2....
  406d74:	2b0b0000 02000000 01000000 64000000     ...+...........d
  406d84:	0000e5ff 00000000 00000000 00000000     ................
  406d94:	01000000 00000000 00000100 00000000     ................
  406da4:	00800100 00800100 00800100 d3262400     .............$&.
	...
  406dbc:	10000600 3c009600 00000000 00000000     .......<........
	...
  406dd4:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
  406dfc:	0084d717 00000003 00000000 00000000     ................
  406e0c:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
  406e2c:	85180302 00400000 03000000 03000000     ......@.........
	...
  406e44:	00000040 00000000 00000000 00000000     @...............
	...
  406e78:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
  406e94:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
  406ea4:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
  406eb4:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
  406ec4:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
  406ed4:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
  406ee4:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
  406ef4:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
  406f04:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
  406f14:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
  406f24:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
  406f34:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
  406f44:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
  406f54:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
  406f64:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
  406f74:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
  406f84:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
  406f94:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
  406fa4:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
  406fb4:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
  406fc4:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
  406fd4:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
  406fe4:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
  406ff4:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
  407004:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
  407014:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
  407024:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
  407034:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
  407044:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
  407054:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
  407064:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
  407074:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
  407084:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
  407094:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
  4070a4:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
  4070b4:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
  4070c4:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
  4070d4:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
  4070e4:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
  4070f4:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
  407104:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
  407114:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
  407124:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
  407134:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
  407144:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
  407154:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
  407164:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
  407174:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
  407184:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
  407194:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
  4071a4:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
  4071b4:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
  4071c4:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
  4071d4:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
  4071e4:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
  4071f4:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
  407204:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
  407214:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
  407224:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
  407234:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
  407244:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
  407254:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
  407264:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
  407274:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
  407284:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
  407294:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
  4072a4:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
  4072b4:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
  4072c4:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
  4072d4:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
  4072e4:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
  4072f4:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
  407304:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
  407314:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
  407324:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
  407334:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
  407344:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
  407354:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
  407364:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
  407374:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
  407384:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
  407394:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
  4073a4:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
  4073b4:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
  4073c4:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
  4073d4:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
  4073e4:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
  4073f4:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
  407404:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
  407414:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
  407424:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
  407434:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
  407444:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
  407454:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
  407464:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
  407474:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
  407484:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
  407494:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
  4074a4:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
  4074b4:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
  4074c4:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
  4074d4:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
  4074e4:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
  4074f4:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
  407504:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
  407514:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
  407524:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
  407534:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
  407544:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
  407554:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
  407564:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
  407574:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
  407584:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
  407594:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
  4075a4:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
  4075b4:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
  4075c4:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
  4075d4:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
  4075e4:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
  4075f4:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
  407604:	a890d8ff a899890d 21988010 89d82eda     ...........!....
  407614:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
  407624:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
  407634:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
  407644:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
  407654:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
  407664:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
  407674:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
  407684:	d800d9a6 0400fff1                                ......

0040768a <sStartAddress>:
  40768a:	cd4c0400 c90c006c 5636002c 46260076     ..L.l...,.6Vv.&F
  40769a:	f2fe0066 f1aac4ab afbbdfdf aab8dfdf     f...............
  4076aa:	98b48db3 005d350d aab80000 88b0aaaa     .....5].........
  4076ba:	00c7c5c3 b1d80000 a38bf3b9 b409b691     ................
  4076ca:	b1da00d9 a38bf3b9 b4dab691 21fb00da              ..............

004076d8 <npio2_hw>:
  4076d8:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  4076e8:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  4076f8:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  407708:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  407718:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  407728:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  407738:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  407748:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00407758 <two_over_pi>:
  407758:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  407768:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  407778:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  407788:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  407798:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  4077a8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  4077b8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  4077c8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  4077d8:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  4077e8:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  4077f8:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  407808:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  407818:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  407828:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  407838:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  407848:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  407858:	0060e27b 00c08c6b                       {.`.k...

00407860 <PIo2>:
  407860:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  407870:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  407880:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  407890:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

004078a0 <init_jk>:
  4078a0:	00000002 00000003 00000004 00000006     ................

004078b0 <_global_impure_ptr>:
  4078b0:	20000048                                H.. 

004078b4 <_init>:
  4078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4078b6:	bf00      	nop
  4078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4078ba:	bc08      	pop	{r3}
  4078bc:	469e      	mov	lr, r3
  4078be:	4770      	bx	lr

004078c0 <__init_array_start>:
  4078c0:	00406731 	.word	0x00406731

004078c4 <__frame_dummy_init_array_entry>:
  4078c4:	004000e5                                ..@.

004078c8 <_fini>:
  4078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4078ca:	bf00      	nop
  4078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4078ce:	bc08      	pop	{r3}
  4078d0:	469e      	mov	lr, r3
  4078d2:	4770      	bx	lr

004078d4 <__fini_array_start>:
  4078d4:	004000c1 	.word	0x004000c1
